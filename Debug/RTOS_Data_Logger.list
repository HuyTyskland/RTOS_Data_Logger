
RTOS_Data_Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009820  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005dc  080099b0  080099b0  000199b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f8c  08009f8c  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  08009f8c  08009f8c  00019f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f94  08009f94  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f94  08009f94  00019f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f98  08009f98  00019f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08009f9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020200  2**0
                  CONTENTS
 10 .bss          000000d0  20000200  20000200  00020200  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002d0  200002d0  00020200  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e195  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e33  00000000  00000000  0002e3c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b70  00000000  00000000  000301f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ad0  00000000  00000000  00030d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021fff  00000000  00000000  00031838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000efdd  00000000  00000000  00053837  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c87f9  00000000  00000000  00062814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012b00d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000418c  00000000  00000000  0012b060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009998 	.word	0x08009998

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	08009998 	.word	0x08009998

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <bme68x_init>:
/* @brief This API reads the chip-id of the sensor which is the first step to
* verify the sensor and also calibrates the sensor
* As this API is the entry point, call this API before using other APIs.
*/
int8_t bme68x_init(struct bme68x_dev *dev)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b092      	sub	sp, #72	; 0x48
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
		char msg[50];
    int8_t rslt;

    (void) bme68x_soft_reset(dev);
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f000 f951 	bl	800115c <bme68x_soft_reset>

    rslt = bme68x_get_regs(BME68X_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8000eba:	6879      	ldr	r1, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	20d0      	movs	r0, #208	; 0xd0
 8000ec2:	f000 f907 	bl	80010d4 <bme68x_get_regs>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    int len = snprintf(msg, 50, "1.rslt: %u\n", rslt);
 8000ecc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8000ed0:	f107 000c 	add.w	r0, r7, #12
 8000ed4:	4a32      	ldr	r2, [pc, #200]	; (8000fa0 <bme68x_init+0xf4>)
 8000ed6:	2132      	movs	r1, #50	; 0x32
 8000ed8:	f006 fad0 	bl	800747c <sniprintf>
 8000edc:	6438      	str	r0, [r7, #64]	; 0x40
    HAL_UART_Transmit(&huart2, (uint8_t *)msg, len, HAL_MAX_DELAY);
 8000ede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	f107 010c 	add.w	r1, r7, #12
 8000ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eea:	482e      	ldr	r0, [pc, #184]	; (8000fa4 <bme68x_init+0xf8>)
 8000eec:	f004 fe63 	bl	8005bb6 <HAL_UART_Transmit>
    if (rslt == BME68X_OK)
 8000ef0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d13b      	bne.n	8000f70 <bme68x_init+0xc4>
    {
        if (dev->chip_id == BME68X_CHIP_ID)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	2b61      	cmp	r3, #97	; 0x61
 8000efe:	d134      	bne.n	8000f6a <bme68x_init+0xbe>
        {
            /* Read Variant ID */
            rslt = read_variant_id(dev);
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f002 f827 	bl	8002f54 <read_variant_id>
 8000f06:	4603      	mov	r3, r0
 8000f08:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            len = snprintf(msg, 50, "2.rslt: %u\n", rslt);
 8000f0c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8000f10:	f107 000c 	add.w	r0, r7, #12
 8000f14:	4a24      	ldr	r2, [pc, #144]	; (8000fa8 <bme68x_init+0xfc>)
 8000f16:	2132      	movs	r1, #50	; 0x32
 8000f18:	f006 fab0 	bl	800747c <sniprintf>
 8000f1c:	6438      	str	r0, [r7, #64]	; 0x40
            HAL_UART_Transmit(&huart2, (uint8_t *)msg, len, HAL_MAX_DELAY);
 8000f1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	f107 010c 	add.w	r1, r7, #12
 8000f26:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2a:	481e      	ldr	r0, [pc, #120]	; (8000fa4 <bme68x_init+0xf8>)
 8000f2c:	f004 fe43 	bl	8005bb6 <HAL_UART_Transmit>

            if (rslt == BME68X_OK)
 8000f30:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d11b      	bne.n	8000f70 <bme68x_init+0xc4>
            {
                /* Get the Calibration data */
                rslt = get_calib_data(dev);
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f001 ff07 	bl	8002d4c <get_calib_data>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                len = snprintf(msg, 50, "3.rslt: %u\n", rslt);
 8000f44:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8000f48:	f107 000c 	add.w	r0, r7, #12
 8000f4c:	4a17      	ldr	r2, [pc, #92]	; (8000fac <bme68x_init+0x100>)
 8000f4e:	2132      	movs	r1, #50	; 0x32
 8000f50:	f006 fa94 	bl	800747c <sniprintf>
 8000f54:	6438      	str	r0, [r7, #64]	; 0x40
                HAL_UART_Transmit(&huart2, (uint8_t *)msg, len, HAL_MAX_DELAY);
 8000f56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	f107 010c 	add.w	r1, r7, #12
 8000f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f62:	4810      	ldr	r0, [pc, #64]	; (8000fa4 <bme68x_init+0xf8>)
 8000f64:	f004 fe27 	bl	8005bb6 <HAL_UART_Transmit>
 8000f68:	e002      	b.n	8000f70 <bme68x_init+0xc4>
            }
        }
        else
        {
            rslt = BME68X_E_DEV_NOT_FOUND;
 8000f6a:	23fd      	movs	r3, #253	; 0xfd
 8000f6c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        }
    }
    len = snprintf(msg, 50, "4.rslt: %u\n", rslt);
 8000f70:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8000f74:	f107 000c 	add.w	r0, r7, #12
 8000f78:	4a0d      	ldr	r2, [pc, #52]	; (8000fb0 <bme68x_init+0x104>)
 8000f7a:	2132      	movs	r1, #50	; 0x32
 8000f7c:	f006 fa7e 	bl	800747c <sniprintf>
 8000f80:	6438      	str	r0, [r7, #64]	; 0x40
    HAL_UART_Transmit(&huart2, (uint8_t *)msg, len, HAL_MAX_DELAY);
 8000f82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f84:	b29a      	uxth	r2, r3
 8000f86:	f107 010c 	add.w	r1, r7, #12
 8000f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8e:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <bme68x_init+0xf8>)
 8000f90:	f004 fe11 	bl	8005bb6 <HAL_UART_Transmit>
    return rslt;
 8000f94:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3748      	adds	r7, #72	; 0x48
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	080099b0 	.word	0x080099b0
 8000fa4:	20000270 	.word	0x20000270
 8000fa8:	080099bc 	.word	0x080099bc
 8000fac:	080099c8 	.word	0x080099c8
 8000fb0:	080099d4 	.word	0x080099d4

08000fb4 <bme68x_set_regs>:

/*
 * @brief This API writes the given data to the register address of the sensor
 */
int8_t bme68x_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 8000fb4:	b5b0      	push	{r4, r5, r7, lr}
 8000fb6:	b08a      	sub	sp, #40	; 0x28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
 8000fc0:	603b      	str	r3, [r7, #0]
    int8_t rslt;

    /* Length of the temporary buffer is 2*(length of register)*/
    uint8_t tmp_buff[BME68X_LEN_INTERLEAVE_BUFF] = { 0 };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	613b      	str	r3, [r7, #16]
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]
    uint16_t index;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000fd4:	6838      	ldr	r0, [r7, #0]
 8000fd6:	f001 fc93 	bl	8002900 <null_ptr_check>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if ((rslt == BME68X_OK) && reg_addr && reg_data)
 8000fe0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d16c      	bne.n	80010c2 <bme68x_set_regs+0x10e>
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d069      	beq.n	80010c2 <bme68x_set_regs+0x10e>
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d066      	beq.n	80010c2 <bme68x_set_regs+0x10e>
    {
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d05d      	beq.n	80010b6 <bme68x_set_regs+0x102>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2b0a      	cmp	r3, #10
 8000ffe:	d85a      	bhi.n	80010b6 <bme68x_set_regs+0x102>
        {
            /* Interleave the 2 arrays */
            for (index = 0; index < len; index++)
 8001000:	2300      	movs	r3, #0
 8001002:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001004:	e034      	b.n	8001070 <bme68x_set_regs+0xbc>
            {
                if (dev->intf == BME68X_SPI_INTF)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	7b1b      	ldrb	r3, [r3, #12]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d118      	bne.n	8001040 <bme68x_set_regs+0x8c>
                {
                    /* Set the memory page */
                    rslt = set_mem_page(reg_addr[index], dev);
 800100e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001010:	68fa      	ldr	r2, [r7, #12]
 8001012:	4413      	add	r3, r2
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	6839      	ldr	r1, [r7, #0]
 8001018:	4618      	mov	r0, r3
 800101a:	f001 fbb0 	bl	800277e <set_mem_page>
 800101e:	4603      	mov	r3, r0
 8001020:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8001024:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001026:	68fa      	ldr	r2, [r7, #12]
 8001028:	4413      	add	r3, r2
 800102a:	781a      	ldrb	r2, [r3, #0]
 800102c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001034:	b2d2      	uxtb	r2, r2
 8001036:	3328      	adds	r3, #40	; 0x28
 8001038:	443b      	add	r3, r7
 800103a:	f803 2c18 	strb.w	r2, [r3, #-24]
 800103e:	e009      	b.n	8001054 <bme68x_set_regs+0xa0>
                }
                else
                {
                    tmp_buff[(2 * index)] = reg_addr[index];
 8001040:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001042:	68fa      	ldr	r2, [r7, #12]
 8001044:	441a      	add	r2, r3
 8001046:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	7812      	ldrb	r2, [r2, #0]
 800104c:	3328      	adds	r3, #40	; 0x28
 800104e:	443b      	add	r3, r7
 8001050:	f803 2c18 	strb.w	r2, [r3, #-24]
                }

                tmp_buff[(2 * index) + 1] = reg_data[index];
 8001054:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001056:	68ba      	ldr	r2, [r7, #8]
 8001058:	441a      	add	r2, r3
 800105a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	3301      	adds	r3, #1
 8001060:	7812      	ldrb	r2, [r2, #0]
 8001062:	3328      	adds	r3, #40	; 0x28
 8001064:	443b      	add	r3, r7
 8001066:	f803 2c18 	strb.w	r2, [r3, #-24]
            for (index = 0; index < len; index++)
 800106a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800106c:	3301      	adds	r3, #1
 800106e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001070:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	429a      	cmp	r2, r3
 8001076:	d8c6      	bhi.n	8001006 <bme68x_set_regs+0x52>
            }

            /* Write the interleaved array */
            if (rslt == BME68X_OK)
 8001078:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800107c:	2b00      	cmp	r3, #0
 800107e:	d11e      	bne.n	80010be <bme68x_set_regs+0x10a>
            {
                dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1], (2 * len) - 1, dev->intf_ptr);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8001084:	7c38      	ldrb	r0, [r7, #16]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	1e5a      	subs	r2, r3, #1
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685d      	ldr	r5, [r3, #4]
 8001090:	f107 0310 	add.w	r3, r7, #16
 8001094:	1c59      	adds	r1, r3, #1
 8001096:	462b      	mov	r3, r5
 8001098:	47a0      	blx	r4
 800109a:	4603      	mov	r3, r0
 800109c:	461a      	mov	r2, r3
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
                if (dev->intf_rslt != 0)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d007      	beq.n	80010be <bme68x_set_regs+0x10a>
                {
                    rslt = BME68X_E_COM_FAIL;
 80010ae:	23fe      	movs	r3, #254	; 0xfe
 80010b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if (rslt == BME68X_OK)
 80010b4:	e003      	b.n	80010be <bme68x_set_regs+0x10a>
                }
            }
        }
        else
        {
            rslt = BME68X_E_INVALID_LENGTH;
 80010b6:	23fc      	movs	r3, #252	; 0xfc
 80010b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 80010bc:	e004      	b.n	80010c8 <bme68x_set_regs+0x114>
            if (rslt == BME68X_OK)
 80010be:	bf00      	nop
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 80010c0:	e002      	b.n	80010c8 <bme68x_set_regs+0x114>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80010c2:	23ff      	movs	r3, #255	; 0xff
 80010c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 80010c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3728      	adds	r7, #40	; 0x28
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bdb0      	pop	{r4, r5, r7, pc}

080010d4 <bme68x_get_regs>:

/*
 * @brief This API reads the data from the given register address of sensor.
 */
int8_t bme68x_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 80010d4:	b590      	push	{r4, r7, lr}
 80010d6:	b087      	sub	sp, #28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60b9      	str	r1, [r7, #8]
 80010dc:	607a      	str	r2, [r7, #4]
 80010de:	603b      	str	r3, [r7, #0]
 80010e0:	4603      	mov	r3, r0
 80010e2:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80010e4:	6838      	ldr	r0, [r7, #0]
 80010e6:	f001 fc0b 	bl	8002900 <null_ptr_check>
 80010ea:	4603      	mov	r3, r0
 80010ec:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BME68X_OK) && reg_data)
 80010ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d12a      	bne.n	800114c <bme68x_get_regs+0x78>
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d027      	beq.n	800114c <bme68x_get_regs+0x78>
    {
        if (dev->intf == BME68X_SPI_INTF)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	7b1b      	ldrb	r3, [r3, #12]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d10e      	bne.n	8001122 <bme68x_get_regs+0x4e>
        {
            /* Set the memory page */
            rslt = set_mem_page(reg_addr, dev);
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	6839      	ldr	r1, [r7, #0]
 8001108:	4618      	mov	r0, r3
 800110a:	f001 fb38 	bl	800277e <set_mem_page>
 800110e:	4603      	mov	r3, r0
 8001110:	75fb      	strb	r3, [r7, #23]
            if (rslt == BME68X_OK)
 8001112:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d103      	bne.n	8001122 <bme68x_get_regs+0x4e>
            {
                reg_addr = reg_addr | BME68X_SPI_RD_MSK;
 800111a:	7bfb      	ldrb	r3, [r7, #15]
 800111c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001120:	73fb      	strb	r3, [r7, #15]
            }
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	7bf8      	ldrb	r0, [r7, #15]
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	68b9      	ldr	r1, [r7, #8]
 8001130:	47a0      	blx	r4
 8001132:	4603      	mov	r3, r0
 8001134:	461a      	mov	r2, r3
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (dev->intf_rslt != 0)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 8001142:	2b00      	cmp	r3, #0
 8001144:	d004      	beq.n	8001150 <bme68x_get_regs+0x7c>
        {
            rslt = BME68X_E_COM_FAIL;
 8001146:	23fe      	movs	r3, #254	; 0xfe
 8001148:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != 0)
 800114a:	e001      	b.n	8001150 <bme68x_get_regs+0x7c>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 800114c:	23ff      	movs	r3, #255	; 0xff
 800114e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001150:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001154:	4618      	mov	r0, r3
 8001156:	371c      	adds	r7, #28
 8001158:	46bd      	mov	sp, r7
 800115a:	bd90      	pop	{r4, r7, pc}

0800115c <bme68x_soft_reset>:

/*
 * @brief This API soft-resets the sensor.
 */
int8_t bme68x_soft_reset(struct bme68x_dev *dev)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME68X_REG_SOFT_RESET;
 8001164:	23e0      	movs	r3, #224	; 0xe0
 8001166:	73bb      	strb	r3, [r7, #14]

    /* 0xb6 is the soft reset command */
    uint8_t soft_rst_cmd = BME68X_SOFT_RESET_CMD;
 8001168:	23b6      	movs	r3, #182	; 0xb6
 800116a:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f001 fbc7 	bl	8002900 <null_ptr_check>
 8001172:	4603      	mov	r3, r0
 8001174:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 8001176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d12b      	bne.n	80011d6 <bme68x_soft_reset+0x7a>
    {
        if (dev->intf == BME68X_SPI_INTF)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	7b1b      	ldrb	r3, [r3, #12]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d104      	bne.n	8001190 <bme68x_soft_reset+0x34>
        {
            rslt = get_mem_page(dev);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f001 fb5e 	bl	8002848 <get_mem_page>
 800118c:	4603      	mov	r3, r0
 800118e:	73fb      	strb	r3, [r7, #15]
        }

        /* Reset the device */
        if (rslt == BME68X_OK)
 8001190:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d11e      	bne.n	80011d6 <bme68x_soft_reset+0x7a>
        {
            rslt = bme68x_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001198:	f107 010d 	add.w	r1, r7, #13
 800119c:	f107 000e 	add.w	r0, r7, #14
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2201      	movs	r2, #1
 80011a4:	f7ff ff06 	bl	8000fb4 <bme68x_set_regs>
 80011a8:	4603      	mov	r3, r0
 80011aa:	73fb      	strb	r3, [r7, #15]

            if (rslt == BME68X_OK)
 80011ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d110      	bne.n	80011d6 <bme68x_soft_reset+0x7a>
            {
                /* Wait for 5ms */
                dev->delay_us(BME68X_PERIOD_RESET, dev->intf_ptr);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	6852      	ldr	r2, [r2, #4]
 80011bc:	4611      	mov	r1, r2
 80011be:	f242 7010 	movw	r0, #10000	; 0x2710
 80011c2:	4798      	blx	r3

                /* After reset get the memory page */
                if (dev->intf == BME68X_SPI_INTF)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	7b1b      	ldrb	r3, [r3, #12]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d104      	bne.n	80011d6 <bme68x_soft_reset+0x7a>
                {
                    rslt = get_mem_page(dev);
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f001 fb3b 	bl	8002848 <get_mem_page>
 80011d2:	4603      	mov	r3, r0
 80011d4:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80011d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <bme68x_set_conf>:

/*
 * @brief This API is used to set the oversampling, filter and odr configuration
 */
int8_t bme68x_set_conf(struct bme68x_conf *conf, struct bme68x_dev *dev)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b088      	sub	sp, #32
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t odr20 = 0, odr3 = 1;
 80011ee:	2300      	movs	r3, #0
 80011f0:	77bb      	strb	r3, [r7, #30]
 80011f2:	2301      	movs	r3, #1
 80011f4:	777b      	strb	r3, [r7, #29]
    uint8_t current_op_mode;

    /* Register data starting from BME68X_REG_CTRL_GAS_1(0x71) up to BME68X_REG_CONFIG(0x75) */
    uint8_t reg_array[BME68X_LEN_CONFIG] = { 0x71, 0x72, 0x73, 0x74, 0x75 };
 80011f6:	4a7c      	ldr	r2, [pc, #496]	; (80013e8 <bme68x_set_conf+0x204>)
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001200:	6018      	str	r0, [r3, #0]
 8001202:	3304      	adds	r3, #4
 8001204:	7019      	strb	r1, [r3, #0]
    uint8_t data_array[BME68X_LEN_CONFIG] = { 0 };
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	2300      	movs	r3, #0
 800120c:	743b      	strb	r3, [r7, #16]

    rslt = bme68x_get_op_mode(&current_op_mode, dev);
 800120e:	f107 031c 	add.w	r3, r7, #28
 8001212:	6839      	ldr	r1, [r7, #0]
 8001214:	4618      	mov	r0, r3
 8001216:	f000 f94a 	bl	80014ae <bme68x_get_op_mode>
 800121a:	4603      	mov	r3, r0
 800121c:	77fb      	strb	r3, [r7, #31]
    if (rslt == BME68X_OK)
 800121e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d105      	bne.n	8001232 <bme68x_set_conf+0x4e>
    {
        /* Configure only in the sleep mode */
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 8001226:	6839      	ldr	r1, [r7, #0]
 8001228:	2000      	movs	r0, #0
 800122a:	f000 f8df 	bl	80013ec <bme68x_set_op_mode>
 800122e:	4603      	mov	r3, r0
 8001230:	77fb      	strb	r3, [r7, #31]
    }

    if (conf == NULL)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d102      	bne.n	800123e <bme68x_set_conf+0x5a>
    {
        rslt = BME68X_E_NULL_PTR;
 8001238:	23ff      	movs	r3, #255	; 0xff
 800123a:	77fb      	strb	r3, [r7, #31]
 800123c:	e0b2      	b.n	80013a4 <bme68x_set_conf+0x1c0>
    }
    else if (rslt == BME68X_OK)
 800123e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001242:	2b00      	cmp	r3, #0
 8001244:	f040 80ae 	bne.w	80013a4 <bme68x_set_conf+0x1c0>
    {
        /* Read the whole configuration and write it back once later */
        rslt = bme68x_get_regs(reg_array[0], data_array, BME68X_LEN_CONFIG, dev);
 8001248:	7d38      	ldrb	r0, [r7, #20]
 800124a:	f107 010c 	add.w	r1, r7, #12
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	2205      	movs	r2, #5
 8001252:	f7ff ff3f 	bl	80010d4 <bme68x_get_regs>
 8001256:	4603      	mov	r3, r0
 8001258:	77fb      	strb	r3, [r7, #31]
        dev->info_msg = BME68X_OK;
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	2200      	movs	r2, #0
 800125e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        if (rslt == BME68X_OK)
 8001262:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d108      	bne.n	800127c <bme68x_set_conf+0x98>
        {
            rslt = boundary_check(&conf->filter, BME68X_FILTER_SIZE_127, dev);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	3303      	adds	r3, #3
 800126e:	683a      	ldr	r2, [r7, #0]
 8001270:	2107      	movs	r1, #7
 8001272:	4618      	mov	r0, r3
 8001274:	f001 fb17 	bl	80028a6 <boundary_check>
 8001278:	4603      	mov	r3, r0
 800127a:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 800127c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d108      	bne.n	8001296 <bme68x_set_conf+0xb2>
        {
            rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3301      	adds	r3, #1
 8001288:	683a      	ldr	r2, [r7, #0]
 800128a:	2105      	movs	r1, #5
 800128c:	4618      	mov	r0, r3
 800128e:	f001 fb0a 	bl	80028a6 <boundary_check>
 8001292:	4603      	mov	r3, r0
 8001294:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8001296:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d108      	bne.n	80012b0 <bme68x_set_conf+0xcc>
        {
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	3302      	adds	r3, #2
 80012a2:	683a      	ldr	r2, [r7, #0]
 80012a4:	2105      	movs	r1, #5
 80012a6:	4618      	mov	r0, r3
 80012a8:	f001 fafd 	bl	80028a6 <boundary_check>
 80012ac:	4603      	mov	r3, r0
 80012ae:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 80012b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d107      	bne.n	80012c8 <bme68x_set_conf+0xe4>
        {
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	683a      	ldr	r2, [r7, #0]
 80012bc:	2105      	movs	r1, #5
 80012be:	4618      	mov	r0, r3
 80012c0:	f001 faf1 	bl	80028a6 <boundary_check>
 80012c4:	4603      	mov	r3, r0
 80012c6:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 80012c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d108      	bne.n	80012e2 <bme68x_set_conf+0xfe>
        {
            rslt = boundary_check(&conf->odr, BME68X_ODR_NONE, dev);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3304      	adds	r3, #4
 80012d4:	683a      	ldr	r2, [r7, #0]
 80012d6:	2108      	movs	r1, #8
 80012d8:	4618      	mov	r0, r3
 80012da:	f001 fae4 	bl	80028a6 <boundary_check>
 80012de:	4603      	mov	r3, r0
 80012e0:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 80012e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d15c      	bne.n	80013a4 <bme68x_set_conf+0x1c0>
        {
            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_FILTER, conf->filter);
 80012ea:	7c3b      	ldrb	r3, [r7, #16]
 80012ec:	b25b      	sxtb	r3, r3
 80012ee:	f023 031c 	bic.w	r3, r3, #28
 80012f2:	b25a      	sxtb	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	78db      	ldrb	r3, [r3, #3]
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	b25b      	sxtb	r3, r3
 80012fc:	f003 031c 	and.w	r3, r3, #28
 8001300:	b25b      	sxtb	r3, r3
 8001302:	4313      	orrs	r3, r2
 8001304:	b25b      	sxtb	r3, r3
 8001306:	b2db      	uxtb	r3, r3
 8001308:	743b      	strb	r3, [r7, #16]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OST, conf->os_temp);
 800130a:	7bfb      	ldrb	r3, [r7, #15]
 800130c:	b25b      	sxtb	r3, r3
 800130e:	f003 031f 	and.w	r3, r3, #31
 8001312:	b25a      	sxtb	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	785b      	ldrb	r3, [r3, #1]
 8001318:	015b      	lsls	r3, r3, #5
 800131a:	b25b      	sxtb	r3, r3
 800131c:	4313      	orrs	r3, r2
 800131e:	b25b      	sxtb	r3, r3
 8001320:	b2db      	uxtb	r3, r3
 8001322:	73fb      	strb	r3, [r7, #15]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OSP, conf->os_pres);
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	b25b      	sxtb	r3, r3
 8001328:	f023 031c 	bic.w	r3, r3, #28
 800132c:	b25a      	sxtb	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	789b      	ldrb	r3, [r3, #2]
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	b25b      	sxtb	r3, r3
 8001336:	f003 031c 	and.w	r3, r3, #28
 800133a:	b25b      	sxtb	r3, r3
 800133c:	4313      	orrs	r3, r2
 800133e:	b25b      	sxtb	r3, r3
 8001340:	b2db      	uxtb	r3, r3
 8001342:	73fb      	strb	r3, [r7, #15]
            data_array[1] = BME68X_SET_BITS_POS_0(data_array[1], BME68X_OSH, conf->os_hum);
 8001344:	7b7b      	ldrb	r3, [r7, #13]
 8001346:	b25b      	sxtb	r3, r3
 8001348:	f023 0307 	bic.w	r3, r3, #7
 800134c:	b25a      	sxtb	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	b25b      	sxtb	r3, r3
 8001354:	f003 0307 	and.w	r3, r3, #7
 8001358:	b25b      	sxtb	r3, r3
 800135a:	4313      	orrs	r3, r2
 800135c:	b25b      	sxtb	r3, r3
 800135e:	b2db      	uxtb	r3, r3
 8001360:	737b      	strb	r3, [r7, #13]
            if (conf->odr != BME68X_ODR_NONE)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	791b      	ldrb	r3, [r3, #4]
 8001366:	2b08      	cmp	r3, #8
 8001368:	d004      	beq.n	8001374 <bme68x_set_conf+0x190>
            {
                odr20 = conf->odr;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	791b      	ldrb	r3, [r3, #4]
 800136e:	77bb      	strb	r3, [r7, #30]
                odr3 = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	777b      	strb	r3, [r7, #29]
            }

            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_ODR20, odr20);
 8001374:	7c3b      	ldrb	r3, [r7, #16]
 8001376:	b25b      	sxtb	r3, r3
 8001378:	f003 031f 	and.w	r3, r3, #31
 800137c:	b25a      	sxtb	r2, r3
 800137e:	7fbb      	ldrb	r3, [r7, #30]
 8001380:	015b      	lsls	r3, r3, #5
 8001382:	b25b      	sxtb	r3, r3
 8001384:	4313      	orrs	r3, r2
 8001386:	b25b      	sxtb	r3, r3
 8001388:	b2db      	uxtb	r3, r3
 800138a:	743b      	strb	r3, [r7, #16]
            data_array[0] = BME68X_SET_BITS(data_array[0], BME68X_ODR3, odr3);
 800138c:	7b3b      	ldrb	r3, [r7, #12]
 800138e:	b25b      	sxtb	r3, r3
 8001390:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001394:	b25a      	sxtb	r2, r3
 8001396:	7f7b      	ldrb	r3, [r7, #29]
 8001398:	01db      	lsls	r3, r3, #7
 800139a:	b25b      	sxtb	r3, r3
 800139c:	4313      	orrs	r3, r2
 800139e:	b25b      	sxtb	r3, r3
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	733b      	strb	r3, [r7, #12]
        }
    }

    if (rslt == BME68X_OK)
 80013a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d109      	bne.n	80013c0 <bme68x_set_conf+0x1dc>
    {
        rslt = bme68x_set_regs(reg_array, data_array, BME68X_LEN_CONFIG, dev);
 80013ac:	f107 010c 	add.w	r1, r7, #12
 80013b0:	f107 0014 	add.w	r0, r7, #20
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	2205      	movs	r2, #5
 80013b8:	f7ff fdfc 	bl	8000fb4 <bme68x_set_regs>
 80013bc:	4603      	mov	r3, r0
 80013be:	77fb      	strb	r3, [r7, #31]
    }

    if ((current_op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 80013c0:	7f3b      	ldrb	r3, [r7, #28]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00a      	beq.n	80013dc <bme68x_set_conf+0x1f8>
 80013c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d106      	bne.n	80013dc <bme68x_set_conf+0x1f8>
    {
        rslt = bme68x_set_op_mode(current_op_mode, dev);
 80013ce:	7f3b      	ldrb	r3, [r7, #28]
 80013d0:	6839      	ldr	r1, [r7, #0]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f000 f80a 	bl	80013ec <bme68x_set_op_mode>
 80013d8:	4603      	mov	r3, r0
 80013da:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 80013dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3720      	adds	r7, #32
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	080099e0 	.word	0x080099e0

080013ec <bme68x_set_op_mode>:

/*
 * @brief This API is used to set the operation mode of the sensor
 */
int8_t bme68x_set_op_mode(const uint8_t op_mode, struct bme68x_dev *dev)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	6039      	str	r1, [r7, #0]
 80013f6:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t tmp_pow_mode;
    uint8_t pow_mode = 0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	73bb      	strb	r3, [r7, #14]
    uint8_t reg_addr = BME68X_REG_CTRL_MEAS;
 80013fc:	2374      	movs	r3, #116	; 0x74
 80013fe:	733b      	strb	r3, [r7, #12]

    /* Call until in sleep */
    do
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &tmp_pow_mode, 1, dev);
 8001400:	f107 010d 	add.w	r1, r7, #13
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	2201      	movs	r2, #1
 8001408:	2074      	movs	r0, #116	; 0x74
 800140a:	f7ff fe63 	bl	80010d4 <bme68x_get_regs>
 800140e:	4603      	mov	r3, r0
 8001410:	73fb      	strb	r3, [r7, #15]
        if (rslt == BME68X_OK)
 8001412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d11d      	bne.n	8001456 <bme68x_set_op_mode+0x6a>
        {
            /* Put to sleep before changing mode */
            pow_mode = (tmp_pow_mode & BME68X_MODE_MSK);
 800141a:	7b7b      	ldrb	r3, [r7, #13]
 800141c:	f003 0303 	and.w	r3, r3, #3
 8001420:	73bb      	strb	r3, [r7, #14]
            if (pow_mode != BME68X_SLEEP_MODE)
 8001422:	7bbb      	ldrb	r3, [r7, #14]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d016      	beq.n	8001456 <bme68x_set_op_mode+0x6a>
            {
                tmp_pow_mode &= ~BME68X_MODE_MSK; /* Set to sleep */
 8001428:	7b7b      	ldrb	r3, [r7, #13]
 800142a:	f023 0303 	bic.w	r3, r3, #3
 800142e:	b2db      	uxtb	r3, r3
 8001430:	737b      	strb	r3, [r7, #13]
                rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8001432:	f107 010d 	add.w	r1, r7, #13
 8001436:	f107 000c 	add.w	r0, r7, #12
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	2201      	movs	r2, #1
 800143e:	f7ff fdb9 	bl	8000fb4 <bme68x_set_regs>
 8001442:	4603      	mov	r3, r0
 8001444:	73fb      	strb	r3, [r7, #15]
                dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800144a:	683a      	ldr	r2, [r7, #0]
 800144c:	6852      	ldr	r2, [r2, #4]
 800144e:	4611      	mov	r1, r2
 8001450:	f242 7010 	movw	r0, #10000	; 0x2710
 8001454:	4798      	blx	r3
            }
        }
    } while ((pow_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK));
 8001456:	7bbb      	ldrb	r3, [r7, #14]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d003      	beq.n	8001464 <bme68x_set_op_mode+0x78>
 800145c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d0cd      	beq.n	8001400 <bme68x_set_op_mode+0x14>

    /* Already in sleep */
    if ((op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d01b      	beq.n	80014a2 <bme68x_set_op_mode+0xb6>
 800146a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d117      	bne.n	80014a2 <bme68x_set_op_mode+0xb6>
    {
        tmp_pow_mode = (tmp_pow_mode & ~BME68X_MODE_MSK) | (op_mode & BME68X_MODE_MSK);
 8001472:	7b7b      	ldrb	r3, [r7, #13]
 8001474:	b25b      	sxtb	r3, r3
 8001476:	f023 0303 	bic.w	r3, r3, #3
 800147a:	b25a      	sxtb	r2, r3
 800147c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001480:	f003 0303 	and.w	r3, r3, #3
 8001484:	b25b      	sxtb	r3, r3
 8001486:	4313      	orrs	r3, r2
 8001488:	b25b      	sxtb	r3, r3
 800148a:	b2db      	uxtb	r3, r3
 800148c:	737b      	strb	r3, [r7, #13]
        rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 800148e:	f107 010d 	add.w	r1, r7, #13
 8001492:	f107 000c 	add.w	r0, r7, #12
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	2201      	movs	r2, #1
 800149a:	f7ff fd8b 	bl	8000fb4 <bme68x_set_regs>
 800149e:	4603      	mov	r3, r0
 80014a0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80014a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <bme68x_get_op_mode>:

/*
 * @brief This API is used to get the operation mode of the sensor.
 */
int8_t bme68x_get_op_mode(uint8_t *op_mode, struct bme68x_dev *dev)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b084      	sub	sp, #16
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
 80014b6:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t mode;

    if (op_mode)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d00f      	beq.n	80014de <bme68x_get_op_mode+0x30>
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &mode, 1, dev);
 80014be:	f107 010e 	add.w	r1, r7, #14
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	2201      	movs	r2, #1
 80014c6:	2074      	movs	r0, #116	; 0x74
 80014c8:	f7ff fe04 	bl	80010d4 <bme68x_get_regs>
 80014cc:	4603      	mov	r3, r0
 80014ce:	73fb      	strb	r3, [r7, #15]

        /* Masking the other register bit info*/
        *op_mode = mode & BME68X_MODE_MSK;
 80014d0:	7bbb      	ldrb	r3, [r7, #14]
 80014d2:	f003 0303 	and.w	r3, r3, #3
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	701a      	strb	r2, [r3, #0]
 80014dc:	e001      	b.n	80014e2 <bme68x_get_op_mode+0x34>
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80014de:	23ff      	movs	r3, #255	; 0xff
 80014e0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80014e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <bme68x_get_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme68x_data
 * structure instance passed by the user.
 */
int8_t bme68x_get_data(uint8_t op_mode, struct bme68x_data *data, uint8_t *n_data, struct bme68x_dev *dev)
{
 80014ee:	b5b0      	push	{r4, r5, r7, lr}
 80014f0:	b09a      	sub	sp, #104	; 0x68
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
 80014f8:	603b      	str	r3, [r7, #0]
 80014fa:	4603      	mov	r3, r0
 80014fc:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t i = 0, j = 0, new_fields = 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8001504:	2300      	movs	r3, #0
 8001506:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 800150a:	2300      	movs	r3, #0
 800150c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
    struct bme68x_data *field_ptr[3] = { 0 };
 8001510:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
    struct bme68x_data field_data[3] = { { 0 } };
 800151c:	f107 0310 	add.w	r3, r7, #16
 8001520:	2248      	movs	r2, #72	; 0x48
 8001522:	2100      	movs	r1, #0
 8001524:	4618      	mov	r0, r3
 8001526:	f005 fb37 	bl	8006b98 <memset>

    field_ptr[0] = &field_data[0];
 800152a:	f107 0310 	add.w	r3, r7, #16
 800152e:	65bb      	str	r3, [r7, #88]	; 0x58
    field_ptr[1] = &field_data[1];
 8001530:	f107 0310 	add.w	r3, r7, #16
 8001534:	3318      	adds	r3, #24
 8001536:	65fb      	str	r3, [r7, #92]	; 0x5c
    field_ptr[2] = &field_data[2];
 8001538:	f107 0310 	add.w	r3, r7, #16
 800153c:	3330      	adds	r3, #48	; 0x30
 800153e:	663b      	str	r3, [r7, #96]	; 0x60

    rslt = null_ptr_check(dev);
 8001540:	6838      	ldr	r0, [r7, #0]
 8001542:	f001 f9dd 	bl	8002900 <null_ptr_check>
 8001546:	4603      	mov	r3, r0
 8001548:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if ((rslt == BME68X_OK) && (data != NULL))
 800154c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8001550:	2b00      	cmp	r3, #0
 8001552:	f040 80c1 	bne.w	80016d8 <bme68x_get_data+0x1ea>
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	2b00      	cmp	r3, #0
 800155a:	f000 80bd 	beq.w	80016d8 <bme68x_get_data+0x1ea>
    {
        /* Reading the sensor data in forced mode only */
        if (op_mode == BME68X_FORCED_MODE)
 800155e:	7bfb      	ldrb	r3, [r7, #15]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d11c      	bne.n	800159e <bme68x_get_data+0xb0>
        {
            rslt = read_field_data(0, data, dev);
 8001564:	683a      	ldr	r2, [r7, #0]
 8001566:	68b9      	ldr	r1, [r7, #8]
 8001568:	2000      	movs	r0, #0
 800156a:	f000 fd8c 	bl	8002086 <read_field_data>
 800156e:	4603      	mov	r3, r0
 8001570:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            if (rslt == BME68X_OK)
 8001574:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8001578:	2b00      	cmp	r3, #0
 800157a:	f040 80a1 	bne.w	80016c0 <bme68x_get_data+0x1d2>
            {
                if (data->status & BME68X_NEW_DATA_MSK)
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	b25b      	sxtb	r3, r3
 8001584:	2b00      	cmp	r3, #0
 8001586:	da03      	bge.n	8001590 <bme68x_get_data+0xa2>
                {
                    new_fields = 1;
 8001588:	2301      	movs	r3, #1
 800158a:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 800158e:	e097      	b.n	80016c0 <bme68x_get_data+0x1d2>
                }
                else
                {
                    new_fields = 0;
 8001590:	2300      	movs	r3, #0
 8001592:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    rslt = BME68X_W_NO_NEW_DATA;
 8001596:	2302      	movs	r3, #2
 8001598:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800159c:	e090      	b.n	80016c0 <bme68x_get_data+0x1d2>
                }
            }
        }
        else if ((op_mode == BME68X_PARALLEL_MODE) || (op_mode == BME68X_SEQUENTIAL_MODE))
 800159e:	7bfb      	ldrb	r3, [r7, #15]
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d003      	beq.n	80015ac <bme68x_get_data+0xbe>
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
 80015a6:	2b03      	cmp	r3, #3
 80015a8:	f040 8087 	bne.w	80016ba <bme68x_get_data+0x1cc>
        {
            /* Read the 3 fields and count the number of new data fields */
            rslt = read_all_field_data(field_ptr, dev);
 80015ac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80015b0:	6839      	ldr	r1, [r7, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f000 feb1 	bl	800231a <read_all_field_data>
 80015b8:	4603      	mov	r3, r0
 80015ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

            new_fields = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 80015c4:	2300      	movs	r3, #0
 80015c6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80015ca:	e014      	b.n	80015f6 <bme68x_get_data+0x108>
            {
                if (field_ptr[i]->status & BME68X_NEW_DATA_MSK)
 80015cc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	3368      	adds	r3, #104	; 0x68
 80015d4:	443b      	add	r3, r7
 80015d6:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	b25b      	sxtb	r3, r3
 80015de:	2b00      	cmp	r3, #0
 80015e0:	da04      	bge.n	80015ec <bme68x_get_data+0xfe>
                {
                    new_fields++;
 80015e2:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80015e6:	3301      	adds	r3, #1
 80015e8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 80015ec:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80015f0:	3301      	adds	r3, #1
 80015f2:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80015f6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d803      	bhi.n	8001606 <bme68x_get_data+0x118>
 80015fe:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8001602:	2b00      	cmp	r3, #0
 8001604:	d0e2      	beq.n	80015cc <bme68x_get_data+0xde>
                }
            }

            /* Sort the sensor data in parallel & sequential modes*/
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
 8001606:	2300      	movs	r3, #0
 8001608:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800160c:	e01c      	b.n	8001648 <bme68x_get_data+0x15a>
            {
                for (j = i + 1; j < 3; j++)
 800160e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001612:	3301      	adds	r3, #1
 8001614:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8001618:	e00d      	b.n	8001636 <bme68x_get_data+0x148>
                {
                    sort_sensor_data(i, j, field_ptr);
 800161a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800161e:	f897 1065 	ldrb.w	r1, [r7, #101]	; 0x65
 8001622:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001626:	4618      	mov	r0, r3
 8001628:	f001 fb16 	bl	8002c58 <sort_sensor_data>
                for (j = i + 1; j < 3; j++)
 800162c:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001630:	3301      	adds	r3, #1
 8001632:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8001636:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800163a:	2b02      	cmp	r3, #2
 800163c:	d9ed      	bls.n	800161a <bme68x_get_data+0x12c>
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
 800163e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001642:	3301      	adds	r3, #1
 8001644:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8001648:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800164c:	2b01      	cmp	r3, #1
 800164e:	d803      	bhi.n	8001658 <bme68x_get_data+0x16a>
 8001650:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8001654:	2b00      	cmp	r3, #0
 8001656:	d0da      	beq.n	800160e <bme68x_get_data+0x120>
                }
            }

            /* Copy the sorted data */
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8001658:	2300      	movs	r3, #0
 800165a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800165e:	e01c      	b.n	800169a <bme68x_get_data+0x1ac>
            {
                data[i] = *field_ptr[i];
 8001660:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	3368      	adds	r3, #104	; 0x68
 8001668:	443b      	add	r3, r7
 800166a:	f853 1c10 	ldr.w	r1, [r3, #-16]
 800166e:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8001672:	4613      	mov	r3, r2
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	4413      	add	r3, r2
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	461a      	mov	r2, r3
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	4413      	add	r3, r2
 8001680:	461c      	mov	r4, r3
 8001682:	460d      	mov	r5, r1
 8001684:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001686:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001688:	e895 0003 	ldmia.w	r5, {r0, r1}
 800168c:	e884 0003 	stmia.w	r4, {r0, r1}
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8001690:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001694:	3301      	adds	r3, #1
 8001696:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800169a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d803      	bhi.n	80016aa <bme68x_get_data+0x1bc>
 80016a2:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d0da      	beq.n	8001660 <bme68x_get_data+0x172>
            }

            if (new_fields == 0)
 80016aa:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d106      	bne.n	80016c0 <bme68x_get_data+0x1d2>
            {
                rslt = BME68X_W_NO_NEW_DATA;
 80016b2:	2302      	movs	r3, #2
 80016b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            if (new_fields == 0)
 80016b8:	e002      	b.n	80016c0 <bme68x_get_data+0x1d2>
            }
        }
        else
        {
            rslt = BME68X_W_DEFINE_OP_MODE;
 80016ba:	2301      	movs	r3, #1
 80016bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        }

        if (n_data == NULL)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d103      	bne.n	80016ce <bme68x_get_data+0x1e0>
        {
            rslt = BME68X_E_NULL_PTR;
 80016c6:	23ff      	movs	r3, #255	; 0xff
 80016c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        if (n_data == NULL)
 80016cc:	e007      	b.n	80016de <bme68x_get_data+0x1f0>
        }
        else
        {
            *n_data = new_fields;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 80016d4:	701a      	strb	r2, [r3, #0]
        if (n_data == NULL)
 80016d6:	e002      	b.n	80016de <bme68x_get_data+0x1f0>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80016d8:	23ff      	movs	r3, #255	; 0xff
 80016da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    }

    return rslt;
 80016de:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3768      	adds	r7, #104	; 0x68
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bdb0      	pop	{r4, r5, r7, pc}

080016ea <bme68x_set_heatr_conf>:

/*
 * @brief This API is used to set the gas configuration of the sensor.
 */
int8_t bme68x_set_heatr_conf(uint8_t op_mode, const struct bme68x_heatr_conf *conf, struct bme68x_dev *dev)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b088      	sub	sp, #32
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	4603      	mov	r3, r0
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
 80016f6:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t nb_conv = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	773b      	strb	r3, [r7, #28]
    uint8_t hctrl, run_gas = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	777b      	strb	r3, [r7, #29]
    uint8_t ctrl_gas_data[2];
    uint8_t ctrl_gas_addr[2] = { BME68X_REG_CTRL_GAS_0, BME68X_REG_CTRL_GAS_1 };
 8001700:	f247 1370 	movw	r3, #29040	; 0x7170
 8001704:	82bb      	strh	r3, [r7, #20]

    if (conf != NULL)
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d06e      	beq.n	80017ea <bme68x_set_heatr_conf+0x100>
    {
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 800170c:	6879      	ldr	r1, [r7, #4]
 800170e:	2000      	movs	r0, #0
 8001710:	f7ff fe6c 	bl	80013ec <bme68x_set_op_mode>
 8001714:	4603      	mov	r3, r0
 8001716:	77fb      	strb	r3, [r7, #31]
        if (rslt == BME68X_OK)
 8001718:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d108      	bne.n	8001732 <bme68x_set_heatr_conf+0x48>
        {
            rslt = set_conf(conf, op_mode, &nb_conv, dev);
 8001720:	f107 021c 	add.w	r2, r7, #28
 8001724:	7bf9      	ldrb	r1, [r7, #15]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	68b8      	ldr	r0, [r7, #8]
 800172a:	f001 f909 	bl	8002940 <set_conf>
 800172e:	4603      	mov	r3, r0
 8001730:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8001732:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d159      	bne.n	80017ee <bme68x_set_heatr_conf+0x104>
        {
            rslt = bme68x_get_regs(BME68X_REG_CTRL_GAS_0, ctrl_gas_data, 2, dev);
 800173a:	f107 0118 	add.w	r1, r7, #24
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2202      	movs	r2, #2
 8001742:	2070      	movs	r0, #112	; 0x70
 8001744:	f7ff fcc6 	bl	80010d4 <bme68x_get_regs>
 8001748:	4603      	mov	r3, r0
 800174a:	77fb      	strb	r3, [r7, #31]
            if (rslt == BME68X_OK)
 800174c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d14c      	bne.n	80017ee <bme68x_set_heatr_conf+0x104>
            {
                if (conf->enable == BME68X_ENABLE)
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d10b      	bne.n	8001774 <bme68x_set_heatr_conf+0x8a>
                {
                    hctrl = BME68X_ENABLE_HEATER;
 800175c:	2300      	movs	r3, #0
 800175e:	77bb      	strb	r3, [r7, #30]
                    if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d102      	bne.n	800176e <bme68x_set_heatr_conf+0x84>
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_H;
 8001768:	2302      	movs	r3, #2
 800176a:	777b      	strb	r3, [r7, #29]
 800176c:	e006      	b.n	800177c <bme68x_set_heatr_conf+0x92>
                    }
                    else
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_L;
 800176e:	2301      	movs	r3, #1
 8001770:	777b      	strb	r3, [r7, #29]
 8001772:	e003      	b.n	800177c <bme68x_set_heatr_conf+0x92>
                    }
                }
                else
                {
                    hctrl = BME68X_DISABLE_HEATER;
 8001774:	2301      	movs	r3, #1
 8001776:	77bb      	strb	r3, [r7, #30]
                    run_gas = BME68X_DISABLE_GAS_MEAS;
 8001778:	2300      	movs	r3, #0
 800177a:	777b      	strb	r3, [r7, #29]
                }

                ctrl_gas_data[0] = BME68X_SET_BITS(ctrl_gas_data[0], BME68X_HCTRL, hctrl);
 800177c:	7e3b      	ldrb	r3, [r7, #24]
 800177e:	b25b      	sxtb	r3, r3
 8001780:	f023 0308 	bic.w	r3, r3, #8
 8001784:	b25a      	sxtb	r2, r3
 8001786:	7fbb      	ldrb	r3, [r7, #30]
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	b25b      	sxtb	r3, r3
 800178c:	f003 0308 	and.w	r3, r3, #8
 8001790:	b25b      	sxtb	r3, r3
 8001792:	4313      	orrs	r3, r2
 8001794:	b25b      	sxtb	r3, r3
 8001796:	b2db      	uxtb	r3, r3
 8001798:	763b      	strb	r3, [r7, #24]
                ctrl_gas_data[1] = BME68X_SET_BITS_POS_0(ctrl_gas_data[1], BME68X_NBCONV, nb_conv);
 800179a:	7e7b      	ldrb	r3, [r7, #25]
 800179c:	b25b      	sxtb	r3, r3
 800179e:	f023 030f 	bic.w	r3, r3, #15
 80017a2:	b25a      	sxtb	r2, r3
 80017a4:	7f3b      	ldrb	r3, [r7, #28]
 80017a6:	b25b      	sxtb	r3, r3
 80017a8:	f003 030f 	and.w	r3, r3, #15
 80017ac:	b25b      	sxtb	r3, r3
 80017ae:	4313      	orrs	r3, r2
 80017b0:	b25b      	sxtb	r3, r3
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	767b      	strb	r3, [r7, #25]
                ctrl_gas_data[1] = BME68X_SET_BITS(ctrl_gas_data[1], BME68X_RUN_GAS, run_gas);
 80017b6:	7e7b      	ldrb	r3, [r7, #25]
 80017b8:	b25b      	sxtb	r3, r3
 80017ba:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80017be:	b25a      	sxtb	r2, r3
 80017c0:	7f7b      	ldrb	r3, [r7, #29]
 80017c2:	011b      	lsls	r3, r3, #4
 80017c4:	b25b      	sxtb	r3, r3
 80017c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80017ca:	b25b      	sxtb	r3, r3
 80017cc:	4313      	orrs	r3, r2
 80017ce:	b25b      	sxtb	r3, r3
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	767b      	strb	r3, [r7, #25]
                rslt = bme68x_set_regs(ctrl_gas_addr, ctrl_gas_data, 2, dev);
 80017d4:	f107 0118 	add.w	r1, r7, #24
 80017d8:	f107 0014 	add.w	r0, r7, #20
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2202      	movs	r2, #2
 80017e0:	f7ff fbe8 	bl	8000fb4 <bme68x_set_regs>
 80017e4:	4603      	mov	r3, r0
 80017e6:	77fb      	strb	r3, [r7, #31]
 80017e8:	e001      	b.n	80017ee <bme68x_set_heatr_conf+0x104>
            }
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80017ea:	23ff      	movs	r3, #255	; 0xff
 80017ec:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 80017ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3720      	adds	r7, #32
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
	...

080017fc <calc_temperature>:

#else

/* @brief This internal API is used to calculate the temperature value. */
static float calc_temperature(uint32_t temp_adc, struct bme68x_dev *dev)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b087      	sub	sp, #28
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
    float var1;
    float var2;
    float calc_temp;

    /* calculate var1 data */
    var1 = ((((float)temp_adc / 16384.0f) - ((float)dev->calib.par_t1 / 1024.0f)) * ((float)dev->calib.par_t2));
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	ee07 3a90 	vmov	s15, r3
 800180c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001810:	eddf 6a38 	vldr	s13, [pc, #224]	; 80018f4 <calc_temperature+0xf8>
 8001814:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	8bdb      	ldrh	r3, [r3, #30]
 800181c:	ee07 3a90 	vmov	s15, r3
 8001820:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001824:	ed9f 6a34 	vldr	s12, [pc, #208]	; 80018f8 <calc_temperature+0xfc>
 8001828:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800182c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001836:	ee07 3a90 	vmov	s15, r3
 800183a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800183e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001842:	edc7 7a05 	vstr	s15, [r7, #20]

    /* calculate var2 data */
    var2 =
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	ee07 3a90 	vmov	s15, r3
 800184c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001850:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80018fc <calc_temperature+0x100>
 8001854:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	8bdb      	ldrh	r3, [r3, #30]
 800185c:	ee07 3a90 	vmov	s15, r3
 8001860:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001864:	ed9f 6a26 	vldr	s12, [pc, #152]	; 8001900 <calc_temperature+0x104>
 8001868:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800186c:	ee37 7a67 	vsub.f32	s14, s14, s15
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	ee07 3a90 	vmov	s15, r3
 8001876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800187a:	ed9f 6a20 	vldr	s12, [pc, #128]	; 80018fc <calc_temperature+0x100>
 800187e:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	8bdb      	ldrh	r3, [r3, #30]
 8001886:	ee07 3a90 	vmov	s15, r3
 800188a:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 800188e:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8001900 <calc_temperature+0x104>
 8001892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001896:	ee76 7ae7 	vsub.f32	s15, s13, s15
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 800189a:	ee27 7a27 	vmul.f32	s14, s14, s15
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 80018a4:	ee07 3a90 	vmov	s15, r3
 80018a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018ac:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80018b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
    var2 =
 80018b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018b8:	edc7 7a04 	vstr	s15, [r7, #16]

    /* t_fine value*/
    dev->calib.t_fine = (var1 + var2);
 80018bc:	ed97 7a05 	vldr	s14, [r7, #20]
 80018c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80018c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

    /* compensated temperature data*/
    calc_temp = ((dev->calib.t_fine) / 5120.0f);
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80018d4:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001904 <calc_temperature+0x108>
 80018d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018dc:	edc7 7a03 	vstr	s15, [r7, #12]

    return calc_temp;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	ee07 3a90 	vmov	s15, r3
}
 80018e6:	eeb0 0a67 	vmov.f32	s0, s15
 80018ea:	371c      	adds	r7, #28
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	46800000 	.word	0x46800000
 80018f8:	44800000 	.word	0x44800000
 80018fc:	48000000 	.word	0x48000000
 8001900:	46000000 	.word	0x46000000
 8001904:	45a00000 	.word	0x45a00000

08001908 <calc_pressure>:

/* @brief This internal API is used to calculate the pressure value. */
static float calc_pressure(uint32_t pres_adc, const struct bme68x_dev *dev)
{
 8001908:	b480      	push	{r7}
 800190a:	b087      	sub	sp, #28
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
    float var1;
    float var2;
    float var3;
    float calc_pres;

    var1 = (((float)dev->calib.t_fine / 2.0f) - 64000.0f);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8001918:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800191c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001920:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8001b5c <calc_pressure+0x254>
 8001924:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001928:	edc7 7a04 	vstr	s15, [r7, #16]
    var2 = var1 * var1 * (((float)dev->calib.par_p6) / (131072.0f));
 800192c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001930:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	f993 302e 	ldrsb.w	r3, [r3, #46]	; 0x2e
 800193a:	ee07 3a90 	vmov	s15, r3
 800193e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001942:	ed9f 6a87 	vldr	s12, [pc, #540]	; 8001b60 <calc_pressure+0x258>
 8001946:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800194a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800194e:	edc7 7a03 	vstr	s15, [r7, #12]
    var2 = var2 + (var1 * ((float)dev->calib.par_p5) * 2.0f);
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001958:	ee07 3a90 	vmov	s15, r3
 800195c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001960:	edd7 7a04 	vldr	s15, [r7, #16]
 8001964:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001968:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800196c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001970:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001974:	edc7 7a03 	vstr	s15, [r7, #12]
    var2 = (var2 / 4.0f) + (((float)dev->calib.par_p4) * 65536.0f);
 8001978:	edd7 7a03 	vldr	s15, [r7, #12]
 800197c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001980:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800198a:	ee07 3a90 	vmov	s15, r3
 800198e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001992:	eddf 6a74 	vldr	s13, [pc, #464]	; 8001b64 <calc_pressure+0x25c>
 8001996:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800199a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800199e:	edc7 7a03 	vstr	s15, [r7, #12]
    var1 = (((((float)dev->calib.par_p3 * var1 * var1) / 16384.0f) + ((float)dev->calib.par_p2 * var1)) / 524288.0f);
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
 80019a8:	ee07 3a90 	vmov	s15, r3
 80019ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80019b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80019bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019c0:	eddf 6a69 	vldr	s13, [pc, #420]	; 8001b68 <calc_pressure+0x260>
 80019c4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80019ce:	ee07 3a90 	vmov	s15, r3
 80019d2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80019d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80019da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019e2:	eddf 6a62 	vldr	s13, [pc, #392]	; 8001b6c <calc_pressure+0x264>
 80019e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019ea:	edc7 7a04 	vstr	s15, [r7, #16]
    var1 = ((1.0f + (var1 / 32768.0f)) * ((float)dev->calib.par_p1));
 80019ee:	ed97 7a04 	vldr	s14, [r7, #16]
 80019f2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8001b70 <calc_pressure+0x268>
 80019f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001a06:	ee07 3a90 	vmov	s15, r3
 8001a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a12:	edc7 7a04 	vstr	s15, [r7, #16]
    calc_pres = (1048576.0f - ((float)pres_adc));
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	ee07 3a90 	vmov	s15, r3
 8001a1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a20:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001b74 <calc_pressure+0x26c>
 8001a24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a28:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Avoid exception caused by division by zero */
    if ((int)var1 != 0)
 8001a2c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a34:	ee17 3a90 	vmov	r3, s15
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f000 8081 	beq.w	8001b40 <calc_pressure+0x238>
    {
        calc_pres = (((calc_pres - (var2 / 4096.0f)) * 6250.0f) / var1);
 8001a3e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a42:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8001b78 <calc_pressure+0x270>
 8001a46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a4a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a52:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001b7c <calc_pressure+0x274>
 8001a56:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001a5a:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a62:	edc7 7a05 	vstr	s15, [r7, #20]
        var1 = (((float)dev->calib.par_p9) * calc_pres * calc_pres) / 2147483648.0f;
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8001a6c:	ee07 3a90 	vmov	s15, r3
 8001a70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a74:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a7c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a84:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8001b80 <calc_pressure+0x278>
 8001a88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a8c:	edc7 7a04 	vstr	s15, [r7, #16]
        var2 = calc_pres * (((float)dev->calib.par_p8) / 32768.0f);
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8001a96:	ee07 3a90 	vmov	s15, r3
 8001a9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a9e:	eddf 6a34 	vldr	s13, [pc, #208]	; 8001b70 <calc_pressure+0x268>
 8001aa2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aa6:	ed97 7a05 	vldr	s14, [r7, #20]
 8001aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aae:	edc7 7a03 	vstr	s15, [r7, #12]
        var3 = ((calc_pres / 256.0f) * (calc_pres / 256.0f) * (calc_pres / 256.0f) * (dev->calib.par_p10 / 131072.0f));
 8001ab2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ab6:	eddf 6a33 	vldr	s13, [pc, #204]	; 8001b84 <calc_pressure+0x27c>
 8001aba:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001abe:	edd7 6a05 	vldr	s13, [r7, #20]
 8001ac2:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8001b84 <calc_pressure+0x27c>
 8001ac6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001aca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ace:	edd7 6a05 	vldr	s13, [r7, #20]
 8001ad2:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8001b84 <calc_pressure+0x27c>
 8001ad6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001ada:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ae4:	ee07 3a90 	vmov	s15, r3
 8001ae8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001aec:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8001b60 <calc_pressure+0x258>
 8001af0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001af4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001af8:	edc7 7a02 	vstr	s15, [r7, #8]
        calc_pres = (calc_pres + (var1 + var2 + var3 + ((float)dev->calib.par_p7 * 128.0f)) / 16.0f);
 8001afc:	ed97 7a04 	vldr	s14, [r7, #16]
 8001b00:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b08:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	f993 302f 	ldrsb.w	r3, [r3, #47]	; 0x2f
 8001b16:	ee07 3a90 	vmov	s15, r3
 8001b1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b1e:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001b88 <calc_pressure+0x280>
 8001b22:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001b26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b2a:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001b2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b32:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b3a:	edc7 7a05 	vstr	s15, [r7, #20]
 8001b3e:	e002      	b.n	8001b46 <calc_pressure+0x23e>
    }
    else
    {
        calc_pres = 0;
 8001b40:	f04f 0300 	mov.w	r3, #0
 8001b44:	617b      	str	r3, [r7, #20]
    }

    return calc_pres;
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	ee07 3a90 	vmov	s15, r3
}
 8001b4c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b50:	371c      	adds	r7, #28
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	477a0000 	.word	0x477a0000
 8001b60:	48000000 	.word	0x48000000
 8001b64:	47800000 	.word	0x47800000
 8001b68:	46800000 	.word	0x46800000
 8001b6c:	49000000 	.word	0x49000000
 8001b70:	47000000 	.word	0x47000000
 8001b74:	49800000 	.word	0x49800000
 8001b78:	45800000 	.word	0x45800000
 8001b7c:	45c35000 	.word	0x45c35000
 8001b80:	4f000000 	.word	0x4f000000
 8001b84:	43800000 	.word	0x43800000
 8001b88:	43000000 	.word	0x43000000

08001b8c <calc_humidity>:

/* This internal API is used to calculate the humidity in integer */
static float calc_humidity(uint16_t hum_adc, const struct bme68x_dev *dev)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b089      	sub	sp, #36	; 0x24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	6039      	str	r1, [r7, #0]
 8001b96:	80fb      	strh	r3, [r7, #6]
    float var3;
    float var4;
    float temp_comp;

    /* compensated temperature data*/
    temp_comp = ((dev->calib.t_fine) / 5120.0f);
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8001b9e:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8001d08 <calc_humidity+0x17c>
 8001ba2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ba6:	edc7 7a06 	vstr	s15, [r7, #24]
    var1 = (float)((float)hum_adc) -
 8001baa:	88fb      	ldrh	r3, [r7, #6]
 8001bac:	ee07 3a90 	vmov	s15, r3
 8001bb0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
           (((float)dev->calib.par_h1 * 16.0f) + (((float)dev->calib.par_h3 / 2.0f) * temp_comp));
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	8a1b      	ldrh	r3, [r3, #16]
 8001bb8:	ee07 3a90 	vmov	s15, r3
 8001bbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bc0:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001bc4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8001bce:	ee07 3a90 	vmov	s15, r3
 8001bd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bd6:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001bda:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8001bde:	edd7 7a06 	vldr	s15, [r7, #24]
 8001be2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
    var1 = (float)((float)hum_adc) -
 8001bea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bee:	edc7 7a05 	vstr	s15, [r7, #20]
    var2 = var1 *
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	8a5b      	ldrh	r3, [r3, #18]
 8001bf6:	ee07 3a90 	vmov	s15, r3
 8001bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bfe:	eddf 6a43 	vldr	s13, [pc, #268]	; 8001d0c <calc_humidity+0x180>
 8001c02:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8001c0c:	ee07 3a90 	vmov	s15, r3
 8001c10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c14:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8001d10 <calc_humidity+0x184>
 8001c18:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001c1c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c28:	ee77 6aa6 	vadd.f32	s13, s15, s13
                     (((float)dev->calib.par_h5 / 1048576.0f) * temp_comp * temp_comp))));
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001c32:	ee07 3a90 	vmov	s15, r3
 8001c36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c3a:	eddf 5a36 	vldr	s11, [pc, #216]	; 8001d14 <calc_humidity+0x188>
 8001c3e:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8001c42:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c46:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c4a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c4e:	ee66 7a27 	vmul.f32	s15, s12, s15
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
 8001c52:	ee76 7aa7 	vadd.f32	s15, s13, s15
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
 8001c56:	ee67 7a27 	vmul.f32	s15, s14, s15
    var2 = var1 *
 8001c5a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c62:	edc7 7a04 	vstr	s15, [r7, #16]
    var3 = (float)dev->calib.par_h6 / 16384.0f;
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	7ddb      	ldrb	r3, [r3, #23]
 8001c6a:	ee07 3a90 	vmov	s15, r3
 8001c6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c72:	eddf 6a27 	vldr	s13, [pc, #156]	; 8001d10 <calc_humidity+0x184>
 8001c76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c7a:	edc7 7a03 	vstr	s15, [r7, #12]
    var4 = (float)dev->calib.par_h7 / 2097152.0f;
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8001c84:	ee07 3a90 	vmov	s15, r3
 8001c88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c8c:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001d18 <calc_humidity+0x18c>
 8001c90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c94:	edc7 7a02 	vstr	s15, [r7, #8]
    calc_hum = var2 + ((var3 + (var4 * temp_comp)) * var2 * var2);
 8001c98:	ed97 7a02 	vldr	s14, [r7, #8]
 8001c9c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ca0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ca4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ca8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cac:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cb4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cbc:	ed97 7a04 	vldr	s14, [r7, #16]
 8001cc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cc4:	edc7 7a07 	vstr	s15, [r7, #28]
    if (calc_hum > 100.0f)
 8001cc8:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ccc:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001d1c <calc_humidity+0x190>
 8001cd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd8:	dd02      	ble.n	8001ce0 <calc_humidity+0x154>
    {
        calc_hum = 100.0f;
 8001cda:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <calc_humidity+0x194>)
 8001cdc:	61fb      	str	r3, [r7, #28]
 8001cde:	e009      	b.n	8001cf4 <calc_humidity+0x168>
    }
    else if (calc_hum < 0.0f)
 8001ce0:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ce4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cec:	d502      	bpl.n	8001cf4 <calc_humidity+0x168>
    {
        calc_hum = 0.0f;
 8001cee:	f04f 0300 	mov.w	r3, #0
 8001cf2:	61fb      	str	r3, [r7, #28]
    }

    return calc_hum;
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	ee07 3a90 	vmov	s15, r3
}
 8001cfa:	eeb0 0a67 	vmov.f32	s0, s15
 8001cfe:	3724      	adds	r7, #36	; 0x24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	45a00000 	.word	0x45a00000
 8001d0c:	48800000 	.word	0x48800000
 8001d10:	46800000 	.word	0x46800000
 8001d14:	49800000 	.word	0x49800000
 8001d18:	4a000000 	.word	0x4a000000
 8001d1c:	42c80000 	.word	0x42c80000
 8001d20:	42c80000 	.word	0x42c80000

08001d24 <calc_gas_resistance_low>:

/* This internal API is used to calculate the gas resistance low value in float */
static float calc_gas_resistance_low(uint16_t gas_res_adc, uint8_t gas_range, const struct bme68x_dev *dev)
{
 8001d24:	b4b0      	push	{r4, r5, r7}
 8001d26:	b0a9      	sub	sp, #164	; 0xa4
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	603a      	str	r2, [r7, #0]
 8001d2e:	80fb      	strh	r3, [r7, #6]
 8001d30:	460b      	mov	r3, r1
 8001d32:	717b      	strb	r3, [r7, #5]
    float calc_gas_res;
    float var1;
    float var2;
    float var3;
    float gas_res_f = gas_res_adc;
 8001d34:	88fb      	ldrh	r3, [r7, #6]
 8001d36:	ee07 3a90 	vmov	s15, r3
 8001d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d3e:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
    float gas_range_f = (1U << gas_range); /*lint !e790 / Suspicious truncation, integral to float */
 8001d42:	797b      	ldrb	r3, [r7, #5]
 8001d44:	2201      	movs	r2, #1
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	ee07 3a90 	vmov	s15, r3
 8001d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d52:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
    const float lookup_k1_range[16] = {
 8001d56:	4b3e      	ldr	r3, [pc, #248]	; (8001e50 <calc_gas_resistance_low+0x12c>)
 8001d58:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8001d5c:	461d      	mov	r5, r3
 8001d5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d6a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001d6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, -1.0f, 0.0f, -0.8f, 0.0f, 0.0f, -0.2f, -0.5f, 0.0f, -1.0f, 0.0f, 0.0f
    };
    const float lookup_k2_range[16] = {
 8001d72:	4b38      	ldr	r3, [pc, #224]	; (8001e54 <calc_gas_resistance_low+0x130>)
 8001d74:	f107 0408 	add.w	r4, r7, #8
 8001d78:	461d      	mov	r5, r3
 8001d7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d86:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001d8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0.0f, 0.0f, 0.0f, 0.0f, 0.1f, 0.7f, 0.0f, -0.8f, -0.1f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f
    };

    var1 = (1340.0f + (5.0f * dev->calib.range_sw_err));
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	f993 303e 	ldrsb.w	r3, [r3, #62]	; 0x3e
 8001d94:	ee07 3a90 	vmov	s15, r3
 8001d98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d9c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001da0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001da4:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001e58 <calc_gas_resistance_low+0x134>
 8001da8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001dac:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
    var2 = (var1) * (1.0f + lookup_k1_range[gas_range] / 100.0f);
 8001db0:	797b      	ldrb	r3, [r7, #5]
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	33a0      	adds	r3, #160	; 0xa0
 8001db6:	443b      	add	r3, r7
 8001db8:	3b58      	subs	r3, #88	; 0x58
 8001dba:	ed93 7a00 	vldr	s14, [r3]
 8001dbe:	eddf 6a27 	vldr	s13, [pc, #156]	; 8001e5c <calc_gas_resistance_low+0x138>
 8001dc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001dca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001dce:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8001dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dd6:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
    var3 = 1.0f + (lookup_k2_range[gas_range] / 100.0f);
 8001dda:	797b      	ldrb	r3, [r7, #5]
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	33a0      	adds	r3, #160	; 0xa0
 8001de0:	443b      	add	r3, r7
 8001de2:	3b98      	subs	r3, #152	; 0x98
 8001de4:	ed93 7a00 	vldr	s14, [r3]
 8001de8:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001e5c <calc_gas_resistance_low+0x138>
 8001dec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001df0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001df4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001df8:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
    calc_gas_res = 1.0f / (float)(var3 * (0.000000125f) * gas_range_f * (((gas_res_f - 512.0f) / var2) + 1.0f));
 8001dfc:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001e00:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001e60 <calc_gas_resistance_low+0x13c>
 8001e04:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e08:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001e0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e10:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001e14:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001e64 <calc_gas_resistance_low+0x140>
 8001e18:	ee37 6ae6 	vsub.f32	s12, s15, s13
 8001e1c:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 8001e20:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001e24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e38:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88

    return calc_gas_res;
 8001e3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e40:	ee07 3a90 	vmov	s15, r3
}
 8001e44:	eeb0 0a67 	vmov.f32	s0, s15
 8001e48:	37a4      	adds	r7, #164	; 0xa4
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bcb0      	pop	{r4, r5, r7}
 8001e4e:	4770      	bx	lr
 8001e50:	080099f0 	.word	0x080099f0
 8001e54:	08009a30 	.word	0x08009a30
 8001e58:	44a78000 	.word	0x44a78000
 8001e5c:	42c80000 	.word	0x42c80000
 8001e60:	340637bd 	.word	0x340637bd
 8001e64:	44000000 	.word	0x44000000

08001e68 <calc_gas_resistance_high>:

/* This internal API is used to calculate the gas resistance value in float */
static float calc_gas_resistance_high(uint16_t gas_res_adc, uint8_t gas_range)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b087      	sub	sp, #28
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	460a      	mov	r2, r1
 8001e72:	80fb      	strh	r3, [r7, #6]
 8001e74:	4613      	mov	r3, r2
 8001e76:	717b      	strb	r3, [r7, #5]
    float calc_gas_res;
    uint32_t var1 = UINT32_C(262144) >> gas_range;
 8001e78:	797b      	ldrb	r3, [r7, #5]
 8001e7a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e82:	617b      	str	r3, [r7, #20]
    int32_t var2 = (int32_t)gas_res_adc - INT32_C(512);
 8001e84:	88fb      	ldrh	r3, [r7, #6]
 8001e86:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001e8a:	613b      	str	r3, [r7, #16]

    var2 *= INT32_C(3);
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	4413      	add	r3, r2
 8001e94:	613b      	str	r3, [r7, #16]
    var2 = INT32_C(4096) + var2;
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e9c:	613b      	str	r3, [r7, #16]

    calc_gas_res = 1000000.0f * (float)var1 / (float)var2;
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	ee07 3a90 	vmov	s15, r3
 8001ea4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ea8:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001ed8 <calc_gas_resistance_high+0x70>
 8001eac:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	ee07 3a90 	vmov	s15, r3
 8001eb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001eba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ebe:	edc7 7a03 	vstr	s15, [r7, #12]

    return calc_gas_res;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	ee07 3a90 	vmov	s15, r3
}
 8001ec8:	eeb0 0a67 	vmov.f32	s0, s15
 8001ecc:	371c      	adds	r7, #28
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	49742400 	.word	0x49742400

08001edc <calc_res_heat>:

/* This internal API is used to calculate the heater resistance value using float */
static uint8_t calc_res_heat(uint16_t temp, const struct bme68x_dev *dev)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b08b      	sub	sp, #44	; 0x2c
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	81fb      	strh	r3, [r7, #14]
    float var3;
    float var4;
    float var5;
    uint8_t res_heat;

    if (temp > 400) /* Cap temperature */
 8001ee8:	89fb      	ldrh	r3, [r7, #14]
 8001eea:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001eee:	d902      	bls.n	8001ef6 <calc_res_heat+0x1a>
    {
        temp = 400;
 8001ef0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001ef4:	81fb      	strh	r3, [r7, #14]
    }

    var1 = (((float)dev->calib.par_gh1 / (16.0f)) + 49.0f);
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	f993 3019 	ldrsb.w	r3, [r3, #25]
 8001efc:	ee07 3a90 	vmov	s15, r3
 8001f00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f04:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001f08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f0c:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8002020 <calc_res_heat+0x144>
 8001f10:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f14:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    var2 = ((((float)dev->calib.par_gh2 / (32768.0f)) * (0.0005f)) + 0.00235f);
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001f1e:	ee07 3a90 	vmov	s15, r3
 8001f22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f26:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8002024 <calc_res_heat+0x148>
 8001f2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f2e:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8002028 <calc_res_heat+0x14c>
 8001f32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f36:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800202c <calc_res_heat+0x150>
 8001f3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f3e:	edc7 7a08 	vstr	s15, [r7, #32]
    var3 = ((float)dev->calib.par_gh3 / (1024.0f));
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	f993 301c 	ldrsb.w	r3, [r3, #28]
 8001f48:	ee07 3a90 	vmov	s15, r3
 8001f4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f50:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002030 <calc_res_heat+0x154>
 8001f54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f58:	edc7 7a07 	vstr	s15, [r7, #28]
    var4 = (var1 * (1.0f + (var2 * (float)temp)));
 8001f5c:	89fb      	ldrh	r3, [r7, #14]
 8001f5e:	ee07 3a90 	vmov	s15, r3
 8001f62:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f66:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f76:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f7e:	edc7 7a06 	vstr	s15, [r7, #24]
    var5 = (var4 + (var3 * (float)dev->amb_temp));
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8001f88:	ee07 3a90 	vmov	s15, r3
 8001f8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f90:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f98:	ed97 7a06 	vldr	s14, [r7, #24]
 8001f9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fa0:	edc7 7a05 	vstr	s15, [r7, #20]
    res_heat =
        (uint8_t)(3.4f *
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001faa:	ee07 3a90 	vmov	s15, r3
 8001fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fb2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001fb6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fba:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001fbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fc2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001fc6:	ee27 7a27 	vmul.f32	s14, s14, s15
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	f993 303d 	ldrsb.w	r3, [r3, #61]	; 0x3d
 8001fd0:	ee07 3a90 	vmov	s15, r3
 8001fd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fd8:	eddf 6a16 	vldr	s13, [pc, #88]	; 8002034 <calc_res_heat+0x158>
 8001fdc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001fe0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fe4:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8001fe8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001fec:	eec6 7a26 	vdiv.f32	s15, s12, s13
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 8001ff0:	ee67 7a27 	vmul.f32	s15, s14, s15
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 8001ff4:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001ff8:	ee77 7ac7 	vsub.f32	s15, s15, s14
        (uint8_t)(3.4f *
 8001ffc:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002038 <calc_res_heat+0x15c>
 8002000:	ee67 7a87 	vmul.f32	s15, s15, s14
    res_heat =
 8002004:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002008:	edc7 7a01 	vstr	s15, [r7, #4]
 800200c:	793b      	ldrb	r3, [r7, #4]
 800200e:	74fb      	strb	r3, [r7, #19]
                   25));

    return res_heat;
 8002010:	7cfb      	ldrb	r3, [r7, #19]
}
 8002012:	4618      	mov	r0, r3
 8002014:	372c      	adds	r7, #44	; 0x2c
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	42440000 	.word	0x42440000
 8002024:	47000000 	.word	0x47000000
 8002028:	3a03126f 	.word	0x3a03126f
 800202c:	3b1a0275 	.word	0x3b1a0275
 8002030:	44800000 	.word	0x44800000
 8002034:	3b03126f 	.word	0x3b03126f
 8002038:	4059999a 	.word	0x4059999a

0800203c <calc_gas_wait>:

#endif

/* This internal API is used to calculate the gas wait */
static uint8_t calc_gas_wait(uint16_t dur)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	80fb      	strh	r3, [r7, #6]
    uint8_t factor = 0;
 8002046:	2300      	movs	r3, #0
 8002048:	73fb      	strb	r3, [r7, #15]
    uint8_t durval;

    if (dur >= 0xfc0)
 800204a:	88fb      	ldrh	r3, [r7, #6]
 800204c:	f5b3 6f7c 	cmp.w	r3, #4032	; 0xfc0
 8002050:	d308      	bcc.n	8002064 <calc_gas_wait+0x28>
    {
        durval = 0xff; /* Max duration*/
 8002052:	23ff      	movs	r3, #255	; 0xff
 8002054:	73bb      	strb	r3, [r7, #14]
 8002056:	e00f      	b.n	8002078 <calc_gas_wait+0x3c>
    }
    else
    {
        while (dur > 0x3F)
        {
            dur = dur / 4;
 8002058:	88fb      	ldrh	r3, [r7, #6]
 800205a:	089b      	lsrs	r3, r3, #2
 800205c:	80fb      	strh	r3, [r7, #6]
            factor += 1;
 800205e:	7bfb      	ldrb	r3, [r7, #15]
 8002060:	3301      	adds	r3, #1
 8002062:	73fb      	strb	r3, [r7, #15]
        while (dur > 0x3F)
 8002064:	88fb      	ldrh	r3, [r7, #6]
 8002066:	2b3f      	cmp	r3, #63	; 0x3f
 8002068:	d8f6      	bhi.n	8002058 <calc_gas_wait+0x1c>
        }

        durval = (uint8_t)(dur + (factor * 64));
 800206a:	88fb      	ldrh	r3, [r7, #6]
 800206c:	b2da      	uxtb	r2, r3
 800206e:	7bfb      	ldrb	r3, [r7, #15]
 8002070:	019b      	lsls	r3, r3, #6
 8002072:	b2db      	uxtb	r3, r3
 8002074:	4413      	add	r3, r2
 8002076:	73bb      	strb	r3, [r7, #14]
    }

    return durval;
 8002078:	7bbb      	ldrb	r3, [r7, #14]
}
 800207a:	4618      	mov	r0, r3
 800207c:	3714      	adds	r7, #20
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <read_field_data>:

/* This internal API is used to read a single data of the sensor */
static int8_t read_field_data(uint8_t index, struct bme68x_data *data, struct bme68x_dev *dev)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b08e      	sub	sp, #56	; 0x38
 800208a:	af00      	add	r7, sp, #0
 800208c:	4603      	mov	r3, r0
 800208e:	60b9      	str	r1, [r7, #8]
 8002090:	607a      	str	r2, [r7, #4]
 8002092:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME68X_OK;
 8002094:	2300      	movs	r3, #0
 8002096:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint8_t buff[BME68X_LEN_FIELD] = { 0 };
 800209a:	2300      	movs	r3, #0
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	f107 0314 	add.w	r3, r7, #20
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	605a      	str	r2, [r3, #4]
 80020a8:	609a      	str	r2, [r3, #8]
 80020aa:	731a      	strb	r2, [r3, #12]
    uint8_t gas_range_l, gas_range_h;
    uint32_t adc_temp;
    uint32_t adc_pres;
    uint16_t adc_hum;
    uint16_t adc_gas_res_low, adc_gas_res_high;
    uint8_t tries = 5;
 80020ac:	2305      	movs	r3, #5
 80020ae:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    while ((tries) && (rslt == BME68X_OK))
 80020b2:	e123      	b.n	80022fc <read_field_data+0x276>
    {
        rslt = bme68x_get_regs(((uint8_t)(BME68X_REG_FIELD0 + (index * BME68X_LEN_FIELD_OFFSET))),
 80020b4:	7bfb      	ldrb	r3, [r7, #15]
 80020b6:	461a      	mov	r2, r3
 80020b8:	0112      	lsls	r2, r2, #4
 80020ba:	4413      	add	r3, r2
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	331d      	adds	r3, #29
 80020c0:	b2d8      	uxtb	r0, r3
 80020c2:	f107 0110 	add.w	r1, r7, #16
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2211      	movs	r2, #17
 80020ca:	f7ff f803 	bl	80010d4 <bme68x_get_regs>
 80020ce:	4603      	mov	r3, r0
 80020d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                               buff,
                               (uint16_t)BME68X_LEN_FIELD,
                               dev);
        if (!data)
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d103      	bne.n	80020e2 <read_field_data+0x5c>
        {
            rslt = BME68X_E_NULL_PTR;
 80020da:	23ff      	movs	r3, #255	; 0xff
 80020dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            break;
 80020e0:	e115      	b.n	800230e <read_field_data+0x288>
        }

        data->status = buff[0] & BME68X_NEW_DATA_MSK;
 80020e2:	7c3b      	ldrb	r3, [r7, #16]
 80020e4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80020e8:	b2da      	uxtb	r2, r3
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	701a      	strb	r2, [r3, #0]
        data->gas_index = buff[0] & BME68X_GAS_INDEX_MSK;
 80020ee:	7c3b      	ldrb	r3, [r7, #16]
 80020f0:	f003 030f 	and.w	r3, r3, #15
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	705a      	strb	r2, [r3, #1]
        data->meas_index = buff[1];
 80020fa:	7c7a      	ldrb	r2, [r7, #17]
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	709a      	strb	r2, [r3, #2]

        /* read the raw data from the sensor */
        adc_pres = (uint32_t)(((uint32_t)buff[2] * 4096) | ((uint32_t)buff[3] * 16) | ((uint32_t)buff[4] / 16));
 8002100:	7cbb      	ldrb	r3, [r7, #18]
 8002102:	031a      	lsls	r2, r3, #12
 8002104:	7cfb      	ldrb	r3, [r7, #19]
 8002106:	011b      	lsls	r3, r3, #4
 8002108:	4313      	orrs	r3, r2
 800210a:	7d3a      	ldrb	r2, [r7, #20]
 800210c:	0912      	lsrs	r2, r2, #4
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	4313      	orrs	r3, r2
 8002112:	633b      	str	r3, [r7, #48]	; 0x30
        adc_temp = (uint32_t)(((uint32_t)buff[5] * 4096) | ((uint32_t)buff[6] * 16) | ((uint32_t)buff[7] / 16));
 8002114:	7d7b      	ldrb	r3, [r7, #21]
 8002116:	031a      	lsls	r2, r3, #12
 8002118:	7dbb      	ldrb	r3, [r7, #22]
 800211a:	011b      	lsls	r3, r3, #4
 800211c:	4313      	orrs	r3, r2
 800211e:	7dfa      	ldrb	r2, [r7, #23]
 8002120:	0912      	lsrs	r2, r2, #4
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	4313      	orrs	r3, r2
 8002126:	62fb      	str	r3, [r7, #44]	; 0x2c
        adc_hum = (uint16_t)(((uint32_t)buff[8] * 256) | (uint32_t)buff[9]);
 8002128:	7e3b      	ldrb	r3, [r7, #24]
 800212a:	b29b      	uxth	r3, r3
 800212c:	021b      	lsls	r3, r3, #8
 800212e:	b29a      	uxth	r2, r3
 8002130:	7e7b      	ldrb	r3, [r7, #25]
 8002132:	b29b      	uxth	r3, r3
 8002134:	4313      	orrs	r3, r2
 8002136:	857b      	strh	r3, [r7, #42]	; 0x2a
        adc_gas_res_low = (uint16_t)((uint32_t)buff[13] * 4 | (((uint32_t)buff[14]) / 64));
 8002138:	7f7b      	ldrb	r3, [r7, #29]
 800213a:	b29b      	uxth	r3, r3
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	b29a      	uxth	r2, r3
 8002140:	7fbb      	ldrb	r3, [r7, #30]
 8002142:	099b      	lsrs	r3, r3, #6
 8002144:	b2db      	uxtb	r3, r3
 8002146:	b29b      	uxth	r3, r3
 8002148:	4313      	orrs	r3, r2
 800214a:	853b      	strh	r3, [r7, #40]	; 0x28
        adc_gas_res_high = (uint16_t)((uint32_t)buff[15] * 4 | (((uint32_t)buff[16]) / 64));
 800214c:	7ffb      	ldrb	r3, [r7, #31]
 800214e:	b29b      	uxth	r3, r3
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	b29a      	uxth	r2, r3
 8002154:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002158:	099b      	lsrs	r3, r3, #6
 800215a:	b2db      	uxtb	r3, r3
 800215c:	b29b      	uxth	r3, r3
 800215e:	4313      	orrs	r3, r2
 8002160:	84fb      	strh	r3, [r7, #38]	; 0x26
        gas_range_l = buff[14] & BME68X_GAS_RANGE_MSK;
 8002162:	7fbb      	ldrb	r3, [r7, #30]
 8002164:	f003 030f 	and.w	r3, r3, #15
 8002168:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        gas_range_h = buff[16] & BME68X_GAS_RANGE_MSK;
 800216c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002170:	f003 030f 	and.w	r3, r3, #15
 8002174:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d11c      	bne.n	80021ba <read_field_data+0x134>
        {
            data->status |= buff[16] & BME68X_GASM_VALID_MSK;
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	b25a      	sxtb	r2, r3
 8002186:	f897 3020 	ldrb.w	r3, [r7, #32]
 800218a:	b25b      	sxtb	r3, r3
 800218c:	f003 0320 	and.w	r3, r3, #32
 8002190:	b25b      	sxtb	r3, r3
 8002192:	4313      	orrs	r3, r2
 8002194:	b25b      	sxtb	r3, r3
 8002196:	b2da      	uxtb	r2, r3
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	701a      	strb	r2, [r3, #0]
            data->status |= buff[16] & BME68X_HEAT_STAB_MSK;
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	b25a      	sxtb	r2, r3
 80021a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80021a6:	b25b      	sxtb	r3, r3
 80021a8:	f003 0310 	and.w	r3, r3, #16
 80021ac:	b25b      	sxtb	r3, r3
 80021ae:	4313      	orrs	r3, r2
 80021b0:	b25b      	sxtb	r3, r3
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	701a      	strb	r2, [r3, #0]
 80021b8:	e019      	b.n	80021ee <read_field_data+0x168>
        }
        else
        {
            data->status |= buff[14] & BME68X_GASM_VALID_MSK;
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	b25a      	sxtb	r2, r3
 80021c0:	7fbb      	ldrb	r3, [r7, #30]
 80021c2:	b25b      	sxtb	r3, r3
 80021c4:	f003 0320 	and.w	r3, r3, #32
 80021c8:	b25b      	sxtb	r3, r3
 80021ca:	4313      	orrs	r3, r2
 80021cc:	b25b      	sxtb	r3, r3
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	701a      	strb	r2, [r3, #0]
            data->status |= buff[14] & BME68X_HEAT_STAB_MSK;
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	b25a      	sxtb	r2, r3
 80021da:	7fbb      	ldrb	r3, [r7, #30]
 80021dc:	b25b      	sxtb	r3, r3
 80021de:	f003 0310 	and.w	r3, r3, #16
 80021e2:	b25b      	sxtb	r3, r3
 80021e4:	4313      	orrs	r3, r2
 80021e6:	b25b      	sxtb	r3, r3
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	701a      	strb	r2, [r3, #0]
        }

        if ((data->status & BME68X_NEW_DATA_MSK) && (rslt == BME68X_OK))
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	b25b      	sxtb	r3, r3
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	da70      	bge.n	80022da <read_field_data+0x254>
 80021f8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d16c      	bne.n	80022da <read_field_data+0x254>
        {
            rslt = bme68x_get_regs(BME68X_REG_RES_HEAT0 + data->gas_index, &data->res_heat, 1, dev);
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	785b      	ldrb	r3, [r3, #1]
 8002204:	335a      	adds	r3, #90	; 0x5a
 8002206:	b2d8      	uxtb	r0, r3
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	1cd9      	adds	r1, r3, #3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f7fe ff60 	bl	80010d4 <bme68x_get_regs>
 8002214:	4603      	mov	r3, r0
 8002216:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            if (rslt == BME68X_OK)
 800221a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10c      	bne.n	800223c <read_field_data+0x1b6>
            {
                rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0 + data->gas_index, &data->idac, 1, dev);
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	785b      	ldrb	r3, [r3, #1]
 8002226:	3350      	adds	r3, #80	; 0x50
 8002228:	b2d8      	uxtb	r0, r3
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	1d19      	adds	r1, r3, #4
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2201      	movs	r2, #1
 8002232:	f7fe ff4f 	bl	80010d4 <bme68x_get_regs>
 8002236:	4603      	mov	r3, r0
 8002238:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            }

            if (rslt == BME68X_OK)
 800223c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002240:	2b00      	cmp	r3, #0
 8002242:	d10c      	bne.n	800225e <read_field_data+0x1d8>
            {
                rslt = bme68x_get_regs(BME68X_REG_GAS_WAIT0 + data->gas_index, &data->gas_wait, 1, dev);
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	785b      	ldrb	r3, [r3, #1]
 8002248:	3364      	adds	r3, #100	; 0x64
 800224a:	b2d8      	uxtb	r0, r3
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	1d59      	adds	r1, r3, #5
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f7fe ff3e 	bl	80010d4 <bme68x_get_regs>
 8002258:	4603      	mov	r3, r0
 800225a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            }

            if (rslt == BME68X_OK)
 800225e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002262:	2b00      	cmp	r3, #0
 8002264:	d139      	bne.n	80022da <read_field_data+0x254>
            {
                data->temperature = calc_temperature(adc_temp, dev);
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800226a:	f7ff fac7 	bl	80017fc <calc_temperature>
 800226e:	eef0 7a40 	vmov.f32	s15, s0
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	edc3 7a02 	vstr	s15, [r3, #8]
                data->pressure = calc_pressure(adc_pres, dev);
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800227c:	f7ff fb44 	bl	8001908 <calc_pressure>
 8002280:	eef0 7a40 	vmov.f32	s15, s0
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	edc3 7a03 	vstr	s15, [r3, #12]
                data->humidity = calc_humidity(adc_hum, dev);
 800228a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800228c:	6879      	ldr	r1, [r7, #4]
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff fc7c 	bl	8001b8c <calc_humidity>
 8002294:	eef0 7a40 	vmov.f32	s15, s0
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	edc3 7a04 	vstr	s15, [r3, #16]
                if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d10c      	bne.n	80022c0 <read_field_data+0x23a>
                {
                    data->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
 80022a6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80022aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80022ac:	4611      	mov	r1, r2
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff fdda 	bl	8001e68 <calc_gas_resistance_high>
 80022b4:	eef0 7a40 	vmov.f32	s15, s0
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	edc3 7a05 	vstr	s15, [r3, #20]
                else
                {
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
                }

                break;
 80022be:	e026      	b.n	800230e <read_field_data+0x288>
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 80022c0:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80022c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff fd2b 	bl	8001d24 <calc_gas_resistance_low>
 80022ce:	eef0 7a40 	vmov.f32	s15, s0
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	edc3 7a05 	vstr	s15, [r3, #20]
                break;
 80022d8:	e019      	b.n	800230e <read_field_data+0x288>
            }
        }

        if (rslt == BME68X_OK)
 80022da:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d107      	bne.n	80022f2 <read_field_data+0x26c>
        {
            dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	6852      	ldr	r2, [r2, #4]
 80022ea:	4611      	mov	r1, r2
 80022ec:	f242 7010 	movw	r0, #10000	; 0x2710
 80022f0:	4798      	blx	r3
        }

        tries--;
 80022f2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80022f6:	3b01      	subs	r3, #1
 80022f8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    while ((tries) && (rslt == BME68X_OK))
 80022fc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002300:	2b00      	cmp	r3, #0
 8002302:	d004      	beq.n	800230e <read_field_data+0x288>
 8002304:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002308:	2b00      	cmp	r3, #0
 800230a:	f43f aed3 	beq.w	80020b4 <read_field_data+0x2e>
    }

    return rslt;
 800230e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8002312:	4618      	mov	r0, r3
 8002314:	3738      	adds	r7, #56	; 0x38
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <read_all_field_data>:

/* This internal API is used to read all data fields of the sensor */
static int8_t read_all_field_data(struct bme68x_data * const data[], struct bme68x_dev *dev)
{
 800231a:	b590      	push	{r4, r7, lr}
 800231c:	b09d      	sub	sp, #116	; 0x74
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
 8002322:	6039      	str	r1, [r7, #0]
    int8_t rslt = BME68X_OK;
 8002324:	2300      	movs	r3, #0
 8002326:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    uint8_t buff[BME68X_LEN_FIELD * 3] = { 0 };
 800232a:	2300      	movs	r3, #0
 800232c:	62bb      	str	r3, [r7, #40]	; 0x28
 800232e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002332:	222f      	movs	r2, #47	; 0x2f
 8002334:	2100      	movs	r1, #0
 8002336:	4618      	mov	r0, r3
 8002338:	f004 fc2e 	bl	8006b98 <memset>
    uint32_t adc_temp;
    uint32_t adc_pres;
    uint16_t adc_hum;
    uint16_t adc_gas_res_low, adc_gas_res_high;
    uint8_t off;
    uint8_t set_val[30] = { 0 }; /* idac, res_heat, gas_wait */
 800233c:	2300      	movs	r3, #0
 800233e:	60bb      	str	r3, [r7, #8]
 8002340:	f107 030c 	add.w	r3, r7, #12
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	605a      	str	r2, [r3, #4]
 800234a:	609a      	str	r2, [r3, #8]
 800234c:	60da      	str	r2, [r3, #12]
 800234e:	611a      	str	r2, [r3, #16]
 8002350:	615a      	str	r2, [r3, #20]
 8002352:	831a      	strh	r2, [r3, #24]
    uint8_t i;

    if (!data[0] && !data[1] && !data[2])
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10c      	bne.n	8002376 <read_all_field_data+0x5c>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3304      	adds	r3, #4
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d107      	bne.n	8002376 <read_all_field_data+0x5c>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3308      	adds	r3, #8
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d102      	bne.n	8002376 <read_all_field_data+0x5c>
    {
        rslt = BME68X_E_NULL_PTR;
 8002370:	23ff      	movs	r3, #255	; 0xff
 8002372:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }

    if (rslt == BME68X_OK)
 8002376:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800237a:	2b00      	cmp	r3, #0
 800237c:	d109      	bne.n	8002392 <read_all_field_data+0x78>
    {
        rslt = bme68x_get_regs(BME68X_REG_FIELD0, buff, (uint32_t) BME68X_LEN_FIELD * 3, dev);
 800237e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	2233      	movs	r2, #51	; 0x33
 8002386:	201d      	movs	r0, #29
 8002388:	f7fe fea4 	bl	80010d4 <bme68x_get_regs>
 800238c:	4603      	mov	r3, r0
 800238e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }

    if (rslt == BME68X_OK)
 8002392:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002396:	2b00      	cmp	r3, #0
 8002398:	d109      	bne.n	80023ae <read_all_field_data+0x94>
    {
        rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0, set_val, 30, dev);
 800239a:	f107 0108 	add.w	r1, r7, #8
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	221e      	movs	r2, #30
 80023a2:	2050      	movs	r0, #80	; 0x50
 80023a4:	f7fe fe96 	bl	80010d4 <bme68x_get_regs>
 80023a8:	4603      	mov	r3, r0
 80023aa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }

    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 80023ae:	2300      	movs	r3, #0
 80023b0:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 80023b4:	e1d4      	b.n	8002760 <read_all_field_data+0x446>
    {
        off = (uint8_t)(i * BME68X_LEN_FIELD);
 80023b6:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80023ba:	461a      	mov	r2, r3
 80023bc:	0112      	lsls	r2, r2, #4
 80023be:	4413      	add	r3, r2
 80023c0:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
        data[i]->status = buff[off] & BME68X_NEW_DATA_MSK;
 80023c4:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80023c8:	3370      	adds	r3, #112	; 0x70
 80023ca:	443b      	add	r3, r7
 80023cc:	f813 2c48 	ldrb.w	r2, [r3, #-72]
 80023d0:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	440b      	add	r3, r1
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	701a      	strb	r2, [r3, #0]
        data[i]->gas_index = buff[off] & BME68X_GAS_INDEX_MSK;
 80023e4:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80023e8:	3370      	adds	r3, #112	; 0x70
 80023ea:	443b      	add	r3, r7
 80023ec:	f813 2c48 	ldrb.w	r2, [r3, #-72]
 80023f0:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	440b      	add	r3, r1
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f002 020f 	and.w	r2, r2, #15
 8002400:	b2d2      	uxtb	r2, r2
 8002402:	705a      	strb	r2, [r3, #1]
        data[i]->meas_index = buff[off + 1];
 8002404:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002408:	1c5a      	adds	r2, r3, #1
 800240a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	440b      	add	r3, r1
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	3270      	adds	r2, #112	; 0x70
 8002418:	443a      	add	r2, r7
 800241a:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 800241e:	709a      	strb	r2, [r3, #2]

        /* read the raw data from the sensor */
        adc_pres =
            (uint32_t) (((uint32_t) buff[off + 2] * 4096) | ((uint32_t) buff[off + 3] * 16) |
 8002420:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002424:	3302      	adds	r3, #2
 8002426:	3370      	adds	r3, #112	; 0x70
 8002428:	443b      	add	r3, r7
 800242a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800242e:	031a      	lsls	r2, r3, #12
 8002430:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002434:	3303      	adds	r3, #3
 8002436:	3370      	adds	r3, #112	; 0x70
 8002438:	443b      	add	r3, r7
 800243a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800243e:	011b      	lsls	r3, r3, #4
 8002440:	4313      	orrs	r3, r2
                        ((uint32_t) buff[off + 4] / 16));
 8002442:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 8002446:	3204      	adds	r2, #4
 8002448:	3270      	adds	r2, #112	; 0x70
 800244a:	443a      	add	r2, r7
 800244c:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8002450:	0912      	lsrs	r2, r2, #4
 8002452:	b2d2      	uxtb	r2, r2
        adc_pres =
 8002454:	4313      	orrs	r3, r2
 8002456:	66bb      	str	r3, [r7, #104]	; 0x68
        adc_temp =
            (uint32_t) (((uint32_t) buff[off + 5] * 4096) | ((uint32_t) buff[off + 6] * 16) |
 8002458:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800245c:	3305      	adds	r3, #5
 800245e:	3370      	adds	r3, #112	; 0x70
 8002460:	443b      	add	r3, r7
 8002462:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002466:	031a      	lsls	r2, r3, #12
 8002468:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800246c:	3306      	adds	r3, #6
 800246e:	3370      	adds	r3, #112	; 0x70
 8002470:	443b      	add	r3, r7
 8002472:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002476:	011b      	lsls	r3, r3, #4
 8002478:	4313      	orrs	r3, r2
                        ((uint32_t) buff[off + 7] / 16));
 800247a:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 800247e:	3207      	adds	r2, #7
 8002480:	3270      	adds	r2, #112	; 0x70
 8002482:	443a      	add	r2, r7
 8002484:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8002488:	0912      	lsrs	r2, r2, #4
 800248a:	b2d2      	uxtb	r2, r2
        adc_temp =
 800248c:	4313      	orrs	r3, r2
 800248e:	667b      	str	r3, [r7, #100]	; 0x64
        adc_hum = (uint16_t) (((uint32_t) buff[off + 8] * 256) | (uint32_t) buff[off + 9]);
 8002490:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002494:	3308      	adds	r3, #8
 8002496:	3370      	adds	r3, #112	; 0x70
 8002498:	443b      	add	r3, r7
 800249a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800249e:	b29b      	uxth	r3, r3
 80024a0:	021b      	lsls	r3, r3, #8
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80024a8:	3309      	adds	r3, #9
 80024aa:	3370      	adds	r3, #112	; 0x70
 80024ac:	443b      	add	r3, r7
 80024ae:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	4313      	orrs	r3, r2
 80024b6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        adc_gas_res_low = (uint16_t) ((uint32_t) buff[off + 13] * 4 | (((uint32_t) buff[off + 14]) / 64));
 80024ba:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80024be:	330d      	adds	r3, #13
 80024c0:	3370      	adds	r3, #112	; 0x70
 80024c2:	443b      	add	r3, r7
 80024c4:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80024d2:	330e      	adds	r3, #14
 80024d4:	3370      	adds	r3, #112	; 0x70
 80024d6:	443b      	add	r3, r7
 80024d8:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80024dc:	099b      	lsrs	r3, r3, #6
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	4313      	orrs	r3, r2
 80024e4:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4 | (((uint32_t) buff[off + 16]) / 64));
 80024e8:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80024ec:	330f      	adds	r3, #15
 80024ee:	3370      	adds	r3, #112	; 0x70
 80024f0:	443b      	add	r3, r7
 80024f2:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002500:	3310      	adds	r3, #16
 8002502:	3370      	adds	r3, #112	; 0x70
 8002504:	443b      	add	r3, r7
 8002506:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800250a:	099b      	lsrs	r3, r3, #6
 800250c:	b2db      	uxtb	r3, r3
 800250e:	b29b      	uxth	r3, r3
 8002510:	4313      	orrs	r3, r2
 8002512:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
        gas_range_l = buff[off + 14] & BME68X_GAS_RANGE_MSK;
 8002516:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800251a:	330e      	adds	r3, #14
 800251c:	3370      	adds	r3, #112	; 0x70
 800251e:	443b      	add	r3, r7
 8002520:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002524:	f003 030f 	and.w	r3, r3, #15
 8002528:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        gas_range_h = buff[off + 16] & BME68X_GAS_RANGE_MSK;
 800252c:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002530:	3310      	adds	r3, #16
 8002532:	3370      	adds	r3, #112	; 0x70
 8002534:	443b      	add	r3, r7
 8002536:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d13a      	bne.n	80025c0 <read_all_field_data+0x2a6>
        {
            data[i]->status |= buff[off + 16] & BME68X_GASM_VALID_MSK;
 800254a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	4413      	add	r3, r2
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	b25a      	sxtb	r2, r3
 800255a:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800255e:	3310      	adds	r3, #16
 8002560:	3370      	adds	r3, #112	; 0x70
 8002562:	443b      	add	r3, r7
 8002564:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002568:	b25b      	sxtb	r3, r3
 800256a:	f003 0320 	and.w	r3, r3, #32
 800256e:	b25b      	sxtb	r3, r3
 8002570:	4313      	orrs	r3, r2
 8002572:	b259      	sxtb	r1, r3
 8002574:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	4413      	add	r3, r2
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	b2ca      	uxtb	r2, r1
 8002582:	701a      	strb	r2, [r3, #0]
            data[i]->status |= buff[off + 16] & BME68X_HEAT_STAB_MSK;
 8002584:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	4413      	add	r3, r2
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	b25a      	sxtb	r2, r3
 8002594:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002598:	3310      	adds	r3, #16
 800259a:	3370      	adds	r3, #112	; 0x70
 800259c:	443b      	add	r3, r7
 800259e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80025a2:	b25b      	sxtb	r3, r3
 80025a4:	f003 0310 	and.w	r3, r3, #16
 80025a8:	b25b      	sxtb	r3, r3
 80025aa:	4313      	orrs	r3, r2
 80025ac:	b259      	sxtb	r1, r3
 80025ae:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	4413      	add	r3, r2
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	b2ca      	uxtb	r2, r1
 80025bc:	701a      	strb	r2, [r3, #0]
 80025be:	e039      	b.n	8002634 <read_all_field_data+0x31a>
        }
        else
        {
            data[i]->status |= buff[off + 14] & BME68X_GASM_VALID_MSK;
 80025c0:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	4413      	add	r3, r2
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	b25a      	sxtb	r2, r3
 80025d0:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80025d4:	330e      	adds	r3, #14
 80025d6:	3370      	adds	r3, #112	; 0x70
 80025d8:	443b      	add	r3, r7
 80025da:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80025de:	b25b      	sxtb	r3, r3
 80025e0:	f003 0320 	and.w	r3, r3, #32
 80025e4:	b25b      	sxtb	r3, r3
 80025e6:	4313      	orrs	r3, r2
 80025e8:	b259      	sxtb	r1, r3
 80025ea:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	4413      	add	r3, r2
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	b2ca      	uxtb	r2, r1
 80025f8:	701a      	strb	r2, [r3, #0]
            data[i]->status |= buff[off + 14] & BME68X_HEAT_STAB_MSK;
 80025fa:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	4413      	add	r3, r2
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	b25a      	sxtb	r2, r3
 800260a:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800260e:	330e      	adds	r3, #14
 8002610:	3370      	adds	r3, #112	; 0x70
 8002612:	443b      	add	r3, r7
 8002614:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002618:	b25b      	sxtb	r3, r3
 800261a:	f003 0310 	and.w	r3, r3, #16
 800261e:	b25b      	sxtb	r3, r3
 8002620:	4313      	orrs	r3, r2
 8002622:	b259      	sxtb	r1, r3
 8002624:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	4413      	add	r3, r2
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	b2ca      	uxtb	r2, r1
 8002632:	701a      	strb	r2, [r3, #0]
        }

        data[i]->idac = set_val[data[i]->gas_index];
 8002634:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	4413      	add	r3, r2
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	785b      	ldrb	r3, [r3, #1]
 8002642:	4619      	mov	r1, r3
 8002644:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	4413      	add	r3, r2
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f101 0270 	add.w	r2, r1, #112	; 0x70
 8002654:	443a      	add	r2, r7
 8002656:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 800265a:	711a      	strb	r2, [r3, #4]
        data[i]->res_heat = set_val[10 + data[i]->gas_index];
 800265c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	4413      	add	r3, r2
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	785b      	ldrb	r3, [r3, #1]
 800266a:	f103 020a 	add.w	r2, r3, #10
 800266e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	440b      	add	r3, r1
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	3270      	adds	r2, #112	; 0x70
 800267c:	443a      	add	r2, r7
 800267e:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 8002682:	70da      	strb	r2, [r3, #3]
        data[i]->gas_wait = set_val[20 + data[i]->gas_index];
 8002684:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	4413      	add	r3, r2
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	785b      	ldrb	r3, [r3, #1]
 8002692:	f103 0214 	add.w	r2, r3, #20
 8002696:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	6879      	ldr	r1, [r7, #4]
 800269e:	440b      	add	r3, r1
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	3270      	adds	r2, #112	; 0x70
 80026a4:	443a      	add	r2, r7
 80026a6:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 80026aa:	715a      	strb	r2, [r3, #5]
        data[i]->temperature = calc_temperature(adc_temp, dev);
 80026ac:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	4413      	add	r3, r2
 80026b6:	681c      	ldr	r4, [r3, #0]
 80026b8:	6839      	ldr	r1, [r7, #0]
 80026ba:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80026bc:	f7ff f89e 	bl	80017fc <calc_temperature>
 80026c0:	eef0 7a40 	vmov.f32	s15, s0
 80026c4:	edc4 7a02 	vstr	s15, [r4, #8]
        data[i]->pressure = calc_pressure(adc_pres, dev);
 80026c8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	4413      	add	r3, r2
 80026d2:	681c      	ldr	r4, [r3, #0]
 80026d4:	6839      	ldr	r1, [r7, #0]
 80026d6:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80026d8:	f7ff f916 	bl	8001908 <calc_pressure>
 80026dc:	eef0 7a40 	vmov.f32	s15, s0
 80026e0:	edc4 7a03 	vstr	s15, [r4, #12]
        data[i]->humidity = calc_humidity(adc_hum, dev);
 80026e4:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	4413      	add	r3, r2
 80026ee:	681c      	ldr	r4, [r3, #0]
 80026f0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80026f4:	6839      	ldr	r1, [r7, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff fa48 	bl	8001b8c <calc_humidity>
 80026fc:	eef0 7a40 	vmov.f32	s15, s0
 8002700:	edc4 7a04 	vstr	s15, [r4, #16]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d112      	bne.n	8002732 <read_all_field_data+0x418>
        {
            data[i]->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
 800270c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	4413      	add	r3, r2
 8002716:	681c      	ldr	r4, [r3, #0]
 8002718:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800271c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002720:	4611      	mov	r1, r2
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff fba0 	bl	8001e68 <calc_gas_resistance_high>
 8002728:	eef0 7a40 	vmov.f32	s15, s0
 800272c:	edc4 7a05 	vstr	s15, [r4, #20]
 8002730:	e011      	b.n	8002756 <read_all_field_data+0x43c>
        }
        else
        {
            data[i]->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 8002732:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	4413      	add	r3, r2
 800273c:	681c      	ldr	r4, [r3, #0]
 800273e:	f897 105d 	ldrb.w	r1, [r7, #93]	; 0x5d
 8002742:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff faeb 	bl	8001d24 <calc_gas_resistance_low>
 800274e:	eef0 7a40 	vmov.f32	s15, s0
 8002752:	edc4 7a05 	vstr	s15, [r4, #20]
    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8002756:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800275a:	3301      	adds	r3, #1
 800275c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8002760:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002764:	2b02      	cmp	r3, #2
 8002766:	d804      	bhi.n	8002772 <read_all_field_data+0x458>
 8002768:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800276c:	2b00      	cmp	r3, #0
 800276e:	f43f ae22 	beq.w	80023b6 <read_all_field_data+0x9c>
        }
    }

    return rslt;
 8002772:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8002776:	4618      	mov	r0, r3
 8002778:	3774      	adds	r7, #116	; 0x74
 800277a:	46bd      	mov	sp, r7
 800277c:	bd90      	pop	{r4, r7, pc}

0800277e <set_mem_page>:

/* This internal API is used to switch between SPI memory pages */
static int8_t set_mem_page(uint8_t reg_addr, struct bme68x_dev *dev)
{
 800277e:	b590      	push	{r4, r7, lr}
 8002780:	b085      	sub	sp, #20
 8002782:	af00      	add	r7, sp, #0
 8002784:	4603      	mov	r3, r0
 8002786:	6039      	str	r1, [r7, #0]
 8002788:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg;
    uint8_t mem_page;

    /* Check for null pointers in the device structure*/
    rslt = null_ptr_check(dev);
 800278a:	6838      	ldr	r0, [r7, #0]
 800278c:	f000 f8b8 	bl	8002900 <null_ptr_check>
 8002790:	4603      	mov	r3, r0
 8002792:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 8002794:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d14f      	bne.n	800283c <set_mem_page+0xbe>
    {
        if (reg_addr > 0x7f)
 800279c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	da02      	bge.n	80027aa <set_mem_page+0x2c>
        {
            mem_page = BME68X_MEM_PAGE1;
 80027a4:	2300      	movs	r3, #0
 80027a6:	73bb      	strb	r3, [r7, #14]
 80027a8:	e001      	b.n	80027ae <set_mem_page+0x30>
        }
        else
        {
            mem_page = BME68X_MEM_PAGE0;
 80027aa:	2310      	movs	r3, #16
 80027ac:	73bb      	strb	r3, [r7, #14]
        }

        if (mem_page != dev->mem_page)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	7b5b      	ldrb	r3, [r3, #13]
 80027b2:	7bba      	ldrb	r2, [r7, #14]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d041      	beq.n	800283c <set_mem_page+0xbe>
        {
            dev->mem_page = mem_page;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	7bba      	ldrb	r2, [r7, #14]
 80027bc:	735a      	strb	r2, [r3, #13]
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f107 010d 	add.w	r1, r7, #13
 80027ca:	2201      	movs	r2, #1
 80027cc:	20f3      	movs	r0, #243	; 0xf3
 80027ce:	47a0      	blx	r4
 80027d0:	4603      	mov	r3, r0
 80027d2:	461a      	mov	r2, r3
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            if (dev->intf_rslt != 0)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <set_mem_page+0x6a>
            {
                rslt = BME68X_E_COM_FAIL;
 80027e4:	23fe      	movs	r3, #254	; 0xfe
 80027e6:	73fb      	strb	r3, [r7, #15]
            }

            if (rslt == BME68X_OK)
 80027e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d125      	bne.n	800283c <set_mem_page+0xbe>
            {
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 80027f0:	7b7b      	ldrb	r3, [r7, #13]
 80027f2:	f023 0310 	bic.w	r3, r3, #16
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	737b      	strb	r3, [r7, #13]
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	7b5b      	ldrb	r3, [r3, #13]
 80027fe:	b25b      	sxtb	r3, r3
 8002800:	f003 0310 	and.w	r3, r3, #16
 8002804:	b25a      	sxtb	r2, r3
 8002806:	7b7b      	ldrb	r3, [r7, #13]
 8002808:	b25b      	sxtb	r3, r3
 800280a:	4313      	orrs	r3, r2
 800280c:	b25b      	sxtb	r3, r3
 800280e:	b2db      	uxtb	r3, r3
 8002810:	737b      	strb	r3, [r7, #13]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f107 010d 	add.w	r1, r7, #13
 800281e:	2201      	movs	r2, #1
 8002820:	2073      	movs	r0, #115	; 0x73
 8002822:	47a0      	blx	r4
 8002824:	4603      	mov	r3, r0
 8002826:	461a      	mov	r2, r3
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
                if (dev->intf_rslt != 0)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <set_mem_page+0xbe>
                {
                    rslt = BME68X_E_COM_FAIL;
 8002838:	23fe      	movs	r3, #254	; 0xfe
 800283a:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 800283c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	bd90      	pop	{r4, r7, pc}

08002848 <get_mem_page>:

/* This internal API is used to get the current SPI memory page */
static int8_t get_mem_page(struct bme68x_dev *dev)
{
 8002848:	b590      	push	{r4, r7, lr}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 f855 	bl	8002900 <null_ptr_check>
 8002856:	4603      	mov	r3, r0
 8002858:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 800285a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d11b      	bne.n	800289a <get_mem_page+0x52>
    {
        dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f107 010e 	add.w	r1, r7, #14
 800286e:	2201      	movs	r2, #1
 8002870:	20f3      	movs	r0, #243	; 0xf3
 8002872:	47a0      	blx	r4
 8002874:	4603      	mov	r3, r0
 8002876:	461a      	mov	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (dev->intf_rslt != 0)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 8002884:	2b00      	cmp	r3, #0
 8002886:	d002      	beq.n	800288e <get_mem_page+0x46>
        {
            rslt = BME68X_E_COM_FAIL;
 8002888:	23fe      	movs	r3, #254	; 0xfe
 800288a:	73fb      	strb	r3, [r7, #15]
 800288c:	e005      	b.n	800289a <get_mem_page+0x52>
        }
        else
        {
            dev->mem_page = reg & BME68X_MEM_PAGE_MSK;
 800288e:	7bbb      	ldrb	r3, [r7, #14]
 8002890:	f003 0310 	and.w	r3, r3, #16
 8002894:	b2da      	uxtb	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	735a      	strb	r2, [r3, #13]
        }
    }

    return rslt;
 800289a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd90      	pop	{r4, r7, pc}

080028a6 <boundary_check>:

/* This internal API is used to limit the max value of a parameter */
static int8_t boundary_check(uint8_t *value, uint8_t max, struct bme68x_dev *dev)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b086      	sub	sp, #24
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	60f8      	str	r0, [r7, #12]
 80028ae:	460b      	mov	r3, r1
 80028b0:	607a      	str	r2, [r7, #4]
 80028b2:	72fb      	strb	r3, [r7, #11]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 f823 	bl	8002900 <null_ptr_check>
 80028ba:	4603      	mov	r3, r0
 80028bc:	75fb      	strb	r3, [r7, #23]
    if ((value != NULL) && (rslt == BME68X_OK))
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d015      	beq.n	80028f0 <boundary_check+0x4a>
 80028c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d111      	bne.n	80028f0 <boundary_check+0x4a>
    {
        /* Check if value is above maximum value */
        if (*value > max)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	7afa      	ldrb	r2, [r7, #11]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d20e      	bcs.n	80028f4 <boundary_check+0x4e>
        {
            /* Auto correct the invalid value to maximum value */
            *value = max;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	7afa      	ldrb	r2, [r7, #11]
 80028da:	701a      	strb	r2, [r3, #0]
            dev->info_msg |= BME68X_I_PARAM_CORR;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        if (*value > max)
 80028ee:	e001      	b.n	80028f4 <boundary_check+0x4e>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80028f0:	23ff      	movs	r3, #255	; 0xff
 80028f2:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80028f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3718      	adds	r7, #24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <null_ptr_check>:

/* This internal API is used to check the bme68x_dev for null pointers */
static int8_t null_ptr_check(const struct bme68x_dev *dev)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
    int8_t rslt = BME68X_OK;
 8002908:	2300      	movs	r3, #0
 800290a:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00b      	beq.n	800292a <null_ptr_check+0x2a>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	2b00      	cmp	r3, #0
 8002918:	d007      	beq.n	800292a <null_ptr_check+0x2a>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <null_ptr_check+0x2a>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <null_ptr_check+0x2e>
    {
        /* Device structure pointer is not valid */
        rslt = BME68X_E_NULL_PTR;
 800292a:	23ff      	movs	r3, #255	; 0xff
 800292c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800292e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002932:	4618      	mov	r0, r3
 8002934:	3714      	adds	r7, #20
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
	...

08002940 <set_conf>:

/* This internal API is used to set heater configurations */
static int8_t set_conf(const struct bme68x_heatr_conf *conf, uint8_t op_mode, uint8_t *nb_conv, struct bme68x_dev *dev)
{
 8002940:	b590      	push	{r4, r7, lr}
 8002942:	b093      	sub	sp, #76	; 0x4c
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	607a      	str	r2, [r7, #4]
 800294a:	603b      	str	r3, [r7, #0]
 800294c:	460b      	mov	r3, r1
 800294e:	72fb      	strb	r3, [r7, #11]
    int8_t rslt = BME68X_OK;
 8002950:	2300      	movs	r3, #0
 8002952:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t i;
    uint8_t shared_dur;
    uint8_t write_len = 0;
 8002956:	2300      	movs	r3, #0
 8002958:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    uint8_t heater_dur_shared_addr = BME68X_REG_SHD_HEATR_DUR;
 800295c:	236e      	movs	r3, #110	; 0x6e
 800295e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8002962:	4aa1      	ldr	r2, [pc, #644]	; (8002be8 <set_conf+0x2a8>)
 8002964:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002968:	ca07      	ldmia	r2, {r0, r1, r2}
 800296a:	c303      	stmia	r3!, {r0, r1}
 800296c:	801a      	strh	r2, [r3, #0]
    uint8_t rh_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 800296e:	4a9e      	ldr	r2, [pc, #632]	; (8002be8 <set_conf+0x2a8>)
 8002970:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002974:	ca07      	ldmia	r2, {r0, r1, r2}
 8002976:	c303      	stmia	r3!, {r0, r1}
 8002978:	801a      	strh	r2, [r3, #0]
    uint8_t gw_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 800297a:	4a9b      	ldr	r2, [pc, #620]	; (8002be8 <set_conf+0x2a8>)
 800297c:	f107 0320 	add.w	r3, r7, #32
 8002980:	ca07      	ldmia	r2, {r0, r1, r2}
 8002982:	c303      	stmia	r3!, {r0, r1}
 8002984:	801a      	strh	r2, [r3, #0]
    uint8_t gw_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8002986:	4a98      	ldr	r2, [pc, #608]	; (8002be8 <set_conf+0x2a8>)
 8002988:	f107 0314 	add.w	r3, r7, #20
 800298c:	ca07      	ldmia	r2, {r0, r1, r2}
 800298e:	c303      	stmia	r3!, {r0, r1}
 8002990:	801a      	strh	r2, [r3, #0]

    switch (op_mode)
 8002992:	7afb      	ldrb	r3, [r7, #11]
 8002994:	2b03      	cmp	r3, #3
 8002996:	d024      	beq.n	80029e2 <set_conf+0xa2>
 8002998:	2b03      	cmp	r3, #3
 800299a:	f300 80f9 	bgt.w	8002b90 <set_conf+0x250>
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d002      	beq.n	80029a8 <set_conf+0x68>
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d07c      	beq.n	8002aa0 <set_conf+0x160>
 80029a6:	e0f3      	b.n	8002b90 <set_conf+0x250>
    {
        case BME68X_FORCED_MODE:
            rh_reg_addr[0] = BME68X_REG_RES_HEAT0;
 80029a8:	235a      	movs	r3, #90	; 0x5a
 80029aa:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
            rh_reg_data[0] = calc_res_heat(conf->heatr_temp, dev);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	885b      	ldrh	r3, [r3, #2]
 80029b2:	6839      	ldr	r1, [r7, #0]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff fa91 	bl	8001edc <calc_res_heat>
 80029ba:	4603      	mov	r3, r0
 80029bc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
            gw_reg_addr[0] = BME68X_REG_GAS_WAIT0;
 80029c0:	2364      	movs	r3, #100	; 0x64
 80029c2:	f887 3020 	strb.w	r3, [r7, #32]
            gw_reg_data[0] = calc_gas_wait(conf->heatr_dur);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	889b      	ldrh	r3, [r3, #4]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff fb36 	bl	800203c <calc_gas_wait>
 80029d0:	4603      	mov	r3, r0
 80029d2:	753b      	strb	r3, [r7, #20]
            (*nb_conv) = 0;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	701a      	strb	r2, [r3, #0]
            write_len = 1;
 80029da:	2301      	movs	r3, #1
 80029dc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
 80029e0:	e0db      	b.n	8002b9a <set_conf+0x25a>
        case BME68X_SEQUENTIAL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <set_conf+0xb2>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d103      	bne.n	80029fa <set_conf+0xba>
            {
                rslt = BME68X_E_NULL_PTR;
 80029f2:	23ff      	movs	r3, #255	; 0xff
 80029f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                break;
 80029f8:	e0cf      	b.n	8002b9a <set_conf+0x25a>
            }

            for (i = 0; i < conf->profile_len; i++)
 80029fa:	2300      	movs	r3, #0
 80029fc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002a00:	e03f      	b.n	8002a82 <set_conf+0x142>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8002a02:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002a06:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8002a0a:	325a      	adds	r2, #90	; 0x5a
 8002a0c:	b2d2      	uxtb	r2, r2
 8002a0e:	3348      	adds	r3, #72	; 0x48
 8002a10:	443b      	add	r3, r7
 8002a12:	f803 2c10 	strb.w	r2, [r3, #-16]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	689a      	ldr	r2, [r3, #8]
 8002a1a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	4413      	add	r3, r2
 8002a22:	881b      	ldrh	r3, [r3, #0]
 8002a24:	f897 4046 	ldrb.w	r4, [r7, #70]	; 0x46
 8002a28:	6839      	ldr	r1, [r7, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff fa56 	bl	8001edc <calc_res_heat>
 8002a30:	4603      	mov	r3, r0
 8002a32:	461a      	mov	r2, r3
 8002a34:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8002a38:	443b      	add	r3, r7
 8002a3a:	f803 2c1c 	strb.w	r2, [r3, #-28]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 8002a3e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002a42:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8002a46:	3264      	adds	r2, #100	; 0x64
 8002a48:	b2d2      	uxtb	r2, r2
 8002a4a:	3348      	adds	r3, #72	; 0x48
 8002a4c:	443b      	add	r3, r7
 8002a4e:	f803 2c28 	strb.w	r2, [r3, #-40]
                gw_reg_data[i] = calc_gas_wait(conf->heatr_dur_prof[i]);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	68da      	ldr	r2, [r3, #12]
 8002a56:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	4413      	add	r3, r2
 8002a5e:	881b      	ldrh	r3, [r3, #0]
 8002a60:	f897 4046 	ldrb.w	r4, [r7, #70]	; 0x46
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff fae9 	bl	800203c <calc_gas_wait>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8002a72:	443b      	add	r3, r7
 8002a74:	f803 2c34 	strb.w	r2, [r3, #-52]
            for (i = 0; i < conf->profile_len; i++)
 8002a78:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	7c1b      	ldrb	r3, [r3, #16]
 8002a86:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d3b9      	bcc.n	8002a02 <set_conf+0xc2>
            }

            (*nb_conv) = conf->profile_len;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	7c1a      	ldrb	r2, [r3, #16]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	7c1b      	ldrb	r3, [r3, #16]
 8002a9a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
 8002a9e:	e07c      	b.n	8002b9a <set_conf+0x25a>
        case BME68X_PARALLEL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <set_conf+0x170>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d103      	bne.n	8002ab8 <set_conf+0x178>
            {
                rslt = BME68X_E_NULL_PTR;
 8002ab0:	23ff      	movs	r3, #255	; 0xff
 8002ab2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                break;
 8002ab6:	e070      	b.n	8002b9a <set_conf+0x25a>
            }

            if (conf->shared_heatr_dur == 0)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8a5b      	ldrh	r3, [r3, #18]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d102      	bne.n	8002ac6 <set_conf+0x186>
            {
                rslt = BME68X_W_DEFINE_SHD_HEATR_DUR;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            }

            for (i = 0; i < conf->profile_len; i++)
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002acc:	e03a      	b.n	8002b44 <set_conf+0x204>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8002ace:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002ad2:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8002ad6:	325a      	adds	r2, #90	; 0x5a
 8002ad8:	b2d2      	uxtb	r2, r2
 8002ada:	3348      	adds	r3, #72	; 0x48
 8002adc:	443b      	add	r3, r7
 8002ade:	f803 2c10 	strb.w	r2, [r3, #-16]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	689a      	ldr	r2, [r3, #8]
 8002ae6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	4413      	add	r3, r2
 8002aee:	881b      	ldrh	r3, [r3, #0]
 8002af0:	f897 4046 	ldrb.w	r4, [r7, #70]	; 0x46
 8002af4:	6839      	ldr	r1, [r7, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7ff f9f0 	bl	8001edc <calc_res_heat>
 8002afc:	4603      	mov	r3, r0
 8002afe:	461a      	mov	r2, r3
 8002b00:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8002b04:	443b      	add	r3, r7
 8002b06:	f803 2c1c 	strb.w	r2, [r3, #-28]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 8002b0a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002b0e:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8002b12:	3264      	adds	r2, #100	; 0x64
 8002b14:	b2d2      	uxtb	r2, r2
 8002b16:	3348      	adds	r3, #72	; 0x48
 8002b18:	443b      	add	r3, r7
 8002b1a:	f803 2c28 	strb.w	r2, [r3, #-40]
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	68da      	ldr	r2, [r3, #12]
 8002b22:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	4413      	add	r3, r2
 8002b2a:	881a      	ldrh	r2, [r3, #0]
 8002b2c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	3348      	adds	r3, #72	; 0x48
 8002b34:	443b      	add	r3, r7
 8002b36:	f803 2c34 	strb.w	r2, [r3, #-52]
            for (i = 0; i < conf->profile_len; i++)
 8002b3a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002b3e:	3301      	adds	r3, #1
 8002b40:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	7c1b      	ldrb	r3, [r3, #16]
 8002b48:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d3be      	bcc.n	8002ace <set_conf+0x18e>
            }

            (*nb_conv) = conf->profile_len;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	7c1a      	ldrb	r2, [r3, #16]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	7c1b      	ldrb	r3, [r3, #16]
 8002b5c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            shared_dur = calc_heatr_dur_shared(conf->shared_heatr_dur);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8a5b      	ldrh	r3, [r3, #18]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f000 f841 	bl	8002bec <calc_heatr_dur_shared>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
            if (rslt == BME68X_OK)
 8002b70:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d10f      	bne.n	8002b98 <set_conf+0x258>
            {
                rslt = bme68x_set_regs(&heater_dur_shared_addr, &shared_dur, 1, dev);
 8002b78:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8002b7c:	f107 0043 	add.w	r0, r7, #67	; 0x43
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f7fe fa16 	bl	8000fb4 <bme68x_set_regs>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            }

            break;
 8002b8e:	e003      	b.n	8002b98 <set_conf+0x258>
        default:
            rslt = BME68X_W_DEFINE_OP_MODE;
 8002b90:	2301      	movs	r3, #1
 8002b92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002b96:	e000      	b.n	8002b9a <set_conf+0x25a>
            break;
 8002b98:	bf00      	nop
    }

    if (rslt == BME68X_OK)
 8002b9a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d10b      	bne.n	8002bba <set_conf+0x27a>
    {
        rslt = bme68x_set_regs(rh_reg_addr, rh_reg_data, write_len, dev);
 8002ba2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002ba6:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002baa:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	f7fe fa00 	bl	8000fb4 <bme68x_set_regs>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    if (rslt == BME68X_OK)
 8002bba:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10b      	bne.n	8002bda <set_conf+0x29a>
    {
        rslt = bme68x_set_regs(gw_reg_addr, gw_reg_data, write_len, dev);
 8002bc2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002bc6:	f107 0114 	add.w	r1, r7, #20
 8002bca:	f107 0020 	add.w	r0, r7, #32
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	f7fe f9f0 	bl	8000fb4 <bme68x_set_regs>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    return rslt;
 8002bda:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	374c      	adds	r7, #76	; 0x4c
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd90      	pop	{r4, r7, pc}
 8002be6:	bf00      	nop
 8002be8:	08009a70 	.word	0x08009a70

08002bec <calc_heatr_dur_shared>:

/* This internal API is used to calculate the register value for
 * shared heater duration */
static uint8_t calc_heatr_dur_shared(uint16_t dur)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	80fb      	strh	r3, [r7, #6]
    uint8_t factor = 0;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	73fb      	strb	r3, [r7, #15]
    uint8_t heatdurval;

    if (dur >= 0x783)
 8002bfa:	88fb      	ldrh	r3, [r7, #6]
 8002bfc:	f240 7282 	movw	r2, #1922	; 0x782
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d902      	bls.n	8002c0a <calc_heatr_dur_shared+0x1e>
    {
        heatdurval = 0xff; /* Max duration */
 8002c04:	23ff      	movs	r3, #255	; 0xff
 8002c06:	73bb      	strb	r3, [r7, #14]
 8002c08:	e01d      	b.n	8002c46 <calc_heatr_dur_shared+0x5a>
    }
    else
    {
        /* Step size of 0.477ms */
        dur = (uint16_t)(((uint32_t)dur * 1000) / 477);
 8002c0a:	88fb      	ldrh	r3, [r7, #6]
 8002c0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c10:	fb03 f202 	mul.w	r2, r3, r2
 8002c14:	4b0f      	ldr	r3, [pc, #60]	; (8002c54 <calc_heatr_dur_shared+0x68>)
 8002c16:	fba3 1302 	umull	r1, r3, r3, r2
 8002c1a:	1ad2      	subs	r2, r2, r3
 8002c1c:	0852      	lsrs	r2, r2, #1
 8002c1e:	4413      	add	r3, r2
 8002c20:	0a1b      	lsrs	r3, r3, #8
 8002c22:	80fb      	strh	r3, [r7, #6]
        while (dur > 0x3F)
 8002c24:	e005      	b.n	8002c32 <calc_heatr_dur_shared+0x46>
        {
            dur = dur >> 2;
 8002c26:	88fb      	ldrh	r3, [r7, #6]
 8002c28:	089b      	lsrs	r3, r3, #2
 8002c2a:	80fb      	strh	r3, [r7, #6]
            factor += 1;
 8002c2c:	7bfb      	ldrb	r3, [r7, #15]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	73fb      	strb	r3, [r7, #15]
        while (dur > 0x3F)
 8002c32:	88fb      	ldrh	r3, [r7, #6]
 8002c34:	2b3f      	cmp	r3, #63	; 0x3f
 8002c36:	d8f6      	bhi.n	8002c26 <calc_heatr_dur_shared+0x3a>
        }

        heatdurval = (uint8_t)(dur + (factor * 64));
 8002c38:	88fb      	ldrh	r3, [r7, #6]
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	7bfb      	ldrb	r3, [r7, #15]
 8002c3e:	019b      	lsls	r3, r3, #6
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	4413      	add	r3, r2
 8002c44:	73bb      	strb	r3, [r7, #14]
    }

    return heatdurval;
 8002c46:	7bbb      	ldrb	r3, [r7, #14]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3714      	adds	r7, #20
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr
 8002c54:	12c8b89f 	.word	0x12c8b89f

08002c58 <sort_sensor_data>:

/* This internal API is used sort the sensor data */
static void sort_sensor_data(uint8_t low_index, uint8_t high_index, struct bme68x_data *field[])
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	4603      	mov	r3, r0
 8002c60:	603a      	str	r2, [r7, #0]
 8002c62:	71fb      	strb	r3, [r7, #7]
 8002c64:	460b      	mov	r3, r1
 8002c66:	71bb      	strb	r3, [r7, #6]
    int16_t meas_index1;
    int16_t meas_index2;

    meas_index1 = (int16_t)field[low_index]->meas_index;
 8002c68:	79fb      	ldrb	r3, [r7, #7]
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	4413      	add	r3, r2
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	789b      	ldrb	r3, [r3, #2]
 8002c74:	81fb      	strh	r3, [r7, #14]
    meas_index2 = (int16_t)field[high_index]->meas_index;
 8002c76:	79bb      	ldrb	r3, [r7, #6]
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	789b      	ldrb	r3, [r3, #2]
 8002c82:	81bb      	strh	r3, [r7, #12]
    if ((field[low_index]->status & BME68X_NEW_DATA_MSK) && (field[high_index]->status & BME68X_NEW_DATA_MSK))
 8002c84:	79fb      	ldrb	r3, [r7, #7]
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	b25b      	sxtb	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	da21      	bge.n	8002cda <sort_sensor_data+0x82>
 8002c96:	79bb      	ldrb	r3, [r7, #6]
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	b25b      	sxtb	r3, r3
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	da18      	bge.n	8002cda <sort_sensor_data+0x82>
    {
        int16_t diff = meas_index2 - meas_index1;
 8002ca8:	89ba      	ldrh	r2, [r7, #12]
 8002caa:	89fb      	ldrh	r3, [r7, #14]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	817b      	strh	r3, [r7, #10]
        if (((diff > -3) && (diff < 0)) || (diff > 2))
 8002cb2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002cb6:	f113 0f02 	cmn.w	r3, #2
 8002cba:	db03      	blt.n	8002cc4 <sort_sensor_data+0x6c>
 8002cbc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	db03      	blt.n	8002ccc <sort_sensor_data+0x74>
 8002cc4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	dd16      	ble.n	8002cfa <sort_sensor_data+0xa2>
        {
            swap_fields(low_index, high_index, field);
 8002ccc:	79b9      	ldrb	r1, [r7, #6]
 8002cce:	79fb      	ldrb	r3, [r7, #7]
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f000 f816 	bl	8002d04 <swap_fields>
    {
 8002cd8:	e00f      	b.n	8002cfa <sort_sensor_data+0xa2>
        }
    }
    else if (field[high_index]->status & BME68X_NEW_DATA_MSK)
 8002cda:	79bb      	ldrb	r3, [r7, #6]
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	b25b      	sxtb	r3, r3
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	da07      	bge.n	8002cfc <sort_sensor_data+0xa4>
    {
        swap_fields(low_index, high_index, field);
 8002cec:	79b9      	ldrb	r1, [r7, #6]
 8002cee:	79fb      	ldrb	r3, [r7, #7]
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f000 f806 	bl	8002d04 <swap_fields>
     *         - diff > 2, case 4.
     *
     *     Here the limits of -3 and 2 derive from the fact that there are 3 fields.
     *     These values decrease or increase respectively if the number of fields increases.
     */
}
 8002cf8:	e000      	b.n	8002cfc <sort_sensor_data+0xa4>
    {
 8002cfa:	bf00      	nop
}
 8002cfc:	bf00      	nop
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <swap_fields>:

/* This internal API is used sort the sensor data */
static void swap_fields(uint8_t index1, uint8_t index2, struct bme68x_data *field[])
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	603a      	str	r2, [r7, #0]
 8002d0e:	71fb      	strb	r3, [r7, #7]
 8002d10:	460b      	mov	r3, r1
 8002d12:	71bb      	strb	r3, [r7, #6]
    struct bme68x_data *temp;

    temp = field[index1];
 8002d14:	79fb      	ldrb	r3, [r7, #7]
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	60fb      	str	r3, [r7, #12]
    field[index1] = field[index2];
 8002d20:	79bb      	ldrb	r3, [r7, #6]
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	441a      	add	r2, r3
 8002d28:	79fb      	ldrb	r3, [r7, #7]
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	6839      	ldr	r1, [r7, #0]
 8002d2e:	440b      	add	r3, r1
 8002d30:	6812      	ldr	r2, [r2, #0]
 8002d32:	601a      	str	r2, [r3, #0]
    field[index2] = temp;
 8002d34:	79bb      	ldrb	r3, [r7, #6]
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	601a      	str	r2, [r3, #0]
}
 8002d40:	bf00      	nop
 8002d42:	3714      	adds	r7, #20
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <get_calib_data>:
    return rslt;
}

/* This internal API is used to read the calibration coefficients */
static int8_t get_calib_data(struct bme68x_dev *dev)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b08e      	sub	sp, #56	; 0x38
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t coeff_array[BME68X_LEN_COEFF_ALL];

    rslt = bme68x_get_regs(BME68X_REG_COEFF1, coeff_array, BME68X_LEN_COEFF1, dev);
 8002d54:	f107 010c 	add.w	r1, r7, #12
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2217      	movs	r2, #23
 8002d5c:	208a      	movs	r0, #138	; 0x8a
 8002d5e:	f7fe f9b9 	bl	80010d4 <bme68x_get_regs>
 8002d62:	4603      	mov	r3, r0
 8002d64:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (rslt == BME68X_OK)
 8002d68:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d10b      	bne.n	8002d88 <get_calib_data+0x3c>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF2, &coeff_array[BME68X_LEN_COEFF1], BME68X_LEN_COEFF2, dev);
 8002d70:	f107 030c 	add.w	r3, r7, #12
 8002d74:	f103 0117 	add.w	r1, r3, #23
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	220e      	movs	r2, #14
 8002d7c:	20e1      	movs	r0, #225	; 0xe1
 8002d7e:	f7fe f9a9 	bl	80010d4 <bme68x_get_regs>
 8002d82:	4603      	mov	r3, r0
 8002d84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }

    if (rslt == BME68X_OK)
 8002d88:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10b      	bne.n	8002da8 <get_calib_data+0x5c>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF3,
 8002d90:	f107 030c 	add.w	r3, r7, #12
 8002d94:	f103 0125 	add.w	r1, r3, #37	; 0x25
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2205      	movs	r2, #5
 8002d9c:	2000      	movs	r0, #0
 8002d9e:	f7fe f999 	bl	80010d4 <bme68x_get_regs>
 8002da2:	4603      	mov	r3, r0
 8002da4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                               &coeff_array[BME68X_LEN_COEFF1 + BME68X_LEN_COEFF2],
                               BME68X_LEN_COEFF3,
                               dev);
    }

    if (rslt == BME68X_OK)
 8002da8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f040 80cb 	bne.w	8002f48 <get_calib_data+0x1fc>
    {
        /* Temperature related coefficients */
        dev->calib.par_t1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T1_MSB], coeff_array[BME68X_IDX_T1_LSB]));
 8002db2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002db6:	021b      	lsls	r3, r3, #8
 8002db8:	b21a      	sxth	r2, r3
 8002dba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002dbe:	b21b      	sxth	r3, r3
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	b21b      	sxth	r3, r3
 8002dc4:	b29a      	uxth	r2, r3
        dev->calib.par_t1 =
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	83da      	strh	r2, [r3, #30]
        dev->calib.par_t2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T2_MSB], coeff_array[BME68X_IDX_T2_LSB]));
 8002dca:	7b7b      	ldrb	r3, [r7, #13]
 8002dcc:	021b      	lsls	r3, r3, #8
 8002dce:	b21a      	sxth	r2, r3
 8002dd0:	7b3b      	ldrb	r3, [r7, #12]
 8002dd2:	b21b      	sxth	r3, r3
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	b21a      	sxth	r2, r3
        dev->calib.par_t2 =
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	841a      	strh	r2, [r3, #32]
        dev->calib.par_t3 = (int8_t)(coeff_array[BME68X_IDX_T3]);
 8002ddc:	7bbb      	ldrb	r3, [r7, #14]
 8002dde:	b25a      	sxtb	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

        /* Pressure related coefficients */
        dev->calib.par_p1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P1_MSB], coeff_array[BME68X_IDX_P1_LSB]));
 8002de6:	7c7b      	ldrb	r3, [r7, #17]
 8002de8:	021b      	lsls	r3, r3, #8
 8002dea:	b21a      	sxth	r2, r3
 8002dec:	7c3b      	ldrb	r3, [r7, #16]
 8002dee:	b21b      	sxth	r3, r3
 8002df0:	4313      	orrs	r3, r2
 8002df2:	b21b      	sxth	r3, r3
 8002df4:	b29a      	uxth	r2, r3
        dev->calib.par_p1 =
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	849a      	strh	r2, [r3, #36]	; 0x24
        dev->calib.par_p2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P2_MSB], coeff_array[BME68X_IDX_P2_LSB]));
 8002dfa:	7cfb      	ldrb	r3, [r7, #19]
 8002dfc:	021b      	lsls	r3, r3, #8
 8002dfe:	b21a      	sxth	r2, r3
 8002e00:	7cbb      	ldrb	r3, [r7, #18]
 8002e02:	b21b      	sxth	r3, r3
 8002e04:	4313      	orrs	r3, r2
 8002e06:	b21a      	sxth	r2, r3
        dev->calib.par_p2 =
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	84da      	strh	r2, [r3, #38]	; 0x26
        dev->calib.par_p3 = (int8_t)coeff_array[BME68X_IDX_P3];
 8002e0c:	7d3b      	ldrb	r3, [r7, #20]
 8002e0e:	b25a      	sxtb	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        dev->calib.par_p4 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P4_MSB], coeff_array[BME68X_IDX_P4_LSB]));
 8002e16:	7dfb      	ldrb	r3, [r7, #23]
 8002e18:	021b      	lsls	r3, r3, #8
 8002e1a:	b21a      	sxth	r2, r3
 8002e1c:	7dbb      	ldrb	r3, [r7, #22]
 8002e1e:	b21b      	sxth	r3, r3
 8002e20:	4313      	orrs	r3, r2
 8002e22:	b21a      	sxth	r2, r3
        dev->calib.par_p4 =
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	855a      	strh	r2, [r3, #42]	; 0x2a
        dev->calib.par_p5 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P5_MSB], coeff_array[BME68X_IDX_P5_LSB]));
 8002e28:	7e7b      	ldrb	r3, [r7, #25]
 8002e2a:	021b      	lsls	r3, r3, #8
 8002e2c:	b21a      	sxth	r2, r3
 8002e2e:	7e3b      	ldrb	r3, [r7, #24]
 8002e30:	b21b      	sxth	r3, r3
 8002e32:	4313      	orrs	r3, r2
 8002e34:	b21a      	sxth	r2, r3
        dev->calib.par_p5 =
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	859a      	strh	r2, [r3, #44]	; 0x2c
        dev->calib.par_p6 = (int8_t)(coeff_array[BME68X_IDX_P6]);
 8002e3a:	7efb      	ldrb	r3, [r7, #27]
 8002e3c:	b25a      	sxtb	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        dev->calib.par_p7 = (int8_t)(coeff_array[BME68X_IDX_P7]);
 8002e44:	7ebb      	ldrb	r3, [r7, #26]
 8002e46:	b25a      	sxtb	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
        dev->calib.par_p8 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P8_MSB], coeff_array[BME68X_IDX_P8_LSB]));
 8002e4e:	7ffb      	ldrb	r3, [r7, #31]
 8002e50:	021b      	lsls	r3, r3, #8
 8002e52:	b21a      	sxth	r2, r3
 8002e54:	7fbb      	ldrb	r3, [r7, #30]
 8002e56:	b21b      	sxth	r3, r3
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	b21a      	sxth	r2, r3
        dev->calib.par_p8 =
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	861a      	strh	r2, [r3, #48]	; 0x30
        dev->calib.par_p9 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P9_MSB], coeff_array[BME68X_IDX_P9_LSB]));
 8002e60:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002e64:	021b      	lsls	r3, r3, #8
 8002e66:	b21a      	sxth	r2, r3
 8002e68:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002e6c:	b21b      	sxth	r3, r3
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	b21a      	sxth	r2, r3
        dev->calib.par_p9 =
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	865a      	strh	r2, [r3, #50]	; 0x32
        dev->calib.par_p10 = (uint8_t)(coeff_array[BME68X_IDX_P10]);
 8002e76:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Humidity related coefficients */
        dev->calib.par_h1 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 8002e80:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002e84:	011b      	lsls	r3, r3, #4
 8002e86:	b21a      	sxth	r2, r3
                       (coeff_array[BME68X_IDX_H1_LSB] & BME68X_BIT_H1_DATA_MSK));
 8002e88:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002e8c:	b21b      	sxth	r3, r3
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	b21b      	sxth	r3, r3
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 8002e94:	4313      	orrs	r3, r2
 8002e96:	b21b      	sxth	r3, r3
 8002e98:	b29a      	uxth	r2, r3
        dev->calib.par_h1 =
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	821a      	strh	r2, [r3, #16]
        dev->calib.par_h2 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H2_MSB] << 4) | ((coeff_array[BME68X_IDX_H2_LSB]) >> 4));
 8002e9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ea2:	011b      	lsls	r3, r3, #4
 8002ea4:	b21a      	sxth	r2, r3
 8002ea6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002eaa:	091b      	lsrs	r3, r3, #4
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	b21b      	sxth	r3, r3
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	b21b      	sxth	r3, r3
 8002eb4:	b29a      	uxth	r2, r3
        dev->calib.par_h2 =
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	825a      	strh	r2, [r3, #18]
        dev->calib.par_h3 = (int8_t)coeff_array[BME68X_IDX_H3];
 8002eba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002ebe:	b25a      	sxtb	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	751a      	strb	r2, [r3, #20]
        dev->calib.par_h4 = (int8_t)coeff_array[BME68X_IDX_H4];
 8002ec4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ec8:	b25a      	sxtb	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	755a      	strb	r2, [r3, #21]
        dev->calib.par_h5 = (int8_t)coeff_array[BME68X_IDX_H5];
 8002ece:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002ed2:	b25a      	sxtb	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	759a      	strb	r2, [r3, #22]
        dev->calib.par_h6 = (uint8_t)coeff_array[BME68X_IDX_H6];
 8002ed8:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	75da      	strb	r2, [r3, #23]
        dev->calib.par_h7 = (int8_t)coeff_array[BME68X_IDX_H7];
 8002ee0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002ee4:	b25a      	sxtb	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	761a      	strb	r2, [r3, #24]

        /* Gas heater related coefficients */
        dev->calib.par_gh1 = (int8_t)coeff_array[BME68X_IDX_GH1];
 8002eea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002eee:	b25a      	sxtb	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	765a      	strb	r2, [r3, #25]
        dev->calib.par_gh2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_GH2_MSB], coeff_array[BME68X_IDX_GH2_LSB]));
 8002ef4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002ef8:	021b      	lsls	r3, r3, #8
 8002efa:	b21a      	sxth	r2, r3
 8002efc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002f00:	b21b      	sxth	r3, r3
 8002f02:	4313      	orrs	r3, r2
 8002f04:	b21a      	sxth	r2, r3
        dev->calib.par_gh2 =
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	835a      	strh	r2, [r3, #26]
        dev->calib.par_gh3 = (int8_t)coeff_array[BME68X_IDX_GH3];
 8002f0a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002f0e:	b25a      	sxtb	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	771a      	strb	r2, [r3, #28]

        /* Other coefficients */
        dev->calib.res_heat_range = ((coeff_array[BME68X_IDX_RES_HEAT_RANGE] & BME68X_RHRANGE_MSK) / 16);
 8002f14:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f18:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	da00      	bge.n	8002f22 <get_calib_data+0x1d6>
 8002f20:	330f      	adds	r3, #15
 8002f22:	111b      	asrs	r3, r3, #4
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        dev->calib.res_heat_val = (int8_t)coeff_array[BME68X_IDX_RES_HEAT_VAL];
 8002f2c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002f30:	b25a      	sxtb	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        dev->calib.range_sw_err = ((int8_t)(coeff_array[BME68X_IDX_RANGE_SW_ERR] & BME68X_RSERROR_MSK)) / 16;
 8002f38:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002f3c:	b25b      	sxtb	r3, r3
 8002f3e:	111b      	asrs	r3, r3, #4
 8002f40:	b25a      	sxtb	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }

    return rslt;
 8002f48:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3738      	adds	r7, #56	; 0x38
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <read_variant_id>:

/* This internal API is used to read variant ID information from the register */
static int8_t read_variant_id(struct bme68x_dev *dev)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data = 0;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	73bb      	strb	r3, [r7, #14]

    /* Read variant ID information register */
    rslt = bme68x_get_regs(BME68X_REG_VARIANT_ID, &reg_data, 1, dev);
 8002f60:	f107 010e 	add.w	r1, r7, #14
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	20f0      	movs	r0, #240	; 0xf0
 8002f6a:	f7fe f8b3 	bl	80010d4 <bme68x_get_regs>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME68X_OK)
 8002f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d103      	bne.n	8002f82 <read_variant_id+0x2e>
    {
        dev->variant_id = reg_data;
 8002f7a:	7bbb      	ldrb	r3, [r7, #14]
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	609a      	str	r2, [r3, #8]
    }

    return rslt;
 8002f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
	...

08002f90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f94:	b0bc      	sub	sp, #240	; 0xf0
 8002f96:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f98:	f000 fd78 	bl	8003a8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f9c:	f000 f8c0 	bl	8003120 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002fa0:	f000 f980 	bl	80032a4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002fa4:	f000 f926 	bl	80031f4 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8002fa8:	f000 f952 	bl	8003250 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  struct bme68x_dev bme;
  struct bme68x_data data;
  char msg[100];

  bme.chip_id = BME68X_I2C_ADDR_HIGH;
 8002fac:	2377      	movs	r3, #119	; 0x77
 8002fae:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  bme.intf = BME68X_I2C_INTF;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  bme.read = user_i2c_read;
 8002fb8:	4b4a      	ldr	r3, [pc, #296]	; (80030e4 <main+0x154>)
 8002fba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  bme.write = user_i2c_write;
 8002fbe:	4b4a      	ldr	r3, [pc, #296]	; (80030e8 <main+0x158>)
 8002fc0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  bme.delay_us = bme68x_delay_us;
 8002fc4:	4b49      	ldr	r3, [pc, #292]	; (80030ec <main+0x15c>)
 8002fc6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  printmsg(begin_msg);
 8002fca:	4b49      	ldr	r3, [pc, #292]	; (80030f0 <main+0x160>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f000 fab4 	bl	800353c <printmsg>
  // initialise
  int8_t result = bme68x_init(&bme);
 8002fd4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7fd ff67 	bl	8000eac <bme68x_init>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  if(result != BME68X_OK)
 8002fe4:	f997 30d7 	ldrsb.w	r3, [r7, #215]	; 0xd7
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d005      	beq.n	8002ff8 <main+0x68>
  {
  	// print error using UART
  	printmsg(init_fail);
 8002fec:	4b41      	ldr	r3, [pc, #260]	; (80030f4 <main+0x164>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f000 faa3 	bl	800353c <printmsg>
 8002ff6:	e004      	b.n	8003002 <main+0x72>
  }
  else
  {
  	printmsg(init_suc);
 8002ff8:	4b3f      	ldr	r3, [pc, #252]	; (80030f8 <main+0x168>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f000 fa9d 	bl	800353c <printmsg>
  }
  // configure oversampling
  result = bme680_config(&bme);
 8003002:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003006:	4618      	mov	r0, r3
 8003008:	f000 fb0e 	bl	8003628 <bme680_config>
 800300c:	4603      	mov	r3, r0
 800300e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  if(result != BME68X_OK)
 8003012:	f997 30d7 	ldrsb.w	r3, [r7, #215]	; 0xd7
 8003016:	2b00      	cmp	r3, #0
 8003018:	d005      	beq.n	8003026 <main+0x96>
  {
  	// print error using UART
  	printmsg(conf_failt);
 800301a:	4b38      	ldr	r3, [pc, #224]	; (80030fc <main+0x16c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4618      	mov	r0, r3
 8003020:	f000 fa8c 	bl	800353c <printmsg>
 8003024:	e004      	b.n	8003030 <main+0xa0>
  }
  else
  {
  	printmsg(conf_suc);
 8003026:	4b36      	ldr	r3, [pc, #216]	; (8003100 <main+0x170>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f000 fa86 	bl	800353c <printmsg>
  }
  // configure heater
  result = bme680_htr_config(&bme);
 8003030:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003034:	4618      	mov	r0, r3
 8003036:	f000 fb13 	bl	8003660 <bme680_htr_config>
 800303a:	4603      	mov	r3, r0
 800303c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  if(result != BME68X_OK)
 8003040:	f997 30d7 	ldrsb.w	r3, [r7, #215]	; 0xd7
 8003044:	2b00      	cmp	r3, #0
 8003046:	d005      	beq.n	8003054 <main+0xc4>
  {
  	// print error using UART
  	printmsg(htr_conf_fail);
 8003048:	4b2e      	ldr	r3, [pc, #184]	; (8003104 <main+0x174>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f000 fa75 	bl	800353c <printmsg>
 8003052:	e004      	b.n	800305e <main+0xce>
  }
  else
  {
  	printmsg(htr_conf_suc);
 8003054:	4b2c      	ldr	r3, [pc, #176]	; (8003108 <main+0x178>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4618      	mov	r0, r3
 800305a:	f000 fa6f 	bl	800353c <printmsg>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
  	if(bme68x_get_data(BME68X_FORCED_MODE, &data, &n_fields, &bme) == 0)
 800305e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003062:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8003066:	4a29      	ldr	r2, [pc, #164]	; (800310c <main+0x17c>)
 8003068:	2001      	movs	r0, #1
 800306a:	f7fe fa40 	bl	80014ee <bme68x_get_data>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d12d      	bne.n	80030d0 <main+0x140>
  	{
  		// print out data
  		printmsg(rd_dt_suc);
 8003074:	4b26      	ldr	r3, [pc, #152]	; (8003110 <main+0x180>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4618      	mov	r0, r3
 800307a:	f000 fa5f 	bl	800353c <printmsg>
  		int len = snprintf(msg, 100, "Temperature: %.2f, Pressure: %.2f, Humidity: %.2f", data.temperature, data.pressure, data.humidity);
 800307e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003080:	4618      	mov	r0, r3
 8003082:	f7fd fa61 	bl	8000548 <__aeabi_f2d>
 8003086:	4604      	mov	r4, r0
 8003088:	460d      	mov	r5, r1
 800308a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800308c:	4618      	mov	r0, r3
 800308e:	f7fd fa5b 	bl	8000548 <__aeabi_f2d>
 8003092:	4680      	mov	r8, r0
 8003094:	4689      	mov	r9, r1
 8003096:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003098:	4618      	mov	r0, r3
 800309a:	f7fd fa55 	bl	8000548 <__aeabi_f2d>
 800309e:	4602      	mov	r2, r0
 80030a0:	460b      	mov	r3, r1
 80030a2:	1d38      	adds	r0, r7, #4
 80030a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80030a8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80030ac:	e9cd 4500 	strd	r4, r5, [sp]
 80030b0:	4a18      	ldr	r2, [pc, #96]	; (8003114 <main+0x184>)
 80030b2:	2164      	movs	r1, #100	; 0x64
 80030b4:	f004 f9e2 	bl	800747c <sniprintf>
 80030b8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
  		HAL_UART_Transmit(&huart2, (uint8_t *)msg, len, HAL_MAX_DELAY);
 80030bc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	1d39      	adds	r1, r7, #4
 80030c4:	f04f 33ff 	mov.w	r3, #4294967295
 80030c8:	4813      	ldr	r0, [pc, #76]	; (8003118 <main+0x188>)
 80030ca:	f002 fd74 	bl	8005bb6 <HAL_UART_Transmit>
 80030ce:	e004      	b.n	80030da <main+0x14a>
  	}
  	else
  	{
  		// print out error
  		printmsg(rd_dt_fail);
 80030d0:	4b12      	ldr	r3, [pc, #72]	; (800311c <main+0x18c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f000 fa31 	bl	800353c <printmsg>
  	}
  	HAL_Delay(1000);
 80030da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030de:	f000 fd47 	bl	8003b70 <HAL_Delay>
  	if(bme68x_get_data(BME68X_FORCED_MODE, &data, &n_fields, &bme) == 0)
 80030e2:	e7bc      	b.n	800305e <main+0xce>
 80030e4:	08003569 	.word	0x08003569
 80030e8:	080035b5 	.word	0x080035b5
 80030ec:	08003601 	.word	0x08003601
 80030f0:	20000000 	.word	0x20000000
 80030f4:	20000004 	.word	0x20000004
 80030f8:	20000008 	.word	0x20000008
 80030fc:	2000000c 	.word	0x2000000c
 8003100:	20000010 	.word	0x20000010
 8003104:	20000014 	.word	0x20000014
 8003108:	20000018 	.word	0x20000018
 800310c:	200002b4 	.word	0x200002b4
 8003110:	20000020 	.word	0x20000020
 8003114:	08009b68 	.word	0x08009b68
 8003118:	20000270 	.word	0x20000270
 800311c:	2000001c 	.word	0x2000001c

08003120 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b094      	sub	sp, #80	; 0x50
 8003124:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003126:	f107 0320 	add.w	r3, r7, #32
 800312a:	2230      	movs	r2, #48	; 0x30
 800312c:	2100      	movs	r1, #0
 800312e:	4618      	mov	r0, r3
 8003130:	f003 fd32 	bl	8006b98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003134:	f107 030c 	add.w	r3, r7, #12
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	605a      	str	r2, [r3, #4]
 800313e:	609a      	str	r2, [r3, #8]
 8003140:	60da      	str	r2, [r3, #12]
 8003142:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003144:	2300      	movs	r3, #0
 8003146:	60bb      	str	r3, [r7, #8]
 8003148:	4b28      	ldr	r3, [pc, #160]	; (80031ec <SystemClock_Config+0xcc>)
 800314a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314c:	4a27      	ldr	r2, [pc, #156]	; (80031ec <SystemClock_Config+0xcc>)
 800314e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003152:	6413      	str	r3, [r2, #64]	; 0x40
 8003154:	4b25      	ldr	r3, [pc, #148]	; (80031ec <SystemClock_Config+0xcc>)
 8003156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800315c:	60bb      	str	r3, [r7, #8]
 800315e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003160:	2300      	movs	r3, #0
 8003162:	607b      	str	r3, [r7, #4]
 8003164:	4b22      	ldr	r3, [pc, #136]	; (80031f0 <SystemClock_Config+0xd0>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a21      	ldr	r2, [pc, #132]	; (80031f0 <SystemClock_Config+0xd0>)
 800316a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800316e:	6013      	str	r3, [r2, #0]
 8003170:	4b1f      	ldr	r3, [pc, #124]	; (80031f0 <SystemClock_Config+0xd0>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003178:	607b      	str	r3, [r7, #4]
 800317a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800317c:	2302      	movs	r3, #2
 800317e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003180:	2301      	movs	r3, #1
 8003182:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003184:	2310      	movs	r3, #16
 8003186:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003188:	2302      	movs	r3, #2
 800318a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800318c:	2300      	movs	r3, #0
 800318e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003190:	2308      	movs	r3, #8
 8003192:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8003194:	2332      	movs	r3, #50	; 0x32
 8003196:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003198:	2304      	movs	r3, #4
 800319a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800319c:	2307      	movs	r3, #7
 800319e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031a0:	f107 0320 	add.w	r3, r7, #32
 80031a4:	4618      	mov	r0, r3
 80031a6:	f002 f821 	bl	80051ec <HAL_RCC_OscConfig>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80031b0:	f000 fa71 	bl	8003696 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031b4:	230f      	movs	r3, #15
 80031b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031b8:	2302      	movs	r3, #2
 80031ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031bc:	2300      	movs	r3, #0
 80031be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80031c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80031c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80031c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80031cc:	f107 030c 	add.w	r3, r7, #12
 80031d0:	2100      	movs	r1, #0
 80031d2:	4618      	mov	r0, r3
 80031d4:	f002 fa82 	bl	80056dc <HAL_RCC_ClockConfig>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80031de:	f000 fa5a 	bl	8003696 <Error_Handler>
  }
}
 80031e2:	bf00      	nop
 80031e4:	3750      	adds	r7, #80	; 0x50
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	40023800 	.word	0x40023800
 80031f0:	40007000 	.word	0x40007000

080031f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80031f8:	4b12      	ldr	r3, [pc, #72]	; (8003244 <MX_I2C1_Init+0x50>)
 80031fa:	4a13      	ldr	r2, [pc, #76]	; (8003248 <MX_I2C1_Init+0x54>)
 80031fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80031fe:	4b11      	ldr	r3, [pc, #68]	; (8003244 <MX_I2C1_Init+0x50>)
 8003200:	4a12      	ldr	r2, [pc, #72]	; (800324c <MX_I2C1_Init+0x58>)
 8003202:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003204:	4b0f      	ldr	r3, [pc, #60]	; (8003244 <MX_I2C1_Init+0x50>)
 8003206:	2200      	movs	r2, #0
 8003208:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800320a:	4b0e      	ldr	r3, [pc, #56]	; (8003244 <MX_I2C1_Init+0x50>)
 800320c:	2200      	movs	r2, #0
 800320e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003210:	4b0c      	ldr	r3, [pc, #48]	; (8003244 <MX_I2C1_Init+0x50>)
 8003212:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003216:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003218:	4b0a      	ldr	r3, [pc, #40]	; (8003244 <MX_I2C1_Init+0x50>)
 800321a:	2200      	movs	r2, #0
 800321c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800321e:	4b09      	ldr	r3, [pc, #36]	; (8003244 <MX_I2C1_Init+0x50>)
 8003220:	2200      	movs	r2, #0
 8003222:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003224:	4b07      	ldr	r3, [pc, #28]	; (8003244 <MX_I2C1_Init+0x50>)
 8003226:	2200      	movs	r2, #0
 8003228:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800322a:	4b06      	ldr	r3, [pc, #24]	; (8003244 <MX_I2C1_Init+0x50>)
 800322c:	2200      	movs	r2, #0
 800322e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003230:	4804      	ldr	r0, [pc, #16]	; (8003244 <MX_I2C1_Init+0x50>)
 8003232:	f001 f81b 	bl	800426c <HAL_I2C_Init>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800323c:	f000 fa2b 	bl	8003696 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003240:	bf00      	nop
 8003242:	bd80      	pop	{r7, pc}
 8003244:	2000021c 	.word	0x2000021c
 8003248:	40005400 	.word	0x40005400
 800324c:	000186a0 	.word	0x000186a0

08003250 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003254:	4b11      	ldr	r3, [pc, #68]	; (800329c <MX_USART2_UART_Init+0x4c>)
 8003256:	4a12      	ldr	r2, [pc, #72]	; (80032a0 <MX_USART2_UART_Init+0x50>)
 8003258:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800325a:	4b10      	ldr	r3, [pc, #64]	; (800329c <MX_USART2_UART_Init+0x4c>)
 800325c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003260:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003262:	4b0e      	ldr	r3, [pc, #56]	; (800329c <MX_USART2_UART_Init+0x4c>)
 8003264:	2200      	movs	r2, #0
 8003266:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003268:	4b0c      	ldr	r3, [pc, #48]	; (800329c <MX_USART2_UART_Init+0x4c>)
 800326a:	2200      	movs	r2, #0
 800326c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800326e:	4b0b      	ldr	r3, [pc, #44]	; (800329c <MX_USART2_UART_Init+0x4c>)
 8003270:	2200      	movs	r2, #0
 8003272:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003274:	4b09      	ldr	r3, [pc, #36]	; (800329c <MX_USART2_UART_Init+0x4c>)
 8003276:	220c      	movs	r2, #12
 8003278:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800327a:	4b08      	ldr	r3, [pc, #32]	; (800329c <MX_USART2_UART_Init+0x4c>)
 800327c:	2200      	movs	r2, #0
 800327e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003280:	4b06      	ldr	r3, [pc, #24]	; (800329c <MX_USART2_UART_Init+0x4c>)
 8003282:	2200      	movs	r2, #0
 8003284:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003286:	4805      	ldr	r0, [pc, #20]	; (800329c <MX_USART2_UART_Init+0x4c>)
 8003288:	f002 fc48 	bl	8005b1c <HAL_UART_Init>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003292:	f000 fa00 	bl	8003696 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003296:	bf00      	nop
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	20000270 	.word	0x20000270
 80032a0:	40004400 	.word	0x40004400

080032a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b08c      	sub	sp, #48	; 0x30
 80032a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032aa:	f107 031c 	add.w	r3, r7, #28
 80032ae:	2200      	movs	r2, #0
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	605a      	str	r2, [r3, #4]
 80032b4:	609a      	str	r2, [r3, #8]
 80032b6:	60da      	str	r2, [r3, #12]
 80032b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80032ba:	2300      	movs	r3, #0
 80032bc:	61bb      	str	r3, [r7, #24]
 80032be:	4b99      	ldr	r3, [pc, #612]	; (8003524 <MX_GPIO_Init+0x280>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	4a98      	ldr	r2, [pc, #608]	; (8003524 <MX_GPIO_Init+0x280>)
 80032c4:	f043 0310 	orr.w	r3, r3, #16
 80032c8:	6313      	str	r3, [r2, #48]	; 0x30
 80032ca:	4b96      	ldr	r3, [pc, #600]	; (8003524 <MX_GPIO_Init+0x280>)
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	f003 0310 	and.w	r3, r3, #16
 80032d2:	61bb      	str	r3, [r7, #24]
 80032d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032d6:	2300      	movs	r3, #0
 80032d8:	617b      	str	r3, [r7, #20]
 80032da:	4b92      	ldr	r3, [pc, #584]	; (8003524 <MX_GPIO_Init+0x280>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032de:	4a91      	ldr	r2, [pc, #580]	; (8003524 <MX_GPIO_Init+0x280>)
 80032e0:	f043 0304 	orr.w	r3, r3, #4
 80032e4:	6313      	str	r3, [r2, #48]	; 0x30
 80032e6:	4b8f      	ldr	r3, [pc, #572]	; (8003524 <MX_GPIO_Init+0x280>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	f003 0304 	and.w	r3, r3, #4
 80032ee:	617b      	str	r3, [r7, #20]
 80032f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80032f2:	2300      	movs	r3, #0
 80032f4:	613b      	str	r3, [r7, #16]
 80032f6:	4b8b      	ldr	r3, [pc, #556]	; (8003524 <MX_GPIO_Init+0x280>)
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	4a8a      	ldr	r2, [pc, #552]	; (8003524 <MX_GPIO_Init+0x280>)
 80032fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003300:	6313      	str	r3, [r2, #48]	; 0x30
 8003302:	4b88      	ldr	r3, [pc, #544]	; (8003524 <MX_GPIO_Init+0x280>)
 8003304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800330a:	613b      	str	r3, [r7, #16]
 800330c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800330e:	2300      	movs	r3, #0
 8003310:	60fb      	str	r3, [r7, #12]
 8003312:	4b84      	ldr	r3, [pc, #528]	; (8003524 <MX_GPIO_Init+0x280>)
 8003314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003316:	4a83      	ldr	r2, [pc, #524]	; (8003524 <MX_GPIO_Init+0x280>)
 8003318:	f043 0301 	orr.w	r3, r3, #1
 800331c:	6313      	str	r3, [r2, #48]	; 0x30
 800331e:	4b81      	ldr	r3, [pc, #516]	; (8003524 <MX_GPIO_Init+0x280>)
 8003320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800332a:	2300      	movs	r3, #0
 800332c:	60bb      	str	r3, [r7, #8]
 800332e:	4b7d      	ldr	r3, [pc, #500]	; (8003524 <MX_GPIO_Init+0x280>)
 8003330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003332:	4a7c      	ldr	r2, [pc, #496]	; (8003524 <MX_GPIO_Init+0x280>)
 8003334:	f043 0302 	orr.w	r3, r3, #2
 8003338:	6313      	str	r3, [r2, #48]	; 0x30
 800333a:	4b7a      	ldr	r3, [pc, #488]	; (8003524 <MX_GPIO_Init+0x280>)
 800333c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	60bb      	str	r3, [r7, #8]
 8003344:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003346:	2300      	movs	r3, #0
 8003348:	607b      	str	r3, [r7, #4]
 800334a:	4b76      	ldr	r3, [pc, #472]	; (8003524 <MX_GPIO_Init+0x280>)
 800334c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334e:	4a75      	ldr	r2, [pc, #468]	; (8003524 <MX_GPIO_Init+0x280>)
 8003350:	f043 0308 	orr.w	r3, r3, #8
 8003354:	6313      	str	r3, [r2, #48]	; 0x30
 8003356:	4b73      	ldr	r3, [pc, #460]	; (8003524 <MX_GPIO_Init+0x280>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335a:	f003 0308 	and.w	r3, r3, #8
 800335e:	607b      	str	r3, [r7, #4]
 8003360:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8003362:	2200      	movs	r2, #0
 8003364:	2108      	movs	r1, #8
 8003366:	4870      	ldr	r0, [pc, #448]	; (8003528 <MX_GPIO_Init+0x284>)
 8003368:	f000 ff66 	bl	8004238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800336c:	2201      	movs	r2, #1
 800336e:	2101      	movs	r1, #1
 8003370:	486e      	ldr	r0, [pc, #440]	; (800352c <MX_GPIO_Init+0x288>)
 8003372:	f000 ff61 	bl	8004238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8003376:	2200      	movs	r2, #0
 8003378:	f24f 0110 	movw	r1, #61456	; 0xf010
 800337c:	486c      	ldr	r0, [pc, #432]	; (8003530 <MX_GPIO_Init+0x28c>)
 800337e:	f000 ff5b 	bl	8004238 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8003382:	2308      	movs	r3, #8
 8003384:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003386:	2301      	movs	r3, #1
 8003388:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338a:	2300      	movs	r3, #0
 800338c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800338e:	2300      	movs	r3, #0
 8003390:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8003392:	f107 031c 	add.w	r3, r7, #28
 8003396:	4619      	mov	r1, r3
 8003398:	4863      	ldr	r0, [pc, #396]	; (8003528 <MX_GPIO_Init+0x284>)
 800339a:	f000 fdb1 	bl	8003f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800339e:	2301      	movs	r3, #1
 80033a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033a2:	2301      	movs	r3, #1
 80033a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a6:	2300      	movs	r3, #0
 80033a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033aa:	2300      	movs	r3, #0
 80033ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80033ae:	f107 031c 	add.w	r3, r7, #28
 80033b2:	4619      	mov	r1, r3
 80033b4:	485d      	ldr	r0, [pc, #372]	; (800352c <MX_GPIO_Init+0x288>)
 80033b6:	f000 fda3 	bl	8003f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80033ba:	2308      	movs	r3, #8
 80033bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033be:	2302      	movs	r3, #2
 80033c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c2:	2300      	movs	r3, #0
 80033c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033c6:	2300      	movs	r3, #0
 80033c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80033ca:	2305      	movs	r3, #5
 80033cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80033ce:	f107 031c 	add.w	r3, r7, #28
 80033d2:	4619      	mov	r1, r3
 80033d4:	4855      	ldr	r0, [pc, #340]	; (800352c <MX_GPIO_Init+0x288>)
 80033d6:	f000 fd93 	bl	8003f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80033da:	2301      	movs	r3, #1
 80033dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80033de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80033e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e4:	2300      	movs	r3, #0
 80033e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80033e8:	f107 031c 	add.w	r3, r7, #28
 80033ec:	4619      	mov	r1, r3
 80033ee:	4851      	ldr	r0, [pc, #324]	; (8003534 <MX_GPIO_Init+0x290>)
 80033f0:	f000 fd86 	bl	8003f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80033f4:	2310      	movs	r3, #16
 80033f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f8:	2302      	movs	r3, #2
 80033fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fc:	2300      	movs	r3, #0
 80033fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003400:	2300      	movs	r3, #0
 8003402:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003404:	2306      	movs	r3, #6
 8003406:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8003408:	f107 031c 	add.w	r3, r7, #28
 800340c:	4619      	mov	r1, r3
 800340e:	4849      	ldr	r0, [pc, #292]	; (8003534 <MX_GPIO_Init+0x290>)
 8003410:	f000 fd76 	bl	8003f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8003414:	23e0      	movs	r3, #224	; 0xe0
 8003416:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003418:	2302      	movs	r3, #2
 800341a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341c:	2300      	movs	r3, #0
 800341e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003420:	2300      	movs	r3, #0
 8003422:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003424:	2305      	movs	r3, #5
 8003426:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003428:	f107 031c 	add.w	r3, r7, #28
 800342c:	4619      	mov	r1, r3
 800342e:	4841      	ldr	r0, [pc, #260]	; (8003534 <MX_GPIO_Init+0x290>)
 8003430:	f000 fd66 	bl	8003f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8003434:	2304      	movs	r3, #4
 8003436:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003438:	2300      	movs	r3, #0
 800343a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343c:	2300      	movs	r3, #0
 800343e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8003440:	f107 031c 	add.w	r3, r7, #28
 8003444:	4619      	mov	r1, r3
 8003446:	483c      	ldr	r0, [pc, #240]	; (8003538 <MX_GPIO_Init+0x294>)
 8003448:	f000 fd5a 	bl	8003f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800344c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003450:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003452:	2302      	movs	r3, #2
 8003454:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003456:	2300      	movs	r3, #0
 8003458:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800345a:	2300      	movs	r3, #0
 800345c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800345e:	2305      	movs	r3, #5
 8003460:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8003462:	f107 031c 	add.w	r3, r7, #28
 8003466:	4619      	mov	r1, r3
 8003468:	4833      	ldr	r0, [pc, #204]	; (8003538 <MX_GPIO_Init+0x294>)
 800346a:	f000 fd49 	bl	8003f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800346e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8003472:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003474:	2301      	movs	r3, #1
 8003476:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003478:	2300      	movs	r3, #0
 800347a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800347c:	2300      	movs	r3, #0
 800347e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003480:	f107 031c 	add.w	r3, r7, #28
 8003484:	4619      	mov	r1, r3
 8003486:	482a      	ldr	r0, [pc, #168]	; (8003530 <MX_GPIO_Init+0x28c>)
 8003488:	f000 fd3a 	bl	8003f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800348c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8003490:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003492:	2302      	movs	r3, #2
 8003494:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003496:	2300      	movs	r3, #0
 8003498:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800349a:	2300      	movs	r3, #0
 800349c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800349e:	2306      	movs	r3, #6
 80034a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034a2:	f107 031c 	add.w	r3, r7, #28
 80034a6:	4619      	mov	r1, r3
 80034a8:	4820      	ldr	r0, [pc, #128]	; (800352c <MX_GPIO_Init+0x288>)
 80034aa:	f000 fd29 	bl	8003f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80034ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034b4:	2300      	movs	r3, #0
 80034b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b8:	2300      	movs	r3, #0
 80034ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80034bc:	f107 031c 	add.w	r3, r7, #28
 80034c0:	4619      	mov	r1, r3
 80034c2:	481c      	ldr	r0, [pc, #112]	; (8003534 <MX_GPIO_Init+0x290>)
 80034c4:	f000 fd1c 	bl	8003f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80034c8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80034cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ce:	2302      	movs	r3, #2
 80034d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d2:	2300      	movs	r3, #0
 80034d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d6:	2300      	movs	r3, #0
 80034d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80034da:	230a      	movs	r3, #10
 80034dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034de:	f107 031c 	add.w	r3, r7, #28
 80034e2:	4619      	mov	r1, r3
 80034e4:	4813      	ldr	r0, [pc, #76]	; (8003534 <MX_GPIO_Init+0x290>)
 80034e6:	f000 fd0b 	bl	8003f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80034ea:	2320      	movs	r3, #32
 80034ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034ee:	2300      	movs	r3, #0
 80034f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f2:	2300      	movs	r3, #0
 80034f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80034f6:	f107 031c 	add.w	r3, r7, #28
 80034fa:	4619      	mov	r1, r3
 80034fc:	480c      	ldr	r0, [pc, #48]	; (8003530 <MX_GPIO_Init+0x28c>)
 80034fe:	f000 fcff 	bl	8003f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8003502:	2302      	movs	r3, #2
 8003504:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003506:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800350a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350c:	2300      	movs	r3, #0
 800350e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8003510:	f107 031c 	add.w	r3, r7, #28
 8003514:	4619      	mov	r1, r3
 8003516:	4804      	ldr	r0, [pc, #16]	; (8003528 <MX_GPIO_Init+0x284>)
 8003518:	f000 fcf2 	bl	8003f00 <HAL_GPIO_Init>

}
 800351c:	bf00      	nop
 800351e:	3730      	adds	r7, #48	; 0x30
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	40023800 	.word	0x40023800
 8003528:	40021000 	.word	0x40021000
 800352c:	40020800 	.word	0x40020800
 8003530:	40020c00 	.word	0x40020c00
 8003534:	40020000 	.word	0x40020000
 8003538:	40020400 	.word	0x40020400

0800353c <printmsg>:

/* USER CODE BEGIN 4 */
void printmsg(const char* msg)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f7fc fe43 	bl	80001d0 <strlen>
 800354a:	4603      	mov	r3, r0
 800354c:	b29a      	uxth	r2, r3
 800354e:	f04f 33ff 	mov.w	r3, #4294967295
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	4803      	ldr	r0, [pc, #12]	; (8003564 <printmsg+0x28>)
 8003556:	f002 fb2e 	bl	8005bb6 <HAL_UART_Transmit>
}
 800355a:	bf00      	nop
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	20000270 	.word	0x20000270

08003568 <user_i2c_read>:

BME68X_INTF_RET_TYPE user_i2c_read(uint8_t reg_addr, uint8_t *data, uint32_t len, void *intf_ptr)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b08a      	sub	sp, #40	; 0x28
 800356c:	af04      	add	r7, sp, #16
 800356e:	60b9      	str	r1, [r7, #8]
 8003570:	607a      	str	r2, [r7, #4]
 8003572:	603b      	str	r3, [r7, #0]
 8003574:	4603      	mov	r3, r0
 8003576:	73fb      	strb	r3, [r7, #15]
	//	uint8_t dev_addr = *(uint8_t*)intf_ptr;
	//	(void)intf_ptr;
	uint8_t dev_addr = BME68X_I2C_ADDR_HIGH;
 8003578:	2377      	movs	r3, #119	; 0x77
 800357a:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Read(&hi2c1, (dev_addr << 1) | 0x01, reg_addr, 1, data, len, 15);
 800357c:	7dfb      	ldrb	r3, [r7, #23]
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	b21b      	sxth	r3, r3
 8003582:	f043 0301 	orr.w	r3, r3, #1
 8003586:	b21b      	sxth	r3, r3
 8003588:	b299      	uxth	r1, r3
 800358a:	7bfb      	ldrb	r3, [r7, #15]
 800358c:	b29a      	uxth	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	b29b      	uxth	r3, r3
 8003592:	200f      	movs	r0, #15
 8003594:	9002      	str	r0, [sp, #8]
 8003596:	9301      	str	r3, [sp, #4]
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	9300      	str	r3, [sp, #0]
 800359c:	2301      	movs	r3, #1
 800359e:	4804      	ldr	r0, [pc, #16]	; (80035b0 <user_i2c_read+0x48>)
 80035a0:	f001 f8a2 	bl	80046e8 <HAL_I2C_Mem_Read>
  return 0; // Success
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3718      	adds	r7, #24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	2000021c 	.word	0x2000021c

080035b4 <user_i2c_write>:

BME68X_INTF_RET_TYPE user_i2c_write(uint8_t reg_addr, const uint8_t *data, uint32_t len, void *intf_ptr)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b08a      	sub	sp, #40	; 0x28
 80035b8:	af04      	add	r7, sp, #16
 80035ba:	60b9      	str	r1, [r7, #8]
 80035bc:	607a      	str	r2, [r7, #4]
 80035be:	603b      	str	r3, [r7, #0]
 80035c0:	4603      	mov	r3, r0
 80035c2:	73fb      	strb	r3, [r7, #15]
//	uint8_t dev_addr = *(uint8_t*)intf_ptr;
//	(void)intf_ptr;
	uint8_t dev_addr = BME68X_I2C_ADDR_HIGH;
 80035c4:	2377      	movs	r3, #119	; 0x77
 80035c6:	75fb      	strb	r3, [r7, #23]
  HAL_I2C_Mem_Write(&hi2c1, (dev_addr << 1) | 0x01, reg_addr, 1, (uint8_t*)data, len, 15);
 80035c8:	7dfb      	ldrb	r3, [r7, #23]
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	b21b      	sxth	r3, r3
 80035ce:	f043 0301 	orr.w	r3, r3, #1
 80035d2:	b21b      	sxth	r3, r3
 80035d4:	b299      	uxth	r1, r3
 80035d6:	7bfb      	ldrb	r3, [r7, #15]
 80035d8:	b29a      	uxth	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	b29b      	uxth	r3, r3
 80035de:	200f      	movs	r0, #15
 80035e0:	9002      	str	r0, [sp, #8]
 80035e2:	9301      	str	r3, [sp, #4]
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	9300      	str	r3, [sp, #0]
 80035e8:	2301      	movs	r3, #1
 80035ea:	4804      	ldr	r0, [pc, #16]	; (80035fc <user_i2c_write+0x48>)
 80035ec:	f000 ff82 	bl	80044f4 <HAL_I2C_Mem_Write>
  return 0; // Success
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3718      	adds	r7, #24
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	2000021c 	.word	0x2000021c

08003600 <bme68x_delay_us>:

void bme68x_delay_us(uint32_t period, void *ntf_ptr)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
	HAL_Delay(period/1000);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a05      	ldr	r2, [pc, #20]	; (8003624 <bme68x_delay_us+0x24>)
 800360e:	fba2 2303 	umull	r2, r3, r2, r3
 8003612:	099b      	lsrs	r3, r3, #6
 8003614:	4618      	mov	r0, r3
 8003616:	f000 faab 	bl	8003b70 <HAL_Delay>
}
 800361a:	bf00      	nop
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	10624dd3 	.word	0x10624dd3

08003628 <bme680_config>:

static int8_t bme680_config(struct bme68x_dev* bme680_ptr)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
	struct bme68x_conf sensor_conf;
	sensor_conf.filter = iir_filter;
 8003630:	2300      	movs	r3, #0
 8003632:	72fb      	strb	r3, [r7, #11]
	sensor_conf.odr = odr_time;
 8003634:	2308      	movs	r3, #8
 8003636:	733b      	strb	r3, [r7, #12]
	sensor_conf.os_hum = hum_os;
 8003638:	2305      	movs	r3, #5
 800363a:	723b      	strb	r3, [r7, #8]
	sensor_conf.os_pres = pres_os;
 800363c:	2301      	movs	r3, #1
 800363e:	72bb      	strb	r3, [r7, #10]
	sensor_conf.os_temp = temp_os;
 8003640:	2302      	movs	r3, #2
 8003642:	727b      	strb	r3, [r7, #9]

	int8_t rslt = bme68x_set_conf(&sensor_conf, bme680_ptr);
 8003644:	f107 0308 	add.w	r3, r7, #8
 8003648:	6879      	ldr	r1, [r7, #4]
 800364a:	4618      	mov	r0, r3
 800364c:	f7fd fdca 	bl	80011e4 <bme68x_set_conf>
 8003650:	4603      	mov	r3, r0
 8003652:	73fb      	strb	r3, [r7, #15]
	return rslt;
 8003654:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003658:	4618      	mov	r0, r3
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <bme680_htr_config>:

static int8_t bme680_htr_config(struct bme68x_dev* bme680_ptr)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b088      	sub	sp, #32
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
	struct bme68x_heatr_conf htr_conf;
	htr_conf.enable = htr_enable;
 8003668:	2301      	movs	r3, #1
 800366a:	723b      	strb	r3, [r7, #8]
	htr_conf.heatr_dur = htr_dur;
 800366c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003670:	81bb      	strh	r3, [r7, #12]
	htr_conf.heatr_temp = htr_temp;
 8003672:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8003676:	817b      	strh	r3, [r7, #10]

	int8_t rslt = bme68x_set_heatr_conf(BME68X_FORCED_MODE, &htr_conf, bme680_ptr);
 8003678:	f107 0308 	add.w	r3, r7, #8
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	4619      	mov	r1, r3
 8003680:	2001      	movs	r0, #1
 8003682:	f7fe f832 	bl	80016ea <bme68x_set_heatr_conf>
 8003686:	4603      	mov	r3, r0
 8003688:	77fb      	strb	r3, [r7, #31]
	return rslt;
 800368a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800368e:	4618      	mov	r0, r3
 8003690:	3720      	adds	r7, #32
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003696:	b480      	push	{r7}
 8003698:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800369a:	b672      	cpsid	i
}
 800369c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800369e:	e7fe      	b.n	800369e <Error_Handler+0x8>

080036a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036a6:	2300      	movs	r3, #0
 80036a8:	607b      	str	r3, [r7, #4]
 80036aa:	4b10      	ldr	r3, [pc, #64]	; (80036ec <HAL_MspInit+0x4c>)
 80036ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ae:	4a0f      	ldr	r2, [pc, #60]	; (80036ec <HAL_MspInit+0x4c>)
 80036b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036b4:	6453      	str	r3, [r2, #68]	; 0x44
 80036b6:	4b0d      	ldr	r3, [pc, #52]	; (80036ec <HAL_MspInit+0x4c>)
 80036b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036be:	607b      	str	r3, [r7, #4]
 80036c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036c2:	2300      	movs	r3, #0
 80036c4:	603b      	str	r3, [r7, #0]
 80036c6:	4b09      	ldr	r3, [pc, #36]	; (80036ec <HAL_MspInit+0x4c>)
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	4a08      	ldr	r2, [pc, #32]	; (80036ec <HAL_MspInit+0x4c>)
 80036cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036d0:	6413      	str	r3, [r2, #64]	; 0x40
 80036d2:	4b06      	ldr	r3, [pc, #24]	; (80036ec <HAL_MspInit+0x4c>)
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036da:	603b      	str	r3, [r7, #0]
 80036dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80036de:	2007      	movs	r0, #7
 80036e0:	f000 fb3a 	bl	8003d58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036e4:	bf00      	nop
 80036e6:	3708      	adds	r7, #8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	40023800 	.word	0x40023800

080036f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b08a      	sub	sp, #40	; 0x28
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036f8:	f107 0314 	add.w	r3, r7, #20
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]
 8003700:	605a      	str	r2, [r3, #4]
 8003702:	609a      	str	r2, [r3, #8]
 8003704:	60da      	str	r2, [r3, #12]
 8003706:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a19      	ldr	r2, [pc, #100]	; (8003774 <HAL_I2C_MspInit+0x84>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d12c      	bne.n	800376c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003712:	2300      	movs	r3, #0
 8003714:	613b      	str	r3, [r7, #16]
 8003716:	4b18      	ldr	r3, [pc, #96]	; (8003778 <HAL_I2C_MspInit+0x88>)
 8003718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371a:	4a17      	ldr	r2, [pc, #92]	; (8003778 <HAL_I2C_MspInit+0x88>)
 800371c:	f043 0302 	orr.w	r3, r3, #2
 8003720:	6313      	str	r3, [r2, #48]	; 0x30
 8003722:	4b15      	ldr	r3, [pc, #84]	; (8003778 <HAL_I2C_MspInit+0x88>)
 8003724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	613b      	str	r3, [r7, #16]
 800372c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800372e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8003732:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003734:	2312      	movs	r3, #18
 8003736:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003738:	2300      	movs	r3, #0
 800373a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800373c:	2300      	movs	r3, #0
 800373e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003740:	2304      	movs	r3, #4
 8003742:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003744:	f107 0314 	add.w	r3, r7, #20
 8003748:	4619      	mov	r1, r3
 800374a:	480c      	ldr	r0, [pc, #48]	; (800377c <HAL_I2C_MspInit+0x8c>)
 800374c:	f000 fbd8 	bl	8003f00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003750:	2300      	movs	r3, #0
 8003752:	60fb      	str	r3, [r7, #12]
 8003754:	4b08      	ldr	r3, [pc, #32]	; (8003778 <HAL_I2C_MspInit+0x88>)
 8003756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003758:	4a07      	ldr	r2, [pc, #28]	; (8003778 <HAL_I2C_MspInit+0x88>)
 800375a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800375e:	6413      	str	r3, [r2, #64]	; 0x40
 8003760:	4b05      	ldr	r3, [pc, #20]	; (8003778 <HAL_I2C_MspInit+0x88>)
 8003762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003764:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800376c:	bf00      	nop
 800376e:	3728      	adds	r7, #40	; 0x28
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40005400 	.word	0x40005400
 8003778:	40023800 	.word	0x40023800
 800377c:	40020400 	.word	0x40020400

08003780 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b08a      	sub	sp, #40	; 0x28
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003788:	f107 0314 	add.w	r3, r7, #20
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	605a      	str	r2, [r3, #4]
 8003792:	609a      	str	r2, [r3, #8]
 8003794:	60da      	str	r2, [r3, #12]
 8003796:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a1d      	ldr	r2, [pc, #116]	; (8003814 <HAL_UART_MspInit+0x94>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d133      	bne.n	800380a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80037a2:	2300      	movs	r3, #0
 80037a4:	613b      	str	r3, [r7, #16]
 80037a6:	4b1c      	ldr	r3, [pc, #112]	; (8003818 <HAL_UART_MspInit+0x98>)
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	4a1b      	ldr	r2, [pc, #108]	; (8003818 <HAL_UART_MspInit+0x98>)
 80037ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037b0:	6413      	str	r3, [r2, #64]	; 0x40
 80037b2:	4b19      	ldr	r3, [pc, #100]	; (8003818 <HAL_UART_MspInit+0x98>)
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ba:	613b      	str	r3, [r7, #16]
 80037bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037be:	2300      	movs	r3, #0
 80037c0:	60fb      	str	r3, [r7, #12]
 80037c2:	4b15      	ldr	r3, [pc, #84]	; (8003818 <HAL_UART_MspInit+0x98>)
 80037c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c6:	4a14      	ldr	r2, [pc, #80]	; (8003818 <HAL_UART_MspInit+0x98>)
 80037c8:	f043 0301 	orr.w	r3, r3, #1
 80037cc:	6313      	str	r3, [r2, #48]	; 0x30
 80037ce:	4b12      	ldr	r3, [pc, #72]	; (8003818 <HAL_UART_MspInit+0x98>)
 80037d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	60fb      	str	r3, [r7, #12]
 80037d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80037da:	230c      	movs	r3, #12
 80037dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037de:	2302      	movs	r3, #2
 80037e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e2:	2300      	movs	r3, #0
 80037e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037e6:	2303      	movs	r3, #3
 80037e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80037ea:	2307      	movs	r3, #7
 80037ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037ee:	f107 0314 	add.w	r3, r7, #20
 80037f2:	4619      	mov	r1, r3
 80037f4:	4809      	ldr	r0, [pc, #36]	; (800381c <HAL_UART_MspInit+0x9c>)
 80037f6:	f000 fb83 	bl	8003f00 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80037fa:	2200      	movs	r2, #0
 80037fc:	2100      	movs	r1, #0
 80037fe:	2026      	movs	r0, #38	; 0x26
 8003800:	f000 fab5 	bl	8003d6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003804:	2026      	movs	r0, #38	; 0x26
 8003806:	f000 face 	bl	8003da6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800380a:	bf00      	nop
 800380c:	3728      	adds	r7, #40	; 0x28
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	40004400 	.word	0x40004400
 8003818:	40023800 	.word	0x40023800
 800381c:	40020000 	.word	0x40020000

08003820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003824:	e7fe      	b.n	8003824 <NMI_Handler+0x4>

08003826 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003826:	b480      	push	{r7}
 8003828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800382a:	e7fe      	b.n	800382a <HardFault_Handler+0x4>

0800382c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003830:	e7fe      	b.n	8003830 <MemManage_Handler+0x4>

08003832 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003832:	b480      	push	{r7}
 8003834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003836:	e7fe      	b.n	8003836 <BusFault_Handler+0x4>

08003838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800383c:	e7fe      	b.n	800383c <UsageFault_Handler+0x4>

0800383e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800383e:	b480      	push	{r7}
 8003840:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003842:	bf00      	nop
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003850:	bf00      	nop
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800385a:	b480      	push	{r7}
 800385c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800385e:	bf00      	nop
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800386c:	f000 f960 	bl	8003b30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003870:	bf00      	nop
 8003872:	bd80      	pop	{r7, pc}

08003874 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003878:	4802      	ldr	r0, [pc, #8]	; (8003884 <USART2_IRQHandler+0x10>)
 800387a:	f002 fa2f 	bl	8005cdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800387e:	bf00      	nop
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	20000270 	.word	0x20000270

08003888 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
	return 1;
 800388c:	2301      	movs	r3, #1
}
 800388e:	4618      	mov	r0, r3
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <_kill>:

int _kill(int pid, int sig)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80038a2:	f003 f94f 	bl	8006b44 <__errno>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2216      	movs	r2, #22
 80038aa:	601a      	str	r2, [r3, #0]
	return -1;
 80038ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3708      	adds	r7, #8
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <_exit>:

void _exit (int status)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80038c0:	f04f 31ff 	mov.w	r1, #4294967295
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f7ff ffe7 	bl	8003898 <_kill>
	while (1) {}		/* Make sure we hang here */
 80038ca:	e7fe      	b.n	80038ca <_exit+0x12>

080038cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038d8:	2300      	movs	r3, #0
 80038da:	617b      	str	r3, [r7, #20]
 80038dc:	e00a      	b.n	80038f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80038de:	f3af 8000 	nop.w
 80038e2:	4601      	mov	r1, r0
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	1c5a      	adds	r2, r3, #1
 80038e8:	60ba      	str	r2, [r7, #8]
 80038ea:	b2ca      	uxtb	r2, r1
 80038ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	3301      	adds	r3, #1
 80038f2:	617b      	str	r3, [r7, #20]
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	dbf0      	blt.n	80038de <_read+0x12>
	}

return len;
 80038fc:	687b      	ldr	r3, [r7, #4]
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3718      	adds	r7, #24
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b086      	sub	sp, #24
 800390a:	af00      	add	r7, sp, #0
 800390c:	60f8      	str	r0, [r7, #12]
 800390e:	60b9      	str	r1, [r7, #8]
 8003910:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003912:	2300      	movs	r3, #0
 8003914:	617b      	str	r3, [r7, #20]
 8003916:	e009      	b.n	800392c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	1c5a      	adds	r2, r3, #1
 800391c:	60ba      	str	r2, [r7, #8]
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	4618      	mov	r0, r3
 8003922:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	3301      	adds	r3, #1
 800392a:	617b      	str	r3, [r7, #20]
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	429a      	cmp	r2, r3
 8003932:	dbf1      	blt.n	8003918 <_write+0x12>
	}
	return len;
 8003934:	687b      	ldr	r3, [r7, #4]
}
 8003936:	4618      	mov	r0, r3
 8003938:	3718      	adds	r7, #24
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <_close>:

int _close(int file)
{
 800393e:	b480      	push	{r7}
 8003940:	b083      	sub	sp, #12
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
	return -1;
 8003946:	f04f 33ff 	mov.w	r3, #4294967295
}
 800394a:	4618      	mov	r0, r3
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003956:	b480      	push	{r7}
 8003958:	b083      	sub	sp, #12
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
 800395e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003966:	605a      	str	r2, [r3, #4]
	return 0;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <_isatty>:

int _isatty(int file)
{
 8003976:	b480      	push	{r7}
 8003978:	b083      	sub	sp, #12
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
	return 1;
 800397e:	2301      	movs	r3, #1
}
 8003980:	4618      	mov	r0, r3
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
	return 0;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3714      	adds	r7, #20
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
	...

080039a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80039b0:	4a14      	ldr	r2, [pc, #80]	; (8003a04 <_sbrk+0x5c>)
 80039b2:	4b15      	ldr	r3, [pc, #84]	; (8003a08 <_sbrk+0x60>)
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80039bc:	4b13      	ldr	r3, [pc, #76]	; (8003a0c <_sbrk+0x64>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d102      	bne.n	80039ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80039c4:	4b11      	ldr	r3, [pc, #68]	; (8003a0c <_sbrk+0x64>)
 80039c6:	4a12      	ldr	r2, [pc, #72]	; (8003a10 <_sbrk+0x68>)
 80039c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80039ca:	4b10      	ldr	r3, [pc, #64]	; (8003a0c <_sbrk+0x64>)
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4413      	add	r3, r2
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d207      	bcs.n	80039e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80039d8:	f003 f8b4 	bl	8006b44 <__errno>
 80039dc:	4603      	mov	r3, r0
 80039de:	220c      	movs	r2, #12
 80039e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80039e2:	f04f 33ff 	mov.w	r3, #4294967295
 80039e6:	e009      	b.n	80039fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80039e8:	4b08      	ldr	r3, [pc, #32]	; (8003a0c <_sbrk+0x64>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039ee:	4b07      	ldr	r3, [pc, #28]	; (8003a0c <_sbrk+0x64>)
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4413      	add	r3, r2
 80039f6:	4a05      	ldr	r2, [pc, #20]	; (8003a0c <_sbrk+0x64>)
 80039f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80039fa:	68fb      	ldr	r3, [r7, #12]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3718      	adds	r7, #24
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	20020000 	.word	0x20020000
 8003a08:	00000400 	.word	0x00000400
 8003a0c:	200002b8 	.word	0x200002b8
 8003a10:	200002d0 	.word	0x200002d0

08003a14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a18:	4b06      	ldr	r3, [pc, #24]	; (8003a34 <SystemInit+0x20>)
 8003a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1e:	4a05      	ldr	r2, [pc, #20]	; (8003a34 <SystemInit+0x20>)
 8003a20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a28:	bf00      	nop
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	e000ed00 	.word	0xe000ed00

08003a38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003a38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003a3c:	480d      	ldr	r0, [pc, #52]	; (8003a74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003a3e:	490e      	ldr	r1, [pc, #56]	; (8003a78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003a40:	4a0e      	ldr	r2, [pc, #56]	; (8003a7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003a42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a44:	e002      	b.n	8003a4c <LoopCopyDataInit>

08003a46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a4a:	3304      	adds	r3, #4

08003a4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a50:	d3f9      	bcc.n	8003a46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a52:	4a0b      	ldr	r2, [pc, #44]	; (8003a80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003a54:	4c0b      	ldr	r4, [pc, #44]	; (8003a84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003a56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a58:	e001      	b.n	8003a5e <LoopFillZerobss>

08003a5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a5c:	3204      	adds	r2, #4

08003a5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a60:	d3fb      	bcc.n	8003a5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003a62:	f7ff ffd7 	bl	8003a14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a66:	f003 f873 	bl	8006b50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a6a:	f7ff fa91 	bl	8002f90 <main>
  bx  lr    
 8003a6e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003a70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a78:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8003a7c:	08009f9c 	.word	0x08009f9c
  ldr r2, =_sbss
 8003a80:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8003a84:	200002d0 	.word	0x200002d0

08003a88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a88:	e7fe      	b.n	8003a88 <ADC_IRQHandler>
	...

08003a8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a90:	4b0e      	ldr	r3, [pc, #56]	; (8003acc <HAL_Init+0x40>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a0d      	ldr	r2, [pc, #52]	; (8003acc <HAL_Init+0x40>)
 8003a96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a9c:	4b0b      	ldr	r3, [pc, #44]	; (8003acc <HAL_Init+0x40>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a0a      	ldr	r2, [pc, #40]	; (8003acc <HAL_Init+0x40>)
 8003aa2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003aa6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003aa8:	4b08      	ldr	r3, [pc, #32]	; (8003acc <HAL_Init+0x40>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a07      	ldr	r2, [pc, #28]	; (8003acc <HAL_Init+0x40>)
 8003aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ab2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ab4:	2003      	movs	r0, #3
 8003ab6:	f000 f94f 	bl	8003d58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003aba:	2000      	movs	r0, #0
 8003abc:	f000 f808 	bl	8003ad0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ac0:	f7ff fdee 	bl	80036a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	40023c00 	.word	0x40023c00

08003ad0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ad8:	4b12      	ldr	r3, [pc, #72]	; (8003b24 <HAL_InitTick+0x54>)
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	4b12      	ldr	r3, [pc, #72]	; (8003b28 <HAL_InitTick+0x58>)
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ae6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aee:	4618      	mov	r0, r3
 8003af0:	f000 f967 	bl	8003dc2 <HAL_SYSTICK_Config>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e00e      	b.n	8003b1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2b0f      	cmp	r3, #15
 8003b02:	d80a      	bhi.n	8003b1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b04:	2200      	movs	r2, #0
 8003b06:	6879      	ldr	r1, [r7, #4]
 8003b08:	f04f 30ff 	mov.w	r0, #4294967295
 8003b0c:	f000 f92f 	bl	8003d6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b10:	4a06      	ldr	r2, [pc, #24]	; (8003b2c <HAL_InitTick+0x5c>)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
 8003b18:	e000      	b.n	8003b1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	20000024 	.word	0x20000024
 8003b28:	2000002c 	.word	0x2000002c
 8003b2c:	20000028 	.word	0x20000028

08003b30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b34:	4b06      	ldr	r3, [pc, #24]	; (8003b50 <HAL_IncTick+0x20>)
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	461a      	mov	r2, r3
 8003b3a:	4b06      	ldr	r3, [pc, #24]	; (8003b54 <HAL_IncTick+0x24>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4413      	add	r3, r2
 8003b40:	4a04      	ldr	r2, [pc, #16]	; (8003b54 <HAL_IncTick+0x24>)
 8003b42:	6013      	str	r3, [r2, #0]
}
 8003b44:	bf00      	nop
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	2000002c 	.word	0x2000002c
 8003b54:	200002bc 	.word	0x200002bc

08003b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8003b5c:	4b03      	ldr	r3, [pc, #12]	; (8003b6c <HAL_GetTick+0x14>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	200002bc 	.word	0x200002bc

08003b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b78:	f7ff ffee 	bl	8003b58 <HAL_GetTick>
 8003b7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b88:	d005      	beq.n	8003b96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b8a:	4b0a      	ldr	r3, [pc, #40]	; (8003bb4 <HAL_Delay+0x44>)
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	4413      	add	r3, r2
 8003b94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b96:	bf00      	nop
 8003b98:	f7ff ffde 	bl	8003b58 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d8f7      	bhi.n	8003b98 <HAL_Delay+0x28>
  {
  }
}
 8003ba8:	bf00      	nop
 8003baa:	bf00      	nop
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	2000002c 	.word	0x2000002c

08003bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f003 0307 	and.w	r3, r3, #7
 8003bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bc8:	4b0c      	ldr	r3, [pc, #48]	; (8003bfc <__NVIC_SetPriorityGrouping+0x44>)
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003be0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bea:	4a04      	ldr	r2, [pc, #16]	; (8003bfc <__NVIC_SetPriorityGrouping+0x44>)
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	60d3      	str	r3, [r2, #12]
}
 8003bf0:	bf00      	nop
 8003bf2:	3714      	adds	r7, #20
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	e000ed00 	.word	0xe000ed00

08003c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c04:	4b04      	ldr	r3, [pc, #16]	; (8003c18 <__NVIC_GetPriorityGrouping+0x18>)
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	0a1b      	lsrs	r3, r3, #8
 8003c0a:	f003 0307 	and.w	r3, r3, #7
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr
 8003c18:	e000ed00 	.word	0xe000ed00

08003c1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	4603      	mov	r3, r0
 8003c24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	db0b      	blt.n	8003c46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c2e:	79fb      	ldrb	r3, [r7, #7]
 8003c30:	f003 021f 	and.w	r2, r3, #31
 8003c34:	4907      	ldr	r1, [pc, #28]	; (8003c54 <__NVIC_EnableIRQ+0x38>)
 8003c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c3a:	095b      	lsrs	r3, r3, #5
 8003c3c:	2001      	movs	r0, #1
 8003c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8003c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	e000e100 	.word	0xe000e100

08003c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	4603      	mov	r3, r0
 8003c60:	6039      	str	r1, [r7, #0]
 8003c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	db0a      	blt.n	8003c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	b2da      	uxtb	r2, r3
 8003c70:	490c      	ldr	r1, [pc, #48]	; (8003ca4 <__NVIC_SetPriority+0x4c>)
 8003c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c76:	0112      	lsls	r2, r2, #4
 8003c78:	b2d2      	uxtb	r2, r2
 8003c7a:	440b      	add	r3, r1
 8003c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c80:	e00a      	b.n	8003c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	b2da      	uxtb	r2, r3
 8003c86:	4908      	ldr	r1, [pc, #32]	; (8003ca8 <__NVIC_SetPriority+0x50>)
 8003c88:	79fb      	ldrb	r3, [r7, #7]
 8003c8a:	f003 030f 	and.w	r3, r3, #15
 8003c8e:	3b04      	subs	r3, #4
 8003c90:	0112      	lsls	r2, r2, #4
 8003c92:	b2d2      	uxtb	r2, r2
 8003c94:	440b      	add	r3, r1
 8003c96:	761a      	strb	r2, [r3, #24]
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	e000e100 	.word	0xe000e100
 8003ca8:	e000ed00 	.word	0xe000ed00

08003cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b089      	sub	sp, #36	; 0x24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f003 0307 	and.w	r3, r3, #7
 8003cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	f1c3 0307 	rsb	r3, r3, #7
 8003cc6:	2b04      	cmp	r3, #4
 8003cc8:	bf28      	it	cs
 8003cca:	2304      	movcs	r3, #4
 8003ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	3304      	adds	r3, #4
 8003cd2:	2b06      	cmp	r3, #6
 8003cd4:	d902      	bls.n	8003cdc <NVIC_EncodePriority+0x30>
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	3b03      	subs	r3, #3
 8003cda:	e000      	b.n	8003cde <NVIC_EncodePriority+0x32>
 8003cdc:	2300      	movs	r3, #0
 8003cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cea:	43da      	mvns	r2, r3
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	401a      	ands	r2, r3
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8003cfe:	43d9      	mvns	r1, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d04:	4313      	orrs	r3, r2
         );
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3724      	adds	r7, #36	; 0x24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
	...

08003d14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d24:	d301      	bcc.n	8003d2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d26:	2301      	movs	r3, #1
 8003d28:	e00f      	b.n	8003d4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d2a:	4a0a      	ldr	r2, [pc, #40]	; (8003d54 <SysTick_Config+0x40>)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d32:	210f      	movs	r1, #15
 8003d34:	f04f 30ff 	mov.w	r0, #4294967295
 8003d38:	f7ff ff8e 	bl	8003c58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d3c:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <SysTick_Config+0x40>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d42:	4b04      	ldr	r3, [pc, #16]	; (8003d54 <SysTick_Config+0x40>)
 8003d44:	2207      	movs	r2, #7
 8003d46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	e000e010 	.word	0xe000e010

08003d58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f7ff ff29 	bl	8003bb8 <__NVIC_SetPriorityGrouping>
}
 8003d66:	bf00      	nop
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b086      	sub	sp, #24
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	4603      	mov	r3, r0
 8003d76:	60b9      	str	r1, [r7, #8]
 8003d78:	607a      	str	r2, [r7, #4]
 8003d7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d80:	f7ff ff3e 	bl	8003c00 <__NVIC_GetPriorityGrouping>
 8003d84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	68b9      	ldr	r1, [r7, #8]
 8003d8a:	6978      	ldr	r0, [r7, #20]
 8003d8c:	f7ff ff8e 	bl	8003cac <NVIC_EncodePriority>
 8003d90:	4602      	mov	r2, r0
 8003d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d96:	4611      	mov	r1, r2
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7ff ff5d 	bl	8003c58 <__NVIC_SetPriority>
}
 8003d9e:	bf00      	nop
 8003da0:	3718      	adds	r7, #24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b082      	sub	sp, #8
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	4603      	mov	r3, r0
 8003dae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7ff ff31 	bl	8003c1c <__NVIC_EnableIRQ>
}
 8003dba:	bf00      	nop
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b082      	sub	sp, #8
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7ff ffa2 	bl	8003d14 <SysTick_Config>
 8003dd0:	4603      	mov	r3, r0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b084      	sub	sp, #16
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003de8:	f7ff feb6 	bl	8003b58 <HAL_GetTick>
 8003dec:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d008      	beq.n	8003e0c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2280      	movs	r2, #128	; 0x80
 8003dfe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e052      	b.n	8003eb2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 0216 	bic.w	r2, r2, #22
 8003e1a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	695a      	ldr	r2, [r3, #20]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e2a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d103      	bne.n	8003e3c <HAL_DMA_Abort+0x62>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d007      	beq.n	8003e4c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f022 0208 	bic.w	r2, r2, #8
 8003e4a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f022 0201 	bic.w	r2, r2, #1
 8003e5a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e5c:	e013      	b.n	8003e86 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e5e:	f7ff fe7b 	bl	8003b58 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	2b05      	cmp	r3, #5
 8003e6a:	d90c      	bls.n	8003e86 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2220      	movs	r2, #32
 8003e70:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2203      	movs	r2, #3
 8003e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e015      	b.n	8003eb2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1e4      	bne.n	8003e5e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e98:	223f      	movs	r2, #63	; 0x3f
 8003e9a:	409a      	lsls	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b083      	sub	sp, #12
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d004      	beq.n	8003ed8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2280      	movs	r2, #128	; 0x80
 8003ed2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e00c      	b.n	8003ef2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2205      	movs	r2, #5
 8003edc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f022 0201 	bic.w	r2, r2, #1
 8003eee:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
	...

08003f00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b089      	sub	sp, #36	; 0x24
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f12:	2300      	movs	r3, #0
 8003f14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f16:	2300      	movs	r3, #0
 8003f18:	61fb      	str	r3, [r7, #28]
 8003f1a:	e16b      	b.n	80041f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	fa02 f303 	lsl.w	r3, r2, r3
 8003f24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	f040 815a 	bne.w	80041ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f003 0303 	and.w	r3, r3, #3
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d005      	beq.n	8003f52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d130      	bne.n	8003fb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	005b      	lsls	r3, r3, #1
 8003f5c:	2203      	movs	r2, #3
 8003f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f62:	43db      	mvns	r3, r3
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	4013      	ands	r3, r2
 8003f68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	68da      	ldr	r2, [r3, #12]
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	005b      	lsls	r3, r3, #1
 8003f72:	fa02 f303 	lsl.w	r3, r2, r3
 8003f76:	69ba      	ldr	r2, [r7, #24]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f88:	2201      	movs	r2, #1
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f90:	43db      	mvns	r3, r3
 8003f92:	69ba      	ldr	r2, [r7, #24]
 8003f94:	4013      	ands	r3, r2
 8003f96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	091b      	lsrs	r3, r3, #4
 8003f9e:	f003 0201 	and.w	r2, r3, #1
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f003 0303 	and.w	r3, r3, #3
 8003fbc:	2b03      	cmp	r3, #3
 8003fbe:	d017      	beq.n	8003ff0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	2203      	movs	r2, #3
 8003fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd0:	43db      	mvns	r3, r3
 8003fd2:	69ba      	ldr	r2, [r7, #24]
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	689a      	ldr	r2, [r3, #8]
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	005b      	lsls	r3, r3, #1
 8003fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f003 0303 	and.w	r3, r3, #3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d123      	bne.n	8004044 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	08da      	lsrs	r2, r3, #3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	3208      	adds	r2, #8
 8004004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004008:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	f003 0307 	and.w	r3, r3, #7
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	220f      	movs	r2, #15
 8004014:	fa02 f303 	lsl.w	r3, r2, r3
 8004018:	43db      	mvns	r3, r3
 800401a:	69ba      	ldr	r2, [r7, #24]
 800401c:	4013      	ands	r3, r2
 800401e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	691a      	ldr	r2, [r3, #16]
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	f003 0307 	and.w	r3, r3, #7
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	fa02 f303 	lsl.w	r3, r2, r3
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	4313      	orrs	r3, r2
 8004034:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	08da      	lsrs	r2, r3, #3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	3208      	adds	r2, #8
 800403e:	69b9      	ldr	r1, [r7, #24]
 8004040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	005b      	lsls	r3, r3, #1
 800404e:	2203      	movs	r2, #3
 8004050:	fa02 f303 	lsl.w	r3, r2, r3
 8004054:	43db      	mvns	r3, r3
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	4013      	ands	r3, r2
 800405a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f003 0203 	and.w	r2, r3, #3
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	005b      	lsls	r3, r3, #1
 8004068:	fa02 f303 	lsl.w	r3, r2, r3
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	4313      	orrs	r3, r2
 8004070:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004080:	2b00      	cmp	r3, #0
 8004082:	f000 80b4 	beq.w	80041ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004086:	2300      	movs	r3, #0
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	4b60      	ldr	r3, [pc, #384]	; (800420c <HAL_GPIO_Init+0x30c>)
 800408c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408e:	4a5f      	ldr	r2, [pc, #380]	; (800420c <HAL_GPIO_Init+0x30c>)
 8004090:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004094:	6453      	str	r3, [r2, #68]	; 0x44
 8004096:	4b5d      	ldr	r3, [pc, #372]	; (800420c <HAL_GPIO_Init+0x30c>)
 8004098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800409e:	60fb      	str	r3, [r7, #12]
 80040a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040a2:	4a5b      	ldr	r2, [pc, #364]	; (8004210 <HAL_GPIO_Init+0x310>)
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	089b      	lsrs	r3, r3, #2
 80040a8:	3302      	adds	r3, #2
 80040aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	f003 0303 	and.w	r3, r3, #3
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	220f      	movs	r2, #15
 80040ba:	fa02 f303 	lsl.w	r3, r2, r3
 80040be:	43db      	mvns	r3, r3
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	4013      	ands	r3, r2
 80040c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a52      	ldr	r2, [pc, #328]	; (8004214 <HAL_GPIO_Init+0x314>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d02b      	beq.n	8004126 <HAL_GPIO_Init+0x226>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a51      	ldr	r2, [pc, #324]	; (8004218 <HAL_GPIO_Init+0x318>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d025      	beq.n	8004122 <HAL_GPIO_Init+0x222>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a50      	ldr	r2, [pc, #320]	; (800421c <HAL_GPIO_Init+0x31c>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d01f      	beq.n	800411e <HAL_GPIO_Init+0x21e>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a4f      	ldr	r2, [pc, #316]	; (8004220 <HAL_GPIO_Init+0x320>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d019      	beq.n	800411a <HAL_GPIO_Init+0x21a>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a4e      	ldr	r2, [pc, #312]	; (8004224 <HAL_GPIO_Init+0x324>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d013      	beq.n	8004116 <HAL_GPIO_Init+0x216>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a4d      	ldr	r2, [pc, #308]	; (8004228 <HAL_GPIO_Init+0x328>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d00d      	beq.n	8004112 <HAL_GPIO_Init+0x212>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a4c      	ldr	r2, [pc, #304]	; (800422c <HAL_GPIO_Init+0x32c>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d007      	beq.n	800410e <HAL_GPIO_Init+0x20e>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a4b      	ldr	r2, [pc, #300]	; (8004230 <HAL_GPIO_Init+0x330>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d101      	bne.n	800410a <HAL_GPIO_Init+0x20a>
 8004106:	2307      	movs	r3, #7
 8004108:	e00e      	b.n	8004128 <HAL_GPIO_Init+0x228>
 800410a:	2308      	movs	r3, #8
 800410c:	e00c      	b.n	8004128 <HAL_GPIO_Init+0x228>
 800410e:	2306      	movs	r3, #6
 8004110:	e00a      	b.n	8004128 <HAL_GPIO_Init+0x228>
 8004112:	2305      	movs	r3, #5
 8004114:	e008      	b.n	8004128 <HAL_GPIO_Init+0x228>
 8004116:	2304      	movs	r3, #4
 8004118:	e006      	b.n	8004128 <HAL_GPIO_Init+0x228>
 800411a:	2303      	movs	r3, #3
 800411c:	e004      	b.n	8004128 <HAL_GPIO_Init+0x228>
 800411e:	2302      	movs	r3, #2
 8004120:	e002      	b.n	8004128 <HAL_GPIO_Init+0x228>
 8004122:	2301      	movs	r3, #1
 8004124:	e000      	b.n	8004128 <HAL_GPIO_Init+0x228>
 8004126:	2300      	movs	r3, #0
 8004128:	69fa      	ldr	r2, [r7, #28]
 800412a:	f002 0203 	and.w	r2, r2, #3
 800412e:	0092      	lsls	r2, r2, #2
 8004130:	4093      	lsls	r3, r2
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	4313      	orrs	r3, r2
 8004136:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004138:	4935      	ldr	r1, [pc, #212]	; (8004210 <HAL_GPIO_Init+0x310>)
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	089b      	lsrs	r3, r3, #2
 800413e:	3302      	adds	r3, #2
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004146:	4b3b      	ldr	r3, [pc, #236]	; (8004234 <HAL_GPIO_Init+0x334>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	43db      	mvns	r3, r3
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	4013      	ands	r3, r2
 8004154:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004162:	69ba      	ldr	r2, [r7, #24]
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	4313      	orrs	r3, r2
 8004168:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800416a:	4a32      	ldr	r2, [pc, #200]	; (8004234 <HAL_GPIO_Init+0x334>)
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004170:	4b30      	ldr	r3, [pc, #192]	; (8004234 <HAL_GPIO_Init+0x334>)
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	43db      	mvns	r3, r3
 800417a:	69ba      	ldr	r2, [r7, #24]
 800417c:	4013      	ands	r3, r2
 800417e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d003      	beq.n	8004194 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	4313      	orrs	r3, r2
 8004192:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004194:	4a27      	ldr	r2, [pc, #156]	; (8004234 <HAL_GPIO_Init+0x334>)
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800419a:	4b26      	ldr	r3, [pc, #152]	; (8004234 <HAL_GPIO_Init+0x334>)
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	43db      	mvns	r3, r3
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	4013      	ands	r3, r2
 80041a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d003      	beq.n	80041be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80041b6:	69ba      	ldr	r2, [r7, #24]
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80041be:	4a1d      	ldr	r2, [pc, #116]	; (8004234 <HAL_GPIO_Init+0x334>)
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041c4:	4b1b      	ldr	r3, [pc, #108]	; (8004234 <HAL_GPIO_Init+0x334>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	43db      	mvns	r3, r3
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	4013      	ands	r3, r2
 80041d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d003      	beq.n	80041e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041e8:	4a12      	ldr	r2, [pc, #72]	; (8004234 <HAL_GPIO_Init+0x334>)
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	3301      	adds	r3, #1
 80041f2:	61fb      	str	r3, [r7, #28]
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	2b0f      	cmp	r3, #15
 80041f8:	f67f ae90 	bls.w	8003f1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80041fc:	bf00      	nop
 80041fe:	bf00      	nop
 8004200:	3724      	adds	r7, #36	; 0x24
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	40023800 	.word	0x40023800
 8004210:	40013800 	.word	0x40013800
 8004214:	40020000 	.word	0x40020000
 8004218:	40020400 	.word	0x40020400
 800421c:	40020800 	.word	0x40020800
 8004220:	40020c00 	.word	0x40020c00
 8004224:	40021000 	.word	0x40021000
 8004228:	40021400 	.word	0x40021400
 800422c:	40021800 	.word	0x40021800
 8004230:	40021c00 	.word	0x40021c00
 8004234:	40013c00 	.word	0x40013c00

08004238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	460b      	mov	r3, r1
 8004242:	807b      	strh	r3, [r7, #2]
 8004244:	4613      	mov	r3, r2
 8004246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004248:	787b      	ldrb	r3, [r7, #1]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800424e:	887a      	ldrh	r2, [r7, #2]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004254:	e003      	b.n	800425e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004256:	887b      	ldrh	r3, [r7, #2]
 8004258:	041a      	lsls	r2, r3, #16
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	619a      	str	r2, [r3, #24]
}
 800425e:	bf00      	nop
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
	...

0800426c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e12b      	b.n	80044d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d106      	bne.n	8004298 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f7ff fa2c 	bl	80036f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2224      	movs	r2, #36	; 0x24
 800429c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 0201 	bic.w	r2, r2, #1
 80042ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80042d0:	f001 fbfc 	bl	8005acc <HAL_RCC_GetPCLK1Freq>
 80042d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	4a81      	ldr	r2, [pc, #516]	; (80044e0 <HAL_I2C_Init+0x274>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d807      	bhi.n	80042f0 <HAL_I2C_Init+0x84>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4a80      	ldr	r2, [pc, #512]	; (80044e4 <HAL_I2C_Init+0x278>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	bf94      	ite	ls
 80042e8:	2301      	movls	r3, #1
 80042ea:	2300      	movhi	r3, #0
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	e006      	b.n	80042fe <HAL_I2C_Init+0x92>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	4a7d      	ldr	r2, [pc, #500]	; (80044e8 <HAL_I2C_Init+0x27c>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	bf94      	ite	ls
 80042f8:	2301      	movls	r3, #1
 80042fa:	2300      	movhi	r3, #0
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e0e7      	b.n	80044d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	4a78      	ldr	r2, [pc, #480]	; (80044ec <HAL_I2C_Init+0x280>)
 800430a:	fba2 2303 	umull	r2, r3, r2, r3
 800430e:	0c9b      	lsrs	r3, r3, #18
 8004310:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68ba      	ldr	r2, [r7, #8]
 8004322:	430a      	orrs	r2, r1
 8004324:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	6a1b      	ldr	r3, [r3, #32]
 800432c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	4a6a      	ldr	r2, [pc, #424]	; (80044e0 <HAL_I2C_Init+0x274>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d802      	bhi.n	8004340 <HAL_I2C_Init+0xd4>
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	3301      	adds	r3, #1
 800433e:	e009      	b.n	8004354 <HAL_I2C_Init+0xe8>
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004346:	fb02 f303 	mul.w	r3, r2, r3
 800434a:	4a69      	ldr	r2, [pc, #420]	; (80044f0 <HAL_I2C_Init+0x284>)
 800434c:	fba2 2303 	umull	r2, r3, r2, r3
 8004350:	099b      	lsrs	r3, r3, #6
 8004352:	3301      	adds	r3, #1
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	6812      	ldr	r2, [r2, #0]
 8004358:	430b      	orrs	r3, r1
 800435a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	69db      	ldr	r3, [r3, #28]
 8004362:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004366:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	495c      	ldr	r1, [pc, #368]	; (80044e0 <HAL_I2C_Init+0x274>)
 8004370:	428b      	cmp	r3, r1
 8004372:	d819      	bhi.n	80043a8 <HAL_I2C_Init+0x13c>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	1e59      	subs	r1, r3, #1
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004382:	1c59      	adds	r1, r3, #1
 8004384:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004388:	400b      	ands	r3, r1
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00a      	beq.n	80043a4 <HAL_I2C_Init+0x138>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	1e59      	subs	r1, r3, #1
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	005b      	lsls	r3, r3, #1
 8004398:	fbb1 f3f3 	udiv	r3, r1, r3
 800439c:	3301      	adds	r3, #1
 800439e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043a2:	e051      	b.n	8004448 <HAL_I2C_Init+0x1dc>
 80043a4:	2304      	movs	r3, #4
 80043a6:	e04f      	b.n	8004448 <HAL_I2C_Init+0x1dc>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d111      	bne.n	80043d4 <HAL_I2C_Init+0x168>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	1e58      	subs	r0, r3, #1
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6859      	ldr	r1, [r3, #4]
 80043b8:	460b      	mov	r3, r1
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	440b      	add	r3, r1
 80043be:	fbb0 f3f3 	udiv	r3, r0, r3
 80043c2:	3301      	adds	r3, #1
 80043c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	bf0c      	ite	eq
 80043cc:	2301      	moveq	r3, #1
 80043ce:	2300      	movne	r3, #0
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	e012      	b.n	80043fa <HAL_I2C_Init+0x18e>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	1e58      	subs	r0, r3, #1
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6859      	ldr	r1, [r3, #4]
 80043dc:	460b      	mov	r3, r1
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	440b      	add	r3, r1
 80043e2:	0099      	lsls	r1, r3, #2
 80043e4:	440b      	add	r3, r1
 80043e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80043ea:	3301      	adds	r3, #1
 80043ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	bf0c      	ite	eq
 80043f4:	2301      	moveq	r3, #1
 80043f6:	2300      	movne	r3, #0
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <HAL_I2C_Init+0x196>
 80043fe:	2301      	movs	r3, #1
 8004400:	e022      	b.n	8004448 <HAL_I2C_Init+0x1dc>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10e      	bne.n	8004428 <HAL_I2C_Init+0x1bc>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	1e58      	subs	r0, r3, #1
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6859      	ldr	r1, [r3, #4]
 8004412:	460b      	mov	r3, r1
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	440b      	add	r3, r1
 8004418:	fbb0 f3f3 	udiv	r3, r0, r3
 800441c:	3301      	adds	r3, #1
 800441e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004426:	e00f      	b.n	8004448 <HAL_I2C_Init+0x1dc>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	1e58      	subs	r0, r3, #1
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6859      	ldr	r1, [r3, #4]
 8004430:	460b      	mov	r3, r1
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	440b      	add	r3, r1
 8004436:	0099      	lsls	r1, r3, #2
 8004438:	440b      	add	r3, r1
 800443a:	fbb0 f3f3 	udiv	r3, r0, r3
 800443e:	3301      	adds	r3, #1
 8004440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004444:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004448:	6879      	ldr	r1, [r7, #4]
 800444a:	6809      	ldr	r1, [r1, #0]
 800444c:	4313      	orrs	r3, r2
 800444e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	69da      	ldr	r2, [r3, #28]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	431a      	orrs	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	430a      	orrs	r2, r1
 800446a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004476:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	6911      	ldr	r1, [r2, #16]
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	68d2      	ldr	r2, [r2, #12]
 8004482:	4311      	orrs	r1, r2
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	6812      	ldr	r2, [r2, #0]
 8004488:	430b      	orrs	r3, r1
 800448a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	695a      	ldr	r2, [r3, #20]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	431a      	orrs	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f042 0201 	orr.w	r2, r2, #1
 80044b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2220      	movs	r2, #32
 80044c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	000186a0 	.word	0x000186a0
 80044e4:	001e847f 	.word	0x001e847f
 80044e8:	003d08ff 	.word	0x003d08ff
 80044ec:	431bde83 	.word	0x431bde83
 80044f0:	10624dd3 	.word	0x10624dd3

080044f4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b088      	sub	sp, #32
 80044f8:	af02      	add	r7, sp, #8
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	4608      	mov	r0, r1
 80044fe:	4611      	mov	r1, r2
 8004500:	461a      	mov	r2, r3
 8004502:	4603      	mov	r3, r0
 8004504:	817b      	strh	r3, [r7, #10]
 8004506:	460b      	mov	r3, r1
 8004508:	813b      	strh	r3, [r7, #8]
 800450a:	4613      	mov	r3, r2
 800450c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800450e:	f7ff fb23 	bl	8003b58 <HAL_GetTick>
 8004512:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800451a:	b2db      	uxtb	r3, r3
 800451c:	2b20      	cmp	r3, #32
 800451e:	f040 80d9 	bne.w	80046d4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	9300      	str	r3, [sp, #0]
 8004526:	2319      	movs	r3, #25
 8004528:	2201      	movs	r2, #1
 800452a:	496d      	ldr	r1, [pc, #436]	; (80046e0 <HAL_I2C_Mem_Write+0x1ec>)
 800452c:	68f8      	ldr	r0, [r7, #12]
 800452e:	f000 fc7f 	bl	8004e30 <I2C_WaitOnFlagUntilTimeout>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d001      	beq.n	800453c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004538:	2302      	movs	r3, #2
 800453a:	e0cc      	b.n	80046d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004542:	2b01      	cmp	r3, #1
 8004544:	d101      	bne.n	800454a <HAL_I2C_Mem_Write+0x56>
 8004546:	2302      	movs	r3, #2
 8004548:	e0c5      	b.n	80046d6 <HAL_I2C_Mem_Write+0x1e2>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	2b01      	cmp	r3, #1
 800455e:	d007      	beq.n	8004570 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f042 0201 	orr.w	r2, r2, #1
 800456e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800457e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2221      	movs	r2, #33	; 0x21
 8004584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2240      	movs	r2, #64	; 0x40
 800458c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6a3a      	ldr	r2, [r7, #32]
 800459a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80045a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	4a4d      	ldr	r2, [pc, #308]	; (80046e4 <HAL_I2C_Mem_Write+0x1f0>)
 80045b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045b2:	88f8      	ldrh	r0, [r7, #6]
 80045b4:	893a      	ldrh	r2, [r7, #8]
 80045b6:	8979      	ldrh	r1, [r7, #10]
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	9301      	str	r3, [sp, #4]
 80045bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045be:	9300      	str	r3, [sp, #0]
 80045c0:	4603      	mov	r3, r0
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f000 fab6 	bl	8004b34 <I2C_RequestMemoryWrite>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d052      	beq.n	8004674 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e081      	b.n	80046d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f000 fd00 	bl	8004fdc <I2C_WaitOnTXEFlagUntilTimeout>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00d      	beq.n	80045fe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e6:	2b04      	cmp	r3, #4
 80045e8:	d107      	bne.n	80045fa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e06b      	b.n	80046d6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004602:	781a      	ldrb	r2, [r3, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460e:	1c5a      	adds	r2, r3, #1
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004618:	3b01      	subs	r3, #1
 800461a:	b29a      	uxth	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004624:	b29b      	uxth	r3, r3
 8004626:	3b01      	subs	r3, #1
 8004628:	b29a      	uxth	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	695b      	ldr	r3, [r3, #20]
 8004634:	f003 0304 	and.w	r3, r3, #4
 8004638:	2b04      	cmp	r3, #4
 800463a:	d11b      	bne.n	8004674 <HAL_I2C_Mem_Write+0x180>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004640:	2b00      	cmp	r3, #0
 8004642:	d017      	beq.n	8004674 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004648:	781a      	ldrb	r2, [r3, #0]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004654:	1c5a      	adds	r2, r3, #1
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800465e:	3b01      	subs	r3, #1
 8004660:	b29a      	uxth	r2, r3
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800466a:	b29b      	uxth	r3, r3
 800466c:	3b01      	subs	r3, #1
 800466e:	b29a      	uxth	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1aa      	bne.n	80045d2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004680:	68f8      	ldr	r0, [r7, #12]
 8004682:	f000 fcec 	bl	800505e <I2C_WaitOnBTFFlagUntilTimeout>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00d      	beq.n	80046a8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004690:	2b04      	cmp	r3, #4
 8004692:	d107      	bne.n	80046a4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046a2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e016      	b.n	80046d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2220      	movs	r2, #32
 80046bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80046d0:	2300      	movs	r3, #0
 80046d2:	e000      	b.n	80046d6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80046d4:	2302      	movs	r3, #2
  }
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3718      	adds	r7, #24
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	00100002 	.word	0x00100002
 80046e4:	ffff0000 	.word	0xffff0000

080046e8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b08c      	sub	sp, #48	; 0x30
 80046ec:	af02      	add	r7, sp, #8
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	4608      	mov	r0, r1
 80046f2:	4611      	mov	r1, r2
 80046f4:	461a      	mov	r2, r3
 80046f6:	4603      	mov	r3, r0
 80046f8:	817b      	strh	r3, [r7, #10]
 80046fa:	460b      	mov	r3, r1
 80046fc:	813b      	strh	r3, [r7, #8]
 80046fe:	4613      	mov	r3, r2
 8004700:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004702:	f7ff fa29 	bl	8003b58 <HAL_GetTick>
 8004706:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800470e:	b2db      	uxtb	r3, r3
 8004710:	2b20      	cmp	r3, #32
 8004712:	f040 8208 	bne.w	8004b26 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004718:	9300      	str	r3, [sp, #0]
 800471a:	2319      	movs	r3, #25
 800471c:	2201      	movs	r2, #1
 800471e:	497b      	ldr	r1, [pc, #492]	; (800490c <HAL_I2C_Mem_Read+0x224>)
 8004720:	68f8      	ldr	r0, [r7, #12]
 8004722:	f000 fb85 	bl	8004e30 <I2C_WaitOnFlagUntilTimeout>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d001      	beq.n	8004730 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800472c:	2302      	movs	r3, #2
 800472e:	e1fb      	b.n	8004b28 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004736:	2b01      	cmp	r3, #1
 8004738:	d101      	bne.n	800473e <HAL_I2C_Mem_Read+0x56>
 800473a:	2302      	movs	r3, #2
 800473c:	e1f4      	b.n	8004b28 <HAL_I2C_Mem_Read+0x440>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2201      	movs	r2, #1
 8004742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0301 	and.w	r3, r3, #1
 8004750:	2b01      	cmp	r3, #1
 8004752:	d007      	beq.n	8004764 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f042 0201 	orr.w	r2, r2, #1
 8004762:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004772:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2222      	movs	r2, #34	; 0x22
 8004778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2240      	movs	r2, #64	; 0x40
 8004780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800478e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004794:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800479a:	b29a      	uxth	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4a5b      	ldr	r2, [pc, #364]	; (8004910 <HAL_I2C_Mem_Read+0x228>)
 80047a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047a6:	88f8      	ldrh	r0, [r7, #6]
 80047a8:	893a      	ldrh	r2, [r7, #8]
 80047aa:	8979      	ldrh	r1, [r7, #10]
 80047ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ae:	9301      	str	r3, [sp, #4]
 80047b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	4603      	mov	r3, r0
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f000 fa52 	bl	8004c60 <I2C_RequestMemoryRead>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d001      	beq.n	80047c6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e1b0      	b.n	8004b28 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d113      	bne.n	80047f6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047ce:	2300      	movs	r3, #0
 80047d0:	623b      	str	r3, [r7, #32]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	695b      	ldr	r3, [r3, #20]
 80047d8:	623b      	str	r3, [r7, #32]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	623b      	str	r3, [r7, #32]
 80047e2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047f2:	601a      	str	r2, [r3, #0]
 80047f4:	e184      	b.n	8004b00 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d11b      	bne.n	8004836 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800480c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800480e:	2300      	movs	r3, #0
 8004810:	61fb      	str	r3, [r7, #28]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	695b      	ldr	r3, [r3, #20]
 8004818:	61fb      	str	r3, [r7, #28]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	61fb      	str	r3, [r7, #28]
 8004822:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004832:	601a      	str	r2, [r3, #0]
 8004834:	e164      	b.n	8004b00 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800483a:	2b02      	cmp	r3, #2
 800483c:	d11b      	bne.n	8004876 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800484c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800485c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800485e:	2300      	movs	r3, #0
 8004860:	61bb      	str	r3, [r7, #24]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	695b      	ldr	r3, [r3, #20]
 8004868:	61bb      	str	r3, [r7, #24]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	61bb      	str	r3, [r7, #24]
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	e144      	b.n	8004b00 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004876:	2300      	movs	r3, #0
 8004878:	617b      	str	r3, [r7, #20]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	695b      	ldr	r3, [r3, #20]
 8004880:	617b      	str	r3, [r7, #20]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	617b      	str	r3, [r7, #20]
 800488a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800488c:	e138      	b.n	8004b00 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004892:	2b03      	cmp	r3, #3
 8004894:	f200 80f1 	bhi.w	8004a7a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800489c:	2b01      	cmp	r3, #1
 800489e:	d123      	bne.n	80048e8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f000 fc1b 	bl	80050e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d001      	beq.n	80048b4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e139      	b.n	8004b28 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	691a      	ldr	r2, [r3, #16]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048be:	b2d2      	uxtb	r2, r2
 80048c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c6:	1c5a      	adds	r2, r3, #1
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048d0:	3b01      	subs	r3, #1
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048dc:	b29b      	uxth	r3, r3
 80048de:	3b01      	subs	r3, #1
 80048e0:	b29a      	uxth	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80048e6:	e10b      	b.n	8004b00 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d14e      	bne.n	800498e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f6:	2200      	movs	r2, #0
 80048f8:	4906      	ldr	r1, [pc, #24]	; (8004914 <HAL_I2C_Mem_Read+0x22c>)
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f000 fa98 	bl	8004e30 <I2C_WaitOnFlagUntilTimeout>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d008      	beq.n	8004918 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e10e      	b.n	8004b28 <HAL_I2C_Mem_Read+0x440>
 800490a:	bf00      	nop
 800490c:	00100002 	.word	0x00100002
 8004910:	ffff0000 	.word	0xffff0000
 8004914:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004926:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	691a      	ldr	r2, [r3, #16]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004932:	b2d2      	uxtb	r2, r2
 8004934:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493a:	1c5a      	adds	r2, r3, #1
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004944:	3b01      	subs	r3, #1
 8004946:	b29a      	uxth	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004950:	b29b      	uxth	r3, r3
 8004952:	3b01      	subs	r3, #1
 8004954:	b29a      	uxth	r2, r3
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	691a      	ldr	r2, [r3, #16]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004964:	b2d2      	uxtb	r2, r2
 8004966:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496c:	1c5a      	adds	r2, r3, #1
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004976:	3b01      	subs	r3, #1
 8004978:	b29a      	uxth	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004982:	b29b      	uxth	r3, r3
 8004984:	3b01      	subs	r3, #1
 8004986:	b29a      	uxth	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800498c:	e0b8      	b.n	8004b00 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800498e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004990:	9300      	str	r3, [sp, #0]
 8004992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004994:	2200      	movs	r2, #0
 8004996:	4966      	ldr	r1, [pc, #408]	; (8004b30 <HAL_I2C_Mem_Read+0x448>)
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f000 fa49 	bl	8004e30 <I2C_WaitOnFlagUntilTimeout>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d001      	beq.n	80049a8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e0bf      	b.n	8004b28 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	691a      	ldr	r2, [r3, #16]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c2:	b2d2      	uxtb	r2, r2
 80049c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ca:	1c5a      	adds	r2, r3, #1
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049d4:	3b01      	subs	r3, #1
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	3b01      	subs	r3, #1
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f0:	2200      	movs	r2, #0
 80049f2:	494f      	ldr	r1, [pc, #316]	; (8004b30 <HAL_I2C_Mem_Read+0x448>)
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	f000 fa1b 	bl	8004e30 <I2C_WaitOnFlagUntilTimeout>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d001      	beq.n	8004a04 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e091      	b.n	8004b28 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	691a      	ldr	r2, [r3, #16]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1e:	b2d2      	uxtb	r2, r2
 8004a20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a26:	1c5a      	adds	r2, r3, #1
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a30:	3b01      	subs	r3, #1
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	691a      	ldr	r2, [r3, #16]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a50:	b2d2      	uxtb	r2, r2
 8004a52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a58:	1c5a      	adds	r2, r3, #1
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a62:	3b01      	subs	r3, #1
 8004a64:	b29a      	uxth	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	3b01      	subs	r3, #1
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a78:	e042      	b.n	8004b00 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a7c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a7e:	68f8      	ldr	r0, [r7, #12]
 8004a80:	f000 fb2e 	bl	80050e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e04c      	b.n	8004b28 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	691a      	ldr	r2, [r3, #16]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a98:	b2d2      	uxtb	r2, r2
 8004a9a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa0:	1c5a      	adds	r2, r3, #1
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	b29a      	uxth	r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	b29a      	uxth	r2, r3
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	f003 0304 	and.w	r3, r3, #4
 8004aca:	2b04      	cmp	r3, #4
 8004acc:	d118      	bne.n	8004b00 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	691a      	ldr	r2, [r3, #16]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad8:	b2d2      	uxtb	r2, r2
 8004ada:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	1c5a      	adds	r2, r3, #1
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aea:	3b01      	subs	r3, #1
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	3b01      	subs	r3, #1
 8004afa:	b29a      	uxth	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f47f aec2 	bne.w	800488e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2220      	movs	r2, #32
 8004b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b22:	2300      	movs	r3, #0
 8004b24:	e000      	b.n	8004b28 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004b26:	2302      	movs	r3, #2
  }
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3728      	adds	r7, #40	; 0x28
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	00010004 	.word	0x00010004

08004b34 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b088      	sub	sp, #32
 8004b38:	af02      	add	r7, sp, #8
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	4608      	mov	r0, r1
 8004b3e:	4611      	mov	r1, r2
 8004b40:	461a      	mov	r2, r3
 8004b42:	4603      	mov	r3, r0
 8004b44:	817b      	strh	r3, [r7, #10]
 8004b46:	460b      	mov	r3, r1
 8004b48:	813b      	strh	r3, [r7, #8]
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	6a3b      	ldr	r3, [r7, #32]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f000 f960 	bl	8004e30 <I2C_WaitOnFlagUntilTimeout>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00d      	beq.n	8004b92 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b84:	d103      	bne.n	8004b8e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e05f      	b.n	8004c52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b92:	897b      	ldrh	r3, [r7, #10]
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	461a      	mov	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ba0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba4:	6a3a      	ldr	r2, [r7, #32]
 8004ba6:	492d      	ldr	r1, [pc, #180]	; (8004c5c <I2C_RequestMemoryWrite+0x128>)
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f000 f998 	bl	8004ede <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d001      	beq.n	8004bb8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e04c      	b.n	8004c52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bb8:	2300      	movs	r3, #0
 8004bba:	617b      	str	r3, [r7, #20]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	617b      	str	r3, [r7, #20]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	699b      	ldr	r3, [r3, #24]
 8004bca:	617b      	str	r3, [r7, #20]
 8004bcc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bd0:	6a39      	ldr	r1, [r7, #32]
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f000 fa02 	bl	8004fdc <I2C_WaitOnTXEFlagUntilTimeout>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00d      	beq.n	8004bfa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be2:	2b04      	cmp	r3, #4
 8004be4:	d107      	bne.n	8004bf6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bf4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e02b      	b.n	8004c52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004bfa:	88fb      	ldrh	r3, [r7, #6]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d105      	bne.n	8004c0c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c00:	893b      	ldrh	r3, [r7, #8]
 8004c02:	b2da      	uxtb	r2, r3
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	611a      	str	r2, [r3, #16]
 8004c0a:	e021      	b.n	8004c50 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c0c:	893b      	ldrh	r3, [r7, #8]
 8004c0e:	0a1b      	lsrs	r3, r3, #8
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	b2da      	uxtb	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c1c:	6a39      	ldr	r1, [r7, #32]
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f000 f9dc 	bl	8004fdc <I2C_WaitOnTXEFlagUntilTimeout>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00d      	beq.n	8004c46 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2e:	2b04      	cmp	r3, #4
 8004c30:	d107      	bne.n	8004c42 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e005      	b.n	8004c52 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c46:	893b      	ldrh	r3, [r7, #8]
 8004c48:	b2da      	uxtb	r2, r3
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3718      	adds	r7, #24
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	00010002 	.word	0x00010002

08004c60 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b088      	sub	sp, #32
 8004c64:	af02      	add	r7, sp, #8
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	4608      	mov	r0, r1
 8004c6a:	4611      	mov	r1, r2
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	4603      	mov	r3, r0
 8004c70:	817b      	strh	r3, [r7, #10]
 8004c72:	460b      	mov	r3, r1
 8004c74:	813b      	strh	r3, [r7, #8]
 8004c76:	4613      	mov	r3, r2
 8004c78:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c88:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c98:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9c:	9300      	str	r3, [sp, #0]
 8004c9e:	6a3b      	ldr	r3, [r7, #32]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ca6:	68f8      	ldr	r0, [r7, #12]
 8004ca8:	f000 f8c2 	bl	8004e30 <I2C_WaitOnFlagUntilTimeout>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00d      	beq.n	8004cce <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cc0:	d103      	bne.n	8004cca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cc8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e0aa      	b.n	8004e24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004cce:	897b      	ldrh	r3, [r7, #10]
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004cdc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce0:	6a3a      	ldr	r2, [r7, #32]
 8004ce2:	4952      	ldr	r1, [pc, #328]	; (8004e2c <I2C_RequestMemoryRead+0x1cc>)
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f000 f8fa 	bl	8004ede <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d001      	beq.n	8004cf4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e097      	b.n	8004e24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	617b      	str	r3, [r7, #20]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	617b      	str	r3, [r7, #20]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	617b      	str	r3, [r7, #20]
 8004d08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d0c:	6a39      	ldr	r1, [r7, #32]
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f000 f964 	bl	8004fdc <I2C_WaitOnTXEFlagUntilTimeout>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00d      	beq.n	8004d36 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1e:	2b04      	cmp	r3, #4
 8004d20:	d107      	bne.n	8004d32 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e076      	b.n	8004e24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d36:	88fb      	ldrh	r3, [r7, #6]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d105      	bne.n	8004d48 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d3c:	893b      	ldrh	r3, [r7, #8]
 8004d3e:	b2da      	uxtb	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	611a      	str	r2, [r3, #16]
 8004d46:	e021      	b.n	8004d8c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004d48:	893b      	ldrh	r3, [r7, #8]
 8004d4a:	0a1b      	lsrs	r3, r3, #8
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	b2da      	uxtb	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d58:	6a39      	ldr	r1, [r7, #32]
 8004d5a:	68f8      	ldr	r0, [r7, #12]
 8004d5c:	f000 f93e 	bl	8004fdc <I2C_WaitOnTXEFlagUntilTimeout>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00d      	beq.n	8004d82 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6a:	2b04      	cmp	r3, #4
 8004d6c:	d107      	bne.n	8004d7e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e050      	b.n	8004e24 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d82:	893b      	ldrh	r3, [r7, #8]
 8004d84:	b2da      	uxtb	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d8e:	6a39      	ldr	r1, [r7, #32]
 8004d90:	68f8      	ldr	r0, [r7, #12]
 8004d92:	f000 f923 	bl	8004fdc <I2C_WaitOnTXEFlagUntilTimeout>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00d      	beq.n	8004db8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da0:	2b04      	cmp	r3, #4
 8004da2:	d107      	bne.n	8004db4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004db2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e035      	b.n	8004e24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dc6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dca:	9300      	str	r3, [sp, #0]
 8004dcc:	6a3b      	ldr	r3, [r7, #32]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f000 f82b 	bl	8004e30 <I2C_WaitOnFlagUntilTimeout>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00d      	beq.n	8004dfc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dee:	d103      	bne.n	8004df8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004df6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e013      	b.n	8004e24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004dfc:	897b      	ldrh	r3, [r7, #10]
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	f043 0301 	orr.w	r3, r3, #1
 8004e04:	b2da      	uxtb	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0e:	6a3a      	ldr	r2, [r7, #32]
 8004e10:	4906      	ldr	r1, [pc, #24]	; (8004e2c <I2C_RequestMemoryRead+0x1cc>)
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f000 f863 	bl	8004ede <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d001      	beq.n	8004e22 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e000      	b.n	8004e24 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3718      	adds	r7, #24
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	00010002 	.word	0x00010002

08004e30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	603b      	str	r3, [r7, #0]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e40:	e025      	b.n	8004e8e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e48:	d021      	beq.n	8004e8e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e4a:	f7fe fe85 	bl	8003b58 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	683a      	ldr	r2, [r7, #0]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d302      	bcc.n	8004e60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d116      	bne.n	8004e8e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2220      	movs	r2, #32
 8004e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7a:	f043 0220 	orr.w	r2, r3, #32
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e023      	b.n	8004ed6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	0c1b      	lsrs	r3, r3, #16
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d10d      	bne.n	8004eb4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	43da      	mvns	r2, r3
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	bf0c      	ite	eq
 8004eaa:	2301      	moveq	r3, #1
 8004eac:	2300      	movne	r3, #0
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	e00c      	b.n	8004ece <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	43da      	mvns	r2, r3
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	bf0c      	ite	eq
 8004ec6:	2301      	moveq	r3, #1
 8004ec8:	2300      	movne	r3, #0
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	461a      	mov	r2, r3
 8004ece:	79fb      	ldrb	r3, [r7, #7]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d0b6      	beq.n	8004e42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3710      	adds	r7, #16
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b084      	sub	sp, #16
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	60f8      	str	r0, [r7, #12]
 8004ee6:	60b9      	str	r1, [r7, #8]
 8004ee8:	607a      	str	r2, [r7, #4]
 8004eea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004eec:	e051      	b.n	8004f92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	695b      	ldr	r3, [r3, #20]
 8004ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ef8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004efc:	d123      	bne.n	8004f46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f0c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f16:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2220      	movs	r2, #32
 8004f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f32:	f043 0204 	orr.w	r2, r3, #4
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e046      	b.n	8004fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f4c:	d021      	beq.n	8004f92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f4e:	f7fe fe03 	bl	8003b58 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d302      	bcc.n	8004f64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d116      	bne.n	8004f92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2220      	movs	r2, #32
 8004f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7e:	f043 0220 	orr.w	r2, r3, #32
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e020      	b.n	8004fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	0c1b      	lsrs	r3, r3, #16
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d10c      	bne.n	8004fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	43da      	mvns	r2, r3
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	bf14      	ite	ne
 8004fae:	2301      	movne	r3, #1
 8004fb0:	2300      	moveq	r3, #0
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	e00b      	b.n	8004fce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	43da      	mvns	r2, r3
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	bf14      	ite	ne
 8004fc8:	2301      	movne	r3, #1
 8004fca:	2300      	moveq	r3, #0
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d18d      	bne.n	8004eee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3710      	adds	r7, #16
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fe8:	e02d      	b.n	8005046 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f000 f8ce 	bl	800518c <I2C_IsAcknowledgeFailed>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d001      	beq.n	8004ffa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e02d      	b.n	8005056 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005000:	d021      	beq.n	8005046 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005002:	f7fe fda9 	bl	8003b58 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	429a      	cmp	r2, r3
 8005010:	d302      	bcc.n	8005018 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d116      	bne.n	8005046 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2220      	movs	r2, #32
 8005022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005032:	f043 0220 	orr.w	r2, r3, #32
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e007      	b.n	8005056 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	695b      	ldr	r3, [r3, #20]
 800504c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005050:	2b80      	cmp	r3, #128	; 0x80
 8005052:	d1ca      	bne.n	8004fea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b084      	sub	sp, #16
 8005062:	af00      	add	r7, sp, #0
 8005064:	60f8      	str	r0, [r7, #12]
 8005066:	60b9      	str	r1, [r7, #8]
 8005068:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800506a:	e02d      	b.n	80050c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f000 f88d 	bl	800518c <I2C_IsAcknowledgeFailed>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d001      	beq.n	800507c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e02d      	b.n	80050d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005082:	d021      	beq.n	80050c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005084:	f7fe fd68 	bl	8003b58 <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	68ba      	ldr	r2, [r7, #8]
 8005090:	429a      	cmp	r2, r3
 8005092:	d302      	bcc.n	800509a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d116      	bne.n	80050c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2220      	movs	r2, #32
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b4:	f043 0220 	orr.w	r2, r3, #32
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e007      	b.n	80050d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	f003 0304 	and.w	r3, r3, #4
 80050d2:	2b04      	cmp	r3, #4
 80050d4:	d1ca      	bne.n	800506c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80050ec:	e042      	b.n	8005174 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	695b      	ldr	r3, [r3, #20]
 80050f4:	f003 0310 	and.w	r3, r3, #16
 80050f8:	2b10      	cmp	r3, #16
 80050fa:	d119      	bne.n	8005130 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f06f 0210 	mvn.w	r2, #16
 8005104:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2220      	movs	r2, #32
 8005110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e029      	b.n	8005184 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005130:	f7fe fd12 	bl	8003b58 <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	68ba      	ldr	r2, [r7, #8]
 800513c:	429a      	cmp	r2, r3
 800513e:	d302      	bcc.n	8005146 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d116      	bne.n	8005174 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2200      	movs	r2, #0
 800514a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2220      	movs	r2, #32
 8005150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005160:	f043 0220 	orr.w	r2, r3, #32
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e007      	b.n	8005184 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800517e:	2b40      	cmp	r3, #64	; 0x40
 8005180:	d1b5      	bne.n	80050ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800519e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051a2:	d11b      	bne.n	80051dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80051ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2220      	movs	r2, #32
 80051b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c8:	f043 0204 	orr.w	r2, r3, #4
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e000      	b.n	80051de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	370c      	adds	r7, #12
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
	...

080051ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b086      	sub	sp, #24
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d101      	bne.n	80051fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e267      	b.n	80056ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b00      	cmp	r3, #0
 8005208:	d075      	beq.n	80052f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800520a:	4b88      	ldr	r3, [pc, #544]	; (800542c <HAL_RCC_OscConfig+0x240>)
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f003 030c 	and.w	r3, r3, #12
 8005212:	2b04      	cmp	r3, #4
 8005214:	d00c      	beq.n	8005230 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005216:	4b85      	ldr	r3, [pc, #532]	; (800542c <HAL_RCC_OscConfig+0x240>)
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800521e:	2b08      	cmp	r3, #8
 8005220:	d112      	bne.n	8005248 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005222:	4b82      	ldr	r3, [pc, #520]	; (800542c <HAL_RCC_OscConfig+0x240>)
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800522a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800522e:	d10b      	bne.n	8005248 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005230:	4b7e      	ldr	r3, [pc, #504]	; (800542c <HAL_RCC_OscConfig+0x240>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d05b      	beq.n	80052f4 <HAL_RCC_OscConfig+0x108>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d157      	bne.n	80052f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e242      	b.n	80056ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005250:	d106      	bne.n	8005260 <HAL_RCC_OscConfig+0x74>
 8005252:	4b76      	ldr	r3, [pc, #472]	; (800542c <HAL_RCC_OscConfig+0x240>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a75      	ldr	r2, [pc, #468]	; (800542c <HAL_RCC_OscConfig+0x240>)
 8005258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800525c:	6013      	str	r3, [r2, #0]
 800525e:	e01d      	b.n	800529c <HAL_RCC_OscConfig+0xb0>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005268:	d10c      	bne.n	8005284 <HAL_RCC_OscConfig+0x98>
 800526a:	4b70      	ldr	r3, [pc, #448]	; (800542c <HAL_RCC_OscConfig+0x240>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a6f      	ldr	r2, [pc, #444]	; (800542c <HAL_RCC_OscConfig+0x240>)
 8005270:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005274:	6013      	str	r3, [r2, #0]
 8005276:	4b6d      	ldr	r3, [pc, #436]	; (800542c <HAL_RCC_OscConfig+0x240>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a6c      	ldr	r2, [pc, #432]	; (800542c <HAL_RCC_OscConfig+0x240>)
 800527c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005280:	6013      	str	r3, [r2, #0]
 8005282:	e00b      	b.n	800529c <HAL_RCC_OscConfig+0xb0>
 8005284:	4b69      	ldr	r3, [pc, #420]	; (800542c <HAL_RCC_OscConfig+0x240>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a68      	ldr	r2, [pc, #416]	; (800542c <HAL_RCC_OscConfig+0x240>)
 800528a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800528e:	6013      	str	r3, [r2, #0]
 8005290:	4b66      	ldr	r3, [pc, #408]	; (800542c <HAL_RCC_OscConfig+0x240>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a65      	ldr	r2, [pc, #404]	; (800542c <HAL_RCC_OscConfig+0x240>)
 8005296:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800529a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d013      	beq.n	80052cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052a4:	f7fe fc58 	bl	8003b58 <HAL_GetTick>
 80052a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052aa:	e008      	b.n	80052be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052ac:	f7fe fc54 	bl	8003b58 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	2b64      	cmp	r3, #100	; 0x64
 80052b8:	d901      	bls.n	80052be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e207      	b.n	80056ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052be:	4b5b      	ldr	r3, [pc, #364]	; (800542c <HAL_RCC_OscConfig+0x240>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d0f0      	beq.n	80052ac <HAL_RCC_OscConfig+0xc0>
 80052ca:	e014      	b.n	80052f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052cc:	f7fe fc44 	bl	8003b58 <HAL_GetTick>
 80052d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052d2:	e008      	b.n	80052e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052d4:	f7fe fc40 	bl	8003b58 <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	2b64      	cmp	r3, #100	; 0x64
 80052e0:	d901      	bls.n	80052e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e1f3      	b.n	80056ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052e6:	4b51      	ldr	r3, [pc, #324]	; (800542c <HAL_RCC_OscConfig+0x240>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1f0      	bne.n	80052d4 <HAL_RCC_OscConfig+0xe8>
 80052f2:	e000      	b.n	80052f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0302 	and.w	r3, r3, #2
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d063      	beq.n	80053ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005302:	4b4a      	ldr	r3, [pc, #296]	; (800542c <HAL_RCC_OscConfig+0x240>)
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	f003 030c 	and.w	r3, r3, #12
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00b      	beq.n	8005326 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800530e:	4b47      	ldr	r3, [pc, #284]	; (800542c <HAL_RCC_OscConfig+0x240>)
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005316:	2b08      	cmp	r3, #8
 8005318:	d11c      	bne.n	8005354 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800531a:	4b44      	ldr	r3, [pc, #272]	; (800542c <HAL_RCC_OscConfig+0x240>)
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d116      	bne.n	8005354 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005326:	4b41      	ldr	r3, [pc, #260]	; (800542c <HAL_RCC_OscConfig+0x240>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0302 	and.w	r3, r3, #2
 800532e:	2b00      	cmp	r3, #0
 8005330:	d005      	beq.n	800533e <HAL_RCC_OscConfig+0x152>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d001      	beq.n	800533e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e1c7      	b.n	80056ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800533e:	4b3b      	ldr	r3, [pc, #236]	; (800542c <HAL_RCC_OscConfig+0x240>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	00db      	lsls	r3, r3, #3
 800534c:	4937      	ldr	r1, [pc, #220]	; (800542c <HAL_RCC_OscConfig+0x240>)
 800534e:	4313      	orrs	r3, r2
 8005350:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005352:	e03a      	b.n	80053ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d020      	beq.n	800539e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800535c:	4b34      	ldr	r3, [pc, #208]	; (8005430 <HAL_RCC_OscConfig+0x244>)
 800535e:	2201      	movs	r2, #1
 8005360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005362:	f7fe fbf9 	bl	8003b58 <HAL_GetTick>
 8005366:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005368:	e008      	b.n	800537c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800536a:	f7fe fbf5 	bl	8003b58 <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	2b02      	cmp	r3, #2
 8005376:	d901      	bls.n	800537c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	e1a8      	b.n	80056ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800537c:	4b2b      	ldr	r3, [pc, #172]	; (800542c <HAL_RCC_OscConfig+0x240>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0302 	and.w	r3, r3, #2
 8005384:	2b00      	cmp	r3, #0
 8005386:	d0f0      	beq.n	800536a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005388:	4b28      	ldr	r3, [pc, #160]	; (800542c <HAL_RCC_OscConfig+0x240>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	00db      	lsls	r3, r3, #3
 8005396:	4925      	ldr	r1, [pc, #148]	; (800542c <HAL_RCC_OscConfig+0x240>)
 8005398:	4313      	orrs	r3, r2
 800539a:	600b      	str	r3, [r1, #0]
 800539c:	e015      	b.n	80053ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800539e:	4b24      	ldr	r3, [pc, #144]	; (8005430 <HAL_RCC_OscConfig+0x244>)
 80053a0:	2200      	movs	r2, #0
 80053a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a4:	f7fe fbd8 	bl	8003b58 <HAL_GetTick>
 80053a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053aa:	e008      	b.n	80053be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053ac:	f7fe fbd4 	bl	8003b58 <HAL_GetTick>
 80053b0:	4602      	mov	r2, r0
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d901      	bls.n	80053be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e187      	b.n	80056ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053be:	4b1b      	ldr	r3, [pc, #108]	; (800542c <HAL_RCC_OscConfig+0x240>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0302 	and.w	r3, r3, #2
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1f0      	bne.n	80053ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0308 	and.w	r3, r3, #8
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d036      	beq.n	8005444 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d016      	beq.n	800540c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053de:	4b15      	ldr	r3, [pc, #84]	; (8005434 <HAL_RCC_OscConfig+0x248>)
 80053e0:	2201      	movs	r2, #1
 80053e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053e4:	f7fe fbb8 	bl	8003b58 <HAL_GetTick>
 80053e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053ea:	e008      	b.n	80053fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053ec:	f7fe fbb4 	bl	8003b58 <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d901      	bls.n	80053fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e167      	b.n	80056ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053fe:	4b0b      	ldr	r3, [pc, #44]	; (800542c <HAL_RCC_OscConfig+0x240>)
 8005400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	2b00      	cmp	r3, #0
 8005408:	d0f0      	beq.n	80053ec <HAL_RCC_OscConfig+0x200>
 800540a:	e01b      	b.n	8005444 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800540c:	4b09      	ldr	r3, [pc, #36]	; (8005434 <HAL_RCC_OscConfig+0x248>)
 800540e:	2200      	movs	r2, #0
 8005410:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005412:	f7fe fba1 	bl	8003b58 <HAL_GetTick>
 8005416:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005418:	e00e      	b.n	8005438 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800541a:	f7fe fb9d 	bl	8003b58 <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	2b02      	cmp	r3, #2
 8005426:	d907      	bls.n	8005438 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e150      	b.n	80056ce <HAL_RCC_OscConfig+0x4e2>
 800542c:	40023800 	.word	0x40023800
 8005430:	42470000 	.word	0x42470000
 8005434:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005438:	4b88      	ldr	r3, [pc, #544]	; (800565c <HAL_RCC_OscConfig+0x470>)
 800543a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800543c:	f003 0302 	and.w	r3, r3, #2
 8005440:	2b00      	cmp	r3, #0
 8005442:	d1ea      	bne.n	800541a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0304 	and.w	r3, r3, #4
 800544c:	2b00      	cmp	r3, #0
 800544e:	f000 8097 	beq.w	8005580 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005452:	2300      	movs	r3, #0
 8005454:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005456:	4b81      	ldr	r3, [pc, #516]	; (800565c <HAL_RCC_OscConfig+0x470>)
 8005458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d10f      	bne.n	8005482 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005462:	2300      	movs	r3, #0
 8005464:	60bb      	str	r3, [r7, #8]
 8005466:	4b7d      	ldr	r3, [pc, #500]	; (800565c <HAL_RCC_OscConfig+0x470>)
 8005468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546a:	4a7c      	ldr	r2, [pc, #496]	; (800565c <HAL_RCC_OscConfig+0x470>)
 800546c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005470:	6413      	str	r3, [r2, #64]	; 0x40
 8005472:	4b7a      	ldr	r3, [pc, #488]	; (800565c <HAL_RCC_OscConfig+0x470>)
 8005474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800547a:	60bb      	str	r3, [r7, #8]
 800547c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800547e:	2301      	movs	r3, #1
 8005480:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005482:	4b77      	ldr	r3, [pc, #476]	; (8005660 <HAL_RCC_OscConfig+0x474>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800548a:	2b00      	cmp	r3, #0
 800548c:	d118      	bne.n	80054c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800548e:	4b74      	ldr	r3, [pc, #464]	; (8005660 <HAL_RCC_OscConfig+0x474>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a73      	ldr	r2, [pc, #460]	; (8005660 <HAL_RCC_OscConfig+0x474>)
 8005494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005498:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800549a:	f7fe fb5d 	bl	8003b58 <HAL_GetTick>
 800549e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054a0:	e008      	b.n	80054b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054a2:	f7fe fb59 	bl	8003b58 <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d901      	bls.n	80054b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e10c      	b.n	80056ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054b4:	4b6a      	ldr	r3, [pc, #424]	; (8005660 <HAL_RCC_OscConfig+0x474>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d0f0      	beq.n	80054a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d106      	bne.n	80054d6 <HAL_RCC_OscConfig+0x2ea>
 80054c8:	4b64      	ldr	r3, [pc, #400]	; (800565c <HAL_RCC_OscConfig+0x470>)
 80054ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054cc:	4a63      	ldr	r2, [pc, #396]	; (800565c <HAL_RCC_OscConfig+0x470>)
 80054ce:	f043 0301 	orr.w	r3, r3, #1
 80054d2:	6713      	str	r3, [r2, #112]	; 0x70
 80054d4:	e01c      	b.n	8005510 <HAL_RCC_OscConfig+0x324>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	2b05      	cmp	r3, #5
 80054dc:	d10c      	bne.n	80054f8 <HAL_RCC_OscConfig+0x30c>
 80054de:	4b5f      	ldr	r3, [pc, #380]	; (800565c <HAL_RCC_OscConfig+0x470>)
 80054e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e2:	4a5e      	ldr	r2, [pc, #376]	; (800565c <HAL_RCC_OscConfig+0x470>)
 80054e4:	f043 0304 	orr.w	r3, r3, #4
 80054e8:	6713      	str	r3, [r2, #112]	; 0x70
 80054ea:	4b5c      	ldr	r3, [pc, #368]	; (800565c <HAL_RCC_OscConfig+0x470>)
 80054ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ee:	4a5b      	ldr	r2, [pc, #364]	; (800565c <HAL_RCC_OscConfig+0x470>)
 80054f0:	f043 0301 	orr.w	r3, r3, #1
 80054f4:	6713      	str	r3, [r2, #112]	; 0x70
 80054f6:	e00b      	b.n	8005510 <HAL_RCC_OscConfig+0x324>
 80054f8:	4b58      	ldr	r3, [pc, #352]	; (800565c <HAL_RCC_OscConfig+0x470>)
 80054fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054fc:	4a57      	ldr	r2, [pc, #348]	; (800565c <HAL_RCC_OscConfig+0x470>)
 80054fe:	f023 0301 	bic.w	r3, r3, #1
 8005502:	6713      	str	r3, [r2, #112]	; 0x70
 8005504:	4b55      	ldr	r3, [pc, #340]	; (800565c <HAL_RCC_OscConfig+0x470>)
 8005506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005508:	4a54      	ldr	r2, [pc, #336]	; (800565c <HAL_RCC_OscConfig+0x470>)
 800550a:	f023 0304 	bic.w	r3, r3, #4
 800550e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d015      	beq.n	8005544 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005518:	f7fe fb1e 	bl	8003b58 <HAL_GetTick>
 800551c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800551e:	e00a      	b.n	8005536 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005520:	f7fe fb1a 	bl	8003b58 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	f241 3288 	movw	r2, #5000	; 0x1388
 800552e:	4293      	cmp	r3, r2
 8005530:	d901      	bls.n	8005536 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e0cb      	b.n	80056ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005536:	4b49      	ldr	r3, [pc, #292]	; (800565c <HAL_RCC_OscConfig+0x470>)
 8005538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	2b00      	cmp	r3, #0
 8005540:	d0ee      	beq.n	8005520 <HAL_RCC_OscConfig+0x334>
 8005542:	e014      	b.n	800556e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005544:	f7fe fb08 	bl	8003b58 <HAL_GetTick>
 8005548:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800554a:	e00a      	b.n	8005562 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800554c:	f7fe fb04 	bl	8003b58 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	f241 3288 	movw	r2, #5000	; 0x1388
 800555a:	4293      	cmp	r3, r2
 800555c:	d901      	bls.n	8005562 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e0b5      	b.n	80056ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005562:	4b3e      	ldr	r3, [pc, #248]	; (800565c <HAL_RCC_OscConfig+0x470>)
 8005564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005566:	f003 0302 	and.w	r3, r3, #2
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1ee      	bne.n	800554c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800556e:	7dfb      	ldrb	r3, [r7, #23]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d105      	bne.n	8005580 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005574:	4b39      	ldr	r3, [pc, #228]	; (800565c <HAL_RCC_OscConfig+0x470>)
 8005576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005578:	4a38      	ldr	r2, [pc, #224]	; (800565c <HAL_RCC_OscConfig+0x470>)
 800557a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800557e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	2b00      	cmp	r3, #0
 8005586:	f000 80a1 	beq.w	80056cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800558a:	4b34      	ldr	r3, [pc, #208]	; (800565c <HAL_RCC_OscConfig+0x470>)
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f003 030c 	and.w	r3, r3, #12
 8005592:	2b08      	cmp	r3, #8
 8005594:	d05c      	beq.n	8005650 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	2b02      	cmp	r3, #2
 800559c:	d141      	bne.n	8005622 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800559e:	4b31      	ldr	r3, [pc, #196]	; (8005664 <HAL_RCC_OscConfig+0x478>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055a4:	f7fe fad8 	bl	8003b58 <HAL_GetTick>
 80055a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055aa:	e008      	b.n	80055be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055ac:	f7fe fad4 	bl	8003b58 <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d901      	bls.n	80055be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e087      	b.n	80056ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055be:	4b27      	ldr	r3, [pc, #156]	; (800565c <HAL_RCC_OscConfig+0x470>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1f0      	bne.n	80055ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	69da      	ldr	r2, [r3, #28]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	431a      	orrs	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d8:	019b      	lsls	r3, r3, #6
 80055da:	431a      	orrs	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e0:	085b      	lsrs	r3, r3, #1
 80055e2:	3b01      	subs	r3, #1
 80055e4:	041b      	lsls	r3, r3, #16
 80055e6:	431a      	orrs	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ec:	061b      	lsls	r3, r3, #24
 80055ee:	491b      	ldr	r1, [pc, #108]	; (800565c <HAL_RCC_OscConfig+0x470>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055f4:	4b1b      	ldr	r3, [pc, #108]	; (8005664 <HAL_RCC_OscConfig+0x478>)
 80055f6:	2201      	movs	r2, #1
 80055f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055fa:	f7fe faad 	bl	8003b58 <HAL_GetTick>
 80055fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005600:	e008      	b.n	8005614 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005602:	f7fe faa9 	bl	8003b58 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	2b02      	cmp	r3, #2
 800560e:	d901      	bls.n	8005614 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e05c      	b.n	80056ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005614:	4b11      	ldr	r3, [pc, #68]	; (800565c <HAL_RCC_OscConfig+0x470>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d0f0      	beq.n	8005602 <HAL_RCC_OscConfig+0x416>
 8005620:	e054      	b.n	80056cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005622:	4b10      	ldr	r3, [pc, #64]	; (8005664 <HAL_RCC_OscConfig+0x478>)
 8005624:	2200      	movs	r2, #0
 8005626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005628:	f7fe fa96 	bl	8003b58 <HAL_GetTick>
 800562c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800562e:	e008      	b.n	8005642 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005630:	f7fe fa92 	bl	8003b58 <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	2b02      	cmp	r3, #2
 800563c:	d901      	bls.n	8005642 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e045      	b.n	80056ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005642:	4b06      	ldr	r3, [pc, #24]	; (800565c <HAL_RCC_OscConfig+0x470>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1f0      	bne.n	8005630 <HAL_RCC_OscConfig+0x444>
 800564e:	e03d      	b.n	80056cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d107      	bne.n	8005668 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e038      	b.n	80056ce <HAL_RCC_OscConfig+0x4e2>
 800565c:	40023800 	.word	0x40023800
 8005660:	40007000 	.word	0x40007000
 8005664:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005668:	4b1b      	ldr	r3, [pc, #108]	; (80056d8 <HAL_RCC_OscConfig+0x4ec>)
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d028      	beq.n	80056c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005680:	429a      	cmp	r2, r3
 8005682:	d121      	bne.n	80056c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800568e:	429a      	cmp	r2, r3
 8005690:	d11a      	bne.n	80056c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005698:	4013      	ands	r3, r2
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800569e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d111      	bne.n	80056c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ae:	085b      	lsrs	r3, r3, #1
 80056b0:	3b01      	subs	r3, #1
 80056b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d107      	bne.n	80056c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d001      	beq.n	80056cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e000      	b.n	80056ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3718      	adds	r7, #24
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	40023800 	.word	0x40023800

080056dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d101      	bne.n	80056f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e0cc      	b.n	800588a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056f0:	4b68      	ldr	r3, [pc, #416]	; (8005894 <HAL_RCC_ClockConfig+0x1b8>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0307 	and.w	r3, r3, #7
 80056f8:	683a      	ldr	r2, [r7, #0]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d90c      	bls.n	8005718 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056fe:	4b65      	ldr	r3, [pc, #404]	; (8005894 <HAL_RCC_ClockConfig+0x1b8>)
 8005700:	683a      	ldr	r2, [r7, #0]
 8005702:	b2d2      	uxtb	r2, r2
 8005704:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005706:	4b63      	ldr	r3, [pc, #396]	; (8005894 <HAL_RCC_ClockConfig+0x1b8>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 0307 	and.w	r3, r3, #7
 800570e:	683a      	ldr	r2, [r7, #0]
 8005710:	429a      	cmp	r2, r3
 8005712:	d001      	beq.n	8005718 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e0b8      	b.n	800588a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0302 	and.w	r3, r3, #2
 8005720:	2b00      	cmp	r3, #0
 8005722:	d020      	beq.n	8005766 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0304 	and.w	r3, r3, #4
 800572c:	2b00      	cmp	r3, #0
 800572e:	d005      	beq.n	800573c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005730:	4b59      	ldr	r3, [pc, #356]	; (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	4a58      	ldr	r2, [pc, #352]	; (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 8005736:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800573a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0308 	and.w	r3, r3, #8
 8005744:	2b00      	cmp	r3, #0
 8005746:	d005      	beq.n	8005754 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005748:	4b53      	ldr	r3, [pc, #332]	; (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	4a52      	ldr	r2, [pc, #328]	; (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 800574e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005752:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005754:	4b50      	ldr	r3, [pc, #320]	; (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	494d      	ldr	r1, [pc, #308]	; (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 8005762:	4313      	orrs	r3, r2
 8005764:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0301 	and.w	r3, r3, #1
 800576e:	2b00      	cmp	r3, #0
 8005770:	d044      	beq.n	80057fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d107      	bne.n	800578a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800577a:	4b47      	ldr	r3, [pc, #284]	; (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d119      	bne.n	80057ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e07f      	b.n	800588a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	2b02      	cmp	r3, #2
 8005790:	d003      	beq.n	800579a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005796:	2b03      	cmp	r3, #3
 8005798:	d107      	bne.n	80057aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800579a:	4b3f      	ldr	r3, [pc, #252]	; (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d109      	bne.n	80057ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e06f      	b.n	800588a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057aa:	4b3b      	ldr	r3, [pc, #236]	; (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0302 	and.w	r3, r3, #2
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d101      	bne.n	80057ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e067      	b.n	800588a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057ba:	4b37      	ldr	r3, [pc, #220]	; (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f023 0203 	bic.w	r2, r3, #3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	4934      	ldr	r1, [pc, #208]	; (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 80057c8:	4313      	orrs	r3, r2
 80057ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057cc:	f7fe f9c4 	bl	8003b58 <HAL_GetTick>
 80057d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057d2:	e00a      	b.n	80057ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057d4:	f7fe f9c0 	bl	8003b58 <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	f241 3288 	movw	r2, #5000	; 0x1388
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d901      	bls.n	80057ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e04f      	b.n	800588a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057ea:	4b2b      	ldr	r3, [pc, #172]	; (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f003 020c 	and.w	r2, r3, #12
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d1eb      	bne.n	80057d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057fc:	4b25      	ldr	r3, [pc, #148]	; (8005894 <HAL_RCC_ClockConfig+0x1b8>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0307 	and.w	r3, r3, #7
 8005804:	683a      	ldr	r2, [r7, #0]
 8005806:	429a      	cmp	r2, r3
 8005808:	d20c      	bcs.n	8005824 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800580a:	4b22      	ldr	r3, [pc, #136]	; (8005894 <HAL_RCC_ClockConfig+0x1b8>)
 800580c:	683a      	ldr	r2, [r7, #0]
 800580e:	b2d2      	uxtb	r2, r2
 8005810:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005812:	4b20      	ldr	r3, [pc, #128]	; (8005894 <HAL_RCC_ClockConfig+0x1b8>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0307 	and.w	r3, r3, #7
 800581a:	683a      	ldr	r2, [r7, #0]
 800581c:	429a      	cmp	r2, r3
 800581e:	d001      	beq.n	8005824 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e032      	b.n	800588a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0304 	and.w	r3, r3, #4
 800582c:	2b00      	cmp	r3, #0
 800582e:	d008      	beq.n	8005842 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005830:	4b19      	ldr	r3, [pc, #100]	; (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	4916      	ldr	r1, [pc, #88]	; (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 800583e:	4313      	orrs	r3, r2
 8005840:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0308 	and.w	r3, r3, #8
 800584a:	2b00      	cmp	r3, #0
 800584c:	d009      	beq.n	8005862 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800584e:	4b12      	ldr	r3, [pc, #72]	; (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	00db      	lsls	r3, r3, #3
 800585c:	490e      	ldr	r1, [pc, #56]	; (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 800585e:	4313      	orrs	r3, r2
 8005860:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005862:	f000 f821 	bl	80058a8 <HAL_RCC_GetSysClockFreq>
 8005866:	4602      	mov	r2, r0
 8005868:	4b0b      	ldr	r3, [pc, #44]	; (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	091b      	lsrs	r3, r3, #4
 800586e:	f003 030f 	and.w	r3, r3, #15
 8005872:	490a      	ldr	r1, [pc, #40]	; (800589c <HAL_RCC_ClockConfig+0x1c0>)
 8005874:	5ccb      	ldrb	r3, [r1, r3]
 8005876:	fa22 f303 	lsr.w	r3, r2, r3
 800587a:	4a09      	ldr	r2, [pc, #36]	; (80058a0 <HAL_RCC_ClockConfig+0x1c4>)
 800587c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800587e:	4b09      	ldr	r3, [pc, #36]	; (80058a4 <HAL_RCC_ClockConfig+0x1c8>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4618      	mov	r0, r3
 8005884:	f7fe f924 	bl	8003ad0 <HAL_InitTick>

  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3710      	adds	r7, #16
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	40023c00 	.word	0x40023c00
 8005898:	40023800 	.word	0x40023800
 800589c:	08009b9c 	.word	0x08009b9c
 80058a0:	20000024 	.word	0x20000024
 80058a4:	20000028 	.word	0x20000028

080058a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058ac:	b094      	sub	sp, #80	; 0x50
 80058ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80058b0:	2300      	movs	r3, #0
 80058b2:	647b      	str	r3, [r7, #68]	; 0x44
 80058b4:	2300      	movs	r3, #0
 80058b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058b8:	2300      	movs	r3, #0
 80058ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80058bc:	2300      	movs	r3, #0
 80058be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058c0:	4b79      	ldr	r3, [pc, #484]	; (8005aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	f003 030c 	and.w	r3, r3, #12
 80058c8:	2b08      	cmp	r3, #8
 80058ca:	d00d      	beq.n	80058e8 <HAL_RCC_GetSysClockFreq+0x40>
 80058cc:	2b08      	cmp	r3, #8
 80058ce:	f200 80e1 	bhi.w	8005a94 <HAL_RCC_GetSysClockFreq+0x1ec>
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d002      	beq.n	80058dc <HAL_RCC_GetSysClockFreq+0x34>
 80058d6:	2b04      	cmp	r3, #4
 80058d8:	d003      	beq.n	80058e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80058da:	e0db      	b.n	8005a94 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80058dc:	4b73      	ldr	r3, [pc, #460]	; (8005aac <HAL_RCC_GetSysClockFreq+0x204>)
 80058de:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80058e0:	e0db      	b.n	8005a9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80058e2:	4b73      	ldr	r3, [pc, #460]	; (8005ab0 <HAL_RCC_GetSysClockFreq+0x208>)
 80058e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80058e6:	e0d8      	b.n	8005a9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058e8:	4b6f      	ldr	r3, [pc, #444]	; (8005aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058f0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80058f2:	4b6d      	ldr	r3, [pc, #436]	; (8005aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d063      	beq.n	80059c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058fe:	4b6a      	ldr	r3, [pc, #424]	; (8005aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	099b      	lsrs	r3, r3, #6
 8005904:	2200      	movs	r2, #0
 8005906:	63bb      	str	r3, [r7, #56]	; 0x38
 8005908:	63fa      	str	r2, [r7, #60]	; 0x3c
 800590a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800590c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005910:	633b      	str	r3, [r7, #48]	; 0x30
 8005912:	2300      	movs	r3, #0
 8005914:	637b      	str	r3, [r7, #52]	; 0x34
 8005916:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800591a:	4622      	mov	r2, r4
 800591c:	462b      	mov	r3, r5
 800591e:	f04f 0000 	mov.w	r0, #0
 8005922:	f04f 0100 	mov.w	r1, #0
 8005926:	0159      	lsls	r1, r3, #5
 8005928:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800592c:	0150      	lsls	r0, r2, #5
 800592e:	4602      	mov	r2, r0
 8005930:	460b      	mov	r3, r1
 8005932:	4621      	mov	r1, r4
 8005934:	1a51      	subs	r1, r2, r1
 8005936:	6139      	str	r1, [r7, #16]
 8005938:	4629      	mov	r1, r5
 800593a:	eb63 0301 	sbc.w	r3, r3, r1
 800593e:	617b      	str	r3, [r7, #20]
 8005940:	f04f 0200 	mov.w	r2, #0
 8005944:	f04f 0300 	mov.w	r3, #0
 8005948:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800594c:	4659      	mov	r1, fp
 800594e:	018b      	lsls	r3, r1, #6
 8005950:	4651      	mov	r1, sl
 8005952:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005956:	4651      	mov	r1, sl
 8005958:	018a      	lsls	r2, r1, #6
 800595a:	4651      	mov	r1, sl
 800595c:	ebb2 0801 	subs.w	r8, r2, r1
 8005960:	4659      	mov	r1, fp
 8005962:	eb63 0901 	sbc.w	r9, r3, r1
 8005966:	f04f 0200 	mov.w	r2, #0
 800596a:	f04f 0300 	mov.w	r3, #0
 800596e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005972:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005976:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800597a:	4690      	mov	r8, r2
 800597c:	4699      	mov	r9, r3
 800597e:	4623      	mov	r3, r4
 8005980:	eb18 0303 	adds.w	r3, r8, r3
 8005984:	60bb      	str	r3, [r7, #8]
 8005986:	462b      	mov	r3, r5
 8005988:	eb49 0303 	adc.w	r3, r9, r3
 800598c:	60fb      	str	r3, [r7, #12]
 800598e:	f04f 0200 	mov.w	r2, #0
 8005992:	f04f 0300 	mov.w	r3, #0
 8005996:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800599a:	4629      	mov	r1, r5
 800599c:	024b      	lsls	r3, r1, #9
 800599e:	4621      	mov	r1, r4
 80059a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80059a4:	4621      	mov	r1, r4
 80059a6:	024a      	lsls	r2, r1, #9
 80059a8:	4610      	mov	r0, r2
 80059aa:	4619      	mov	r1, r3
 80059ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059ae:	2200      	movs	r2, #0
 80059b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80059b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80059b8:	f7fb f8f6 	bl	8000ba8 <__aeabi_uldivmod>
 80059bc:	4602      	mov	r2, r0
 80059be:	460b      	mov	r3, r1
 80059c0:	4613      	mov	r3, r2
 80059c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059c4:	e058      	b.n	8005a78 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059c6:	4b38      	ldr	r3, [pc, #224]	; (8005aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	099b      	lsrs	r3, r3, #6
 80059cc:	2200      	movs	r2, #0
 80059ce:	4618      	mov	r0, r3
 80059d0:	4611      	mov	r1, r2
 80059d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80059d6:	623b      	str	r3, [r7, #32]
 80059d8:	2300      	movs	r3, #0
 80059da:	627b      	str	r3, [r7, #36]	; 0x24
 80059dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80059e0:	4642      	mov	r2, r8
 80059e2:	464b      	mov	r3, r9
 80059e4:	f04f 0000 	mov.w	r0, #0
 80059e8:	f04f 0100 	mov.w	r1, #0
 80059ec:	0159      	lsls	r1, r3, #5
 80059ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059f2:	0150      	lsls	r0, r2, #5
 80059f4:	4602      	mov	r2, r0
 80059f6:	460b      	mov	r3, r1
 80059f8:	4641      	mov	r1, r8
 80059fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80059fe:	4649      	mov	r1, r9
 8005a00:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a04:	f04f 0200 	mov.w	r2, #0
 8005a08:	f04f 0300 	mov.w	r3, #0
 8005a0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a18:	ebb2 040a 	subs.w	r4, r2, sl
 8005a1c:	eb63 050b 	sbc.w	r5, r3, fp
 8005a20:	f04f 0200 	mov.w	r2, #0
 8005a24:	f04f 0300 	mov.w	r3, #0
 8005a28:	00eb      	lsls	r3, r5, #3
 8005a2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a2e:	00e2      	lsls	r2, r4, #3
 8005a30:	4614      	mov	r4, r2
 8005a32:	461d      	mov	r5, r3
 8005a34:	4643      	mov	r3, r8
 8005a36:	18e3      	adds	r3, r4, r3
 8005a38:	603b      	str	r3, [r7, #0]
 8005a3a:	464b      	mov	r3, r9
 8005a3c:	eb45 0303 	adc.w	r3, r5, r3
 8005a40:	607b      	str	r3, [r7, #4]
 8005a42:	f04f 0200 	mov.w	r2, #0
 8005a46:	f04f 0300 	mov.w	r3, #0
 8005a4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a4e:	4629      	mov	r1, r5
 8005a50:	028b      	lsls	r3, r1, #10
 8005a52:	4621      	mov	r1, r4
 8005a54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a58:	4621      	mov	r1, r4
 8005a5a:	028a      	lsls	r2, r1, #10
 8005a5c:	4610      	mov	r0, r2
 8005a5e:	4619      	mov	r1, r3
 8005a60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a62:	2200      	movs	r2, #0
 8005a64:	61bb      	str	r3, [r7, #24]
 8005a66:	61fa      	str	r2, [r7, #28]
 8005a68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a6c:	f7fb f89c 	bl	8000ba8 <__aeabi_uldivmod>
 8005a70:	4602      	mov	r2, r0
 8005a72:	460b      	mov	r3, r1
 8005a74:	4613      	mov	r3, r2
 8005a76:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a78:	4b0b      	ldr	r3, [pc, #44]	; (8005aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	0c1b      	lsrs	r3, r3, #16
 8005a7e:	f003 0303 	and.w	r3, r3, #3
 8005a82:	3301      	adds	r3, #1
 8005a84:	005b      	lsls	r3, r3, #1
 8005a86:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005a88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a92:	e002      	b.n	8005a9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a94:	4b05      	ldr	r3, [pc, #20]	; (8005aac <HAL_RCC_GetSysClockFreq+0x204>)
 8005a96:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3750      	adds	r7, #80	; 0x50
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005aa6:	bf00      	nop
 8005aa8:	40023800 	.word	0x40023800
 8005aac:	00f42400 	.word	0x00f42400
 8005ab0:	007a1200 	.word	0x007a1200

08005ab4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ab8:	4b03      	ldr	r3, [pc, #12]	; (8005ac8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005aba:	681b      	ldr	r3, [r3, #0]
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	20000024 	.word	0x20000024

08005acc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005ad0:	f7ff fff0 	bl	8005ab4 <HAL_RCC_GetHCLKFreq>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	4b05      	ldr	r3, [pc, #20]	; (8005aec <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	0a9b      	lsrs	r3, r3, #10
 8005adc:	f003 0307 	and.w	r3, r3, #7
 8005ae0:	4903      	ldr	r1, [pc, #12]	; (8005af0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ae2:	5ccb      	ldrb	r3, [r1, r3]
 8005ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	40023800 	.word	0x40023800
 8005af0:	08009bac 	.word	0x08009bac

08005af4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005af8:	f7ff ffdc 	bl	8005ab4 <HAL_RCC_GetHCLKFreq>
 8005afc:	4602      	mov	r2, r0
 8005afe:	4b05      	ldr	r3, [pc, #20]	; (8005b14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	0b5b      	lsrs	r3, r3, #13
 8005b04:	f003 0307 	and.w	r3, r3, #7
 8005b08:	4903      	ldr	r1, [pc, #12]	; (8005b18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b0a:	5ccb      	ldrb	r3, [r1, r3]
 8005b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	40023800 	.word	0x40023800
 8005b18:	08009bac 	.word	0x08009bac

08005b1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d101      	bne.n	8005b2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e03f      	b.n	8005bae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d106      	bne.n	8005b48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f7fd fe1c 	bl	8003780 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2224      	movs	r2, #36	; 0x24
 8005b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68da      	ldr	r2, [r3, #12]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 fd7b 	bl	800665c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	691a      	ldr	r2, [r3, #16]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	695a      	ldr	r2, [r3, #20]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68da      	ldr	r2, [r3, #12]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2220      	movs	r2, #32
 8005ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3708      	adds	r7, #8
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}

08005bb6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bb6:	b580      	push	{r7, lr}
 8005bb8:	b08a      	sub	sp, #40	; 0x28
 8005bba:	af02      	add	r7, sp, #8
 8005bbc:	60f8      	str	r0, [r7, #12]
 8005bbe:	60b9      	str	r1, [r7, #8]
 8005bc0:	603b      	str	r3, [r7, #0]
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	2b20      	cmp	r3, #32
 8005bd4:	d17c      	bne.n	8005cd0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d002      	beq.n	8005be2 <HAL_UART_Transmit+0x2c>
 8005bdc:	88fb      	ldrh	r3, [r7, #6]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d101      	bne.n	8005be6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e075      	b.n	8005cd2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d101      	bne.n	8005bf4 <HAL_UART_Transmit+0x3e>
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	e06e      	b.n	8005cd2 <HAL_UART_Transmit+0x11c>
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2221      	movs	r2, #33	; 0x21
 8005c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c0a:	f7fd ffa5 	bl	8003b58 <HAL_GetTick>
 8005c0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	88fa      	ldrh	r2, [r7, #6]
 8005c14:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	88fa      	ldrh	r2, [r7, #6]
 8005c1a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c24:	d108      	bne.n	8005c38 <HAL_UART_Transmit+0x82>
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d104      	bne.n	8005c38 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	61bb      	str	r3, [r7, #24]
 8005c36:	e003      	b.n	8005c40 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005c48:	e02a      	b.n	8005ca0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	9300      	str	r3, [sp, #0]
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	2200      	movs	r2, #0
 8005c52:	2180      	movs	r1, #128	; 0x80
 8005c54:	68f8      	ldr	r0, [r7, #12]
 8005c56:	f000 faf9 	bl	800624c <UART_WaitOnFlagUntilTimeout>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d001      	beq.n	8005c64 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e036      	b.n	8005cd2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d10b      	bne.n	8005c82 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	881b      	ldrh	r3, [r3, #0]
 8005c6e:	461a      	mov	r2, r3
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	3302      	adds	r3, #2
 8005c7e:	61bb      	str	r3, [r7, #24]
 8005c80:	e007      	b.n	8005c92 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	781a      	ldrb	r2, [r3, #0]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	b29a      	uxth	r2, r3
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1cf      	bne.n	8005c4a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	9300      	str	r3, [sp, #0]
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	2140      	movs	r1, #64	; 0x40
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	f000 fac9 	bl	800624c <UART_WaitOnFlagUntilTimeout>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d001      	beq.n	8005cc4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e006      	b.n	8005cd2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2220      	movs	r2, #32
 8005cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	e000      	b.n	8005cd2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005cd0:	2302      	movs	r3, #2
  }
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3720      	adds	r7, #32
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
	...

08005cdc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b0ba      	sub	sp, #232	; 0xe8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005d02:	2300      	movs	r3, #0
 8005d04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d12:	f003 030f 	and.w	r3, r3, #15
 8005d16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005d1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10f      	bne.n	8005d42 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d26:	f003 0320 	and.w	r3, r3, #32
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d009      	beq.n	8005d42 <HAL_UART_IRQHandler+0x66>
 8005d2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d32:	f003 0320 	and.w	r3, r3, #32
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d003      	beq.n	8005d42 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 fbd3 	bl	80064e6 <UART_Receive_IT>
      return;
 8005d40:	e256      	b.n	80061f0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005d42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	f000 80de 	beq.w	8005f08 <HAL_UART_IRQHandler+0x22c>
 8005d4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d50:	f003 0301 	and.w	r3, r3, #1
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d106      	bne.n	8005d66 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d5c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f000 80d1 	beq.w	8005f08 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00b      	beq.n	8005d8a <HAL_UART_IRQHandler+0xae>
 8005d72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d005      	beq.n	8005d8a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d82:	f043 0201 	orr.w	r2, r3, #1
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d8e:	f003 0304 	and.w	r3, r3, #4
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00b      	beq.n	8005dae <HAL_UART_IRQHandler+0xd2>
 8005d96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d9a:	f003 0301 	and.w	r3, r3, #1
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d005      	beq.n	8005dae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da6:	f043 0202 	orr.w	r2, r3, #2
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005db2:	f003 0302 	and.w	r3, r3, #2
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00b      	beq.n	8005dd2 <HAL_UART_IRQHandler+0xf6>
 8005dba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dbe:	f003 0301 	and.w	r3, r3, #1
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d005      	beq.n	8005dd2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dca:	f043 0204 	orr.w	r2, r3, #4
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dd6:	f003 0308 	and.w	r3, r3, #8
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d011      	beq.n	8005e02 <HAL_UART_IRQHandler+0x126>
 8005dde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005de2:	f003 0320 	and.w	r3, r3, #32
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d105      	bne.n	8005df6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005dea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d005      	beq.n	8005e02 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfa:	f043 0208 	orr.w	r2, r3, #8
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f000 81ed 	beq.w	80061e6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e10:	f003 0320 	and.w	r3, r3, #32
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d008      	beq.n	8005e2a <HAL_UART_IRQHandler+0x14e>
 8005e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e1c:	f003 0320 	and.w	r3, r3, #32
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d002      	beq.n	8005e2a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 fb5e 	bl	80064e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	695b      	ldr	r3, [r3, #20]
 8005e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e34:	2b40      	cmp	r3, #64	; 0x40
 8005e36:	bf0c      	ite	eq
 8005e38:	2301      	moveq	r3, #1
 8005e3a:	2300      	movne	r3, #0
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e46:	f003 0308 	and.w	r3, r3, #8
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d103      	bne.n	8005e56 <HAL_UART_IRQHandler+0x17a>
 8005e4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d04f      	beq.n	8005ef6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 fa66 	bl	8006328 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	695b      	ldr	r3, [r3, #20]
 8005e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e66:	2b40      	cmp	r3, #64	; 0x40
 8005e68:	d141      	bne.n	8005eee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	3314      	adds	r3, #20
 8005e70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e78:	e853 3f00 	ldrex	r3, [r3]
 8005e7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005e80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	3314      	adds	r3, #20
 8005e92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005e96:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005e9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005ea2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005ea6:	e841 2300 	strex	r3, r2, [r1]
 8005eaa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005eae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d1d9      	bne.n	8005e6a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d013      	beq.n	8005ee6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec2:	4a7d      	ldr	r2, [pc, #500]	; (80060b8 <HAL_UART_IRQHandler+0x3dc>)
 8005ec4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7fd fff5 	bl	8003eba <HAL_DMA_Abort_IT>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d016      	beq.n	8005f04 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ee0:	4610      	mov	r0, r2
 8005ee2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ee4:	e00e      	b.n	8005f04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 f99a 	bl	8006220 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eec:	e00a      	b.n	8005f04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f996 	bl	8006220 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ef4:	e006      	b.n	8005f04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 f992 	bl	8006220 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005f02:	e170      	b.n	80061e6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f04:	bf00      	nop
    return;
 8005f06:	e16e      	b.n	80061e6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	f040 814a 	bne.w	80061a6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f16:	f003 0310 	and.w	r3, r3, #16
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	f000 8143 	beq.w	80061a6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005f20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f24:	f003 0310 	and.w	r3, r3, #16
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	f000 813c 	beq.w	80061a6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f2e:	2300      	movs	r3, #0
 8005f30:	60bb      	str	r3, [r7, #8]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	60bb      	str	r3, [r7, #8]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	60bb      	str	r3, [r7, #8]
 8005f42:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	695b      	ldr	r3, [r3, #20]
 8005f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f4e:	2b40      	cmp	r3, #64	; 0x40
 8005f50:	f040 80b4 	bne.w	80060bc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f000 8140 	beq.w	80061ea <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f72:	429a      	cmp	r2, r3
 8005f74:	f080 8139 	bcs.w	80061ea <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f7e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f84:	69db      	ldr	r3, [r3, #28]
 8005f86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f8a:	f000 8088 	beq.w	800609e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	330c      	adds	r3, #12
 8005f94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f9c:	e853 3f00 	ldrex	r3, [r3]
 8005fa0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005fa4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005fa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	330c      	adds	r3, #12
 8005fb6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005fba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005fbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005fc6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005fca:	e841 2300 	strex	r3, r2, [r1]
 8005fce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005fd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d1d9      	bne.n	8005f8e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	3314      	adds	r3, #20
 8005fe0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fe4:	e853 3f00 	ldrex	r3, [r3]
 8005fe8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005fea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fec:	f023 0301 	bic.w	r3, r3, #1
 8005ff0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	3314      	adds	r3, #20
 8005ffa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005ffe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006002:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006004:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006006:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800600a:	e841 2300 	strex	r3, r2, [r1]
 800600e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006010:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006012:	2b00      	cmp	r3, #0
 8006014:	d1e1      	bne.n	8005fda <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	3314      	adds	r3, #20
 800601c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006020:	e853 3f00 	ldrex	r3, [r3]
 8006024:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006026:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006028:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800602c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	3314      	adds	r3, #20
 8006036:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800603a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800603c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006040:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006042:	e841 2300 	strex	r3, r2, [r1]
 8006046:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006048:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800604a:	2b00      	cmp	r3, #0
 800604c:	d1e3      	bne.n	8006016 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2220      	movs	r2, #32
 8006052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	330c      	adds	r3, #12
 8006062:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006064:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006066:	e853 3f00 	ldrex	r3, [r3]
 800606a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800606c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800606e:	f023 0310 	bic.w	r3, r3, #16
 8006072:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	330c      	adds	r3, #12
 800607c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006080:	65ba      	str	r2, [r7, #88]	; 0x58
 8006082:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006084:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006086:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006088:	e841 2300 	strex	r3, r2, [r1]
 800608c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800608e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006090:	2b00      	cmp	r3, #0
 8006092:	d1e3      	bne.n	800605c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006098:	4618      	mov	r0, r3
 800609a:	f7fd fe9e 	bl	8003dda <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	4619      	mov	r1, r3
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 f8c0 	bl	8006234 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80060b4:	e099      	b.n	80061ea <HAL_UART_IRQHandler+0x50e>
 80060b6:	bf00      	nop
 80060b8:	080063ef 	.word	0x080063ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	f000 808b 	beq.w	80061ee <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80060d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f000 8086 	beq.w	80061ee <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	330c      	adds	r3, #12
 80060e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ec:	e853 3f00 	ldrex	r3, [r3]
 80060f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80060f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	330c      	adds	r3, #12
 8006102:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006106:	647a      	str	r2, [r7, #68]	; 0x44
 8006108:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800610a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800610c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800610e:	e841 2300 	strex	r3, r2, [r1]
 8006112:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006116:	2b00      	cmp	r3, #0
 8006118:	d1e3      	bne.n	80060e2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	3314      	adds	r3, #20
 8006120:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006124:	e853 3f00 	ldrex	r3, [r3]
 8006128:	623b      	str	r3, [r7, #32]
   return(result);
 800612a:	6a3b      	ldr	r3, [r7, #32]
 800612c:	f023 0301 	bic.w	r3, r3, #1
 8006130:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	3314      	adds	r3, #20
 800613a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800613e:	633a      	str	r2, [r7, #48]	; 0x30
 8006140:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006142:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006144:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006146:	e841 2300 	strex	r3, r2, [r1]
 800614a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800614c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1e3      	bne.n	800611a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2220      	movs	r2, #32
 8006156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	330c      	adds	r3, #12
 8006166:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	e853 3f00 	ldrex	r3, [r3]
 800616e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f023 0310 	bic.w	r3, r3, #16
 8006176:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	330c      	adds	r3, #12
 8006180:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006184:	61fa      	str	r2, [r7, #28]
 8006186:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006188:	69b9      	ldr	r1, [r7, #24]
 800618a:	69fa      	ldr	r2, [r7, #28]
 800618c:	e841 2300 	strex	r3, r2, [r1]
 8006190:	617b      	str	r3, [r7, #20]
   return(result);
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1e3      	bne.n	8006160 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006198:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800619c:	4619      	mov	r1, r3
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 f848 	bl	8006234 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80061a4:	e023      	b.n	80061ee <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80061a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d009      	beq.n	80061c6 <HAL_UART_IRQHandler+0x4ea>
 80061b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d003      	beq.n	80061c6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 f929 	bl	8006416 <UART_Transmit_IT>
    return;
 80061c4:	e014      	b.n	80061f0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80061c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00e      	beq.n	80061f0 <HAL_UART_IRQHandler+0x514>
 80061d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d008      	beq.n	80061f0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 f969 	bl	80064b6 <UART_EndTransmit_IT>
    return;
 80061e4:	e004      	b.n	80061f0 <HAL_UART_IRQHandler+0x514>
    return;
 80061e6:	bf00      	nop
 80061e8:	e002      	b.n	80061f0 <HAL_UART_IRQHandler+0x514>
      return;
 80061ea:	bf00      	nop
 80061ec:	e000      	b.n	80061f0 <HAL_UART_IRQHandler+0x514>
      return;
 80061ee:	bf00      	nop
  }
}
 80061f0:	37e8      	adds	r7, #232	; 0xe8
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop

080061f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006200:	bf00      	nop
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006214:	bf00      	nop
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006228:	bf00      	nop
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	460b      	mov	r3, r1
 800623e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006240:	bf00      	nop
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b090      	sub	sp, #64	; 0x40
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	603b      	str	r3, [r7, #0]
 8006258:	4613      	mov	r3, r2
 800625a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800625c:	e050      	b.n	8006300 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800625e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006264:	d04c      	beq.n	8006300 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006266:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006268:	2b00      	cmp	r3, #0
 800626a:	d007      	beq.n	800627c <UART_WaitOnFlagUntilTimeout+0x30>
 800626c:	f7fd fc74 	bl	8003b58 <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006278:	429a      	cmp	r2, r3
 800627a:	d241      	bcs.n	8006300 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	330c      	adds	r3, #12
 8006282:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006286:	e853 3f00 	ldrex	r3, [r3]
 800628a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800628c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006292:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	330c      	adds	r3, #12
 800629a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800629c:	637a      	str	r2, [r7, #52]	; 0x34
 800629e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062a4:	e841 2300 	strex	r3, r2, [r1]
 80062a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80062aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d1e5      	bne.n	800627c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	3314      	adds	r3, #20
 80062b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	e853 3f00 	ldrex	r3, [r3]
 80062be:	613b      	str	r3, [r7, #16]
   return(result);
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	f023 0301 	bic.w	r3, r3, #1
 80062c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	3314      	adds	r3, #20
 80062ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062d0:	623a      	str	r2, [r7, #32]
 80062d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d4:	69f9      	ldr	r1, [r7, #28]
 80062d6:	6a3a      	ldr	r2, [r7, #32]
 80062d8:	e841 2300 	strex	r3, r2, [r1]
 80062dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d1e5      	bne.n	80062b0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2220      	movs	r2, #32
 80062e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2220      	movs	r2, #32
 80062f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80062fc:	2303      	movs	r3, #3
 80062fe:	e00f      	b.n	8006320 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	4013      	ands	r3, r2
 800630a:	68ba      	ldr	r2, [r7, #8]
 800630c:	429a      	cmp	r2, r3
 800630e:	bf0c      	ite	eq
 8006310:	2301      	moveq	r3, #1
 8006312:	2300      	movne	r3, #0
 8006314:	b2db      	uxtb	r3, r3
 8006316:	461a      	mov	r2, r3
 8006318:	79fb      	ldrb	r3, [r7, #7]
 800631a:	429a      	cmp	r2, r3
 800631c:	d09f      	beq.n	800625e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3740      	adds	r7, #64	; 0x40
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006328:	b480      	push	{r7}
 800632a:	b095      	sub	sp, #84	; 0x54
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	330c      	adds	r3, #12
 8006336:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800633a:	e853 3f00 	ldrex	r3, [r3]
 800633e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006342:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006346:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	330c      	adds	r3, #12
 800634e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006350:	643a      	str	r2, [r7, #64]	; 0x40
 8006352:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006354:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006356:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006358:	e841 2300 	strex	r3, r2, [r1]
 800635c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800635e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006360:	2b00      	cmp	r3, #0
 8006362:	d1e5      	bne.n	8006330 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	3314      	adds	r3, #20
 800636a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636c:	6a3b      	ldr	r3, [r7, #32]
 800636e:	e853 3f00 	ldrex	r3, [r3]
 8006372:	61fb      	str	r3, [r7, #28]
   return(result);
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	f023 0301 	bic.w	r3, r3, #1
 800637a:	64bb      	str	r3, [r7, #72]	; 0x48
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	3314      	adds	r3, #20
 8006382:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006384:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006386:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006388:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800638a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800638c:	e841 2300 	strex	r3, r2, [r1]
 8006390:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006394:	2b00      	cmp	r3, #0
 8006396:	d1e5      	bne.n	8006364 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800639c:	2b01      	cmp	r3, #1
 800639e:	d119      	bne.n	80063d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	330c      	adds	r3, #12
 80063a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	e853 3f00 	ldrex	r3, [r3]
 80063ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	f023 0310 	bic.w	r3, r3, #16
 80063b6:	647b      	str	r3, [r7, #68]	; 0x44
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	330c      	adds	r3, #12
 80063be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063c0:	61ba      	str	r2, [r7, #24]
 80063c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c4:	6979      	ldr	r1, [r7, #20]
 80063c6:	69ba      	ldr	r2, [r7, #24]
 80063c8:	e841 2300 	strex	r3, r2, [r1]
 80063cc:	613b      	str	r3, [r7, #16]
   return(result);
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d1e5      	bne.n	80063a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2220      	movs	r2, #32
 80063d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80063e2:	bf00      	nop
 80063e4:	3754      	adds	r7, #84	; 0x54
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr

080063ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063ee:	b580      	push	{r7, lr}
 80063f0:	b084      	sub	sp, #16
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2200      	movs	r2, #0
 8006400:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006408:	68f8      	ldr	r0, [r7, #12]
 800640a:	f7ff ff09 	bl	8006220 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800640e:	bf00      	nop
 8006410:	3710      	adds	r7, #16
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006416:	b480      	push	{r7}
 8006418:	b085      	sub	sp, #20
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006424:	b2db      	uxtb	r3, r3
 8006426:	2b21      	cmp	r3, #33	; 0x21
 8006428:	d13e      	bne.n	80064a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006432:	d114      	bne.n	800645e <UART_Transmit_IT+0x48>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d110      	bne.n	800645e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6a1b      	ldr	r3, [r3, #32]
 8006440:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	881b      	ldrh	r3, [r3, #0]
 8006446:	461a      	mov	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006450:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a1b      	ldr	r3, [r3, #32]
 8006456:	1c9a      	adds	r2, r3, #2
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	621a      	str	r2, [r3, #32]
 800645c:	e008      	b.n	8006470 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a1b      	ldr	r3, [r3, #32]
 8006462:	1c59      	adds	r1, r3, #1
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	6211      	str	r1, [r2, #32]
 8006468:	781a      	ldrb	r2, [r3, #0]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006474:	b29b      	uxth	r3, r3
 8006476:	3b01      	subs	r3, #1
 8006478:	b29b      	uxth	r3, r3
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	4619      	mov	r1, r3
 800647e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006480:	2b00      	cmp	r3, #0
 8006482:	d10f      	bne.n	80064a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68da      	ldr	r2, [r3, #12]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006492:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68da      	ldr	r2, [r3, #12]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80064a4:	2300      	movs	r3, #0
 80064a6:	e000      	b.n	80064aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80064a8:	2302      	movs	r3, #2
  }
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3714      	adds	r7, #20
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr

080064b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064b6:	b580      	push	{r7, lr}
 80064b8:	b082      	sub	sp, #8
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68da      	ldr	r2, [r3, #12]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2220      	movs	r2, #32
 80064d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f7ff fe8e 	bl	80061f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3708      	adds	r7, #8
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}

080064e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80064e6:	b580      	push	{r7, lr}
 80064e8:	b08c      	sub	sp, #48	; 0x30
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	2b22      	cmp	r3, #34	; 0x22
 80064f8:	f040 80ab 	bne.w	8006652 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006504:	d117      	bne.n	8006536 <UART_Receive_IT+0x50>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d113      	bne.n	8006536 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800650e:	2300      	movs	r3, #0
 8006510:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006516:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	b29b      	uxth	r3, r3
 8006520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006524:	b29a      	uxth	r2, r3
 8006526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006528:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800652e:	1c9a      	adds	r2, r3, #2
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	629a      	str	r2, [r3, #40]	; 0x28
 8006534:	e026      	b.n	8006584 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800653a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800653c:	2300      	movs	r3, #0
 800653e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006548:	d007      	beq.n	800655a <UART_Receive_IT+0x74>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d10a      	bne.n	8006568 <UART_Receive_IT+0x82>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d106      	bne.n	8006568 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	b2da      	uxtb	r2, r3
 8006562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006564:	701a      	strb	r2, [r3, #0]
 8006566:	e008      	b.n	800657a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	b2db      	uxtb	r3, r3
 8006570:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006574:	b2da      	uxtb	r2, r3
 8006576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006578:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800657e:	1c5a      	adds	r2, r3, #1
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006588:	b29b      	uxth	r3, r3
 800658a:	3b01      	subs	r3, #1
 800658c:	b29b      	uxth	r3, r3
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	4619      	mov	r1, r3
 8006592:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006594:	2b00      	cmp	r3, #0
 8006596:	d15a      	bne.n	800664e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68da      	ldr	r2, [r3, #12]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f022 0220 	bic.w	r2, r2, #32
 80065a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68da      	ldr	r2, [r3, #12]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	695a      	ldr	r2, [r3, #20]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f022 0201 	bic.w	r2, r2, #1
 80065c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2220      	movs	r2, #32
 80065cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d135      	bne.n	8006644 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	330c      	adds	r3, #12
 80065e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	e853 3f00 	ldrex	r3, [r3]
 80065ec:	613b      	str	r3, [r7, #16]
   return(result);
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	f023 0310 	bic.w	r3, r3, #16
 80065f4:	627b      	str	r3, [r7, #36]	; 0x24
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	330c      	adds	r3, #12
 80065fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065fe:	623a      	str	r2, [r7, #32]
 8006600:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006602:	69f9      	ldr	r1, [r7, #28]
 8006604:	6a3a      	ldr	r2, [r7, #32]
 8006606:	e841 2300 	strex	r3, r2, [r1]
 800660a:	61bb      	str	r3, [r7, #24]
   return(result);
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1e5      	bne.n	80065de <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 0310 	and.w	r3, r3, #16
 800661c:	2b10      	cmp	r3, #16
 800661e:	d10a      	bne.n	8006636 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006620:	2300      	movs	r3, #0
 8006622:	60fb      	str	r3, [r7, #12]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	60fb      	str	r3, [r7, #12]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	60fb      	str	r3, [r7, #12]
 8006634:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800663a:	4619      	mov	r1, r3
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f7ff fdf9 	bl	8006234 <HAL_UARTEx_RxEventCallback>
 8006642:	e002      	b.n	800664a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f7ff fde1 	bl	800620c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800664a:	2300      	movs	r3, #0
 800664c:	e002      	b.n	8006654 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800664e:	2300      	movs	r3, #0
 8006650:	e000      	b.n	8006654 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006652:	2302      	movs	r3, #2
  }
}
 8006654:	4618      	mov	r0, r3
 8006656:	3730      	adds	r7, #48	; 0x30
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800665c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006660:	b0c0      	sub	sp, #256	; 0x100
 8006662:	af00      	add	r7, sp, #0
 8006664:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006678:	68d9      	ldr	r1, [r3, #12]
 800667a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	ea40 0301 	orr.w	r3, r0, r1
 8006684:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800668a:	689a      	ldr	r2, [r3, #8]
 800668c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	431a      	orrs	r2, r3
 8006694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006698:	695b      	ldr	r3, [r3, #20]
 800669a:	431a      	orrs	r2, r3
 800669c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066a0:	69db      	ldr	r3, [r3, #28]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80066a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80066b4:	f021 010c 	bic.w	r1, r1, #12
 80066b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80066c2:	430b      	orrs	r3, r1
 80066c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	695b      	ldr	r3, [r3, #20]
 80066ce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80066d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066d6:	6999      	ldr	r1, [r3, #24]
 80066d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	ea40 0301 	orr.w	r3, r0, r1
 80066e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	4b8f      	ldr	r3, [pc, #572]	; (8006928 <UART_SetConfig+0x2cc>)
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d005      	beq.n	80066fc <UART_SetConfig+0xa0>
 80066f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	4b8d      	ldr	r3, [pc, #564]	; (800692c <UART_SetConfig+0x2d0>)
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d104      	bne.n	8006706 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80066fc:	f7ff f9fa 	bl	8005af4 <HAL_RCC_GetPCLK2Freq>
 8006700:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006704:	e003      	b.n	800670e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006706:	f7ff f9e1 	bl	8005acc <HAL_RCC_GetPCLK1Freq>
 800670a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800670e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006712:	69db      	ldr	r3, [r3, #28]
 8006714:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006718:	f040 810c 	bne.w	8006934 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800671c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006720:	2200      	movs	r2, #0
 8006722:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006726:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800672a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800672e:	4622      	mov	r2, r4
 8006730:	462b      	mov	r3, r5
 8006732:	1891      	adds	r1, r2, r2
 8006734:	65b9      	str	r1, [r7, #88]	; 0x58
 8006736:	415b      	adcs	r3, r3
 8006738:	65fb      	str	r3, [r7, #92]	; 0x5c
 800673a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800673e:	4621      	mov	r1, r4
 8006740:	eb12 0801 	adds.w	r8, r2, r1
 8006744:	4629      	mov	r1, r5
 8006746:	eb43 0901 	adc.w	r9, r3, r1
 800674a:	f04f 0200 	mov.w	r2, #0
 800674e:	f04f 0300 	mov.w	r3, #0
 8006752:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006756:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800675a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800675e:	4690      	mov	r8, r2
 8006760:	4699      	mov	r9, r3
 8006762:	4623      	mov	r3, r4
 8006764:	eb18 0303 	adds.w	r3, r8, r3
 8006768:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800676c:	462b      	mov	r3, r5
 800676e:	eb49 0303 	adc.w	r3, r9, r3
 8006772:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006782:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006786:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800678a:	460b      	mov	r3, r1
 800678c:	18db      	adds	r3, r3, r3
 800678e:	653b      	str	r3, [r7, #80]	; 0x50
 8006790:	4613      	mov	r3, r2
 8006792:	eb42 0303 	adc.w	r3, r2, r3
 8006796:	657b      	str	r3, [r7, #84]	; 0x54
 8006798:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800679c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80067a0:	f7fa fa02 	bl	8000ba8 <__aeabi_uldivmod>
 80067a4:	4602      	mov	r2, r0
 80067a6:	460b      	mov	r3, r1
 80067a8:	4b61      	ldr	r3, [pc, #388]	; (8006930 <UART_SetConfig+0x2d4>)
 80067aa:	fba3 2302 	umull	r2, r3, r3, r2
 80067ae:	095b      	lsrs	r3, r3, #5
 80067b0:	011c      	lsls	r4, r3, #4
 80067b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067b6:	2200      	movs	r2, #0
 80067b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067bc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80067c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80067c4:	4642      	mov	r2, r8
 80067c6:	464b      	mov	r3, r9
 80067c8:	1891      	adds	r1, r2, r2
 80067ca:	64b9      	str	r1, [r7, #72]	; 0x48
 80067cc:	415b      	adcs	r3, r3
 80067ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80067d4:	4641      	mov	r1, r8
 80067d6:	eb12 0a01 	adds.w	sl, r2, r1
 80067da:	4649      	mov	r1, r9
 80067dc:	eb43 0b01 	adc.w	fp, r3, r1
 80067e0:	f04f 0200 	mov.w	r2, #0
 80067e4:	f04f 0300 	mov.w	r3, #0
 80067e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80067ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80067f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067f4:	4692      	mov	sl, r2
 80067f6:	469b      	mov	fp, r3
 80067f8:	4643      	mov	r3, r8
 80067fa:	eb1a 0303 	adds.w	r3, sl, r3
 80067fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006802:	464b      	mov	r3, r9
 8006804:	eb4b 0303 	adc.w	r3, fp, r3
 8006808:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800680c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006818:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800681c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006820:	460b      	mov	r3, r1
 8006822:	18db      	adds	r3, r3, r3
 8006824:	643b      	str	r3, [r7, #64]	; 0x40
 8006826:	4613      	mov	r3, r2
 8006828:	eb42 0303 	adc.w	r3, r2, r3
 800682c:	647b      	str	r3, [r7, #68]	; 0x44
 800682e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006832:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006836:	f7fa f9b7 	bl	8000ba8 <__aeabi_uldivmod>
 800683a:	4602      	mov	r2, r0
 800683c:	460b      	mov	r3, r1
 800683e:	4611      	mov	r1, r2
 8006840:	4b3b      	ldr	r3, [pc, #236]	; (8006930 <UART_SetConfig+0x2d4>)
 8006842:	fba3 2301 	umull	r2, r3, r3, r1
 8006846:	095b      	lsrs	r3, r3, #5
 8006848:	2264      	movs	r2, #100	; 0x64
 800684a:	fb02 f303 	mul.w	r3, r2, r3
 800684e:	1acb      	subs	r3, r1, r3
 8006850:	00db      	lsls	r3, r3, #3
 8006852:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006856:	4b36      	ldr	r3, [pc, #216]	; (8006930 <UART_SetConfig+0x2d4>)
 8006858:	fba3 2302 	umull	r2, r3, r3, r2
 800685c:	095b      	lsrs	r3, r3, #5
 800685e:	005b      	lsls	r3, r3, #1
 8006860:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006864:	441c      	add	r4, r3
 8006866:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800686a:	2200      	movs	r2, #0
 800686c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006870:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006874:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006878:	4642      	mov	r2, r8
 800687a:	464b      	mov	r3, r9
 800687c:	1891      	adds	r1, r2, r2
 800687e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006880:	415b      	adcs	r3, r3
 8006882:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006884:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006888:	4641      	mov	r1, r8
 800688a:	1851      	adds	r1, r2, r1
 800688c:	6339      	str	r1, [r7, #48]	; 0x30
 800688e:	4649      	mov	r1, r9
 8006890:	414b      	adcs	r3, r1
 8006892:	637b      	str	r3, [r7, #52]	; 0x34
 8006894:	f04f 0200 	mov.w	r2, #0
 8006898:	f04f 0300 	mov.w	r3, #0
 800689c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80068a0:	4659      	mov	r1, fp
 80068a2:	00cb      	lsls	r3, r1, #3
 80068a4:	4651      	mov	r1, sl
 80068a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068aa:	4651      	mov	r1, sl
 80068ac:	00ca      	lsls	r2, r1, #3
 80068ae:	4610      	mov	r0, r2
 80068b0:	4619      	mov	r1, r3
 80068b2:	4603      	mov	r3, r0
 80068b4:	4642      	mov	r2, r8
 80068b6:	189b      	adds	r3, r3, r2
 80068b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068bc:	464b      	mov	r3, r9
 80068be:	460a      	mov	r2, r1
 80068c0:	eb42 0303 	adc.w	r3, r2, r3
 80068c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80068d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80068d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80068dc:	460b      	mov	r3, r1
 80068de:	18db      	adds	r3, r3, r3
 80068e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80068e2:	4613      	mov	r3, r2
 80068e4:	eb42 0303 	adc.w	r3, r2, r3
 80068e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80068ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80068f2:	f7fa f959 	bl	8000ba8 <__aeabi_uldivmod>
 80068f6:	4602      	mov	r2, r0
 80068f8:	460b      	mov	r3, r1
 80068fa:	4b0d      	ldr	r3, [pc, #52]	; (8006930 <UART_SetConfig+0x2d4>)
 80068fc:	fba3 1302 	umull	r1, r3, r3, r2
 8006900:	095b      	lsrs	r3, r3, #5
 8006902:	2164      	movs	r1, #100	; 0x64
 8006904:	fb01 f303 	mul.w	r3, r1, r3
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	00db      	lsls	r3, r3, #3
 800690c:	3332      	adds	r3, #50	; 0x32
 800690e:	4a08      	ldr	r2, [pc, #32]	; (8006930 <UART_SetConfig+0x2d4>)
 8006910:	fba2 2303 	umull	r2, r3, r2, r3
 8006914:	095b      	lsrs	r3, r3, #5
 8006916:	f003 0207 	and.w	r2, r3, #7
 800691a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4422      	add	r2, r4
 8006922:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006924:	e105      	b.n	8006b32 <UART_SetConfig+0x4d6>
 8006926:	bf00      	nop
 8006928:	40011000 	.word	0x40011000
 800692c:	40011400 	.word	0x40011400
 8006930:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006934:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006938:	2200      	movs	r2, #0
 800693a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800693e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006942:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006946:	4642      	mov	r2, r8
 8006948:	464b      	mov	r3, r9
 800694a:	1891      	adds	r1, r2, r2
 800694c:	6239      	str	r1, [r7, #32]
 800694e:	415b      	adcs	r3, r3
 8006950:	627b      	str	r3, [r7, #36]	; 0x24
 8006952:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006956:	4641      	mov	r1, r8
 8006958:	1854      	adds	r4, r2, r1
 800695a:	4649      	mov	r1, r9
 800695c:	eb43 0501 	adc.w	r5, r3, r1
 8006960:	f04f 0200 	mov.w	r2, #0
 8006964:	f04f 0300 	mov.w	r3, #0
 8006968:	00eb      	lsls	r3, r5, #3
 800696a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800696e:	00e2      	lsls	r2, r4, #3
 8006970:	4614      	mov	r4, r2
 8006972:	461d      	mov	r5, r3
 8006974:	4643      	mov	r3, r8
 8006976:	18e3      	adds	r3, r4, r3
 8006978:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800697c:	464b      	mov	r3, r9
 800697e:	eb45 0303 	adc.w	r3, r5, r3
 8006982:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006992:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006996:	f04f 0200 	mov.w	r2, #0
 800699a:	f04f 0300 	mov.w	r3, #0
 800699e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80069a2:	4629      	mov	r1, r5
 80069a4:	008b      	lsls	r3, r1, #2
 80069a6:	4621      	mov	r1, r4
 80069a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069ac:	4621      	mov	r1, r4
 80069ae:	008a      	lsls	r2, r1, #2
 80069b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80069b4:	f7fa f8f8 	bl	8000ba8 <__aeabi_uldivmod>
 80069b8:	4602      	mov	r2, r0
 80069ba:	460b      	mov	r3, r1
 80069bc:	4b60      	ldr	r3, [pc, #384]	; (8006b40 <UART_SetConfig+0x4e4>)
 80069be:	fba3 2302 	umull	r2, r3, r3, r2
 80069c2:	095b      	lsrs	r3, r3, #5
 80069c4:	011c      	lsls	r4, r3, #4
 80069c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069ca:	2200      	movs	r2, #0
 80069cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80069d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80069d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80069d8:	4642      	mov	r2, r8
 80069da:	464b      	mov	r3, r9
 80069dc:	1891      	adds	r1, r2, r2
 80069de:	61b9      	str	r1, [r7, #24]
 80069e0:	415b      	adcs	r3, r3
 80069e2:	61fb      	str	r3, [r7, #28]
 80069e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069e8:	4641      	mov	r1, r8
 80069ea:	1851      	adds	r1, r2, r1
 80069ec:	6139      	str	r1, [r7, #16]
 80069ee:	4649      	mov	r1, r9
 80069f0:	414b      	adcs	r3, r1
 80069f2:	617b      	str	r3, [r7, #20]
 80069f4:	f04f 0200 	mov.w	r2, #0
 80069f8:	f04f 0300 	mov.w	r3, #0
 80069fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a00:	4659      	mov	r1, fp
 8006a02:	00cb      	lsls	r3, r1, #3
 8006a04:	4651      	mov	r1, sl
 8006a06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a0a:	4651      	mov	r1, sl
 8006a0c:	00ca      	lsls	r2, r1, #3
 8006a0e:	4610      	mov	r0, r2
 8006a10:	4619      	mov	r1, r3
 8006a12:	4603      	mov	r3, r0
 8006a14:	4642      	mov	r2, r8
 8006a16:	189b      	adds	r3, r3, r2
 8006a18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a1c:	464b      	mov	r3, r9
 8006a1e:	460a      	mov	r2, r1
 8006a20:	eb42 0303 	adc.w	r3, r2, r3
 8006a24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a32:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006a34:	f04f 0200 	mov.w	r2, #0
 8006a38:	f04f 0300 	mov.w	r3, #0
 8006a3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006a40:	4649      	mov	r1, r9
 8006a42:	008b      	lsls	r3, r1, #2
 8006a44:	4641      	mov	r1, r8
 8006a46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a4a:	4641      	mov	r1, r8
 8006a4c:	008a      	lsls	r2, r1, #2
 8006a4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006a52:	f7fa f8a9 	bl	8000ba8 <__aeabi_uldivmod>
 8006a56:	4602      	mov	r2, r0
 8006a58:	460b      	mov	r3, r1
 8006a5a:	4b39      	ldr	r3, [pc, #228]	; (8006b40 <UART_SetConfig+0x4e4>)
 8006a5c:	fba3 1302 	umull	r1, r3, r3, r2
 8006a60:	095b      	lsrs	r3, r3, #5
 8006a62:	2164      	movs	r1, #100	; 0x64
 8006a64:	fb01 f303 	mul.w	r3, r1, r3
 8006a68:	1ad3      	subs	r3, r2, r3
 8006a6a:	011b      	lsls	r3, r3, #4
 8006a6c:	3332      	adds	r3, #50	; 0x32
 8006a6e:	4a34      	ldr	r2, [pc, #208]	; (8006b40 <UART_SetConfig+0x4e4>)
 8006a70:	fba2 2303 	umull	r2, r3, r2, r3
 8006a74:	095b      	lsrs	r3, r3, #5
 8006a76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a7a:	441c      	add	r4, r3
 8006a7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a80:	2200      	movs	r2, #0
 8006a82:	673b      	str	r3, [r7, #112]	; 0x70
 8006a84:	677a      	str	r2, [r7, #116]	; 0x74
 8006a86:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006a8a:	4642      	mov	r2, r8
 8006a8c:	464b      	mov	r3, r9
 8006a8e:	1891      	adds	r1, r2, r2
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	415b      	adcs	r3, r3
 8006a94:	60fb      	str	r3, [r7, #12]
 8006a96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a9a:	4641      	mov	r1, r8
 8006a9c:	1851      	adds	r1, r2, r1
 8006a9e:	6039      	str	r1, [r7, #0]
 8006aa0:	4649      	mov	r1, r9
 8006aa2:	414b      	adcs	r3, r1
 8006aa4:	607b      	str	r3, [r7, #4]
 8006aa6:	f04f 0200 	mov.w	r2, #0
 8006aaa:	f04f 0300 	mov.w	r3, #0
 8006aae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006ab2:	4659      	mov	r1, fp
 8006ab4:	00cb      	lsls	r3, r1, #3
 8006ab6:	4651      	mov	r1, sl
 8006ab8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006abc:	4651      	mov	r1, sl
 8006abe:	00ca      	lsls	r2, r1, #3
 8006ac0:	4610      	mov	r0, r2
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	4642      	mov	r2, r8
 8006ac8:	189b      	adds	r3, r3, r2
 8006aca:	66bb      	str	r3, [r7, #104]	; 0x68
 8006acc:	464b      	mov	r3, r9
 8006ace:	460a      	mov	r2, r1
 8006ad0:	eb42 0303 	adc.w	r3, r2, r3
 8006ad4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	663b      	str	r3, [r7, #96]	; 0x60
 8006ae0:	667a      	str	r2, [r7, #100]	; 0x64
 8006ae2:	f04f 0200 	mov.w	r2, #0
 8006ae6:	f04f 0300 	mov.w	r3, #0
 8006aea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006aee:	4649      	mov	r1, r9
 8006af0:	008b      	lsls	r3, r1, #2
 8006af2:	4641      	mov	r1, r8
 8006af4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006af8:	4641      	mov	r1, r8
 8006afa:	008a      	lsls	r2, r1, #2
 8006afc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006b00:	f7fa f852 	bl	8000ba8 <__aeabi_uldivmod>
 8006b04:	4602      	mov	r2, r0
 8006b06:	460b      	mov	r3, r1
 8006b08:	4b0d      	ldr	r3, [pc, #52]	; (8006b40 <UART_SetConfig+0x4e4>)
 8006b0a:	fba3 1302 	umull	r1, r3, r3, r2
 8006b0e:	095b      	lsrs	r3, r3, #5
 8006b10:	2164      	movs	r1, #100	; 0x64
 8006b12:	fb01 f303 	mul.w	r3, r1, r3
 8006b16:	1ad3      	subs	r3, r2, r3
 8006b18:	011b      	lsls	r3, r3, #4
 8006b1a:	3332      	adds	r3, #50	; 0x32
 8006b1c:	4a08      	ldr	r2, [pc, #32]	; (8006b40 <UART_SetConfig+0x4e4>)
 8006b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b22:	095b      	lsrs	r3, r3, #5
 8006b24:	f003 020f 	and.w	r2, r3, #15
 8006b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4422      	add	r2, r4
 8006b30:	609a      	str	r2, [r3, #8]
}
 8006b32:	bf00      	nop
 8006b34:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b3e:	bf00      	nop
 8006b40:	51eb851f 	.word	0x51eb851f

08006b44 <__errno>:
 8006b44:	4b01      	ldr	r3, [pc, #4]	; (8006b4c <__errno+0x8>)
 8006b46:	6818      	ldr	r0, [r3, #0]
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop
 8006b4c:	20000030 	.word	0x20000030

08006b50 <__libc_init_array>:
 8006b50:	b570      	push	{r4, r5, r6, lr}
 8006b52:	4d0d      	ldr	r5, [pc, #52]	; (8006b88 <__libc_init_array+0x38>)
 8006b54:	4c0d      	ldr	r4, [pc, #52]	; (8006b8c <__libc_init_array+0x3c>)
 8006b56:	1b64      	subs	r4, r4, r5
 8006b58:	10a4      	asrs	r4, r4, #2
 8006b5a:	2600      	movs	r6, #0
 8006b5c:	42a6      	cmp	r6, r4
 8006b5e:	d109      	bne.n	8006b74 <__libc_init_array+0x24>
 8006b60:	4d0b      	ldr	r5, [pc, #44]	; (8006b90 <__libc_init_array+0x40>)
 8006b62:	4c0c      	ldr	r4, [pc, #48]	; (8006b94 <__libc_init_array+0x44>)
 8006b64:	f002 ff18 	bl	8009998 <_init>
 8006b68:	1b64      	subs	r4, r4, r5
 8006b6a:	10a4      	asrs	r4, r4, #2
 8006b6c:	2600      	movs	r6, #0
 8006b6e:	42a6      	cmp	r6, r4
 8006b70:	d105      	bne.n	8006b7e <__libc_init_array+0x2e>
 8006b72:	bd70      	pop	{r4, r5, r6, pc}
 8006b74:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b78:	4798      	blx	r3
 8006b7a:	3601      	adds	r6, #1
 8006b7c:	e7ee      	b.n	8006b5c <__libc_init_array+0xc>
 8006b7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b82:	4798      	blx	r3
 8006b84:	3601      	adds	r6, #1
 8006b86:	e7f2      	b.n	8006b6e <__libc_init_array+0x1e>
 8006b88:	08009f94 	.word	0x08009f94
 8006b8c:	08009f94 	.word	0x08009f94
 8006b90:	08009f94 	.word	0x08009f94
 8006b94:	08009f98 	.word	0x08009f98

08006b98 <memset>:
 8006b98:	4402      	add	r2, r0
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d100      	bne.n	8006ba2 <memset+0xa>
 8006ba0:	4770      	bx	lr
 8006ba2:	f803 1b01 	strb.w	r1, [r3], #1
 8006ba6:	e7f9      	b.n	8006b9c <memset+0x4>

08006ba8 <__cvt>:
 8006ba8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bac:	ec55 4b10 	vmov	r4, r5, d0
 8006bb0:	2d00      	cmp	r5, #0
 8006bb2:	460e      	mov	r6, r1
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	462b      	mov	r3, r5
 8006bb8:	bfbb      	ittet	lt
 8006bba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006bbe:	461d      	movlt	r5, r3
 8006bc0:	2300      	movge	r3, #0
 8006bc2:	232d      	movlt	r3, #45	; 0x2d
 8006bc4:	700b      	strb	r3, [r1, #0]
 8006bc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bc8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006bcc:	4691      	mov	r9, r2
 8006bce:	f023 0820 	bic.w	r8, r3, #32
 8006bd2:	bfbc      	itt	lt
 8006bd4:	4622      	movlt	r2, r4
 8006bd6:	4614      	movlt	r4, r2
 8006bd8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006bdc:	d005      	beq.n	8006bea <__cvt+0x42>
 8006bde:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006be2:	d100      	bne.n	8006be6 <__cvt+0x3e>
 8006be4:	3601      	adds	r6, #1
 8006be6:	2102      	movs	r1, #2
 8006be8:	e000      	b.n	8006bec <__cvt+0x44>
 8006bea:	2103      	movs	r1, #3
 8006bec:	ab03      	add	r3, sp, #12
 8006bee:	9301      	str	r3, [sp, #4]
 8006bf0:	ab02      	add	r3, sp, #8
 8006bf2:	9300      	str	r3, [sp, #0]
 8006bf4:	ec45 4b10 	vmov	d0, r4, r5
 8006bf8:	4653      	mov	r3, sl
 8006bfa:	4632      	mov	r2, r6
 8006bfc:	f000 fd00 	bl	8007600 <_dtoa_r>
 8006c00:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006c04:	4607      	mov	r7, r0
 8006c06:	d102      	bne.n	8006c0e <__cvt+0x66>
 8006c08:	f019 0f01 	tst.w	r9, #1
 8006c0c:	d022      	beq.n	8006c54 <__cvt+0xac>
 8006c0e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006c12:	eb07 0906 	add.w	r9, r7, r6
 8006c16:	d110      	bne.n	8006c3a <__cvt+0x92>
 8006c18:	783b      	ldrb	r3, [r7, #0]
 8006c1a:	2b30      	cmp	r3, #48	; 0x30
 8006c1c:	d10a      	bne.n	8006c34 <__cvt+0x8c>
 8006c1e:	2200      	movs	r2, #0
 8006c20:	2300      	movs	r3, #0
 8006c22:	4620      	mov	r0, r4
 8006c24:	4629      	mov	r1, r5
 8006c26:	f7f9 ff4f 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c2a:	b918      	cbnz	r0, 8006c34 <__cvt+0x8c>
 8006c2c:	f1c6 0601 	rsb	r6, r6, #1
 8006c30:	f8ca 6000 	str.w	r6, [sl]
 8006c34:	f8da 3000 	ldr.w	r3, [sl]
 8006c38:	4499      	add	r9, r3
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	4620      	mov	r0, r4
 8006c40:	4629      	mov	r1, r5
 8006c42:	f7f9 ff41 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c46:	b108      	cbz	r0, 8006c4c <__cvt+0xa4>
 8006c48:	f8cd 900c 	str.w	r9, [sp, #12]
 8006c4c:	2230      	movs	r2, #48	; 0x30
 8006c4e:	9b03      	ldr	r3, [sp, #12]
 8006c50:	454b      	cmp	r3, r9
 8006c52:	d307      	bcc.n	8006c64 <__cvt+0xbc>
 8006c54:	9b03      	ldr	r3, [sp, #12]
 8006c56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c58:	1bdb      	subs	r3, r3, r7
 8006c5a:	4638      	mov	r0, r7
 8006c5c:	6013      	str	r3, [r2, #0]
 8006c5e:	b004      	add	sp, #16
 8006c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c64:	1c59      	adds	r1, r3, #1
 8006c66:	9103      	str	r1, [sp, #12]
 8006c68:	701a      	strb	r2, [r3, #0]
 8006c6a:	e7f0      	b.n	8006c4e <__cvt+0xa6>

08006c6c <__exponent>:
 8006c6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2900      	cmp	r1, #0
 8006c72:	bfb8      	it	lt
 8006c74:	4249      	neglt	r1, r1
 8006c76:	f803 2b02 	strb.w	r2, [r3], #2
 8006c7a:	bfb4      	ite	lt
 8006c7c:	222d      	movlt	r2, #45	; 0x2d
 8006c7e:	222b      	movge	r2, #43	; 0x2b
 8006c80:	2909      	cmp	r1, #9
 8006c82:	7042      	strb	r2, [r0, #1]
 8006c84:	dd2a      	ble.n	8006cdc <__exponent+0x70>
 8006c86:	f10d 0407 	add.w	r4, sp, #7
 8006c8a:	46a4      	mov	ip, r4
 8006c8c:	270a      	movs	r7, #10
 8006c8e:	46a6      	mov	lr, r4
 8006c90:	460a      	mov	r2, r1
 8006c92:	fb91 f6f7 	sdiv	r6, r1, r7
 8006c96:	fb07 1516 	mls	r5, r7, r6, r1
 8006c9a:	3530      	adds	r5, #48	; 0x30
 8006c9c:	2a63      	cmp	r2, #99	; 0x63
 8006c9e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006ca2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006ca6:	4631      	mov	r1, r6
 8006ca8:	dcf1      	bgt.n	8006c8e <__exponent+0x22>
 8006caa:	3130      	adds	r1, #48	; 0x30
 8006cac:	f1ae 0502 	sub.w	r5, lr, #2
 8006cb0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006cb4:	1c44      	adds	r4, r0, #1
 8006cb6:	4629      	mov	r1, r5
 8006cb8:	4561      	cmp	r1, ip
 8006cba:	d30a      	bcc.n	8006cd2 <__exponent+0x66>
 8006cbc:	f10d 0209 	add.w	r2, sp, #9
 8006cc0:	eba2 020e 	sub.w	r2, r2, lr
 8006cc4:	4565      	cmp	r5, ip
 8006cc6:	bf88      	it	hi
 8006cc8:	2200      	movhi	r2, #0
 8006cca:	4413      	add	r3, r2
 8006ccc:	1a18      	subs	r0, r3, r0
 8006cce:	b003      	add	sp, #12
 8006cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006cd6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006cda:	e7ed      	b.n	8006cb8 <__exponent+0x4c>
 8006cdc:	2330      	movs	r3, #48	; 0x30
 8006cde:	3130      	adds	r1, #48	; 0x30
 8006ce0:	7083      	strb	r3, [r0, #2]
 8006ce2:	70c1      	strb	r1, [r0, #3]
 8006ce4:	1d03      	adds	r3, r0, #4
 8006ce6:	e7f1      	b.n	8006ccc <__exponent+0x60>

08006ce8 <_printf_float>:
 8006ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cec:	ed2d 8b02 	vpush	{d8}
 8006cf0:	b08d      	sub	sp, #52	; 0x34
 8006cf2:	460c      	mov	r4, r1
 8006cf4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006cf8:	4616      	mov	r6, r2
 8006cfa:	461f      	mov	r7, r3
 8006cfc:	4605      	mov	r5, r0
 8006cfe:	f001 fa6d 	bl	80081dc <_localeconv_r>
 8006d02:	f8d0 a000 	ldr.w	sl, [r0]
 8006d06:	4650      	mov	r0, sl
 8006d08:	f7f9 fa62 	bl	80001d0 <strlen>
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	930a      	str	r3, [sp, #40]	; 0x28
 8006d10:	6823      	ldr	r3, [r4, #0]
 8006d12:	9305      	str	r3, [sp, #20]
 8006d14:	f8d8 3000 	ldr.w	r3, [r8]
 8006d18:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006d1c:	3307      	adds	r3, #7
 8006d1e:	f023 0307 	bic.w	r3, r3, #7
 8006d22:	f103 0208 	add.w	r2, r3, #8
 8006d26:	f8c8 2000 	str.w	r2, [r8]
 8006d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006d32:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006d36:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006d3a:	9307      	str	r3, [sp, #28]
 8006d3c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006d40:	ee08 0a10 	vmov	s16, r0
 8006d44:	4b9f      	ldr	r3, [pc, #636]	; (8006fc4 <_printf_float+0x2dc>)
 8006d46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d4e:	f7f9 feed 	bl	8000b2c <__aeabi_dcmpun>
 8006d52:	bb88      	cbnz	r0, 8006db8 <_printf_float+0xd0>
 8006d54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d58:	4b9a      	ldr	r3, [pc, #616]	; (8006fc4 <_printf_float+0x2dc>)
 8006d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d5e:	f7f9 fec7 	bl	8000af0 <__aeabi_dcmple>
 8006d62:	bb48      	cbnz	r0, 8006db8 <_printf_float+0xd0>
 8006d64:	2200      	movs	r2, #0
 8006d66:	2300      	movs	r3, #0
 8006d68:	4640      	mov	r0, r8
 8006d6a:	4649      	mov	r1, r9
 8006d6c:	f7f9 feb6 	bl	8000adc <__aeabi_dcmplt>
 8006d70:	b110      	cbz	r0, 8006d78 <_printf_float+0x90>
 8006d72:	232d      	movs	r3, #45	; 0x2d
 8006d74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d78:	4b93      	ldr	r3, [pc, #588]	; (8006fc8 <_printf_float+0x2e0>)
 8006d7a:	4894      	ldr	r0, [pc, #592]	; (8006fcc <_printf_float+0x2e4>)
 8006d7c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006d80:	bf94      	ite	ls
 8006d82:	4698      	movls	r8, r3
 8006d84:	4680      	movhi	r8, r0
 8006d86:	2303      	movs	r3, #3
 8006d88:	6123      	str	r3, [r4, #16]
 8006d8a:	9b05      	ldr	r3, [sp, #20]
 8006d8c:	f023 0204 	bic.w	r2, r3, #4
 8006d90:	6022      	str	r2, [r4, #0]
 8006d92:	f04f 0900 	mov.w	r9, #0
 8006d96:	9700      	str	r7, [sp, #0]
 8006d98:	4633      	mov	r3, r6
 8006d9a:	aa0b      	add	r2, sp, #44	; 0x2c
 8006d9c:	4621      	mov	r1, r4
 8006d9e:	4628      	mov	r0, r5
 8006da0:	f000 f9d8 	bl	8007154 <_printf_common>
 8006da4:	3001      	adds	r0, #1
 8006da6:	f040 8090 	bne.w	8006eca <_printf_float+0x1e2>
 8006daa:	f04f 30ff 	mov.w	r0, #4294967295
 8006dae:	b00d      	add	sp, #52	; 0x34
 8006db0:	ecbd 8b02 	vpop	{d8}
 8006db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006db8:	4642      	mov	r2, r8
 8006dba:	464b      	mov	r3, r9
 8006dbc:	4640      	mov	r0, r8
 8006dbe:	4649      	mov	r1, r9
 8006dc0:	f7f9 feb4 	bl	8000b2c <__aeabi_dcmpun>
 8006dc4:	b140      	cbz	r0, 8006dd8 <_printf_float+0xf0>
 8006dc6:	464b      	mov	r3, r9
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	bfbc      	itt	lt
 8006dcc:	232d      	movlt	r3, #45	; 0x2d
 8006dce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006dd2:	487f      	ldr	r0, [pc, #508]	; (8006fd0 <_printf_float+0x2e8>)
 8006dd4:	4b7f      	ldr	r3, [pc, #508]	; (8006fd4 <_printf_float+0x2ec>)
 8006dd6:	e7d1      	b.n	8006d7c <_printf_float+0x94>
 8006dd8:	6863      	ldr	r3, [r4, #4]
 8006dda:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006dde:	9206      	str	r2, [sp, #24]
 8006de0:	1c5a      	adds	r2, r3, #1
 8006de2:	d13f      	bne.n	8006e64 <_printf_float+0x17c>
 8006de4:	2306      	movs	r3, #6
 8006de6:	6063      	str	r3, [r4, #4]
 8006de8:	9b05      	ldr	r3, [sp, #20]
 8006dea:	6861      	ldr	r1, [r4, #4]
 8006dec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006df0:	2300      	movs	r3, #0
 8006df2:	9303      	str	r3, [sp, #12]
 8006df4:	ab0a      	add	r3, sp, #40	; 0x28
 8006df6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006dfa:	ab09      	add	r3, sp, #36	; 0x24
 8006dfc:	ec49 8b10 	vmov	d0, r8, r9
 8006e00:	9300      	str	r3, [sp, #0]
 8006e02:	6022      	str	r2, [r4, #0]
 8006e04:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006e08:	4628      	mov	r0, r5
 8006e0a:	f7ff fecd 	bl	8006ba8 <__cvt>
 8006e0e:	9b06      	ldr	r3, [sp, #24]
 8006e10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e12:	2b47      	cmp	r3, #71	; 0x47
 8006e14:	4680      	mov	r8, r0
 8006e16:	d108      	bne.n	8006e2a <_printf_float+0x142>
 8006e18:	1cc8      	adds	r0, r1, #3
 8006e1a:	db02      	blt.n	8006e22 <_printf_float+0x13a>
 8006e1c:	6863      	ldr	r3, [r4, #4]
 8006e1e:	4299      	cmp	r1, r3
 8006e20:	dd41      	ble.n	8006ea6 <_printf_float+0x1be>
 8006e22:	f1ab 0b02 	sub.w	fp, fp, #2
 8006e26:	fa5f fb8b 	uxtb.w	fp, fp
 8006e2a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006e2e:	d820      	bhi.n	8006e72 <_printf_float+0x18a>
 8006e30:	3901      	subs	r1, #1
 8006e32:	465a      	mov	r2, fp
 8006e34:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006e38:	9109      	str	r1, [sp, #36]	; 0x24
 8006e3a:	f7ff ff17 	bl	8006c6c <__exponent>
 8006e3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e40:	1813      	adds	r3, r2, r0
 8006e42:	2a01      	cmp	r2, #1
 8006e44:	4681      	mov	r9, r0
 8006e46:	6123      	str	r3, [r4, #16]
 8006e48:	dc02      	bgt.n	8006e50 <_printf_float+0x168>
 8006e4a:	6822      	ldr	r2, [r4, #0]
 8006e4c:	07d2      	lsls	r2, r2, #31
 8006e4e:	d501      	bpl.n	8006e54 <_printf_float+0x16c>
 8006e50:	3301      	adds	r3, #1
 8006e52:	6123      	str	r3, [r4, #16]
 8006e54:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d09c      	beq.n	8006d96 <_printf_float+0xae>
 8006e5c:	232d      	movs	r3, #45	; 0x2d
 8006e5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e62:	e798      	b.n	8006d96 <_printf_float+0xae>
 8006e64:	9a06      	ldr	r2, [sp, #24]
 8006e66:	2a47      	cmp	r2, #71	; 0x47
 8006e68:	d1be      	bne.n	8006de8 <_printf_float+0x100>
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1bc      	bne.n	8006de8 <_printf_float+0x100>
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e7b9      	b.n	8006de6 <_printf_float+0xfe>
 8006e72:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006e76:	d118      	bne.n	8006eaa <_printf_float+0x1c2>
 8006e78:	2900      	cmp	r1, #0
 8006e7a:	6863      	ldr	r3, [r4, #4]
 8006e7c:	dd0b      	ble.n	8006e96 <_printf_float+0x1ae>
 8006e7e:	6121      	str	r1, [r4, #16]
 8006e80:	b913      	cbnz	r3, 8006e88 <_printf_float+0x1a0>
 8006e82:	6822      	ldr	r2, [r4, #0]
 8006e84:	07d0      	lsls	r0, r2, #31
 8006e86:	d502      	bpl.n	8006e8e <_printf_float+0x1a6>
 8006e88:	3301      	adds	r3, #1
 8006e8a:	440b      	add	r3, r1
 8006e8c:	6123      	str	r3, [r4, #16]
 8006e8e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006e90:	f04f 0900 	mov.w	r9, #0
 8006e94:	e7de      	b.n	8006e54 <_printf_float+0x16c>
 8006e96:	b913      	cbnz	r3, 8006e9e <_printf_float+0x1b6>
 8006e98:	6822      	ldr	r2, [r4, #0]
 8006e9a:	07d2      	lsls	r2, r2, #31
 8006e9c:	d501      	bpl.n	8006ea2 <_printf_float+0x1ba>
 8006e9e:	3302      	adds	r3, #2
 8006ea0:	e7f4      	b.n	8006e8c <_printf_float+0x1a4>
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e7f2      	b.n	8006e8c <_printf_float+0x1a4>
 8006ea6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006eaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006eac:	4299      	cmp	r1, r3
 8006eae:	db05      	blt.n	8006ebc <_printf_float+0x1d4>
 8006eb0:	6823      	ldr	r3, [r4, #0]
 8006eb2:	6121      	str	r1, [r4, #16]
 8006eb4:	07d8      	lsls	r0, r3, #31
 8006eb6:	d5ea      	bpl.n	8006e8e <_printf_float+0x1a6>
 8006eb8:	1c4b      	adds	r3, r1, #1
 8006eba:	e7e7      	b.n	8006e8c <_printf_float+0x1a4>
 8006ebc:	2900      	cmp	r1, #0
 8006ebe:	bfd4      	ite	le
 8006ec0:	f1c1 0202 	rsble	r2, r1, #2
 8006ec4:	2201      	movgt	r2, #1
 8006ec6:	4413      	add	r3, r2
 8006ec8:	e7e0      	b.n	8006e8c <_printf_float+0x1a4>
 8006eca:	6823      	ldr	r3, [r4, #0]
 8006ecc:	055a      	lsls	r2, r3, #21
 8006ece:	d407      	bmi.n	8006ee0 <_printf_float+0x1f8>
 8006ed0:	6923      	ldr	r3, [r4, #16]
 8006ed2:	4642      	mov	r2, r8
 8006ed4:	4631      	mov	r1, r6
 8006ed6:	4628      	mov	r0, r5
 8006ed8:	47b8      	blx	r7
 8006eda:	3001      	adds	r0, #1
 8006edc:	d12c      	bne.n	8006f38 <_printf_float+0x250>
 8006ede:	e764      	b.n	8006daa <_printf_float+0xc2>
 8006ee0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006ee4:	f240 80e0 	bls.w	80070a8 <_printf_float+0x3c0>
 8006ee8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006eec:	2200      	movs	r2, #0
 8006eee:	2300      	movs	r3, #0
 8006ef0:	f7f9 fdea 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ef4:	2800      	cmp	r0, #0
 8006ef6:	d034      	beq.n	8006f62 <_printf_float+0x27a>
 8006ef8:	4a37      	ldr	r2, [pc, #220]	; (8006fd8 <_printf_float+0x2f0>)
 8006efa:	2301      	movs	r3, #1
 8006efc:	4631      	mov	r1, r6
 8006efe:	4628      	mov	r0, r5
 8006f00:	47b8      	blx	r7
 8006f02:	3001      	adds	r0, #1
 8006f04:	f43f af51 	beq.w	8006daa <_printf_float+0xc2>
 8006f08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	db02      	blt.n	8006f16 <_printf_float+0x22e>
 8006f10:	6823      	ldr	r3, [r4, #0]
 8006f12:	07d8      	lsls	r0, r3, #31
 8006f14:	d510      	bpl.n	8006f38 <_printf_float+0x250>
 8006f16:	ee18 3a10 	vmov	r3, s16
 8006f1a:	4652      	mov	r2, sl
 8006f1c:	4631      	mov	r1, r6
 8006f1e:	4628      	mov	r0, r5
 8006f20:	47b8      	blx	r7
 8006f22:	3001      	adds	r0, #1
 8006f24:	f43f af41 	beq.w	8006daa <_printf_float+0xc2>
 8006f28:	f04f 0800 	mov.w	r8, #0
 8006f2c:	f104 091a 	add.w	r9, r4, #26
 8006f30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f32:	3b01      	subs	r3, #1
 8006f34:	4543      	cmp	r3, r8
 8006f36:	dc09      	bgt.n	8006f4c <_printf_float+0x264>
 8006f38:	6823      	ldr	r3, [r4, #0]
 8006f3a:	079b      	lsls	r3, r3, #30
 8006f3c:	f100 8105 	bmi.w	800714a <_printf_float+0x462>
 8006f40:	68e0      	ldr	r0, [r4, #12]
 8006f42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f44:	4298      	cmp	r0, r3
 8006f46:	bfb8      	it	lt
 8006f48:	4618      	movlt	r0, r3
 8006f4a:	e730      	b.n	8006dae <_printf_float+0xc6>
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	464a      	mov	r2, r9
 8006f50:	4631      	mov	r1, r6
 8006f52:	4628      	mov	r0, r5
 8006f54:	47b8      	blx	r7
 8006f56:	3001      	adds	r0, #1
 8006f58:	f43f af27 	beq.w	8006daa <_printf_float+0xc2>
 8006f5c:	f108 0801 	add.w	r8, r8, #1
 8006f60:	e7e6      	b.n	8006f30 <_printf_float+0x248>
 8006f62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	dc39      	bgt.n	8006fdc <_printf_float+0x2f4>
 8006f68:	4a1b      	ldr	r2, [pc, #108]	; (8006fd8 <_printf_float+0x2f0>)
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	4631      	mov	r1, r6
 8006f6e:	4628      	mov	r0, r5
 8006f70:	47b8      	blx	r7
 8006f72:	3001      	adds	r0, #1
 8006f74:	f43f af19 	beq.w	8006daa <_printf_float+0xc2>
 8006f78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	d102      	bne.n	8006f86 <_printf_float+0x29e>
 8006f80:	6823      	ldr	r3, [r4, #0]
 8006f82:	07d9      	lsls	r1, r3, #31
 8006f84:	d5d8      	bpl.n	8006f38 <_printf_float+0x250>
 8006f86:	ee18 3a10 	vmov	r3, s16
 8006f8a:	4652      	mov	r2, sl
 8006f8c:	4631      	mov	r1, r6
 8006f8e:	4628      	mov	r0, r5
 8006f90:	47b8      	blx	r7
 8006f92:	3001      	adds	r0, #1
 8006f94:	f43f af09 	beq.w	8006daa <_printf_float+0xc2>
 8006f98:	f04f 0900 	mov.w	r9, #0
 8006f9c:	f104 0a1a 	add.w	sl, r4, #26
 8006fa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fa2:	425b      	negs	r3, r3
 8006fa4:	454b      	cmp	r3, r9
 8006fa6:	dc01      	bgt.n	8006fac <_printf_float+0x2c4>
 8006fa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006faa:	e792      	b.n	8006ed2 <_printf_float+0x1ea>
 8006fac:	2301      	movs	r3, #1
 8006fae:	4652      	mov	r2, sl
 8006fb0:	4631      	mov	r1, r6
 8006fb2:	4628      	mov	r0, r5
 8006fb4:	47b8      	blx	r7
 8006fb6:	3001      	adds	r0, #1
 8006fb8:	f43f aef7 	beq.w	8006daa <_printf_float+0xc2>
 8006fbc:	f109 0901 	add.w	r9, r9, #1
 8006fc0:	e7ee      	b.n	8006fa0 <_printf_float+0x2b8>
 8006fc2:	bf00      	nop
 8006fc4:	7fefffff 	.word	0x7fefffff
 8006fc8:	08009bb8 	.word	0x08009bb8
 8006fcc:	08009bbc 	.word	0x08009bbc
 8006fd0:	08009bc4 	.word	0x08009bc4
 8006fd4:	08009bc0 	.word	0x08009bc0
 8006fd8:	08009bc8 	.word	0x08009bc8
 8006fdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fde:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	bfa8      	it	ge
 8006fe4:	461a      	movge	r2, r3
 8006fe6:	2a00      	cmp	r2, #0
 8006fe8:	4691      	mov	r9, r2
 8006fea:	dc37      	bgt.n	800705c <_printf_float+0x374>
 8006fec:	f04f 0b00 	mov.w	fp, #0
 8006ff0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ff4:	f104 021a 	add.w	r2, r4, #26
 8006ff8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ffa:	9305      	str	r3, [sp, #20]
 8006ffc:	eba3 0309 	sub.w	r3, r3, r9
 8007000:	455b      	cmp	r3, fp
 8007002:	dc33      	bgt.n	800706c <_printf_float+0x384>
 8007004:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007008:	429a      	cmp	r2, r3
 800700a:	db3b      	blt.n	8007084 <_printf_float+0x39c>
 800700c:	6823      	ldr	r3, [r4, #0]
 800700e:	07da      	lsls	r2, r3, #31
 8007010:	d438      	bmi.n	8007084 <_printf_float+0x39c>
 8007012:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007014:	9a05      	ldr	r2, [sp, #20]
 8007016:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007018:	1a9a      	subs	r2, r3, r2
 800701a:	eba3 0901 	sub.w	r9, r3, r1
 800701e:	4591      	cmp	r9, r2
 8007020:	bfa8      	it	ge
 8007022:	4691      	movge	r9, r2
 8007024:	f1b9 0f00 	cmp.w	r9, #0
 8007028:	dc35      	bgt.n	8007096 <_printf_float+0x3ae>
 800702a:	f04f 0800 	mov.w	r8, #0
 800702e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007032:	f104 0a1a 	add.w	sl, r4, #26
 8007036:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800703a:	1a9b      	subs	r3, r3, r2
 800703c:	eba3 0309 	sub.w	r3, r3, r9
 8007040:	4543      	cmp	r3, r8
 8007042:	f77f af79 	ble.w	8006f38 <_printf_float+0x250>
 8007046:	2301      	movs	r3, #1
 8007048:	4652      	mov	r2, sl
 800704a:	4631      	mov	r1, r6
 800704c:	4628      	mov	r0, r5
 800704e:	47b8      	blx	r7
 8007050:	3001      	adds	r0, #1
 8007052:	f43f aeaa 	beq.w	8006daa <_printf_float+0xc2>
 8007056:	f108 0801 	add.w	r8, r8, #1
 800705a:	e7ec      	b.n	8007036 <_printf_float+0x34e>
 800705c:	4613      	mov	r3, r2
 800705e:	4631      	mov	r1, r6
 8007060:	4642      	mov	r2, r8
 8007062:	4628      	mov	r0, r5
 8007064:	47b8      	blx	r7
 8007066:	3001      	adds	r0, #1
 8007068:	d1c0      	bne.n	8006fec <_printf_float+0x304>
 800706a:	e69e      	b.n	8006daa <_printf_float+0xc2>
 800706c:	2301      	movs	r3, #1
 800706e:	4631      	mov	r1, r6
 8007070:	4628      	mov	r0, r5
 8007072:	9205      	str	r2, [sp, #20]
 8007074:	47b8      	blx	r7
 8007076:	3001      	adds	r0, #1
 8007078:	f43f ae97 	beq.w	8006daa <_printf_float+0xc2>
 800707c:	9a05      	ldr	r2, [sp, #20]
 800707e:	f10b 0b01 	add.w	fp, fp, #1
 8007082:	e7b9      	b.n	8006ff8 <_printf_float+0x310>
 8007084:	ee18 3a10 	vmov	r3, s16
 8007088:	4652      	mov	r2, sl
 800708a:	4631      	mov	r1, r6
 800708c:	4628      	mov	r0, r5
 800708e:	47b8      	blx	r7
 8007090:	3001      	adds	r0, #1
 8007092:	d1be      	bne.n	8007012 <_printf_float+0x32a>
 8007094:	e689      	b.n	8006daa <_printf_float+0xc2>
 8007096:	9a05      	ldr	r2, [sp, #20]
 8007098:	464b      	mov	r3, r9
 800709a:	4442      	add	r2, r8
 800709c:	4631      	mov	r1, r6
 800709e:	4628      	mov	r0, r5
 80070a0:	47b8      	blx	r7
 80070a2:	3001      	adds	r0, #1
 80070a4:	d1c1      	bne.n	800702a <_printf_float+0x342>
 80070a6:	e680      	b.n	8006daa <_printf_float+0xc2>
 80070a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070aa:	2a01      	cmp	r2, #1
 80070ac:	dc01      	bgt.n	80070b2 <_printf_float+0x3ca>
 80070ae:	07db      	lsls	r3, r3, #31
 80070b0:	d538      	bpl.n	8007124 <_printf_float+0x43c>
 80070b2:	2301      	movs	r3, #1
 80070b4:	4642      	mov	r2, r8
 80070b6:	4631      	mov	r1, r6
 80070b8:	4628      	mov	r0, r5
 80070ba:	47b8      	blx	r7
 80070bc:	3001      	adds	r0, #1
 80070be:	f43f ae74 	beq.w	8006daa <_printf_float+0xc2>
 80070c2:	ee18 3a10 	vmov	r3, s16
 80070c6:	4652      	mov	r2, sl
 80070c8:	4631      	mov	r1, r6
 80070ca:	4628      	mov	r0, r5
 80070cc:	47b8      	blx	r7
 80070ce:	3001      	adds	r0, #1
 80070d0:	f43f ae6b 	beq.w	8006daa <_printf_float+0xc2>
 80070d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80070d8:	2200      	movs	r2, #0
 80070da:	2300      	movs	r3, #0
 80070dc:	f7f9 fcf4 	bl	8000ac8 <__aeabi_dcmpeq>
 80070e0:	b9d8      	cbnz	r0, 800711a <_printf_float+0x432>
 80070e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070e4:	f108 0201 	add.w	r2, r8, #1
 80070e8:	3b01      	subs	r3, #1
 80070ea:	4631      	mov	r1, r6
 80070ec:	4628      	mov	r0, r5
 80070ee:	47b8      	blx	r7
 80070f0:	3001      	adds	r0, #1
 80070f2:	d10e      	bne.n	8007112 <_printf_float+0x42a>
 80070f4:	e659      	b.n	8006daa <_printf_float+0xc2>
 80070f6:	2301      	movs	r3, #1
 80070f8:	4652      	mov	r2, sl
 80070fa:	4631      	mov	r1, r6
 80070fc:	4628      	mov	r0, r5
 80070fe:	47b8      	blx	r7
 8007100:	3001      	adds	r0, #1
 8007102:	f43f ae52 	beq.w	8006daa <_printf_float+0xc2>
 8007106:	f108 0801 	add.w	r8, r8, #1
 800710a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800710c:	3b01      	subs	r3, #1
 800710e:	4543      	cmp	r3, r8
 8007110:	dcf1      	bgt.n	80070f6 <_printf_float+0x40e>
 8007112:	464b      	mov	r3, r9
 8007114:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007118:	e6dc      	b.n	8006ed4 <_printf_float+0x1ec>
 800711a:	f04f 0800 	mov.w	r8, #0
 800711e:	f104 0a1a 	add.w	sl, r4, #26
 8007122:	e7f2      	b.n	800710a <_printf_float+0x422>
 8007124:	2301      	movs	r3, #1
 8007126:	4642      	mov	r2, r8
 8007128:	e7df      	b.n	80070ea <_printf_float+0x402>
 800712a:	2301      	movs	r3, #1
 800712c:	464a      	mov	r2, r9
 800712e:	4631      	mov	r1, r6
 8007130:	4628      	mov	r0, r5
 8007132:	47b8      	blx	r7
 8007134:	3001      	adds	r0, #1
 8007136:	f43f ae38 	beq.w	8006daa <_printf_float+0xc2>
 800713a:	f108 0801 	add.w	r8, r8, #1
 800713e:	68e3      	ldr	r3, [r4, #12]
 8007140:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007142:	1a5b      	subs	r3, r3, r1
 8007144:	4543      	cmp	r3, r8
 8007146:	dcf0      	bgt.n	800712a <_printf_float+0x442>
 8007148:	e6fa      	b.n	8006f40 <_printf_float+0x258>
 800714a:	f04f 0800 	mov.w	r8, #0
 800714e:	f104 0919 	add.w	r9, r4, #25
 8007152:	e7f4      	b.n	800713e <_printf_float+0x456>

08007154 <_printf_common>:
 8007154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007158:	4616      	mov	r6, r2
 800715a:	4699      	mov	r9, r3
 800715c:	688a      	ldr	r2, [r1, #8]
 800715e:	690b      	ldr	r3, [r1, #16]
 8007160:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007164:	4293      	cmp	r3, r2
 8007166:	bfb8      	it	lt
 8007168:	4613      	movlt	r3, r2
 800716a:	6033      	str	r3, [r6, #0]
 800716c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007170:	4607      	mov	r7, r0
 8007172:	460c      	mov	r4, r1
 8007174:	b10a      	cbz	r2, 800717a <_printf_common+0x26>
 8007176:	3301      	adds	r3, #1
 8007178:	6033      	str	r3, [r6, #0]
 800717a:	6823      	ldr	r3, [r4, #0]
 800717c:	0699      	lsls	r1, r3, #26
 800717e:	bf42      	ittt	mi
 8007180:	6833      	ldrmi	r3, [r6, #0]
 8007182:	3302      	addmi	r3, #2
 8007184:	6033      	strmi	r3, [r6, #0]
 8007186:	6825      	ldr	r5, [r4, #0]
 8007188:	f015 0506 	ands.w	r5, r5, #6
 800718c:	d106      	bne.n	800719c <_printf_common+0x48>
 800718e:	f104 0a19 	add.w	sl, r4, #25
 8007192:	68e3      	ldr	r3, [r4, #12]
 8007194:	6832      	ldr	r2, [r6, #0]
 8007196:	1a9b      	subs	r3, r3, r2
 8007198:	42ab      	cmp	r3, r5
 800719a:	dc26      	bgt.n	80071ea <_printf_common+0x96>
 800719c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80071a0:	1e13      	subs	r3, r2, #0
 80071a2:	6822      	ldr	r2, [r4, #0]
 80071a4:	bf18      	it	ne
 80071a6:	2301      	movne	r3, #1
 80071a8:	0692      	lsls	r2, r2, #26
 80071aa:	d42b      	bmi.n	8007204 <_printf_common+0xb0>
 80071ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80071b0:	4649      	mov	r1, r9
 80071b2:	4638      	mov	r0, r7
 80071b4:	47c0      	blx	r8
 80071b6:	3001      	adds	r0, #1
 80071b8:	d01e      	beq.n	80071f8 <_printf_common+0xa4>
 80071ba:	6823      	ldr	r3, [r4, #0]
 80071bc:	68e5      	ldr	r5, [r4, #12]
 80071be:	6832      	ldr	r2, [r6, #0]
 80071c0:	f003 0306 	and.w	r3, r3, #6
 80071c4:	2b04      	cmp	r3, #4
 80071c6:	bf08      	it	eq
 80071c8:	1aad      	subeq	r5, r5, r2
 80071ca:	68a3      	ldr	r3, [r4, #8]
 80071cc:	6922      	ldr	r2, [r4, #16]
 80071ce:	bf0c      	ite	eq
 80071d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80071d4:	2500      	movne	r5, #0
 80071d6:	4293      	cmp	r3, r2
 80071d8:	bfc4      	itt	gt
 80071da:	1a9b      	subgt	r3, r3, r2
 80071dc:	18ed      	addgt	r5, r5, r3
 80071de:	2600      	movs	r6, #0
 80071e0:	341a      	adds	r4, #26
 80071e2:	42b5      	cmp	r5, r6
 80071e4:	d11a      	bne.n	800721c <_printf_common+0xc8>
 80071e6:	2000      	movs	r0, #0
 80071e8:	e008      	b.n	80071fc <_printf_common+0xa8>
 80071ea:	2301      	movs	r3, #1
 80071ec:	4652      	mov	r2, sl
 80071ee:	4649      	mov	r1, r9
 80071f0:	4638      	mov	r0, r7
 80071f2:	47c0      	blx	r8
 80071f4:	3001      	adds	r0, #1
 80071f6:	d103      	bne.n	8007200 <_printf_common+0xac>
 80071f8:	f04f 30ff 	mov.w	r0, #4294967295
 80071fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007200:	3501      	adds	r5, #1
 8007202:	e7c6      	b.n	8007192 <_printf_common+0x3e>
 8007204:	18e1      	adds	r1, r4, r3
 8007206:	1c5a      	adds	r2, r3, #1
 8007208:	2030      	movs	r0, #48	; 0x30
 800720a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800720e:	4422      	add	r2, r4
 8007210:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007214:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007218:	3302      	adds	r3, #2
 800721a:	e7c7      	b.n	80071ac <_printf_common+0x58>
 800721c:	2301      	movs	r3, #1
 800721e:	4622      	mov	r2, r4
 8007220:	4649      	mov	r1, r9
 8007222:	4638      	mov	r0, r7
 8007224:	47c0      	blx	r8
 8007226:	3001      	adds	r0, #1
 8007228:	d0e6      	beq.n	80071f8 <_printf_common+0xa4>
 800722a:	3601      	adds	r6, #1
 800722c:	e7d9      	b.n	80071e2 <_printf_common+0x8e>
	...

08007230 <_printf_i>:
 8007230:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007234:	7e0f      	ldrb	r7, [r1, #24]
 8007236:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007238:	2f78      	cmp	r7, #120	; 0x78
 800723a:	4691      	mov	r9, r2
 800723c:	4680      	mov	r8, r0
 800723e:	460c      	mov	r4, r1
 8007240:	469a      	mov	sl, r3
 8007242:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007246:	d807      	bhi.n	8007258 <_printf_i+0x28>
 8007248:	2f62      	cmp	r7, #98	; 0x62
 800724a:	d80a      	bhi.n	8007262 <_printf_i+0x32>
 800724c:	2f00      	cmp	r7, #0
 800724e:	f000 80d8 	beq.w	8007402 <_printf_i+0x1d2>
 8007252:	2f58      	cmp	r7, #88	; 0x58
 8007254:	f000 80a3 	beq.w	800739e <_printf_i+0x16e>
 8007258:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800725c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007260:	e03a      	b.n	80072d8 <_printf_i+0xa8>
 8007262:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007266:	2b15      	cmp	r3, #21
 8007268:	d8f6      	bhi.n	8007258 <_printf_i+0x28>
 800726a:	a101      	add	r1, pc, #4	; (adr r1, 8007270 <_printf_i+0x40>)
 800726c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007270:	080072c9 	.word	0x080072c9
 8007274:	080072dd 	.word	0x080072dd
 8007278:	08007259 	.word	0x08007259
 800727c:	08007259 	.word	0x08007259
 8007280:	08007259 	.word	0x08007259
 8007284:	08007259 	.word	0x08007259
 8007288:	080072dd 	.word	0x080072dd
 800728c:	08007259 	.word	0x08007259
 8007290:	08007259 	.word	0x08007259
 8007294:	08007259 	.word	0x08007259
 8007298:	08007259 	.word	0x08007259
 800729c:	080073e9 	.word	0x080073e9
 80072a0:	0800730d 	.word	0x0800730d
 80072a4:	080073cb 	.word	0x080073cb
 80072a8:	08007259 	.word	0x08007259
 80072ac:	08007259 	.word	0x08007259
 80072b0:	0800740b 	.word	0x0800740b
 80072b4:	08007259 	.word	0x08007259
 80072b8:	0800730d 	.word	0x0800730d
 80072bc:	08007259 	.word	0x08007259
 80072c0:	08007259 	.word	0x08007259
 80072c4:	080073d3 	.word	0x080073d3
 80072c8:	682b      	ldr	r3, [r5, #0]
 80072ca:	1d1a      	adds	r2, r3, #4
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	602a      	str	r2, [r5, #0]
 80072d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80072d8:	2301      	movs	r3, #1
 80072da:	e0a3      	b.n	8007424 <_printf_i+0x1f4>
 80072dc:	6820      	ldr	r0, [r4, #0]
 80072de:	6829      	ldr	r1, [r5, #0]
 80072e0:	0606      	lsls	r6, r0, #24
 80072e2:	f101 0304 	add.w	r3, r1, #4
 80072e6:	d50a      	bpl.n	80072fe <_printf_i+0xce>
 80072e8:	680e      	ldr	r6, [r1, #0]
 80072ea:	602b      	str	r3, [r5, #0]
 80072ec:	2e00      	cmp	r6, #0
 80072ee:	da03      	bge.n	80072f8 <_printf_i+0xc8>
 80072f0:	232d      	movs	r3, #45	; 0x2d
 80072f2:	4276      	negs	r6, r6
 80072f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072f8:	485e      	ldr	r0, [pc, #376]	; (8007474 <_printf_i+0x244>)
 80072fa:	230a      	movs	r3, #10
 80072fc:	e019      	b.n	8007332 <_printf_i+0x102>
 80072fe:	680e      	ldr	r6, [r1, #0]
 8007300:	602b      	str	r3, [r5, #0]
 8007302:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007306:	bf18      	it	ne
 8007308:	b236      	sxthne	r6, r6
 800730a:	e7ef      	b.n	80072ec <_printf_i+0xbc>
 800730c:	682b      	ldr	r3, [r5, #0]
 800730e:	6820      	ldr	r0, [r4, #0]
 8007310:	1d19      	adds	r1, r3, #4
 8007312:	6029      	str	r1, [r5, #0]
 8007314:	0601      	lsls	r1, r0, #24
 8007316:	d501      	bpl.n	800731c <_printf_i+0xec>
 8007318:	681e      	ldr	r6, [r3, #0]
 800731a:	e002      	b.n	8007322 <_printf_i+0xf2>
 800731c:	0646      	lsls	r6, r0, #25
 800731e:	d5fb      	bpl.n	8007318 <_printf_i+0xe8>
 8007320:	881e      	ldrh	r6, [r3, #0]
 8007322:	4854      	ldr	r0, [pc, #336]	; (8007474 <_printf_i+0x244>)
 8007324:	2f6f      	cmp	r7, #111	; 0x6f
 8007326:	bf0c      	ite	eq
 8007328:	2308      	moveq	r3, #8
 800732a:	230a      	movne	r3, #10
 800732c:	2100      	movs	r1, #0
 800732e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007332:	6865      	ldr	r5, [r4, #4]
 8007334:	60a5      	str	r5, [r4, #8]
 8007336:	2d00      	cmp	r5, #0
 8007338:	bfa2      	ittt	ge
 800733a:	6821      	ldrge	r1, [r4, #0]
 800733c:	f021 0104 	bicge.w	r1, r1, #4
 8007340:	6021      	strge	r1, [r4, #0]
 8007342:	b90e      	cbnz	r6, 8007348 <_printf_i+0x118>
 8007344:	2d00      	cmp	r5, #0
 8007346:	d04d      	beq.n	80073e4 <_printf_i+0x1b4>
 8007348:	4615      	mov	r5, r2
 800734a:	fbb6 f1f3 	udiv	r1, r6, r3
 800734e:	fb03 6711 	mls	r7, r3, r1, r6
 8007352:	5dc7      	ldrb	r7, [r0, r7]
 8007354:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007358:	4637      	mov	r7, r6
 800735a:	42bb      	cmp	r3, r7
 800735c:	460e      	mov	r6, r1
 800735e:	d9f4      	bls.n	800734a <_printf_i+0x11a>
 8007360:	2b08      	cmp	r3, #8
 8007362:	d10b      	bne.n	800737c <_printf_i+0x14c>
 8007364:	6823      	ldr	r3, [r4, #0]
 8007366:	07de      	lsls	r6, r3, #31
 8007368:	d508      	bpl.n	800737c <_printf_i+0x14c>
 800736a:	6923      	ldr	r3, [r4, #16]
 800736c:	6861      	ldr	r1, [r4, #4]
 800736e:	4299      	cmp	r1, r3
 8007370:	bfde      	ittt	le
 8007372:	2330      	movle	r3, #48	; 0x30
 8007374:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007378:	f105 35ff 	addle.w	r5, r5, #4294967295
 800737c:	1b52      	subs	r2, r2, r5
 800737e:	6122      	str	r2, [r4, #16]
 8007380:	f8cd a000 	str.w	sl, [sp]
 8007384:	464b      	mov	r3, r9
 8007386:	aa03      	add	r2, sp, #12
 8007388:	4621      	mov	r1, r4
 800738a:	4640      	mov	r0, r8
 800738c:	f7ff fee2 	bl	8007154 <_printf_common>
 8007390:	3001      	adds	r0, #1
 8007392:	d14c      	bne.n	800742e <_printf_i+0x1fe>
 8007394:	f04f 30ff 	mov.w	r0, #4294967295
 8007398:	b004      	add	sp, #16
 800739a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800739e:	4835      	ldr	r0, [pc, #212]	; (8007474 <_printf_i+0x244>)
 80073a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80073a4:	6829      	ldr	r1, [r5, #0]
 80073a6:	6823      	ldr	r3, [r4, #0]
 80073a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80073ac:	6029      	str	r1, [r5, #0]
 80073ae:	061d      	lsls	r5, r3, #24
 80073b0:	d514      	bpl.n	80073dc <_printf_i+0x1ac>
 80073b2:	07df      	lsls	r7, r3, #31
 80073b4:	bf44      	itt	mi
 80073b6:	f043 0320 	orrmi.w	r3, r3, #32
 80073ba:	6023      	strmi	r3, [r4, #0]
 80073bc:	b91e      	cbnz	r6, 80073c6 <_printf_i+0x196>
 80073be:	6823      	ldr	r3, [r4, #0]
 80073c0:	f023 0320 	bic.w	r3, r3, #32
 80073c4:	6023      	str	r3, [r4, #0]
 80073c6:	2310      	movs	r3, #16
 80073c8:	e7b0      	b.n	800732c <_printf_i+0xfc>
 80073ca:	6823      	ldr	r3, [r4, #0]
 80073cc:	f043 0320 	orr.w	r3, r3, #32
 80073d0:	6023      	str	r3, [r4, #0]
 80073d2:	2378      	movs	r3, #120	; 0x78
 80073d4:	4828      	ldr	r0, [pc, #160]	; (8007478 <_printf_i+0x248>)
 80073d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80073da:	e7e3      	b.n	80073a4 <_printf_i+0x174>
 80073dc:	0659      	lsls	r1, r3, #25
 80073de:	bf48      	it	mi
 80073e0:	b2b6      	uxthmi	r6, r6
 80073e2:	e7e6      	b.n	80073b2 <_printf_i+0x182>
 80073e4:	4615      	mov	r5, r2
 80073e6:	e7bb      	b.n	8007360 <_printf_i+0x130>
 80073e8:	682b      	ldr	r3, [r5, #0]
 80073ea:	6826      	ldr	r6, [r4, #0]
 80073ec:	6961      	ldr	r1, [r4, #20]
 80073ee:	1d18      	adds	r0, r3, #4
 80073f0:	6028      	str	r0, [r5, #0]
 80073f2:	0635      	lsls	r5, r6, #24
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	d501      	bpl.n	80073fc <_printf_i+0x1cc>
 80073f8:	6019      	str	r1, [r3, #0]
 80073fa:	e002      	b.n	8007402 <_printf_i+0x1d2>
 80073fc:	0670      	lsls	r0, r6, #25
 80073fe:	d5fb      	bpl.n	80073f8 <_printf_i+0x1c8>
 8007400:	8019      	strh	r1, [r3, #0]
 8007402:	2300      	movs	r3, #0
 8007404:	6123      	str	r3, [r4, #16]
 8007406:	4615      	mov	r5, r2
 8007408:	e7ba      	b.n	8007380 <_printf_i+0x150>
 800740a:	682b      	ldr	r3, [r5, #0]
 800740c:	1d1a      	adds	r2, r3, #4
 800740e:	602a      	str	r2, [r5, #0]
 8007410:	681d      	ldr	r5, [r3, #0]
 8007412:	6862      	ldr	r2, [r4, #4]
 8007414:	2100      	movs	r1, #0
 8007416:	4628      	mov	r0, r5
 8007418:	f7f8 fee2 	bl	80001e0 <memchr>
 800741c:	b108      	cbz	r0, 8007422 <_printf_i+0x1f2>
 800741e:	1b40      	subs	r0, r0, r5
 8007420:	6060      	str	r0, [r4, #4]
 8007422:	6863      	ldr	r3, [r4, #4]
 8007424:	6123      	str	r3, [r4, #16]
 8007426:	2300      	movs	r3, #0
 8007428:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800742c:	e7a8      	b.n	8007380 <_printf_i+0x150>
 800742e:	6923      	ldr	r3, [r4, #16]
 8007430:	462a      	mov	r2, r5
 8007432:	4649      	mov	r1, r9
 8007434:	4640      	mov	r0, r8
 8007436:	47d0      	blx	sl
 8007438:	3001      	adds	r0, #1
 800743a:	d0ab      	beq.n	8007394 <_printf_i+0x164>
 800743c:	6823      	ldr	r3, [r4, #0]
 800743e:	079b      	lsls	r3, r3, #30
 8007440:	d413      	bmi.n	800746a <_printf_i+0x23a>
 8007442:	68e0      	ldr	r0, [r4, #12]
 8007444:	9b03      	ldr	r3, [sp, #12]
 8007446:	4298      	cmp	r0, r3
 8007448:	bfb8      	it	lt
 800744a:	4618      	movlt	r0, r3
 800744c:	e7a4      	b.n	8007398 <_printf_i+0x168>
 800744e:	2301      	movs	r3, #1
 8007450:	4632      	mov	r2, r6
 8007452:	4649      	mov	r1, r9
 8007454:	4640      	mov	r0, r8
 8007456:	47d0      	blx	sl
 8007458:	3001      	adds	r0, #1
 800745a:	d09b      	beq.n	8007394 <_printf_i+0x164>
 800745c:	3501      	adds	r5, #1
 800745e:	68e3      	ldr	r3, [r4, #12]
 8007460:	9903      	ldr	r1, [sp, #12]
 8007462:	1a5b      	subs	r3, r3, r1
 8007464:	42ab      	cmp	r3, r5
 8007466:	dcf2      	bgt.n	800744e <_printf_i+0x21e>
 8007468:	e7eb      	b.n	8007442 <_printf_i+0x212>
 800746a:	2500      	movs	r5, #0
 800746c:	f104 0619 	add.w	r6, r4, #25
 8007470:	e7f5      	b.n	800745e <_printf_i+0x22e>
 8007472:	bf00      	nop
 8007474:	08009bca 	.word	0x08009bca
 8007478:	08009bdb 	.word	0x08009bdb

0800747c <sniprintf>:
 800747c:	b40c      	push	{r2, r3}
 800747e:	b530      	push	{r4, r5, lr}
 8007480:	4b17      	ldr	r3, [pc, #92]	; (80074e0 <sniprintf+0x64>)
 8007482:	1e0c      	subs	r4, r1, #0
 8007484:	681d      	ldr	r5, [r3, #0]
 8007486:	b09d      	sub	sp, #116	; 0x74
 8007488:	da08      	bge.n	800749c <sniprintf+0x20>
 800748a:	238b      	movs	r3, #139	; 0x8b
 800748c:	602b      	str	r3, [r5, #0]
 800748e:	f04f 30ff 	mov.w	r0, #4294967295
 8007492:	b01d      	add	sp, #116	; 0x74
 8007494:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007498:	b002      	add	sp, #8
 800749a:	4770      	bx	lr
 800749c:	f44f 7302 	mov.w	r3, #520	; 0x208
 80074a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80074a4:	bf14      	ite	ne
 80074a6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80074aa:	4623      	moveq	r3, r4
 80074ac:	9304      	str	r3, [sp, #16]
 80074ae:	9307      	str	r3, [sp, #28]
 80074b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80074b4:	9002      	str	r0, [sp, #8]
 80074b6:	9006      	str	r0, [sp, #24]
 80074b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80074bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80074be:	ab21      	add	r3, sp, #132	; 0x84
 80074c0:	a902      	add	r1, sp, #8
 80074c2:	4628      	mov	r0, r5
 80074c4:	9301      	str	r3, [sp, #4]
 80074c6:	f001 fb79 	bl	8008bbc <_svfiprintf_r>
 80074ca:	1c43      	adds	r3, r0, #1
 80074cc:	bfbc      	itt	lt
 80074ce:	238b      	movlt	r3, #139	; 0x8b
 80074d0:	602b      	strlt	r3, [r5, #0]
 80074d2:	2c00      	cmp	r4, #0
 80074d4:	d0dd      	beq.n	8007492 <sniprintf+0x16>
 80074d6:	9b02      	ldr	r3, [sp, #8]
 80074d8:	2200      	movs	r2, #0
 80074da:	701a      	strb	r2, [r3, #0]
 80074dc:	e7d9      	b.n	8007492 <sniprintf+0x16>
 80074de:	bf00      	nop
 80074e0:	20000030 	.word	0x20000030

080074e4 <quorem>:
 80074e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074e8:	6903      	ldr	r3, [r0, #16]
 80074ea:	690c      	ldr	r4, [r1, #16]
 80074ec:	42a3      	cmp	r3, r4
 80074ee:	4607      	mov	r7, r0
 80074f0:	f2c0 8081 	blt.w	80075f6 <quorem+0x112>
 80074f4:	3c01      	subs	r4, #1
 80074f6:	f101 0814 	add.w	r8, r1, #20
 80074fa:	f100 0514 	add.w	r5, r0, #20
 80074fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007502:	9301      	str	r3, [sp, #4]
 8007504:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007508:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800750c:	3301      	adds	r3, #1
 800750e:	429a      	cmp	r2, r3
 8007510:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007514:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007518:	fbb2 f6f3 	udiv	r6, r2, r3
 800751c:	d331      	bcc.n	8007582 <quorem+0x9e>
 800751e:	f04f 0e00 	mov.w	lr, #0
 8007522:	4640      	mov	r0, r8
 8007524:	46ac      	mov	ip, r5
 8007526:	46f2      	mov	sl, lr
 8007528:	f850 2b04 	ldr.w	r2, [r0], #4
 800752c:	b293      	uxth	r3, r2
 800752e:	fb06 e303 	mla	r3, r6, r3, lr
 8007532:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007536:	b29b      	uxth	r3, r3
 8007538:	ebaa 0303 	sub.w	r3, sl, r3
 800753c:	f8dc a000 	ldr.w	sl, [ip]
 8007540:	0c12      	lsrs	r2, r2, #16
 8007542:	fa13 f38a 	uxtah	r3, r3, sl
 8007546:	fb06 e202 	mla	r2, r6, r2, lr
 800754a:	9300      	str	r3, [sp, #0]
 800754c:	9b00      	ldr	r3, [sp, #0]
 800754e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007552:	b292      	uxth	r2, r2
 8007554:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007558:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800755c:	f8bd 3000 	ldrh.w	r3, [sp]
 8007560:	4581      	cmp	r9, r0
 8007562:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007566:	f84c 3b04 	str.w	r3, [ip], #4
 800756a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800756e:	d2db      	bcs.n	8007528 <quorem+0x44>
 8007570:	f855 300b 	ldr.w	r3, [r5, fp]
 8007574:	b92b      	cbnz	r3, 8007582 <quorem+0x9e>
 8007576:	9b01      	ldr	r3, [sp, #4]
 8007578:	3b04      	subs	r3, #4
 800757a:	429d      	cmp	r5, r3
 800757c:	461a      	mov	r2, r3
 800757e:	d32e      	bcc.n	80075de <quorem+0xfa>
 8007580:	613c      	str	r4, [r7, #16]
 8007582:	4638      	mov	r0, r7
 8007584:	f001 f8c6 	bl	8008714 <__mcmp>
 8007588:	2800      	cmp	r0, #0
 800758a:	db24      	blt.n	80075d6 <quorem+0xf2>
 800758c:	3601      	adds	r6, #1
 800758e:	4628      	mov	r0, r5
 8007590:	f04f 0c00 	mov.w	ip, #0
 8007594:	f858 2b04 	ldr.w	r2, [r8], #4
 8007598:	f8d0 e000 	ldr.w	lr, [r0]
 800759c:	b293      	uxth	r3, r2
 800759e:	ebac 0303 	sub.w	r3, ip, r3
 80075a2:	0c12      	lsrs	r2, r2, #16
 80075a4:	fa13 f38e 	uxtah	r3, r3, lr
 80075a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80075ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075b6:	45c1      	cmp	r9, r8
 80075b8:	f840 3b04 	str.w	r3, [r0], #4
 80075bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80075c0:	d2e8      	bcs.n	8007594 <quorem+0xb0>
 80075c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80075c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80075ca:	b922      	cbnz	r2, 80075d6 <quorem+0xf2>
 80075cc:	3b04      	subs	r3, #4
 80075ce:	429d      	cmp	r5, r3
 80075d0:	461a      	mov	r2, r3
 80075d2:	d30a      	bcc.n	80075ea <quorem+0x106>
 80075d4:	613c      	str	r4, [r7, #16]
 80075d6:	4630      	mov	r0, r6
 80075d8:	b003      	add	sp, #12
 80075da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075de:	6812      	ldr	r2, [r2, #0]
 80075e0:	3b04      	subs	r3, #4
 80075e2:	2a00      	cmp	r2, #0
 80075e4:	d1cc      	bne.n	8007580 <quorem+0x9c>
 80075e6:	3c01      	subs	r4, #1
 80075e8:	e7c7      	b.n	800757a <quorem+0x96>
 80075ea:	6812      	ldr	r2, [r2, #0]
 80075ec:	3b04      	subs	r3, #4
 80075ee:	2a00      	cmp	r2, #0
 80075f0:	d1f0      	bne.n	80075d4 <quorem+0xf0>
 80075f2:	3c01      	subs	r4, #1
 80075f4:	e7eb      	b.n	80075ce <quorem+0xea>
 80075f6:	2000      	movs	r0, #0
 80075f8:	e7ee      	b.n	80075d8 <quorem+0xf4>
 80075fa:	0000      	movs	r0, r0
 80075fc:	0000      	movs	r0, r0
	...

08007600 <_dtoa_r>:
 8007600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007604:	ed2d 8b04 	vpush	{d8-d9}
 8007608:	ec57 6b10 	vmov	r6, r7, d0
 800760c:	b093      	sub	sp, #76	; 0x4c
 800760e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007610:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007614:	9106      	str	r1, [sp, #24]
 8007616:	ee10 aa10 	vmov	sl, s0
 800761a:	4604      	mov	r4, r0
 800761c:	9209      	str	r2, [sp, #36]	; 0x24
 800761e:	930c      	str	r3, [sp, #48]	; 0x30
 8007620:	46bb      	mov	fp, r7
 8007622:	b975      	cbnz	r5, 8007642 <_dtoa_r+0x42>
 8007624:	2010      	movs	r0, #16
 8007626:	f000 fddd 	bl	80081e4 <malloc>
 800762a:	4602      	mov	r2, r0
 800762c:	6260      	str	r0, [r4, #36]	; 0x24
 800762e:	b920      	cbnz	r0, 800763a <_dtoa_r+0x3a>
 8007630:	4ba7      	ldr	r3, [pc, #668]	; (80078d0 <_dtoa_r+0x2d0>)
 8007632:	21ea      	movs	r1, #234	; 0xea
 8007634:	48a7      	ldr	r0, [pc, #668]	; (80078d4 <_dtoa_r+0x2d4>)
 8007636:	f001 fbd1 	bl	8008ddc <__assert_func>
 800763a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800763e:	6005      	str	r5, [r0, #0]
 8007640:	60c5      	str	r5, [r0, #12]
 8007642:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007644:	6819      	ldr	r1, [r3, #0]
 8007646:	b151      	cbz	r1, 800765e <_dtoa_r+0x5e>
 8007648:	685a      	ldr	r2, [r3, #4]
 800764a:	604a      	str	r2, [r1, #4]
 800764c:	2301      	movs	r3, #1
 800764e:	4093      	lsls	r3, r2
 8007650:	608b      	str	r3, [r1, #8]
 8007652:	4620      	mov	r0, r4
 8007654:	f000 fe1c 	bl	8008290 <_Bfree>
 8007658:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800765a:	2200      	movs	r2, #0
 800765c:	601a      	str	r2, [r3, #0]
 800765e:	1e3b      	subs	r3, r7, #0
 8007660:	bfaa      	itet	ge
 8007662:	2300      	movge	r3, #0
 8007664:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007668:	f8c8 3000 	strge.w	r3, [r8]
 800766c:	4b9a      	ldr	r3, [pc, #616]	; (80078d8 <_dtoa_r+0x2d8>)
 800766e:	bfbc      	itt	lt
 8007670:	2201      	movlt	r2, #1
 8007672:	f8c8 2000 	strlt.w	r2, [r8]
 8007676:	ea33 030b 	bics.w	r3, r3, fp
 800767a:	d11b      	bne.n	80076b4 <_dtoa_r+0xb4>
 800767c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800767e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007682:	6013      	str	r3, [r2, #0]
 8007684:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007688:	4333      	orrs	r3, r6
 800768a:	f000 8592 	beq.w	80081b2 <_dtoa_r+0xbb2>
 800768e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007690:	b963      	cbnz	r3, 80076ac <_dtoa_r+0xac>
 8007692:	4b92      	ldr	r3, [pc, #584]	; (80078dc <_dtoa_r+0x2dc>)
 8007694:	e022      	b.n	80076dc <_dtoa_r+0xdc>
 8007696:	4b92      	ldr	r3, [pc, #584]	; (80078e0 <_dtoa_r+0x2e0>)
 8007698:	9301      	str	r3, [sp, #4]
 800769a:	3308      	adds	r3, #8
 800769c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800769e:	6013      	str	r3, [r2, #0]
 80076a0:	9801      	ldr	r0, [sp, #4]
 80076a2:	b013      	add	sp, #76	; 0x4c
 80076a4:	ecbd 8b04 	vpop	{d8-d9}
 80076a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ac:	4b8b      	ldr	r3, [pc, #556]	; (80078dc <_dtoa_r+0x2dc>)
 80076ae:	9301      	str	r3, [sp, #4]
 80076b0:	3303      	adds	r3, #3
 80076b2:	e7f3      	b.n	800769c <_dtoa_r+0x9c>
 80076b4:	2200      	movs	r2, #0
 80076b6:	2300      	movs	r3, #0
 80076b8:	4650      	mov	r0, sl
 80076ba:	4659      	mov	r1, fp
 80076bc:	f7f9 fa04 	bl	8000ac8 <__aeabi_dcmpeq>
 80076c0:	ec4b ab19 	vmov	d9, sl, fp
 80076c4:	4680      	mov	r8, r0
 80076c6:	b158      	cbz	r0, 80076e0 <_dtoa_r+0xe0>
 80076c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076ca:	2301      	movs	r3, #1
 80076cc:	6013      	str	r3, [r2, #0]
 80076ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	f000 856b 	beq.w	80081ac <_dtoa_r+0xbac>
 80076d6:	4883      	ldr	r0, [pc, #524]	; (80078e4 <_dtoa_r+0x2e4>)
 80076d8:	6018      	str	r0, [r3, #0]
 80076da:	1e43      	subs	r3, r0, #1
 80076dc:	9301      	str	r3, [sp, #4]
 80076de:	e7df      	b.n	80076a0 <_dtoa_r+0xa0>
 80076e0:	ec4b ab10 	vmov	d0, sl, fp
 80076e4:	aa10      	add	r2, sp, #64	; 0x40
 80076e6:	a911      	add	r1, sp, #68	; 0x44
 80076e8:	4620      	mov	r0, r4
 80076ea:	f001 f8b9 	bl	8008860 <__d2b>
 80076ee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80076f2:	ee08 0a10 	vmov	s16, r0
 80076f6:	2d00      	cmp	r5, #0
 80076f8:	f000 8084 	beq.w	8007804 <_dtoa_r+0x204>
 80076fc:	ee19 3a90 	vmov	r3, s19
 8007700:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007704:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007708:	4656      	mov	r6, sl
 800770a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800770e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007712:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007716:	4b74      	ldr	r3, [pc, #464]	; (80078e8 <_dtoa_r+0x2e8>)
 8007718:	2200      	movs	r2, #0
 800771a:	4630      	mov	r0, r6
 800771c:	4639      	mov	r1, r7
 800771e:	f7f8 fdb3 	bl	8000288 <__aeabi_dsub>
 8007722:	a365      	add	r3, pc, #404	; (adr r3, 80078b8 <_dtoa_r+0x2b8>)
 8007724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007728:	f7f8 ff66 	bl	80005f8 <__aeabi_dmul>
 800772c:	a364      	add	r3, pc, #400	; (adr r3, 80078c0 <_dtoa_r+0x2c0>)
 800772e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007732:	f7f8 fdab 	bl	800028c <__adddf3>
 8007736:	4606      	mov	r6, r0
 8007738:	4628      	mov	r0, r5
 800773a:	460f      	mov	r7, r1
 800773c:	f7f8 fef2 	bl	8000524 <__aeabi_i2d>
 8007740:	a361      	add	r3, pc, #388	; (adr r3, 80078c8 <_dtoa_r+0x2c8>)
 8007742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007746:	f7f8 ff57 	bl	80005f8 <__aeabi_dmul>
 800774a:	4602      	mov	r2, r0
 800774c:	460b      	mov	r3, r1
 800774e:	4630      	mov	r0, r6
 8007750:	4639      	mov	r1, r7
 8007752:	f7f8 fd9b 	bl	800028c <__adddf3>
 8007756:	4606      	mov	r6, r0
 8007758:	460f      	mov	r7, r1
 800775a:	f7f9 f9fd 	bl	8000b58 <__aeabi_d2iz>
 800775e:	2200      	movs	r2, #0
 8007760:	9000      	str	r0, [sp, #0]
 8007762:	2300      	movs	r3, #0
 8007764:	4630      	mov	r0, r6
 8007766:	4639      	mov	r1, r7
 8007768:	f7f9 f9b8 	bl	8000adc <__aeabi_dcmplt>
 800776c:	b150      	cbz	r0, 8007784 <_dtoa_r+0x184>
 800776e:	9800      	ldr	r0, [sp, #0]
 8007770:	f7f8 fed8 	bl	8000524 <__aeabi_i2d>
 8007774:	4632      	mov	r2, r6
 8007776:	463b      	mov	r3, r7
 8007778:	f7f9 f9a6 	bl	8000ac8 <__aeabi_dcmpeq>
 800777c:	b910      	cbnz	r0, 8007784 <_dtoa_r+0x184>
 800777e:	9b00      	ldr	r3, [sp, #0]
 8007780:	3b01      	subs	r3, #1
 8007782:	9300      	str	r3, [sp, #0]
 8007784:	9b00      	ldr	r3, [sp, #0]
 8007786:	2b16      	cmp	r3, #22
 8007788:	d85a      	bhi.n	8007840 <_dtoa_r+0x240>
 800778a:	9a00      	ldr	r2, [sp, #0]
 800778c:	4b57      	ldr	r3, [pc, #348]	; (80078ec <_dtoa_r+0x2ec>)
 800778e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007796:	ec51 0b19 	vmov	r0, r1, d9
 800779a:	f7f9 f99f 	bl	8000adc <__aeabi_dcmplt>
 800779e:	2800      	cmp	r0, #0
 80077a0:	d050      	beq.n	8007844 <_dtoa_r+0x244>
 80077a2:	9b00      	ldr	r3, [sp, #0]
 80077a4:	3b01      	subs	r3, #1
 80077a6:	9300      	str	r3, [sp, #0]
 80077a8:	2300      	movs	r3, #0
 80077aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80077ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80077ae:	1b5d      	subs	r5, r3, r5
 80077b0:	1e6b      	subs	r3, r5, #1
 80077b2:	9305      	str	r3, [sp, #20]
 80077b4:	bf45      	ittet	mi
 80077b6:	f1c5 0301 	rsbmi	r3, r5, #1
 80077ba:	9304      	strmi	r3, [sp, #16]
 80077bc:	2300      	movpl	r3, #0
 80077be:	2300      	movmi	r3, #0
 80077c0:	bf4c      	ite	mi
 80077c2:	9305      	strmi	r3, [sp, #20]
 80077c4:	9304      	strpl	r3, [sp, #16]
 80077c6:	9b00      	ldr	r3, [sp, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	db3d      	blt.n	8007848 <_dtoa_r+0x248>
 80077cc:	9b05      	ldr	r3, [sp, #20]
 80077ce:	9a00      	ldr	r2, [sp, #0]
 80077d0:	920a      	str	r2, [sp, #40]	; 0x28
 80077d2:	4413      	add	r3, r2
 80077d4:	9305      	str	r3, [sp, #20]
 80077d6:	2300      	movs	r3, #0
 80077d8:	9307      	str	r3, [sp, #28]
 80077da:	9b06      	ldr	r3, [sp, #24]
 80077dc:	2b09      	cmp	r3, #9
 80077de:	f200 8089 	bhi.w	80078f4 <_dtoa_r+0x2f4>
 80077e2:	2b05      	cmp	r3, #5
 80077e4:	bfc4      	itt	gt
 80077e6:	3b04      	subgt	r3, #4
 80077e8:	9306      	strgt	r3, [sp, #24]
 80077ea:	9b06      	ldr	r3, [sp, #24]
 80077ec:	f1a3 0302 	sub.w	r3, r3, #2
 80077f0:	bfcc      	ite	gt
 80077f2:	2500      	movgt	r5, #0
 80077f4:	2501      	movle	r5, #1
 80077f6:	2b03      	cmp	r3, #3
 80077f8:	f200 8087 	bhi.w	800790a <_dtoa_r+0x30a>
 80077fc:	e8df f003 	tbb	[pc, r3]
 8007800:	59383a2d 	.word	0x59383a2d
 8007804:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007808:	441d      	add	r5, r3
 800780a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800780e:	2b20      	cmp	r3, #32
 8007810:	bfc1      	itttt	gt
 8007812:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007816:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800781a:	fa0b f303 	lslgt.w	r3, fp, r3
 800781e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007822:	bfda      	itte	le
 8007824:	f1c3 0320 	rsble	r3, r3, #32
 8007828:	fa06 f003 	lslle.w	r0, r6, r3
 800782c:	4318      	orrgt	r0, r3
 800782e:	f7f8 fe69 	bl	8000504 <__aeabi_ui2d>
 8007832:	2301      	movs	r3, #1
 8007834:	4606      	mov	r6, r0
 8007836:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800783a:	3d01      	subs	r5, #1
 800783c:	930e      	str	r3, [sp, #56]	; 0x38
 800783e:	e76a      	b.n	8007716 <_dtoa_r+0x116>
 8007840:	2301      	movs	r3, #1
 8007842:	e7b2      	b.n	80077aa <_dtoa_r+0x1aa>
 8007844:	900b      	str	r0, [sp, #44]	; 0x2c
 8007846:	e7b1      	b.n	80077ac <_dtoa_r+0x1ac>
 8007848:	9b04      	ldr	r3, [sp, #16]
 800784a:	9a00      	ldr	r2, [sp, #0]
 800784c:	1a9b      	subs	r3, r3, r2
 800784e:	9304      	str	r3, [sp, #16]
 8007850:	4253      	negs	r3, r2
 8007852:	9307      	str	r3, [sp, #28]
 8007854:	2300      	movs	r3, #0
 8007856:	930a      	str	r3, [sp, #40]	; 0x28
 8007858:	e7bf      	b.n	80077da <_dtoa_r+0x1da>
 800785a:	2300      	movs	r3, #0
 800785c:	9308      	str	r3, [sp, #32]
 800785e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007860:	2b00      	cmp	r3, #0
 8007862:	dc55      	bgt.n	8007910 <_dtoa_r+0x310>
 8007864:	2301      	movs	r3, #1
 8007866:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800786a:	461a      	mov	r2, r3
 800786c:	9209      	str	r2, [sp, #36]	; 0x24
 800786e:	e00c      	b.n	800788a <_dtoa_r+0x28a>
 8007870:	2301      	movs	r3, #1
 8007872:	e7f3      	b.n	800785c <_dtoa_r+0x25c>
 8007874:	2300      	movs	r3, #0
 8007876:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007878:	9308      	str	r3, [sp, #32]
 800787a:	9b00      	ldr	r3, [sp, #0]
 800787c:	4413      	add	r3, r2
 800787e:	9302      	str	r3, [sp, #8]
 8007880:	3301      	adds	r3, #1
 8007882:	2b01      	cmp	r3, #1
 8007884:	9303      	str	r3, [sp, #12]
 8007886:	bfb8      	it	lt
 8007888:	2301      	movlt	r3, #1
 800788a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800788c:	2200      	movs	r2, #0
 800788e:	6042      	str	r2, [r0, #4]
 8007890:	2204      	movs	r2, #4
 8007892:	f102 0614 	add.w	r6, r2, #20
 8007896:	429e      	cmp	r6, r3
 8007898:	6841      	ldr	r1, [r0, #4]
 800789a:	d93d      	bls.n	8007918 <_dtoa_r+0x318>
 800789c:	4620      	mov	r0, r4
 800789e:	f000 fcb7 	bl	8008210 <_Balloc>
 80078a2:	9001      	str	r0, [sp, #4]
 80078a4:	2800      	cmp	r0, #0
 80078a6:	d13b      	bne.n	8007920 <_dtoa_r+0x320>
 80078a8:	4b11      	ldr	r3, [pc, #68]	; (80078f0 <_dtoa_r+0x2f0>)
 80078aa:	4602      	mov	r2, r0
 80078ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80078b0:	e6c0      	b.n	8007634 <_dtoa_r+0x34>
 80078b2:	2301      	movs	r3, #1
 80078b4:	e7df      	b.n	8007876 <_dtoa_r+0x276>
 80078b6:	bf00      	nop
 80078b8:	636f4361 	.word	0x636f4361
 80078bc:	3fd287a7 	.word	0x3fd287a7
 80078c0:	8b60c8b3 	.word	0x8b60c8b3
 80078c4:	3fc68a28 	.word	0x3fc68a28
 80078c8:	509f79fb 	.word	0x509f79fb
 80078cc:	3fd34413 	.word	0x3fd34413
 80078d0:	08009bf9 	.word	0x08009bf9
 80078d4:	08009c10 	.word	0x08009c10
 80078d8:	7ff00000 	.word	0x7ff00000
 80078dc:	08009bf5 	.word	0x08009bf5
 80078e0:	08009bec 	.word	0x08009bec
 80078e4:	08009bc9 	.word	0x08009bc9
 80078e8:	3ff80000 	.word	0x3ff80000
 80078ec:	08009d00 	.word	0x08009d00
 80078f0:	08009c6b 	.word	0x08009c6b
 80078f4:	2501      	movs	r5, #1
 80078f6:	2300      	movs	r3, #0
 80078f8:	9306      	str	r3, [sp, #24]
 80078fa:	9508      	str	r5, [sp, #32]
 80078fc:	f04f 33ff 	mov.w	r3, #4294967295
 8007900:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007904:	2200      	movs	r2, #0
 8007906:	2312      	movs	r3, #18
 8007908:	e7b0      	b.n	800786c <_dtoa_r+0x26c>
 800790a:	2301      	movs	r3, #1
 800790c:	9308      	str	r3, [sp, #32]
 800790e:	e7f5      	b.n	80078fc <_dtoa_r+0x2fc>
 8007910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007912:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007916:	e7b8      	b.n	800788a <_dtoa_r+0x28a>
 8007918:	3101      	adds	r1, #1
 800791a:	6041      	str	r1, [r0, #4]
 800791c:	0052      	lsls	r2, r2, #1
 800791e:	e7b8      	b.n	8007892 <_dtoa_r+0x292>
 8007920:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007922:	9a01      	ldr	r2, [sp, #4]
 8007924:	601a      	str	r2, [r3, #0]
 8007926:	9b03      	ldr	r3, [sp, #12]
 8007928:	2b0e      	cmp	r3, #14
 800792a:	f200 809d 	bhi.w	8007a68 <_dtoa_r+0x468>
 800792e:	2d00      	cmp	r5, #0
 8007930:	f000 809a 	beq.w	8007a68 <_dtoa_r+0x468>
 8007934:	9b00      	ldr	r3, [sp, #0]
 8007936:	2b00      	cmp	r3, #0
 8007938:	dd32      	ble.n	80079a0 <_dtoa_r+0x3a0>
 800793a:	4ab7      	ldr	r2, [pc, #732]	; (8007c18 <_dtoa_r+0x618>)
 800793c:	f003 030f 	and.w	r3, r3, #15
 8007940:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007944:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007948:	9b00      	ldr	r3, [sp, #0]
 800794a:	05d8      	lsls	r0, r3, #23
 800794c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007950:	d516      	bpl.n	8007980 <_dtoa_r+0x380>
 8007952:	4bb2      	ldr	r3, [pc, #712]	; (8007c1c <_dtoa_r+0x61c>)
 8007954:	ec51 0b19 	vmov	r0, r1, d9
 8007958:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800795c:	f7f8 ff76 	bl	800084c <__aeabi_ddiv>
 8007960:	f007 070f 	and.w	r7, r7, #15
 8007964:	4682      	mov	sl, r0
 8007966:	468b      	mov	fp, r1
 8007968:	2503      	movs	r5, #3
 800796a:	4eac      	ldr	r6, [pc, #688]	; (8007c1c <_dtoa_r+0x61c>)
 800796c:	b957      	cbnz	r7, 8007984 <_dtoa_r+0x384>
 800796e:	4642      	mov	r2, r8
 8007970:	464b      	mov	r3, r9
 8007972:	4650      	mov	r0, sl
 8007974:	4659      	mov	r1, fp
 8007976:	f7f8 ff69 	bl	800084c <__aeabi_ddiv>
 800797a:	4682      	mov	sl, r0
 800797c:	468b      	mov	fp, r1
 800797e:	e028      	b.n	80079d2 <_dtoa_r+0x3d2>
 8007980:	2502      	movs	r5, #2
 8007982:	e7f2      	b.n	800796a <_dtoa_r+0x36a>
 8007984:	07f9      	lsls	r1, r7, #31
 8007986:	d508      	bpl.n	800799a <_dtoa_r+0x39a>
 8007988:	4640      	mov	r0, r8
 800798a:	4649      	mov	r1, r9
 800798c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007990:	f7f8 fe32 	bl	80005f8 <__aeabi_dmul>
 8007994:	3501      	adds	r5, #1
 8007996:	4680      	mov	r8, r0
 8007998:	4689      	mov	r9, r1
 800799a:	107f      	asrs	r7, r7, #1
 800799c:	3608      	adds	r6, #8
 800799e:	e7e5      	b.n	800796c <_dtoa_r+0x36c>
 80079a0:	f000 809b 	beq.w	8007ada <_dtoa_r+0x4da>
 80079a4:	9b00      	ldr	r3, [sp, #0]
 80079a6:	4f9d      	ldr	r7, [pc, #628]	; (8007c1c <_dtoa_r+0x61c>)
 80079a8:	425e      	negs	r6, r3
 80079aa:	4b9b      	ldr	r3, [pc, #620]	; (8007c18 <_dtoa_r+0x618>)
 80079ac:	f006 020f 	and.w	r2, r6, #15
 80079b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b8:	ec51 0b19 	vmov	r0, r1, d9
 80079bc:	f7f8 fe1c 	bl	80005f8 <__aeabi_dmul>
 80079c0:	1136      	asrs	r6, r6, #4
 80079c2:	4682      	mov	sl, r0
 80079c4:	468b      	mov	fp, r1
 80079c6:	2300      	movs	r3, #0
 80079c8:	2502      	movs	r5, #2
 80079ca:	2e00      	cmp	r6, #0
 80079cc:	d17a      	bne.n	8007ac4 <_dtoa_r+0x4c4>
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d1d3      	bne.n	800797a <_dtoa_r+0x37a>
 80079d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	f000 8082 	beq.w	8007ade <_dtoa_r+0x4de>
 80079da:	4b91      	ldr	r3, [pc, #580]	; (8007c20 <_dtoa_r+0x620>)
 80079dc:	2200      	movs	r2, #0
 80079de:	4650      	mov	r0, sl
 80079e0:	4659      	mov	r1, fp
 80079e2:	f7f9 f87b 	bl	8000adc <__aeabi_dcmplt>
 80079e6:	2800      	cmp	r0, #0
 80079e8:	d079      	beq.n	8007ade <_dtoa_r+0x4de>
 80079ea:	9b03      	ldr	r3, [sp, #12]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d076      	beq.n	8007ade <_dtoa_r+0x4de>
 80079f0:	9b02      	ldr	r3, [sp, #8]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	dd36      	ble.n	8007a64 <_dtoa_r+0x464>
 80079f6:	9b00      	ldr	r3, [sp, #0]
 80079f8:	4650      	mov	r0, sl
 80079fa:	4659      	mov	r1, fp
 80079fc:	1e5f      	subs	r7, r3, #1
 80079fe:	2200      	movs	r2, #0
 8007a00:	4b88      	ldr	r3, [pc, #544]	; (8007c24 <_dtoa_r+0x624>)
 8007a02:	f7f8 fdf9 	bl	80005f8 <__aeabi_dmul>
 8007a06:	9e02      	ldr	r6, [sp, #8]
 8007a08:	4682      	mov	sl, r0
 8007a0a:	468b      	mov	fp, r1
 8007a0c:	3501      	adds	r5, #1
 8007a0e:	4628      	mov	r0, r5
 8007a10:	f7f8 fd88 	bl	8000524 <__aeabi_i2d>
 8007a14:	4652      	mov	r2, sl
 8007a16:	465b      	mov	r3, fp
 8007a18:	f7f8 fdee 	bl	80005f8 <__aeabi_dmul>
 8007a1c:	4b82      	ldr	r3, [pc, #520]	; (8007c28 <_dtoa_r+0x628>)
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f7f8 fc34 	bl	800028c <__adddf3>
 8007a24:	46d0      	mov	r8, sl
 8007a26:	46d9      	mov	r9, fp
 8007a28:	4682      	mov	sl, r0
 8007a2a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007a2e:	2e00      	cmp	r6, #0
 8007a30:	d158      	bne.n	8007ae4 <_dtoa_r+0x4e4>
 8007a32:	4b7e      	ldr	r3, [pc, #504]	; (8007c2c <_dtoa_r+0x62c>)
 8007a34:	2200      	movs	r2, #0
 8007a36:	4640      	mov	r0, r8
 8007a38:	4649      	mov	r1, r9
 8007a3a:	f7f8 fc25 	bl	8000288 <__aeabi_dsub>
 8007a3e:	4652      	mov	r2, sl
 8007a40:	465b      	mov	r3, fp
 8007a42:	4680      	mov	r8, r0
 8007a44:	4689      	mov	r9, r1
 8007a46:	f7f9 f867 	bl	8000b18 <__aeabi_dcmpgt>
 8007a4a:	2800      	cmp	r0, #0
 8007a4c:	f040 8295 	bne.w	8007f7a <_dtoa_r+0x97a>
 8007a50:	4652      	mov	r2, sl
 8007a52:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007a56:	4640      	mov	r0, r8
 8007a58:	4649      	mov	r1, r9
 8007a5a:	f7f9 f83f 	bl	8000adc <__aeabi_dcmplt>
 8007a5e:	2800      	cmp	r0, #0
 8007a60:	f040 8289 	bne.w	8007f76 <_dtoa_r+0x976>
 8007a64:	ec5b ab19 	vmov	sl, fp, d9
 8007a68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	f2c0 8148 	blt.w	8007d00 <_dtoa_r+0x700>
 8007a70:	9a00      	ldr	r2, [sp, #0]
 8007a72:	2a0e      	cmp	r2, #14
 8007a74:	f300 8144 	bgt.w	8007d00 <_dtoa_r+0x700>
 8007a78:	4b67      	ldr	r3, [pc, #412]	; (8007c18 <_dtoa_r+0x618>)
 8007a7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a7e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f280 80d5 	bge.w	8007c34 <_dtoa_r+0x634>
 8007a8a:	9b03      	ldr	r3, [sp, #12]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	f300 80d1 	bgt.w	8007c34 <_dtoa_r+0x634>
 8007a92:	f040 826f 	bne.w	8007f74 <_dtoa_r+0x974>
 8007a96:	4b65      	ldr	r3, [pc, #404]	; (8007c2c <_dtoa_r+0x62c>)
 8007a98:	2200      	movs	r2, #0
 8007a9a:	4640      	mov	r0, r8
 8007a9c:	4649      	mov	r1, r9
 8007a9e:	f7f8 fdab 	bl	80005f8 <__aeabi_dmul>
 8007aa2:	4652      	mov	r2, sl
 8007aa4:	465b      	mov	r3, fp
 8007aa6:	f7f9 f82d 	bl	8000b04 <__aeabi_dcmpge>
 8007aaa:	9e03      	ldr	r6, [sp, #12]
 8007aac:	4637      	mov	r7, r6
 8007aae:	2800      	cmp	r0, #0
 8007ab0:	f040 8245 	bne.w	8007f3e <_dtoa_r+0x93e>
 8007ab4:	9d01      	ldr	r5, [sp, #4]
 8007ab6:	2331      	movs	r3, #49	; 0x31
 8007ab8:	f805 3b01 	strb.w	r3, [r5], #1
 8007abc:	9b00      	ldr	r3, [sp, #0]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	9300      	str	r3, [sp, #0]
 8007ac2:	e240      	b.n	8007f46 <_dtoa_r+0x946>
 8007ac4:	07f2      	lsls	r2, r6, #31
 8007ac6:	d505      	bpl.n	8007ad4 <_dtoa_r+0x4d4>
 8007ac8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007acc:	f7f8 fd94 	bl	80005f8 <__aeabi_dmul>
 8007ad0:	3501      	adds	r5, #1
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	1076      	asrs	r6, r6, #1
 8007ad6:	3708      	adds	r7, #8
 8007ad8:	e777      	b.n	80079ca <_dtoa_r+0x3ca>
 8007ada:	2502      	movs	r5, #2
 8007adc:	e779      	b.n	80079d2 <_dtoa_r+0x3d2>
 8007ade:	9f00      	ldr	r7, [sp, #0]
 8007ae0:	9e03      	ldr	r6, [sp, #12]
 8007ae2:	e794      	b.n	8007a0e <_dtoa_r+0x40e>
 8007ae4:	9901      	ldr	r1, [sp, #4]
 8007ae6:	4b4c      	ldr	r3, [pc, #304]	; (8007c18 <_dtoa_r+0x618>)
 8007ae8:	4431      	add	r1, r6
 8007aea:	910d      	str	r1, [sp, #52]	; 0x34
 8007aec:	9908      	ldr	r1, [sp, #32]
 8007aee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007af2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007af6:	2900      	cmp	r1, #0
 8007af8:	d043      	beq.n	8007b82 <_dtoa_r+0x582>
 8007afa:	494d      	ldr	r1, [pc, #308]	; (8007c30 <_dtoa_r+0x630>)
 8007afc:	2000      	movs	r0, #0
 8007afe:	f7f8 fea5 	bl	800084c <__aeabi_ddiv>
 8007b02:	4652      	mov	r2, sl
 8007b04:	465b      	mov	r3, fp
 8007b06:	f7f8 fbbf 	bl	8000288 <__aeabi_dsub>
 8007b0a:	9d01      	ldr	r5, [sp, #4]
 8007b0c:	4682      	mov	sl, r0
 8007b0e:	468b      	mov	fp, r1
 8007b10:	4649      	mov	r1, r9
 8007b12:	4640      	mov	r0, r8
 8007b14:	f7f9 f820 	bl	8000b58 <__aeabi_d2iz>
 8007b18:	4606      	mov	r6, r0
 8007b1a:	f7f8 fd03 	bl	8000524 <__aeabi_i2d>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	460b      	mov	r3, r1
 8007b22:	4640      	mov	r0, r8
 8007b24:	4649      	mov	r1, r9
 8007b26:	f7f8 fbaf 	bl	8000288 <__aeabi_dsub>
 8007b2a:	3630      	adds	r6, #48	; 0x30
 8007b2c:	f805 6b01 	strb.w	r6, [r5], #1
 8007b30:	4652      	mov	r2, sl
 8007b32:	465b      	mov	r3, fp
 8007b34:	4680      	mov	r8, r0
 8007b36:	4689      	mov	r9, r1
 8007b38:	f7f8 ffd0 	bl	8000adc <__aeabi_dcmplt>
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	d163      	bne.n	8007c08 <_dtoa_r+0x608>
 8007b40:	4642      	mov	r2, r8
 8007b42:	464b      	mov	r3, r9
 8007b44:	4936      	ldr	r1, [pc, #216]	; (8007c20 <_dtoa_r+0x620>)
 8007b46:	2000      	movs	r0, #0
 8007b48:	f7f8 fb9e 	bl	8000288 <__aeabi_dsub>
 8007b4c:	4652      	mov	r2, sl
 8007b4e:	465b      	mov	r3, fp
 8007b50:	f7f8 ffc4 	bl	8000adc <__aeabi_dcmplt>
 8007b54:	2800      	cmp	r0, #0
 8007b56:	f040 80b5 	bne.w	8007cc4 <_dtoa_r+0x6c4>
 8007b5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b5c:	429d      	cmp	r5, r3
 8007b5e:	d081      	beq.n	8007a64 <_dtoa_r+0x464>
 8007b60:	4b30      	ldr	r3, [pc, #192]	; (8007c24 <_dtoa_r+0x624>)
 8007b62:	2200      	movs	r2, #0
 8007b64:	4650      	mov	r0, sl
 8007b66:	4659      	mov	r1, fp
 8007b68:	f7f8 fd46 	bl	80005f8 <__aeabi_dmul>
 8007b6c:	4b2d      	ldr	r3, [pc, #180]	; (8007c24 <_dtoa_r+0x624>)
 8007b6e:	4682      	mov	sl, r0
 8007b70:	468b      	mov	fp, r1
 8007b72:	4640      	mov	r0, r8
 8007b74:	4649      	mov	r1, r9
 8007b76:	2200      	movs	r2, #0
 8007b78:	f7f8 fd3e 	bl	80005f8 <__aeabi_dmul>
 8007b7c:	4680      	mov	r8, r0
 8007b7e:	4689      	mov	r9, r1
 8007b80:	e7c6      	b.n	8007b10 <_dtoa_r+0x510>
 8007b82:	4650      	mov	r0, sl
 8007b84:	4659      	mov	r1, fp
 8007b86:	f7f8 fd37 	bl	80005f8 <__aeabi_dmul>
 8007b8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b8c:	9d01      	ldr	r5, [sp, #4]
 8007b8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b90:	4682      	mov	sl, r0
 8007b92:	468b      	mov	fp, r1
 8007b94:	4649      	mov	r1, r9
 8007b96:	4640      	mov	r0, r8
 8007b98:	f7f8 ffde 	bl	8000b58 <__aeabi_d2iz>
 8007b9c:	4606      	mov	r6, r0
 8007b9e:	f7f8 fcc1 	bl	8000524 <__aeabi_i2d>
 8007ba2:	3630      	adds	r6, #48	; 0x30
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	460b      	mov	r3, r1
 8007ba8:	4640      	mov	r0, r8
 8007baa:	4649      	mov	r1, r9
 8007bac:	f7f8 fb6c 	bl	8000288 <__aeabi_dsub>
 8007bb0:	f805 6b01 	strb.w	r6, [r5], #1
 8007bb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007bb6:	429d      	cmp	r5, r3
 8007bb8:	4680      	mov	r8, r0
 8007bba:	4689      	mov	r9, r1
 8007bbc:	f04f 0200 	mov.w	r2, #0
 8007bc0:	d124      	bne.n	8007c0c <_dtoa_r+0x60c>
 8007bc2:	4b1b      	ldr	r3, [pc, #108]	; (8007c30 <_dtoa_r+0x630>)
 8007bc4:	4650      	mov	r0, sl
 8007bc6:	4659      	mov	r1, fp
 8007bc8:	f7f8 fb60 	bl	800028c <__adddf3>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	460b      	mov	r3, r1
 8007bd0:	4640      	mov	r0, r8
 8007bd2:	4649      	mov	r1, r9
 8007bd4:	f7f8 ffa0 	bl	8000b18 <__aeabi_dcmpgt>
 8007bd8:	2800      	cmp	r0, #0
 8007bda:	d173      	bne.n	8007cc4 <_dtoa_r+0x6c4>
 8007bdc:	4652      	mov	r2, sl
 8007bde:	465b      	mov	r3, fp
 8007be0:	4913      	ldr	r1, [pc, #76]	; (8007c30 <_dtoa_r+0x630>)
 8007be2:	2000      	movs	r0, #0
 8007be4:	f7f8 fb50 	bl	8000288 <__aeabi_dsub>
 8007be8:	4602      	mov	r2, r0
 8007bea:	460b      	mov	r3, r1
 8007bec:	4640      	mov	r0, r8
 8007bee:	4649      	mov	r1, r9
 8007bf0:	f7f8 ff74 	bl	8000adc <__aeabi_dcmplt>
 8007bf4:	2800      	cmp	r0, #0
 8007bf6:	f43f af35 	beq.w	8007a64 <_dtoa_r+0x464>
 8007bfa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007bfc:	1e6b      	subs	r3, r5, #1
 8007bfe:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c00:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007c04:	2b30      	cmp	r3, #48	; 0x30
 8007c06:	d0f8      	beq.n	8007bfa <_dtoa_r+0x5fa>
 8007c08:	9700      	str	r7, [sp, #0]
 8007c0a:	e049      	b.n	8007ca0 <_dtoa_r+0x6a0>
 8007c0c:	4b05      	ldr	r3, [pc, #20]	; (8007c24 <_dtoa_r+0x624>)
 8007c0e:	f7f8 fcf3 	bl	80005f8 <__aeabi_dmul>
 8007c12:	4680      	mov	r8, r0
 8007c14:	4689      	mov	r9, r1
 8007c16:	e7bd      	b.n	8007b94 <_dtoa_r+0x594>
 8007c18:	08009d00 	.word	0x08009d00
 8007c1c:	08009cd8 	.word	0x08009cd8
 8007c20:	3ff00000 	.word	0x3ff00000
 8007c24:	40240000 	.word	0x40240000
 8007c28:	401c0000 	.word	0x401c0000
 8007c2c:	40140000 	.word	0x40140000
 8007c30:	3fe00000 	.word	0x3fe00000
 8007c34:	9d01      	ldr	r5, [sp, #4]
 8007c36:	4656      	mov	r6, sl
 8007c38:	465f      	mov	r7, fp
 8007c3a:	4642      	mov	r2, r8
 8007c3c:	464b      	mov	r3, r9
 8007c3e:	4630      	mov	r0, r6
 8007c40:	4639      	mov	r1, r7
 8007c42:	f7f8 fe03 	bl	800084c <__aeabi_ddiv>
 8007c46:	f7f8 ff87 	bl	8000b58 <__aeabi_d2iz>
 8007c4a:	4682      	mov	sl, r0
 8007c4c:	f7f8 fc6a 	bl	8000524 <__aeabi_i2d>
 8007c50:	4642      	mov	r2, r8
 8007c52:	464b      	mov	r3, r9
 8007c54:	f7f8 fcd0 	bl	80005f8 <__aeabi_dmul>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	460b      	mov	r3, r1
 8007c5c:	4630      	mov	r0, r6
 8007c5e:	4639      	mov	r1, r7
 8007c60:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007c64:	f7f8 fb10 	bl	8000288 <__aeabi_dsub>
 8007c68:	f805 6b01 	strb.w	r6, [r5], #1
 8007c6c:	9e01      	ldr	r6, [sp, #4]
 8007c6e:	9f03      	ldr	r7, [sp, #12]
 8007c70:	1bae      	subs	r6, r5, r6
 8007c72:	42b7      	cmp	r7, r6
 8007c74:	4602      	mov	r2, r0
 8007c76:	460b      	mov	r3, r1
 8007c78:	d135      	bne.n	8007ce6 <_dtoa_r+0x6e6>
 8007c7a:	f7f8 fb07 	bl	800028c <__adddf3>
 8007c7e:	4642      	mov	r2, r8
 8007c80:	464b      	mov	r3, r9
 8007c82:	4606      	mov	r6, r0
 8007c84:	460f      	mov	r7, r1
 8007c86:	f7f8 ff47 	bl	8000b18 <__aeabi_dcmpgt>
 8007c8a:	b9d0      	cbnz	r0, 8007cc2 <_dtoa_r+0x6c2>
 8007c8c:	4642      	mov	r2, r8
 8007c8e:	464b      	mov	r3, r9
 8007c90:	4630      	mov	r0, r6
 8007c92:	4639      	mov	r1, r7
 8007c94:	f7f8 ff18 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c98:	b110      	cbz	r0, 8007ca0 <_dtoa_r+0x6a0>
 8007c9a:	f01a 0f01 	tst.w	sl, #1
 8007c9e:	d110      	bne.n	8007cc2 <_dtoa_r+0x6c2>
 8007ca0:	4620      	mov	r0, r4
 8007ca2:	ee18 1a10 	vmov	r1, s16
 8007ca6:	f000 faf3 	bl	8008290 <_Bfree>
 8007caa:	2300      	movs	r3, #0
 8007cac:	9800      	ldr	r0, [sp, #0]
 8007cae:	702b      	strb	r3, [r5, #0]
 8007cb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cb2:	3001      	adds	r0, #1
 8007cb4:	6018      	str	r0, [r3, #0]
 8007cb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	f43f acf1 	beq.w	80076a0 <_dtoa_r+0xa0>
 8007cbe:	601d      	str	r5, [r3, #0]
 8007cc0:	e4ee      	b.n	80076a0 <_dtoa_r+0xa0>
 8007cc2:	9f00      	ldr	r7, [sp, #0]
 8007cc4:	462b      	mov	r3, r5
 8007cc6:	461d      	mov	r5, r3
 8007cc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ccc:	2a39      	cmp	r2, #57	; 0x39
 8007cce:	d106      	bne.n	8007cde <_dtoa_r+0x6de>
 8007cd0:	9a01      	ldr	r2, [sp, #4]
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d1f7      	bne.n	8007cc6 <_dtoa_r+0x6c6>
 8007cd6:	9901      	ldr	r1, [sp, #4]
 8007cd8:	2230      	movs	r2, #48	; 0x30
 8007cda:	3701      	adds	r7, #1
 8007cdc:	700a      	strb	r2, [r1, #0]
 8007cde:	781a      	ldrb	r2, [r3, #0]
 8007ce0:	3201      	adds	r2, #1
 8007ce2:	701a      	strb	r2, [r3, #0]
 8007ce4:	e790      	b.n	8007c08 <_dtoa_r+0x608>
 8007ce6:	4ba6      	ldr	r3, [pc, #664]	; (8007f80 <_dtoa_r+0x980>)
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f7f8 fc85 	bl	80005f8 <__aeabi_dmul>
 8007cee:	2200      	movs	r2, #0
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	4606      	mov	r6, r0
 8007cf4:	460f      	mov	r7, r1
 8007cf6:	f7f8 fee7 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cfa:	2800      	cmp	r0, #0
 8007cfc:	d09d      	beq.n	8007c3a <_dtoa_r+0x63a>
 8007cfe:	e7cf      	b.n	8007ca0 <_dtoa_r+0x6a0>
 8007d00:	9a08      	ldr	r2, [sp, #32]
 8007d02:	2a00      	cmp	r2, #0
 8007d04:	f000 80d7 	beq.w	8007eb6 <_dtoa_r+0x8b6>
 8007d08:	9a06      	ldr	r2, [sp, #24]
 8007d0a:	2a01      	cmp	r2, #1
 8007d0c:	f300 80ba 	bgt.w	8007e84 <_dtoa_r+0x884>
 8007d10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d12:	2a00      	cmp	r2, #0
 8007d14:	f000 80b2 	beq.w	8007e7c <_dtoa_r+0x87c>
 8007d18:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007d1c:	9e07      	ldr	r6, [sp, #28]
 8007d1e:	9d04      	ldr	r5, [sp, #16]
 8007d20:	9a04      	ldr	r2, [sp, #16]
 8007d22:	441a      	add	r2, r3
 8007d24:	9204      	str	r2, [sp, #16]
 8007d26:	9a05      	ldr	r2, [sp, #20]
 8007d28:	2101      	movs	r1, #1
 8007d2a:	441a      	add	r2, r3
 8007d2c:	4620      	mov	r0, r4
 8007d2e:	9205      	str	r2, [sp, #20]
 8007d30:	f000 fb66 	bl	8008400 <__i2b>
 8007d34:	4607      	mov	r7, r0
 8007d36:	2d00      	cmp	r5, #0
 8007d38:	dd0c      	ble.n	8007d54 <_dtoa_r+0x754>
 8007d3a:	9b05      	ldr	r3, [sp, #20]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	dd09      	ble.n	8007d54 <_dtoa_r+0x754>
 8007d40:	42ab      	cmp	r3, r5
 8007d42:	9a04      	ldr	r2, [sp, #16]
 8007d44:	bfa8      	it	ge
 8007d46:	462b      	movge	r3, r5
 8007d48:	1ad2      	subs	r2, r2, r3
 8007d4a:	9204      	str	r2, [sp, #16]
 8007d4c:	9a05      	ldr	r2, [sp, #20]
 8007d4e:	1aed      	subs	r5, r5, r3
 8007d50:	1ad3      	subs	r3, r2, r3
 8007d52:	9305      	str	r3, [sp, #20]
 8007d54:	9b07      	ldr	r3, [sp, #28]
 8007d56:	b31b      	cbz	r3, 8007da0 <_dtoa_r+0x7a0>
 8007d58:	9b08      	ldr	r3, [sp, #32]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	f000 80af 	beq.w	8007ebe <_dtoa_r+0x8be>
 8007d60:	2e00      	cmp	r6, #0
 8007d62:	dd13      	ble.n	8007d8c <_dtoa_r+0x78c>
 8007d64:	4639      	mov	r1, r7
 8007d66:	4632      	mov	r2, r6
 8007d68:	4620      	mov	r0, r4
 8007d6a:	f000 fc09 	bl	8008580 <__pow5mult>
 8007d6e:	ee18 2a10 	vmov	r2, s16
 8007d72:	4601      	mov	r1, r0
 8007d74:	4607      	mov	r7, r0
 8007d76:	4620      	mov	r0, r4
 8007d78:	f000 fb58 	bl	800842c <__multiply>
 8007d7c:	ee18 1a10 	vmov	r1, s16
 8007d80:	4680      	mov	r8, r0
 8007d82:	4620      	mov	r0, r4
 8007d84:	f000 fa84 	bl	8008290 <_Bfree>
 8007d88:	ee08 8a10 	vmov	s16, r8
 8007d8c:	9b07      	ldr	r3, [sp, #28]
 8007d8e:	1b9a      	subs	r2, r3, r6
 8007d90:	d006      	beq.n	8007da0 <_dtoa_r+0x7a0>
 8007d92:	ee18 1a10 	vmov	r1, s16
 8007d96:	4620      	mov	r0, r4
 8007d98:	f000 fbf2 	bl	8008580 <__pow5mult>
 8007d9c:	ee08 0a10 	vmov	s16, r0
 8007da0:	2101      	movs	r1, #1
 8007da2:	4620      	mov	r0, r4
 8007da4:	f000 fb2c 	bl	8008400 <__i2b>
 8007da8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	4606      	mov	r6, r0
 8007dae:	f340 8088 	ble.w	8007ec2 <_dtoa_r+0x8c2>
 8007db2:	461a      	mov	r2, r3
 8007db4:	4601      	mov	r1, r0
 8007db6:	4620      	mov	r0, r4
 8007db8:	f000 fbe2 	bl	8008580 <__pow5mult>
 8007dbc:	9b06      	ldr	r3, [sp, #24]
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	4606      	mov	r6, r0
 8007dc2:	f340 8081 	ble.w	8007ec8 <_dtoa_r+0x8c8>
 8007dc6:	f04f 0800 	mov.w	r8, #0
 8007dca:	6933      	ldr	r3, [r6, #16]
 8007dcc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007dd0:	6918      	ldr	r0, [r3, #16]
 8007dd2:	f000 fac5 	bl	8008360 <__hi0bits>
 8007dd6:	f1c0 0020 	rsb	r0, r0, #32
 8007dda:	9b05      	ldr	r3, [sp, #20]
 8007ddc:	4418      	add	r0, r3
 8007dde:	f010 001f 	ands.w	r0, r0, #31
 8007de2:	f000 8092 	beq.w	8007f0a <_dtoa_r+0x90a>
 8007de6:	f1c0 0320 	rsb	r3, r0, #32
 8007dea:	2b04      	cmp	r3, #4
 8007dec:	f340 808a 	ble.w	8007f04 <_dtoa_r+0x904>
 8007df0:	f1c0 001c 	rsb	r0, r0, #28
 8007df4:	9b04      	ldr	r3, [sp, #16]
 8007df6:	4403      	add	r3, r0
 8007df8:	9304      	str	r3, [sp, #16]
 8007dfa:	9b05      	ldr	r3, [sp, #20]
 8007dfc:	4403      	add	r3, r0
 8007dfe:	4405      	add	r5, r0
 8007e00:	9305      	str	r3, [sp, #20]
 8007e02:	9b04      	ldr	r3, [sp, #16]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	dd07      	ble.n	8007e18 <_dtoa_r+0x818>
 8007e08:	ee18 1a10 	vmov	r1, s16
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	4620      	mov	r0, r4
 8007e10:	f000 fc10 	bl	8008634 <__lshift>
 8007e14:	ee08 0a10 	vmov	s16, r0
 8007e18:	9b05      	ldr	r3, [sp, #20]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	dd05      	ble.n	8007e2a <_dtoa_r+0x82a>
 8007e1e:	4631      	mov	r1, r6
 8007e20:	461a      	mov	r2, r3
 8007e22:	4620      	mov	r0, r4
 8007e24:	f000 fc06 	bl	8008634 <__lshift>
 8007e28:	4606      	mov	r6, r0
 8007e2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d06e      	beq.n	8007f0e <_dtoa_r+0x90e>
 8007e30:	ee18 0a10 	vmov	r0, s16
 8007e34:	4631      	mov	r1, r6
 8007e36:	f000 fc6d 	bl	8008714 <__mcmp>
 8007e3a:	2800      	cmp	r0, #0
 8007e3c:	da67      	bge.n	8007f0e <_dtoa_r+0x90e>
 8007e3e:	9b00      	ldr	r3, [sp, #0]
 8007e40:	3b01      	subs	r3, #1
 8007e42:	ee18 1a10 	vmov	r1, s16
 8007e46:	9300      	str	r3, [sp, #0]
 8007e48:	220a      	movs	r2, #10
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	4620      	mov	r0, r4
 8007e4e:	f000 fa41 	bl	80082d4 <__multadd>
 8007e52:	9b08      	ldr	r3, [sp, #32]
 8007e54:	ee08 0a10 	vmov	s16, r0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	f000 81b1 	beq.w	80081c0 <_dtoa_r+0xbc0>
 8007e5e:	2300      	movs	r3, #0
 8007e60:	4639      	mov	r1, r7
 8007e62:	220a      	movs	r2, #10
 8007e64:	4620      	mov	r0, r4
 8007e66:	f000 fa35 	bl	80082d4 <__multadd>
 8007e6a:	9b02      	ldr	r3, [sp, #8]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	4607      	mov	r7, r0
 8007e70:	f300 808e 	bgt.w	8007f90 <_dtoa_r+0x990>
 8007e74:	9b06      	ldr	r3, [sp, #24]
 8007e76:	2b02      	cmp	r3, #2
 8007e78:	dc51      	bgt.n	8007f1e <_dtoa_r+0x91e>
 8007e7a:	e089      	b.n	8007f90 <_dtoa_r+0x990>
 8007e7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007e82:	e74b      	b.n	8007d1c <_dtoa_r+0x71c>
 8007e84:	9b03      	ldr	r3, [sp, #12]
 8007e86:	1e5e      	subs	r6, r3, #1
 8007e88:	9b07      	ldr	r3, [sp, #28]
 8007e8a:	42b3      	cmp	r3, r6
 8007e8c:	bfbf      	itttt	lt
 8007e8e:	9b07      	ldrlt	r3, [sp, #28]
 8007e90:	9607      	strlt	r6, [sp, #28]
 8007e92:	1af2      	sublt	r2, r6, r3
 8007e94:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007e96:	bfb6      	itet	lt
 8007e98:	189b      	addlt	r3, r3, r2
 8007e9a:	1b9e      	subge	r6, r3, r6
 8007e9c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007e9e:	9b03      	ldr	r3, [sp, #12]
 8007ea0:	bfb8      	it	lt
 8007ea2:	2600      	movlt	r6, #0
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	bfb7      	itett	lt
 8007ea8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007eac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007eb0:	1a9d      	sublt	r5, r3, r2
 8007eb2:	2300      	movlt	r3, #0
 8007eb4:	e734      	b.n	8007d20 <_dtoa_r+0x720>
 8007eb6:	9e07      	ldr	r6, [sp, #28]
 8007eb8:	9d04      	ldr	r5, [sp, #16]
 8007eba:	9f08      	ldr	r7, [sp, #32]
 8007ebc:	e73b      	b.n	8007d36 <_dtoa_r+0x736>
 8007ebe:	9a07      	ldr	r2, [sp, #28]
 8007ec0:	e767      	b.n	8007d92 <_dtoa_r+0x792>
 8007ec2:	9b06      	ldr	r3, [sp, #24]
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	dc18      	bgt.n	8007efa <_dtoa_r+0x8fa>
 8007ec8:	f1ba 0f00 	cmp.w	sl, #0
 8007ecc:	d115      	bne.n	8007efa <_dtoa_r+0x8fa>
 8007ece:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ed2:	b993      	cbnz	r3, 8007efa <_dtoa_r+0x8fa>
 8007ed4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007ed8:	0d1b      	lsrs	r3, r3, #20
 8007eda:	051b      	lsls	r3, r3, #20
 8007edc:	b183      	cbz	r3, 8007f00 <_dtoa_r+0x900>
 8007ede:	9b04      	ldr	r3, [sp, #16]
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	9304      	str	r3, [sp, #16]
 8007ee4:	9b05      	ldr	r3, [sp, #20]
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	9305      	str	r3, [sp, #20]
 8007eea:	f04f 0801 	mov.w	r8, #1
 8007eee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	f47f af6a 	bne.w	8007dca <_dtoa_r+0x7ca>
 8007ef6:	2001      	movs	r0, #1
 8007ef8:	e76f      	b.n	8007dda <_dtoa_r+0x7da>
 8007efa:	f04f 0800 	mov.w	r8, #0
 8007efe:	e7f6      	b.n	8007eee <_dtoa_r+0x8ee>
 8007f00:	4698      	mov	r8, r3
 8007f02:	e7f4      	b.n	8007eee <_dtoa_r+0x8ee>
 8007f04:	f43f af7d 	beq.w	8007e02 <_dtoa_r+0x802>
 8007f08:	4618      	mov	r0, r3
 8007f0a:	301c      	adds	r0, #28
 8007f0c:	e772      	b.n	8007df4 <_dtoa_r+0x7f4>
 8007f0e:	9b03      	ldr	r3, [sp, #12]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	dc37      	bgt.n	8007f84 <_dtoa_r+0x984>
 8007f14:	9b06      	ldr	r3, [sp, #24]
 8007f16:	2b02      	cmp	r3, #2
 8007f18:	dd34      	ble.n	8007f84 <_dtoa_r+0x984>
 8007f1a:	9b03      	ldr	r3, [sp, #12]
 8007f1c:	9302      	str	r3, [sp, #8]
 8007f1e:	9b02      	ldr	r3, [sp, #8]
 8007f20:	b96b      	cbnz	r3, 8007f3e <_dtoa_r+0x93e>
 8007f22:	4631      	mov	r1, r6
 8007f24:	2205      	movs	r2, #5
 8007f26:	4620      	mov	r0, r4
 8007f28:	f000 f9d4 	bl	80082d4 <__multadd>
 8007f2c:	4601      	mov	r1, r0
 8007f2e:	4606      	mov	r6, r0
 8007f30:	ee18 0a10 	vmov	r0, s16
 8007f34:	f000 fbee 	bl	8008714 <__mcmp>
 8007f38:	2800      	cmp	r0, #0
 8007f3a:	f73f adbb 	bgt.w	8007ab4 <_dtoa_r+0x4b4>
 8007f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f40:	9d01      	ldr	r5, [sp, #4]
 8007f42:	43db      	mvns	r3, r3
 8007f44:	9300      	str	r3, [sp, #0]
 8007f46:	f04f 0800 	mov.w	r8, #0
 8007f4a:	4631      	mov	r1, r6
 8007f4c:	4620      	mov	r0, r4
 8007f4e:	f000 f99f 	bl	8008290 <_Bfree>
 8007f52:	2f00      	cmp	r7, #0
 8007f54:	f43f aea4 	beq.w	8007ca0 <_dtoa_r+0x6a0>
 8007f58:	f1b8 0f00 	cmp.w	r8, #0
 8007f5c:	d005      	beq.n	8007f6a <_dtoa_r+0x96a>
 8007f5e:	45b8      	cmp	r8, r7
 8007f60:	d003      	beq.n	8007f6a <_dtoa_r+0x96a>
 8007f62:	4641      	mov	r1, r8
 8007f64:	4620      	mov	r0, r4
 8007f66:	f000 f993 	bl	8008290 <_Bfree>
 8007f6a:	4639      	mov	r1, r7
 8007f6c:	4620      	mov	r0, r4
 8007f6e:	f000 f98f 	bl	8008290 <_Bfree>
 8007f72:	e695      	b.n	8007ca0 <_dtoa_r+0x6a0>
 8007f74:	2600      	movs	r6, #0
 8007f76:	4637      	mov	r7, r6
 8007f78:	e7e1      	b.n	8007f3e <_dtoa_r+0x93e>
 8007f7a:	9700      	str	r7, [sp, #0]
 8007f7c:	4637      	mov	r7, r6
 8007f7e:	e599      	b.n	8007ab4 <_dtoa_r+0x4b4>
 8007f80:	40240000 	.word	0x40240000
 8007f84:	9b08      	ldr	r3, [sp, #32]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	f000 80ca 	beq.w	8008120 <_dtoa_r+0xb20>
 8007f8c:	9b03      	ldr	r3, [sp, #12]
 8007f8e:	9302      	str	r3, [sp, #8]
 8007f90:	2d00      	cmp	r5, #0
 8007f92:	dd05      	ble.n	8007fa0 <_dtoa_r+0x9a0>
 8007f94:	4639      	mov	r1, r7
 8007f96:	462a      	mov	r2, r5
 8007f98:	4620      	mov	r0, r4
 8007f9a:	f000 fb4b 	bl	8008634 <__lshift>
 8007f9e:	4607      	mov	r7, r0
 8007fa0:	f1b8 0f00 	cmp.w	r8, #0
 8007fa4:	d05b      	beq.n	800805e <_dtoa_r+0xa5e>
 8007fa6:	6879      	ldr	r1, [r7, #4]
 8007fa8:	4620      	mov	r0, r4
 8007faa:	f000 f931 	bl	8008210 <_Balloc>
 8007fae:	4605      	mov	r5, r0
 8007fb0:	b928      	cbnz	r0, 8007fbe <_dtoa_r+0x9be>
 8007fb2:	4b87      	ldr	r3, [pc, #540]	; (80081d0 <_dtoa_r+0xbd0>)
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007fba:	f7ff bb3b 	b.w	8007634 <_dtoa_r+0x34>
 8007fbe:	693a      	ldr	r2, [r7, #16]
 8007fc0:	3202      	adds	r2, #2
 8007fc2:	0092      	lsls	r2, r2, #2
 8007fc4:	f107 010c 	add.w	r1, r7, #12
 8007fc8:	300c      	adds	r0, #12
 8007fca:	f000 f913 	bl	80081f4 <memcpy>
 8007fce:	2201      	movs	r2, #1
 8007fd0:	4629      	mov	r1, r5
 8007fd2:	4620      	mov	r0, r4
 8007fd4:	f000 fb2e 	bl	8008634 <__lshift>
 8007fd8:	9b01      	ldr	r3, [sp, #4]
 8007fda:	f103 0901 	add.w	r9, r3, #1
 8007fde:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007fe2:	4413      	add	r3, r2
 8007fe4:	9305      	str	r3, [sp, #20]
 8007fe6:	f00a 0301 	and.w	r3, sl, #1
 8007fea:	46b8      	mov	r8, r7
 8007fec:	9304      	str	r3, [sp, #16]
 8007fee:	4607      	mov	r7, r0
 8007ff0:	4631      	mov	r1, r6
 8007ff2:	ee18 0a10 	vmov	r0, s16
 8007ff6:	f7ff fa75 	bl	80074e4 <quorem>
 8007ffa:	4641      	mov	r1, r8
 8007ffc:	9002      	str	r0, [sp, #8]
 8007ffe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008002:	ee18 0a10 	vmov	r0, s16
 8008006:	f000 fb85 	bl	8008714 <__mcmp>
 800800a:	463a      	mov	r2, r7
 800800c:	9003      	str	r0, [sp, #12]
 800800e:	4631      	mov	r1, r6
 8008010:	4620      	mov	r0, r4
 8008012:	f000 fb9b 	bl	800874c <__mdiff>
 8008016:	68c2      	ldr	r2, [r0, #12]
 8008018:	f109 3bff 	add.w	fp, r9, #4294967295
 800801c:	4605      	mov	r5, r0
 800801e:	bb02      	cbnz	r2, 8008062 <_dtoa_r+0xa62>
 8008020:	4601      	mov	r1, r0
 8008022:	ee18 0a10 	vmov	r0, s16
 8008026:	f000 fb75 	bl	8008714 <__mcmp>
 800802a:	4602      	mov	r2, r0
 800802c:	4629      	mov	r1, r5
 800802e:	4620      	mov	r0, r4
 8008030:	9207      	str	r2, [sp, #28]
 8008032:	f000 f92d 	bl	8008290 <_Bfree>
 8008036:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800803a:	ea43 0102 	orr.w	r1, r3, r2
 800803e:	9b04      	ldr	r3, [sp, #16]
 8008040:	430b      	orrs	r3, r1
 8008042:	464d      	mov	r5, r9
 8008044:	d10f      	bne.n	8008066 <_dtoa_r+0xa66>
 8008046:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800804a:	d02a      	beq.n	80080a2 <_dtoa_r+0xaa2>
 800804c:	9b03      	ldr	r3, [sp, #12]
 800804e:	2b00      	cmp	r3, #0
 8008050:	dd02      	ble.n	8008058 <_dtoa_r+0xa58>
 8008052:	9b02      	ldr	r3, [sp, #8]
 8008054:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008058:	f88b a000 	strb.w	sl, [fp]
 800805c:	e775      	b.n	8007f4a <_dtoa_r+0x94a>
 800805e:	4638      	mov	r0, r7
 8008060:	e7ba      	b.n	8007fd8 <_dtoa_r+0x9d8>
 8008062:	2201      	movs	r2, #1
 8008064:	e7e2      	b.n	800802c <_dtoa_r+0xa2c>
 8008066:	9b03      	ldr	r3, [sp, #12]
 8008068:	2b00      	cmp	r3, #0
 800806a:	db04      	blt.n	8008076 <_dtoa_r+0xa76>
 800806c:	9906      	ldr	r1, [sp, #24]
 800806e:	430b      	orrs	r3, r1
 8008070:	9904      	ldr	r1, [sp, #16]
 8008072:	430b      	orrs	r3, r1
 8008074:	d122      	bne.n	80080bc <_dtoa_r+0xabc>
 8008076:	2a00      	cmp	r2, #0
 8008078:	ddee      	ble.n	8008058 <_dtoa_r+0xa58>
 800807a:	ee18 1a10 	vmov	r1, s16
 800807e:	2201      	movs	r2, #1
 8008080:	4620      	mov	r0, r4
 8008082:	f000 fad7 	bl	8008634 <__lshift>
 8008086:	4631      	mov	r1, r6
 8008088:	ee08 0a10 	vmov	s16, r0
 800808c:	f000 fb42 	bl	8008714 <__mcmp>
 8008090:	2800      	cmp	r0, #0
 8008092:	dc03      	bgt.n	800809c <_dtoa_r+0xa9c>
 8008094:	d1e0      	bne.n	8008058 <_dtoa_r+0xa58>
 8008096:	f01a 0f01 	tst.w	sl, #1
 800809a:	d0dd      	beq.n	8008058 <_dtoa_r+0xa58>
 800809c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80080a0:	d1d7      	bne.n	8008052 <_dtoa_r+0xa52>
 80080a2:	2339      	movs	r3, #57	; 0x39
 80080a4:	f88b 3000 	strb.w	r3, [fp]
 80080a8:	462b      	mov	r3, r5
 80080aa:	461d      	mov	r5, r3
 80080ac:	3b01      	subs	r3, #1
 80080ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80080b2:	2a39      	cmp	r2, #57	; 0x39
 80080b4:	d071      	beq.n	800819a <_dtoa_r+0xb9a>
 80080b6:	3201      	adds	r2, #1
 80080b8:	701a      	strb	r2, [r3, #0]
 80080ba:	e746      	b.n	8007f4a <_dtoa_r+0x94a>
 80080bc:	2a00      	cmp	r2, #0
 80080be:	dd07      	ble.n	80080d0 <_dtoa_r+0xad0>
 80080c0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80080c4:	d0ed      	beq.n	80080a2 <_dtoa_r+0xaa2>
 80080c6:	f10a 0301 	add.w	r3, sl, #1
 80080ca:	f88b 3000 	strb.w	r3, [fp]
 80080ce:	e73c      	b.n	8007f4a <_dtoa_r+0x94a>
 80080d0:	9b05      	ldr	r3, [sp, #20]
 80080d2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80080d6:	4599      	cmp	r9, r3
 80080d8:	d047      	beq.n	800816a <_dtoa_r+0xb6a>
 80080da:	ee18 1a10 	vmov	r1, s16
 80080de:	2300      	movs	r3, #0
 80080e0:	220a      	movs	r2, #10
 80080e2:	4620      	mov	r0, r4
 80080e4:	f000 f8f6 	bl	80082d4 <__multadd>
 80080e8:	45b8      	cmp	r8, r7
 80080ea:	ee08 0a10 	vmov	s16, r0
 80080ee:	f04f 0300 	mov.w	r3, #0
 80080f2:	f04f 020a 	mov.w	r2, #10
 80080f6:	4641      	mov	r1, r8
 80080f8:	4620      	mov	r0, r4
 80080fa:	d106      	bne.n	800810a <_dtoa_r+0xb0a>
 80080fc:	f000 f8ea 	bl	80082d4 <__multadd>
 8008100:	4680      	mov	r8, r0
 8008102:	4607      	mov	r7, r0
 8008104:	f109 0901 	add.w	r9, r9, #1
 8008108:	e772      	b.n	8007ff0 <_dtoa_r+0x9f0>
 800810a:	f000 f8e3 	bl	80082d4 <__multadd>
 800810e:	4639      	mov	r1, r7
 8008110:	4680      	mov	r8, r0
 8008112:	2300      	movs	r3, #0
 8008114:	220a      	movs	r2, #10
 8008116:	4620      	mov	r0, r4
 8008118:	f000 f8dc 	bl	80082d4 <__multadd>
 800811c:	4607      	mov	r7, r0
 800811e:	e7f1      	b.n	8008104 <_dtoa_r+0xb04>
 8008120:	9b03      	ldr	r3, [sp, #12]
 8008122:	9302      	str	r3, [sp, #8]
 8008124:	9d01      	ldr	r5, [sp, #4]
 8008126:	ee18 0a10 	vmov	r0, s16
 800812a:	4631      	mov	r1, r6
 800812c:	f7ff f9da 	bl	80074e4 <quorem>
 8008130:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008134:	9b01      	ldr	r3, [sp, #4]
 8008136:	f805 ab01 	strb.w	sl, [r5], #1
 800813a:	1aea      	subs	r2, r5, r3
 800813c:	9b02      	ldr	r3, [sp, #8]
 800813e:	4293      	cmp	r3, r2
 8008140:	dd09      	ble.n	8008156 <_dtoa_r+0xb56>
 8008142:	ee18 1a10 	vmov	r1, s16
 8008146:	2300      	movs	r3, #0
 8008148:	220a      	movs	r2, #10
 800814a:	4620      	mov	r0, r4
 800814c:	f000 f8c2 	bl	80082d4 <__multadd>
 8008150:	ee08 0a10 	vmov	s16, r0
 8008154:	e7e7      	b.n	8008126 <_dtoa_r+0xb26>
 8008156:	9b02      	ldr	r3, [sp, #8]
 8008158:	2b00      	cmp	r3, #0
 800815a:	bfc8      	it	gt
 800815c:	461d      	movgt	r5, r3
 800815e:	9b01      	ldr	r3, [sp, #4]
 8008160:	bfd8      	it	le
 8008162:	2501      	movle	r5, #1
 8008164:	441d      	add	r5, r3
 8008166:	f04f 0800 	mov.w	r8, #0
 800816a:	ee18 1a10 	vmov	r1, s16
 800816e:	2201      	movs	r2, #1
 8008170:	4620      	mov	r0, r4
 8008172:	f000 fa5f 	bl	8008634 <__lshift>
 8008176:	4631      	mov	r1, r6
 8008178:	ee08 0a10 	vmov	s16, r0
 800817c:	f000 faca 	bl	8008714 <__mcmp>
 8008180:	2800      	cmp	r0, #0
 8008182:	dc91      	bgt.n	80080a8 <_dtoa_r+0xaa8>
 8008184:	d102      	bne.n	800818c <_dtoa_r+0xb8c>
 8008186:	f01a 0f01 	tst.w	sl, #1
 800818a:	d18d      	bne.n	80080a8 <_dtoa_r+0xaa8>
 800818c:	462b      	mov	r3, r5
 800818e:	461d      	mov	r5, r3
 8008190:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008194:	2a30      	cmp	r2, #48	; 0x30
 8008196:	d0fa      	beq.n	800818e <_dtoa_r+0xb8e>
 8008198:	e6d7      	b.n	8007f4a <_dtoa_r+0x94a>
 800819a:	9a01      	ldr	r2, [sp, #4]
 800819c:	429a      	cmp	r2, r3
 800819e:	d184      	bne.n	80080aa <_dtoa_r+0xaaa>
 80081a0:	9b00      	ldr	r3, [sp, #0]
 80081a2:	3301      	adds	r3, #1
 80081a4:	9300      	str	r3, [sp, #0]
 80081a6:	2331      	movs	r3, #49	; 0x31
 80081a8:	7013      	strb	r3, [r2, #0]
 80081aa:	e6ce      	b.n	8007f4a <_dtoa_r+0x94a>
 80081ac:	4b09      	ldr	r3, [pc, #36]	; (80081d4 <_dtoa_r+0xbd4>)
 80081ae:	f7ff ba95 	b.w	80076dc <_dtoa_r+0xdc>
 80081b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	f47f aa6e 	bne.w	8007696 <_dtoa_r+0x96>
 80081ba:	4b07      	ldr	r3, [pc, #28]	; (80081d8 <_dtoa_r+0xbd8>)
 80081bc:	f7ff ba8e 	b.w	80076dc <_dtoa_r+0xdc>
 80081c0:	9b02      	ldr	r3, [sp, #8]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	dcae      	bgt.n	8008124 <_dtoa_r+0xb24>
 80081c6:	9b06      	ldr	r3, [sp, #24]
 80081c8:	2b02      	cmp	r3, #2
 80081ca:	f73f aea8 	bgt.w	8007f1e <_dtoa_r+0x91e>
 80081ce:	e7a9      	b.n	8008124 <_dtoa_r+0xb24>
 80081d0:	08009c6b 	.word	0x08009c6b
 80081d4:	08009bc8 	.word	0x08009bc8
 80081d8:	08009bec 	.word	0x08009bec

080081dc <_localeconv_r>:
 80081dc:	4800      	ldr	r0, [pc, #0]	; (80081e0 <_localeconv_r+0x4>)
 80081de:	4770      	bx	lr
 80081e0:	20000184 	.word	0x20000184

080081e4 <malloc>:
 80081e4:	4b02      	ldr	r3, [pc, #8]	; (80081f0 <malloc+0xc>)
 80081e6:	4601      	mov	r1, r0
 80081e8:	6818      	ldr	r0, [r3, #0]
 80081ea:	f000 bc17 	b.w	8008a1c <_malloc_r>
 80081ee:	bf00      	nop
 80081f0:	20000030 	.word	0x20000030

080081f4 <memcpy>:
 80081f4:	440a      	add	r2, r1
 80081f6:	4291      	cmp	r1, r2
 80081f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80081fc:	d100      	bne.n	8008200 <memcpy+0xc>
 80081fe:	4770      	bx	lr
 8008200:	b510      	push	{r4, lr}
 8008202:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008206:	f803 4f01 	strb.w	r4, [r3, #1]!
 800820a:	4291      	cmp	r1, r2
 800820c:	d1f9      	bne.n	8008202 <memcpy+0xe>
 800820e:	bd10      	pop	{r4, pc}

08008210 <_Balloc>:
 8008210:	b570      	push	{r4, r5, r6, lr}
 8008212:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008214:	4604      	mov	r4, r0
 8008216:	460d      	mov	r5, r1
 8008218:	b976      	cbnz	r6, 8008238 <_Balloc+0x28>
 800821a:	2010      	movs	r0, #16
 800821c:	f7ff ffe2 	bl	80081e4 <malloc>
 8008220:	4602      	mov	r2, r0
 8008222:	6260      	str	r0, [r4, #36]	; 0x24
 8008224:	b920      	cbnz	r0, 8008230 <_Balloc+0x20>
 8008226:	4b18      	ldr	r3, [pc, #96]	; (8008288 <_Balloc+0x78>)
 8008228:	4818      	ldr	r0, [pc, #96]	; (800828c <_Balloc+0x7c>)
 800822a:	2166      	movs	r1, #102	; 0x66
 800822c:	f000 fdd6 	bl	8008ddc <__assert_func>
 8008230:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008234:	6006      	str	r6, [r0, #0]
 8008236:	60c6      	str	r6, [r0, #12]
 8008238:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800823a:	68f3      	ldr	r3, [r6, #12]
 800823c:	b183      	cbz	r3, 8008260 <_Balloc+0x50>
 800823e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008240:	68db      	ldr	r3, [r3, #12]
 8008242:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008246:	b9b8      	cbnz	r0, 8008278 <_Balloc+0x68>
 8008248:	2101      	movs	r1, #1
 800824a:	fa01 f605 	lsl.w	r6, r1, r5
 800824e:	1d72      	adds	r2, r6, #5
 8008250:	0092      	lsls	r2, r2, #2
 8008252:	4620      	mov	r0, r4
 8008254:	f000 fb60 	bl	8008918 <_calloc_r>
 8008258:	b160      	cbz	r0, 8008274 <_Balloc+0x64>
 800825a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800825e:	e00e      	b.n	800827e <_Balloc+0x6e>
 8008260:	2221      	movs	r2, #33	; 0x21
 8008262:	2104      	movs	r1, #4
 8008264:	4620      	mov	r0, r4
 8008266:	f000 fb57 	bl	8008918 <_calloc_r>
 800826a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800826c:	60f0      	str	r0, [r6, #12]
 800826e:	68db      	ldr	r3, [r3, #12]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d1e4      	bne.n	800823e <_Balloc+0x2e>
 8008274:	2000      	movs	r0, #0
 8008276:	bd70      	pop	{r4, r5, r6, pc}
 8008278:	6802      	ldr	r2, [r0, #0]
 800827a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800827e:	2300      	movs	r3, #0
 8008280:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008284:	e7f7      	b.n	8008276 <_Balloc+0x66>
 8008286:	bf00      	nop
 8008288:	08009bf9 	.word	0x08009bf9
 800828c:	08009c7c 	.word	0x08009c7c

08008290 <_Bfree>:
 8008290:	b570      	push	{r4, r5, r6, lr}
 8008292:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008294:	4605      	mov	r5, r0
 8008296:	460c      	mov	r4, r1
 8008298:	b976      	cbnz	r6, 80082b8 <_Bfree+0x28>
 800829a:	2010      	movs	r0, #16
 800829c:	f7ff ffa2 	bl	80081e4 <malloc>
 80082a0:	4602      	mov	r2, r0
 80082a2:	6268      	str	r0, [r5, #36]	; 0x24
 80082a4:	b920      	cbnz	r0, 80082b0 <_Bfree+0x20>
 80082a6:	4b09      	ldr	r3, [pc, #36]	; (80082cc <_Bfree+0x3c>)
 80082a8:	4809      	ldr	r0, [pc, #36]	; (80082d0 <_Bfree+0x40>)
 80082aa:	218a      	movs	r1, #138	; 0x8a
 80082ac:	f000 fd96 	bl	8008ddc <__assert_func>
 80082b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80082b4:	6006      	str	r6, [r0, #0]
 80082b6:	60c6      	str	r6, [r0, #12]
 80082b8:	b13c      	cbz	r4, 80082ca <_Bfree+0x3a>
 80082ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80082bc:	6862      	ldr	r2, [r4, #4]
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80082c4:	6021      	str	r1, [r4, #0]
 80082c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80082ca:	bd70      	pop	{r4, r5, r6, pc}
 80082cc:	08009bf9 	.word	0x08009bf9
 80082d0:	08009c7c 	.word	0x08009c7c

080082d4 <__multadd>:
 80082d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082d8:	690d      	ldr	r5, [r1, #16]
 80082da:	4607      	mov	r7, r0
 80082dc:	460c      	mov	r4, r1
 80082de:	461e      	mov	r6, r3
 80082e0:	f101 0c14 	add.w	ip, r1, #20
 80082e4:	2000      	movs	r0, #0
 80082e6:	f8dc 3000 	ldr.w	r3, [ip]
 80082ea:	b299      	uxth	r1, r3
 80082ec:	fb02 6101 	mla	r1, r2, r1, r6
 80082f0:	0c1e      	lsrs	r6, r3, #16
 80082f2:	0c0b      	lsrs	r3, r1, #16
 80082f4:	fb02 3306 	mla	r3, r2, r6, r3
 80082f8:	b289      	uxth	r1, r1
 80082fa:	3001      	adds	r0, #1
 80082fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008300:	4285      	cmp	r5, r0
 8008302:	f84c 1b04 	str.w	r1, [ip], #4
 8008306:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800830a:	dcec      	bgt.n	80082e6 <__multadd+0x12>
 800830c:	b30e      	cbz	r6, 8008352 <__multadd+0x7e>
 800830e:	68a3      	ldr	r3, [r4, #8]
 8008310:	42ab      	cmp	r3, r5
 8008312:	dc19      	bgt.n	8008348 <__multadd+0x74>
 8008314:	6861      	ldr	r1, [r4, #4]
 8008316:	4638      	mov	r0, r7
 8008318:	3101      	adds	r1, #1
 800831a:	f7ff ff79 	bl	8008210 <_Balloc>
 800831e:	4680      	mov	r8, r0
 8008320:	b928      	cbnz	r0, 800832e <__multadd+0x5a>
 8008322:	4602      	mov	r2, r0
 8008324:	4b0c      	ldr	r3, [pc, #48]	; (8008358 <__multadd+0x84>)
 8008326:	480d      	ldr	r0, [pc, #52]	; (800835c <__multadd+0x88>)
 8008328:	21b5      	movs	r1, #181	; 0xb5
 800832a:	f000 fd57 	bl	8008ddc <__assert_func>
 800832e:	6922      	ldr	r2, [r4, #16]
 8008330:	3202      	adds	r2, #2
 8008332:	f104 010c 	add.w	r1, r4, #12
 8008336:	0092      	lsls	r2, r2, #2
 8008338:	300c      	adds	r0, #12
 800833a:	f7ff ff5b 	bl	80081f4 <memcpy>
 800833e:	4621      	mov	r1, r4
 8008340:	4638      	mov	r0, r7
 8008342:	f7ff ffa5 	bl	8008290 <_Bfree>
 8008346:	4644      	mov	r4, r8
 8008348:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800834c:	3501      	adds	r5, #1
 800834e:	615e      	str	r6, [r3, #20]
 8008350:	6125      	str	r5, [r4, #16]
 8008352:	4620      	mov	r0, r4
 8008354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008358:	08009c6b 	.word	0x08009c6b
 800835c:	08009c7c 	.word	0x08009c7c

08008360 <__hi0bits>:
 8008360:	0c03      	lsrs	r3, r0, #16
 8008362:	041b      	lsls	r3, r3, #16
 8008364:	b9d3      	cbnz	r3, 800839c <__hi0bits+0x3c>
 8008366:	0400      	lsls	r0, r0, #16
 8008368:	2310      	movs	r3, #16
 800836a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800836e:	bf04      	itt	eq
 8008370:	0200      	lsleq	r0, r0, #8
 8008372:	3308      	addeq	r3, #8
 8008374:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008378:	bf04      	itt	eq
 800837a:	0100      	lsleq	r0, r0, #4
 800837c:	3304      	addeq	r3, #4
 800837e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008382:	bf04      	itt	eq
 8008384:	0080      	lsleq	r0, r0, #2
 8008386:	3302      	addeq	r3, #2
 8008388:	2800      	cmp	r0, #0
 800838a:	db05      	blt.n	8008398 <__hi0bits+0x38>
 800838c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008390:	f103 0301 	add.w	r3, r3, #1
 8008394:	bf08      	it	eq
 8008396:	2320      	moveq	r3, #32
 8008398:	4618      	mov	r0, r3
 800839a:	4770      	bx	lr
 800839c:	2300      	movs	r3, #0
 800839e:	e7e4      	b.n	800836a <__hi0bits+0xa>

080083a0 <__lo0bits>:
 80083a0:	6803      	ldr	r3, [r0, #0]
 80083a2:	f013 0207 	ands.w	r2, r3, #7
 80083a6:	4601      	mov	r1, r0
 80083a8:	d00b      	beq.n	80083c2 <__lo0bits+0x22>
 80083aa:	07da      	lsls	r2, r3, #31
 80083ac:	d423      	bmi.n	80083f6 <__lo0bits+0x56>
 80083ae:	0798      	lsls	r0, r3, #30
 80083b0:	bf49      	itett	mi
 80083b2:	085b      	lsrmi	r3, r3, #1
 80083b4:	089b      	lsrpl	r3, r3, #2
 80083b6:	2001      	movmi	r0, #1
 80083b8:	600b      	strmi	r3, [r1, #0]
 80083ba:	bf5c      	itt	pl
 80083bc:	600b      	strpl	r3, [r1, #0]
 80083be:	2002      	movpl	r0, #2
 80083c0:	4770      	bx	lr
 80083c2:	b298      	uxth	r0, r3
 80083c4:	b9a8      	cbnz	r0, 80083f2 <__lo0bits+0x52>
 80083c6:	0c1b      	lsrs	r3, r3, #16
 80083c8:	2010      	movs	r0, #16
 80083ca:	b2da      	uxtb	r2, r3
 80083cc:	b90a      	cbnz	r2, 80083d2 <__lo0bits+0x32>
 80083ce:	3008      	adds	r0, #8
 80083d0:	0a1b      	lsrs	r3, r3, #8
 80083d2:	071a      	lsls	r2, r3, #28
 80083d4:	bf04      	itt	eq
 80083d6:	091b      	lsreq	r3, r3, #4
 80083d8:	3004      	addeq	r0, #4
 80083da:	079a      	lsls	r2, r3, #30
 80083dc:	bf04      	itt	eq
 80083de:	089b      	lsreq	r3, r3, #2
 80083e0:	3002      	addeq	r0, #2
 80083e2:	07da      	lsls	r2, r3, #31
 80083e4:	d403      	bmi.n	80083ee <__lo0bits+0x4e>
 80083e6:	085b      	lsrs	r3, r3, #1
 80083e8:	f100 0001 	add.w	r0, r0, #1
 80083ec:	d005      	beq.n	80083fa <__lo0bits+0x5a>
 80083ee:	600b      	str	r3, [r1, #0]
 80083f0:	4770      	bx	lr
 80083f2:	4610      	mov	r0, r2
 80083f4:	e7e9      	b.n	80083ca <__lo0bits+0x2a>
 80083f6:	2000      	movs	r0, #0
 80083f8:	4770      	bx	lr
 80083fa:	2020      	movs	r0, #32
 80083fc:	4770      	bx	lr
	...

08008400 <__i2b>:
 8008400:	b510      	push	{r4, lr}
 8008402:	460c      	mov	r4, r1
 8008404:	2101      	movs	r1, #1
 8008406:	f7ff ff03 	bl	8008210 <_Balloc>
 800840a:	4602      	mov	r2, r0
 800840c:	b928      	cbnz	r0, 800841a <__i2b+0x1a>
 800840e:	4b05      	ldr	r3, [pc, #20]	; (8008424 <__i2b+0x24>)
 8008410:	4805      	ldr	r0, [pc, #20]	; (8008428 <__i2b+0x28>)
 8008412:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008416:	f000 fce1 	bl	8008ddc <__assert_func>
 800841a:	2301      	movs	r3, #1
 800841c:	6144      	str	r4, [r0, #20]
 800841e:	6103      	str	r3, [r0, #16]
 8008420:	bd10      	pop	{r4, pc}
 8008422:	bf00      	nop
 8008424:	08009c6b 	.word	0x08009c6b
 8008428:	08009c7c 	.word	0x08009c7c

0800842c <__multiply>:
 800842c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008430:	4691      	mov	r9, r2
 8008432:	690a      	ldr	r2, [r1, #16]
 8008434:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008438:	429a      	cmp	r2, r3
 800843a:	bfb8      	it	lt
 800843c:	460b      	movlt	r3, r1
 800843e:	460c      	mov	r4, r1
 8008440:	bfbc      	itt	lt
 8008442:	464c      	movlt	r4, r9
 8008444:	4699      	movlt	r9, r3
 8008446:	6927      	ldr	r7, [r4, #16]
 8008448:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800844c:	68a3      	ldr	r3, [r4, #8]
 800844e:	6861      	ldr	r1, [r4, #4]
 8008450:	eb07 060a 	add.w	r6, r7, sl
 8008454:	42b3      	cmp	r3, r6
 8008456:	b085      	sub	sp, #20
 8008458:	bfb8      	it	lt
 800845a:	3101      	addlt	r1, #1
 800845c:	f7ff fed8 	bl	8008210 <_Balloc>
 8008460:	b930      	cbnz	r0, 8008470 <__multiply+0x44>
 8008462:	4602      	mov	r2, r0
 8008464:	4b44      	ldr	r3, [pc, #272]	; (8008578 <__multiply+0x14c>)
 8008466:	4845      	ldr	r0, [pc, #276]	; (800857c <__multiply+0x150>)
 8008468:	f240 115d 	movw	r1, #349	; 0x15d
 800846c:	f000 fcb6 	bl	8008ddc <__assert_func>
 8008470:	f100 0514 	add.w	r5, r0, #20
 8008474:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008478:	462b      	mov	r3, r5
 800847a:	2200      	movs	r2, #0
 800847c:	4543      	cmp	r3, r8
 800847e:	d321      	bcc.n	80084c4 <__multiply+0x98>
 8008480:	f104 0314 	add.w	r3, r4, #20
 8008484:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008488:	f109 0314 	add.w	r3, r9, #20
 800848c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008490:	9202      	str	r2, [sp, #8]
 8008492:	1b3a      	subs	r2, r7, r4
 8008494:	3a15      	subs	r2, #21
 8008496:	f022 0203 	bic.w	r2, r2, #3
 800849a:	3204      	adds	r2, #4
 800849c:	f104 0115 	add.w	r1, r4, #21
 80084a0:	428f      	cmp	r7, r1
 80084a2:	bf38      	it	cc
 80084a4:	2204      	movcc	r2, #4
 80084a6:	9201      	str	r2, [sp, #4]
 80084a8:	9a02      	ldr	r2, [sp, #8]
 80084aa:	9303      	str	r3, [sp, #12]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d80c      	bhi.n	80084ca <__multiply+0x9e>
 80084b0:	2e00      	cmp	r6, #0
 80084b2:	dd03      	ble.n	80084bc <__multiply+0x90>
 80084b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d05a      	beq.n	8008572 <__multiply+0x146>
 80084bc:	6106      	str	r6, [r0, #16]
 80084be:	b005      	add	sp, #20
 80084c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084c4:	f843 2b04 	str.w	r2, [r3], #4
 80084c8:	e7d8      	b.n	800847c <__multiply+0x50>
 80084ca:	f8b3 a000 	ldrh.w	sl, [r3]
 80084ce:	f1ba 0f00 	cmp.w	sl, #0
 80084d2:	d024      	beq.n	800851e <__multiply+0xf2>
 80084d4:	f104 0e14 	add.w	lr, r4, #20
 80084d8:	46a9      	mov	r9, r5
 80084da:	f04f 0c00 	mov.w	ip, #0
 80084de:	f85e 2b04 	ldr.w	r2, [lr], #4
 80084e2:	f8d9 1000 	ldr.w	r1, [r9]
 80084e6:	fa1f fb82 	uxth.w	fp, r2
 80084ea:	b289      	uxth	r1, r1
 80084ec:	fb0a 110b 	mla	r1, sl, fp, r1
 80084f0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80084f4:	f8d9 2000 	ldr.w	r2, [r9]
 80084f8:	4461      	add	r1, ip
 80084fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80084fe:	fb0a c20b 	mla	r2, sl, fp, ip
 8008502:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008506:	b289      	uxth	r1, r1
 8008508:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800850c:	4577      	cmp	r7, lr
 800850e:	f849 1b04 	str.w	r1, [r9], #4
 8008512:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008516:	d8e2      	bhi.n	80084de <__multiply+0xb2>
 8008518:	9a01      	ldr	r2, [sp, #4]
 800851a:	f845 c002 	str.w	ip, [r5, r2]
 800851e:	9a03      	ldr	r2, [sp, #12]
 8008520:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008524:	3304      	adds	r3, #4
 8008526:	f1b9 0f00 	cmp.w	r9, #0
 800852a:	d020      	beq.n	800856e <__multiply+0x142>
 800852c:	6829      	ldr	r1, [r5, #0]
 800852e:	f104 0c14 	add.w	ip, r4, #20
 8008532:	46ae      	mov	lr, r5
 8008534:	f04f 0a00 	mov.w	sl, #0
 8008538:	f8bc b000 	ldrh.w	fp, [ip]
 800853c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008540:	fb09 220b 	mla	r2, r9, fp, r2
 8008544:	4492      	add	sl, r2
 8008546:	b289      	uxth	r1, r1
 8008548:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800854c:	f84e 1b04 	str.w	r1, [lr], #4
 8008550:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008554:	f8be 1000 	ldrh.w	r1, [lr]
 8008558:	0c12      	lsrs	r2, r2, #16
 800855a:	fb09 1102 	mla	r1, r9, r2, r1
 800855e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008562:	4567      	cmp	r7, ip
 8008564:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008568:	d8e6      	bhi.n	8008538 <__multiply+0x10c>
 800856a:	9a01      	ldr	r2, [sp, #4]
 800856c:	50a9      	str	r1, [r5, r2]
 800856e:	3504      	adds	r5, #4
 8008570:	e79a      	b.n	80084a8 <__multiply+0x7c>
 8008572:	3e01      	subs	r6, #1
 8008574:	e79c      	b.n	80084b0 <__multiply+0x84>
 8008576:	bf00      	nop
 8008578:	08009c6b 	.word	0x08009c6b
 800857c:	08009c7c 	.word	0x08009c7c

08008580 <__pow5mult>:
 8008580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008584:	4615      	mov	r5, r2
 8008586:	f012 0203 	ands.w	r2, r2, #3
 800858a:	4606      	mov	r6, r0
 800858c:	460f      	mov	r7, r1
 800858e:	d007      	beq.n	80085a0 <__pow5mult+0x20>
 8008590:	4c25      	ldr	r4, [pc, #148]	; (8008628 <__pow5mult+0xa8>)
 8008592:	3a01      	subs	r2, #1
 8008594:	2300      	movs	r3, #0
 8008596:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800859a:	f7ff fe9b 	bl	80082d4 <__multadd>
 800859e:	4607      	mov	r7, r0
 80085a0:	10ad      	asrs	r5, r5, #2
 80085a2:	d03d      	beq.n	8008620 <__pow5mult+0xa0>
 80085a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80085a6:	b97c      	cbnz	r4, 80085c8 <__pow5mult+0x48>
 80085a8:	2010      	movs	r0, #16
 80085aa:	f7ff fe1b 	bl	80081e4 <malloc>
 80085ae:	4602      	mov	r2, r0
 80085b0:	6270      	str	r0, [r6, #36]	; 0x24
 80085b2:	b928      	cbnz	r0, 80085c0 <__pow5mult+0x40>
 80085b4:	4b1d      	ldr	r3, [pc, #116]	; (800862c <__pow5mult+0xac>)
 80085b6:	481e      	ldr	r0, [pc, #120]	; (8008630 <__pow5mult+0xb0>)
 80085b8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80085bc:	f000 fc0e 	bl	8008ddc <__assert_func>
 80085c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80085c4:	6004      	str	r4, [r0, #0]
 80085c6:	60c4      	str	r4, [r0, #12]
 80085c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80085cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80085d0:	b94c      	cbnz	r4, 80085e6 <__pow5mult+0x66>
 80085d2:	f240 2171 	movw	r1, #625	; 0x271
 80085d6:	4630      	mov	r0, r6
 80085d8:	f7ff ff12 	bl	8008400 <__i2b>
 80085dc:	2300      	movs	r3, #0
 80085de:	f8c8 0008 	str.w	r0, [r8, #8]
 80085e2:	4604      	mov	r4, r0
 80085e4:	6003      	str	r3, [r0, #0]
 80085e6:	f04f 0900 	mov.w	r9, #0
 80085ea:	07eb      	lsls	r3, r5, #31
 80085ec:	d50a      	bpl.n	8008604 <__pow5mult+0x84>
 80085ee:	4639      	mov	r1, r7
 80085f0:	4622      	mov	r2, r4
 80085f2:	4630      	mov	r0, r6
 80085f4:	f7ff ff1a 	bl	800842c <__multiply>
 80085f8:	4639      	mov	r1, r7
 80085fa:	4680      	mov	r8, r0
 80085fc:	4630      	mov	r0, r6
 80085fe:	f7ff fe47 	bl	8008290 <_Bfree>
 8008602:	4647      	mov	r7, r8
 8008604:	106d      	asrs	r5, r5, #1
 8008606:	d00b      	beq.n	8008620 <__pow5mult+0xa0>
 8008608:	6820      	ldr	r0, [r4, #0]
 800860a:	b938      	cbnz	r0, 800861c <__pow5mult+0x9c>
 800860c:	4622      	mov	r2, r4
 800860e:	4621      	mov	r1, r4
 8008610:	4630      	mov	r0, r6
 8008612:	f7ff ff0b 	bl	800842c <__multiply>
 8008616:	6020      	str	r0, [r4, #0]
 8008618:	f8c0 9000 	str.w	r9, [r0]
 800861c:	4604      	mov	r4, r0
 800861e:	e7e4      	b.n	80085ea <__pow5mult+0x6a>
 8008620:	4638      	mov	r0, r7
 8008622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008626:	bf00      	nop
 8008628:	08009dc8 	.word	0x08009dc8
 800862c:	08009bf9 	.word	0x08009bf9
 8008630:	08009c7c 	.word	0x08009c7c

08008634 <__lshift>:
 8008634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008638:	460c      	mov	r4, r1
 800863a:	6849      	ldr	r1, [r1, #4]
 800863c:	6923      	ldr	r3, [r4, #16]
 800863e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008642:	68a3      	ldr	r3, [r4, #8]
 8008644:	4607      	mov	r7, r0
 8008646:	4691      	mov	r9, r2
 8008648:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800864c:	f108 0601 	add.w	r6, r8, #1
 8008650:	42b3      	cmp	r3, r6
 8008652:	db0b      	blt.n	800866c <__lshift+0x38>
 8008654:	4638      	mov	r0, r7
 8008656:	f7ff fddb 	bl	8008210 <_Balloc>
 800865a:	4605      	mov	r5, r0
 800865c:	b948      	cbnz	r0, 8008672 <__lshift+0x3e>
 800865e:	4602      	mov	r2, r0
 8008660:	4b2a      	ldr	r3, [pc, #168]	; (800870c <__lshift+0xd8>)
 8008662:	482b      	ldr	r0, [pc, #172]	; (8008710 <__lshift+0xdc>)
 8008664:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008668:	f000 fbb8 	bl	8008ddc <__assert_func>
 800866c:	3101      	adds	r1, #1
 800866e:	005b      	lsls	r3, r3, #1
 8008670:	e7ee      	b.n	8008650 <__lshift+0x1c>
 8008672:	2300      	movs	r3, #0
 8008674:	f100 0114 	add.w	r1, r0, #20
 8008678:	f100 0210 	add.w	r2, r0, #16
 800867c:	4618      	mov	r0, r3
 800867e:	4553      	cmp	r3, sl
 8008680:	db37      	blt.n	80086f2 <__lshift+0xbe>
 8008682:	6920      	ldr	r0, [r4, #16]
 8008684:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008688:	f104 0314 	add.w	r3, r4, #20
 800868c:	f019 091f 	ands.w	r9, r9, #31
 8008690:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008694:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008698:	d02f      	beq.n	80086fa <__lshift+0xc6>
 800869a:	f1c9 0e20 	rsb	lr, r9, #32
 800869e:	468a      	mov	sl, r1
 80086a0:	f04f 0c00 	mov.w	ip, #0
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	fa02 f209 	lsl.w	r2, r2, r9
 80086aa:	ea42 020c 	orr.w	r2, r2, ip
 80086ae:	f84a 2b04 	str.w	r2, [sl], #4
 80086b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80086b6:	4298      	cmp	r0, r3
 80086b8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80086bc:	d8f2      	bhi.n	80086a4 <__lshift+0x70>
 80086be:	1b03      	subs	r3, r0, r4
 80086c0:	3b15      	subs	r3, #21
 80086c2:	f023 0303 	bic.w	r3, r3, #3
 80086c6:	3304      	adds	r3, #4
 80086c8:	f104 0215 	add.w	r2, r4, #21
 80086cc:	4290      	cmp	r0, r2
 80086ce:	bf38      	it	cc
 80086d0:	2304      	movcc	r3, #4
 80086d2:	f841 c003 	str.w	ip, [r1, r3]
 80086d6:	f1bc 0f00 	cmp.w	ip, #0
 80086da:	d001      	beq.n	80086e0 <__lshift+0xac>
 80086dc:	f108 0602 	add.w	r6, r8, #2
 80086e0:	3e01      	subs	r6, #1
 80086e2:	4638      	mov	r0, r7
 80086e4:	612e      	str	r6, [r5, #16]
 80086e6:	4621      	mov	r1, r4
 80086e8:	f7ff fdd2 	bl	8008290 <_Bfree>
 80086ec:	4628      	mov	r0, r5
 80086ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80086f6:	3301      	adds	r3, #1
 80086f8:	e7c1      	b.n	800867e <__lshift+0x4a>
 80086fa:	3904      	subs	r1, #4
 80086fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008700:	f841 2f04 	str.w	r2, [r1, #4]!
 8008704:	4298      	cmp	r0, r3
 8008706:	d8f9      	bhi.n	80086fc <__lshift+0xc8>
 8008708:	e7ea      	b.n	80086e0 <__lshift+0xac>
 800870a:	bf00      	nop
 800870c:	08009c6b 	.word	0x08009c6b
 8008710:	08009c7c 	.word	0x08009c7c

08008714 <__mcmp>:
 8008714:	b530      	push	{r4, r5, lr}
 8008716:	6902      	ldr	r2, [r0, #16]
 8008718:	690c      	ldr	r4, [r1, #16]
 800871a:	1b12      	subs	r2, r2, r4
 800871c:	d10e      	bne.n	800873c <__mcmp+0x28>
 800871e:	f100 0314 	add.w	r3, r0, #20
 8008722:	3114      	adds	r1, #20
 8008724:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008728:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800872c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008730:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008734:	42a5      	cmp	r5, r4
 8008736:	d003      	beq.n	8008740 <__mcmp+0x2c>
 8008738:	d305      	bcc.n	8008746 <__mcmp+0x32>
 800873a:	2201      	movs	r2, #1
 800873c:	4610      	mov	r0, r2
 800873e:	bd30      	pop	{r4, r5, pc}
 8008740:	4283      	cmp	r3, r0
 8008742:	d3f3      	bcc.n	800872c <__mcmp+0x18>
 8008744:	e7fa      	b.n	800873c <__mcmp+0x28>
 8008746:	f04f 32ff 	mov.w	r2, #4294967295
 800874a:	e7f7      	b.n	800873c <__mcmp+0x28>

0800874c <__mdiff>:
 800874c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008750:	460c      	mov	r4, r1
 8008752:	4606      	mov	r6, r0
 8008754:	4611      	mov	r1, r2
 8008756:	4620      	mov	r0, r4
 8008758:	4690      	mov	r8, r2
 800875a:	f7ff ffdb 	bl	8008714 <__mcmp>
 800875e:	1e05      	subs	r5, r0, #0
 8008760:	d110      	bne.n	8008784 <__mdiff+0x38>
 8008762:	4629      	mov	r1, r5
 8008764:	4630      	mov	r0, r6
 8008766:	f7ff fd53 	bl	8008210 <_Balloc>
 800876a:	b930      	cbnz	r0, 800877a <__mdiff+0x2e>
 800876c:	4b3a      	ldr	r3, [pc, #232]	; (8008858 <__mdiff+0x10c>)
 800876e:	4602      	mov	r2, r0
 8008770:	f240 2132 	movw	r1, #562	; 0x232
 8008774:	4839      	ldr	r0, [pc, #228]	; (800885c <__mdiff+0x110>)
 8008776:	f000 fb31 	bl	8008ddc <__assert_func>
 800877a:	2301      	movs	r3, #1
 800877c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008780:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008784:	bfa4      	itt	ge
 8008786:	4643      	movge	r3, r8
 8008788:	46a0      	movge	r8, r4
 800878a:	4630      	mov	r0, r6
 800878c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008790:	bfa6      	itte	ge
 8008792:	461c      	movge	r4, r3
 8008794:	2500      	movge	r5, #0
 8008796:	2501      	movlt	r5, #1
 8008798:	f7ff fd3a 	bl	8008210 <_Balloc>
 800879c:	b920      	cbnz	r0, 80087a8 <__mdiff+0x5c>
 800879e:	4b2e      	ldr	r3, [pc, #184]	; (8008858 <__mdiff+0x10c>)
 80087a0:	4602      	mov	r2, r0
 80087a2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80087a6:	e7e5      	b.n	8008774 <__mdiff+0x28>
 80087a8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80087ac:	6926      	ldr	r6, [r4, #16]
 80087ae:	60c5      	str	r5, [r0, #12]
 80087b0:	f104 0914 	add.w	r9, r4, #20
 80087b4:	f108 0514 	add.w	r5, r8, #20
 80087b8:	f100 0e14 	add.w	lr, r0, #20
 80087bc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80087c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80087c4:	f108 0210 	add.w	r2, r8, #16
 80087c8:	46f2      	mov	sl, lr
 80087ca:	2100      	movs	r1, #0
 80087cc:	f859 3b04 	ldr.w	r3, [r9], #4
 80087d0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80087d4:	fa1f f883 	uxth.w	r8, r3
 80087d8:	fa11 f18b 	uxtah	r1, r1, fp
 80087dc:	0c1b      	lsrs	r3, r3, #16
 80087de:	eba1 0808 	sub.w	r8, r1, r8
 80087e2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80087e6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80087ea:	fa1f f888 	uxth.w	r8, r8
 80087ee:	1419      	asrs	r1, r3, #16
 80087f0:	454e      	cmp	r6, r9
 80087f2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80087f6:	f84a 3b04 	str.w	r3, [sl], #4
 80087fa:	d8e7      	bhi.n	80087cc <__mdiff+0x80>
 80087fc:	1b33      	subs	r3, r6, r4
 80087fe:	3b15      	subs	r3, #21
 8008800:	f023 0303 	bic.w	r3, r3, #3
 8008804:	3304      	adds	r3, #4
 8008806:	3415      	adds	r4, #21
 8008808:	42a6      	cmp	r6, r4
 800880a:	bf38      	it	cc
 800880c:	2304      	movcc	r3, #4
 800880e:	441d      	add	r5, r3
 8008810:	4473      	add	r3, lr
 8008812:	469e      	mov	lr, r3
 8008814:	462e      	mov	r6, r5
 8008816:	4566      	cmp	r6, ip
 8008818:	d30e      	bcc.n	8008838 <__mdiff+0xec>
 800881a:	f10c 0203 	add.w	r2, ip, #3
 800881e:	1b52      	subs	r2, r2, r5
 8008820:	f022 0203 	bic.w	r2, r2, #3
 8008824:	3d03      	subs	r5, #3
 8008826:	45ac      	cmp	ip, r5
 8008828:	bf38      	it	cc
 800882a:	2200      	movcc	r2, #0
 800882c:	441a      	add	r2, r3
 800882e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008832:	b17b      	cbz	r3, 8008854 <__mdiff+0x108>
 8008834:	6107      	str	r7, [r0, #16]
 8008836:	e7a3      	b.n	8008780 <__mdiff+0x34>
 8008838:	f856 8b04 	ldr.w	r8, [r6], #4
 800883c:	fa11 f288 	uxtah	r2, r1, r8
 8008840:	1414      	asrs	r4, r2, #16
 8008842:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008846:	b292      	uxth	r2, r2
 8008848:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800884c:	f84e 2b04 	str.w	r2, [lr], #4
 8008850:	1421      	asrs	r1, r4, #16
 8008852:	e7e0      	b.n	8008816 <__mdiff+0xca>
 8008854:	3f01      	subs	r7, #1
 8008856:	e7ea      	b.n	800882e <__mdiff+0xe2>
 8008858:	08009c6b 	.word	0x08009c6b
 800885c:	08009c7c 	.word	0x08009c7c

08008860 <__d2b>:
 8008860:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008864:	4689      	mov	r9, r1
 8008866:	2101      	movs	r1, #1
 8008868:	ec57 6b10 	vmov	r6, r7, d0
 800886c:	4690      	mov	r8, r2
 800886e:	f7ff fccf 	bl	8008210 <_Balloc>
 8008872:	4604      	mov	r4, r0
 8008874:	b930      	cbnz	r0, 8008884 <__d2b+0x24>
 8008876:	4602      	mov	r2, r0
 8008878:	4b25      	ldr	r3, [pc, #148]	; (8008910 <__d2b+0xb0>)
 800887a:	4826      	ldr	r0, [pc, #152]	; (8008914 <__d2b+0xb4>)
 800887c:	f240 310a 	movw	r1, #778	; 0x30a
 8008880:	f000 faac 	bl	8008ddc <__assert_func>
 8008884:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008888:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800888c:	bb35      	cbnz	r5, 80088dc <__d2b+0x7c>
 800888e:	2e00      	cmp	r6, #0
 8008890:	9301      	str	r3, [sp, #4]
 8008892:	d028      	beq.n	80088e6 <__d2b+0x86>
 8008894:	4668      	mov	r0, sp
 8008896:	9600      	str	r6, [sp, #0]
 8008898:	f7ff fd82 	bl	80083a0 <__lo0bits>
 800889c:	9900      	ldr	r1, [sp, #0]
 800889e:	b300      	cbz	r0, 80088e2 <__d2b+0x82>
 80088a0:	9a01      	ldr	r2, [sp, #4]
 80088a2:	f1c0 0320 	rsb	r3, r0, #32
 80088a6:	fa02 f303 	lsl.w	r3, r2, r3
 80088aa:	430b      	orrs	r3, r1
 80088ac:	40c2      	lsrs	r2, r0
 80088ae:	6163      	str	r3, [r4, #20]
 80088b0:	9201      	str	r2, [sp, #4]
 80088b2:	9b01      	ldr	r3, [sp, #4]
 80088b4:	61a3      	str	r3, [r4, #24]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	bf14      	ite	ne
 80088ba:	2202      	movne	r2, #2
 80088bc:	2201      	moveq	r2, #1
 80088be:	6122      	str	r2, [r4, #16]
 80088c0:	b1d5      	cbz	r5, 80088f8 <__d2b+0x98>
 80088c2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80088c6:	4405      	add	r5, r0
 80088c8:	f8c9 5000 	str.w	r5, [r9]
 80088cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80088d0:	f8c8 0000 	str.w	r0, [r8]
 80088d4:	4620      	mov	r0, r4
 80088d6:	b003      	add	sp, #12
 80088d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80088dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80088e0:	e7d5      	b.n	800888e <__d2b+0x2e>
 80088e2:	6161      	str	r1, [r4, #20]
 80088e4:	e7e5      	b.n	80088b2 <__d2b+0x52>
 80088e6:	a801      	add	r0, sp, #4
 80088e8:	f7ff fd5a 	bl	80083a0 <__lo0bits>
 80088ec:	9b01      	ldr	r3, [sp, #4]
 80088ee:	6163      	str	r3, [r4, #20]
 80088f0:	2201      	movs	r2, #1
 80088f2:	6122      	str	r2, [r4, #16]
 80088f4:	3020      	adds	r0, #32
 80088f6:	e7e3      	b.n	80088c0 <__d2b+0x60>
 80088f8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80088fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008900:	f8c9 0000 	str.w	r0, [r9]
 8008904:	6918      	ldr	r0, [r3, #16]
 8008906:	f7ff fd2b 	bl	8008360 <__hi0bits>
 800890a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800890e:	e7df      	b.n	80088d0 <__d2b+0x70>
 8008910:	08009c6b 	.word	0x08009c6b
 8008914:	08009c7c 	.word	0x08009c7c

08008918 <_calloc_r>:
 8008918:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800891a:	fba1 2402 	umull	r2, r4, r1, r2
 800891e:	b94c      	cbnz	r4, 8008934 <_calloc_r+0x1c>
 8008920:	4611      	mov	r1, r2
 8008922:	9201      	str	r2, [sp, #4]
 8008924:	f000 f87a 	bl	8008a1c <_malloc_r>
 8008928:	9a01      	ldr	r2, [sp, #4]
 800892a:	4605      	mov	r5, r0
 800892c:	b930      	cbnz	r0, 800893c <_calloc_r+0x24>
 800892e:	4628      	mov	r0, r5
 8008930:	b003      	add	sp, #12
 8008932:	bd30      	pop	{r4, r5, pc}
 8008934:	220c      	movs	r2, #12
 8008936:	6002      	str	r2, [r0, #0]
 8008938:	2500      	movs	r5, #0
 800893a:	e7f8      	b.n	800892e <_calloc_r+0x16>
 800893c:	4621      	mov	r1, r4
 800893e:	f7fe f92b 	bl	8006b98 <memset>
 8008942:	e7f4      	b.n	800892e <_calloc_r+0x16>

08008944 <_free_r>:
 8008944:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008946:	2900      	cmp	r1, #0
 8008948:	d044      	beq.n	80089d4 <_free_r+0x90>
 800894a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800894e:	9001      	str	r0, [sp, #4]
 8008950:	2b00      	cmp	r3, #0
 8008952:	f1a1 0404 	sub.w	r4, r1, #4
 8008956:	bfb8      	it	lt
 8008958:	18e4      	addlt	r4, r4, r3
 800895a:	f000 fa9b 	bl	8008e94 <__malloc_lock>
 800895e:	4a1e      	ldr	r2, [pc, #120]	; (80089d8 <_free_r+0x94>)
 8008960:	9801      	ldr	r0, [sp, #4]
 8008962:	6813      	ldr	r3, [r2, #0]
 8008964:	b933      	cbnz	r3, 8008974 <_free_r+0x30>
 8008966:	6063      	str	r3, [r4, #4]
 8008968:	6014      	str	r4, [r2, #0]
 800896a:	b003      	add	sp, #12
 800896c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008970:	f000 ba96 	b.w	8008ea0 <__malloc_unlock>
 8008974:	42a3      	cmp	r3, r4
 8008976:	d908      	bls.n	800898a <_free_r+0x46>
 8008978:	6825      	ldr	r5, [r4, #0]
 800897a:	1961      	adds	r1, r4, r5
 800897c:	428b      	cmp	r3, r1
 800897e:	bf01      	itttt	eq
 8008980:	6819      	ldreq	r1, [r3, #0]
 8008982:	685b      	ldreq	r3, [r3, #4]
 8008984:	1949      	addeq	r1, r1, r5
 8008986:	6021      	streq	r1, [r4, #0]
 8008988:	e7ed      	b.n	8008966 <_free_r+0x22>
 800898a:	461a      	mov	r2, r3
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	b10b      	cbz	r3, 8008994 <_free_r+0x50>
 8008990:	42a3      	cmp	r3, r4
 8008992:	d9fa      	bls.n	800898a <_free_r+0x46>
 8008994:	6811      	ldr	r1, [r2, #0]
 8008996:	1855      	adds	r5, r2, r1
 8008998:	42a5      	cmp	r5, r4
 800899a:	d10b      	bne.n	80089b4 <_free_r+0x70>
 800899c:	6824      	ldr	r4, [r4, #0]
 800899e:	4421      	add	r1, r4
 80089a0:	1854      	adds	r4, r2, r1
 80089a2:	42a3      	cmp	r3, r4
 80089a4:	6011      	str	r1, [r2, #0]
 80089a6:	d1e0      	bne.n	800896a <_free_r+0x26>
 80089a8:	681c      	ldr	r4, [r3, #0]
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	6053      	str	r3, [r2, #4]
 80089ae:	4421      	add	r1, r4
 80089b0:	6011      	str	r1, [r2, #0]
 80089b2:	e7da      	b.n	800896a <_free_r+0x26>
 80089b4:	d902      	bls.n	80089bc <_free_r+0x78>
 80089b6:	230c      	movs	r3, #12
 80089b8:	6003      	str	r3, [r0, #0]
 80089ba:	e7d6      	b.n	800896a <_free_r+0x26>
 80089bc:	6825      	ldr	r5, [r4, #0]
 80089be:	1961      	adds	r1, r4, r5
 80089c0:	428b      	cmp	r3, r1
 80089c2:	bf04      	itt	eq
 80089c4:	6819      	ldreq	r1, [r3, #0]
 80089c6:	685b      	ldreq	r3, [r3, #4]
 80089c8:	6063      	str	r3, [r4, #4]
 80089ca:	bf04      	itt	eq
 80089cc:	1949      	addeq	r1, r1, r5
 80089ce:	6021      	streq	r1, [r4, #0]
 80089d0:	6054      	str	r4, [r2, #4]
 80089d2:	e7ca      	b.n	800896a <_free_r+0x26>
 80089d4:	b003      	add	sp, #12
 80089d6:	bd30      	pop	{r4, r5, pc}
 80089d8:	200002c0 	.word	0x200002c0

080089dc <sbrk_aligned>:
 80089dc:	b570      	push	{r4, r5, r6, lr}
 80089de:	4e0e      	ldr	r6, [pc, #56]	; (8008a18 <sbrk_aligned+0x3c>)
 80089e0:	460c      	mov	r4, r1
 80089e2:	6831      	ldr	r1, [r6, #0]
 80089e4:	4605      	mov	r5, r0
 80089e6:	b911      	cbnz	r1, 80089ee <sbrk_aligned+0x12>
 80089e8:	f000 f9e8 	bl	8008dbc <_sbrk_r>
 80089ec:	6030      	str	r0, [r6, #0]
 80089ee:	4621      	mov	r1, r4
 80089f0:	4628      	mov	r0, r5
 80089f2:	f000 f9e3 	bl	8008dbc <_sbrk_r>
 80089f6:	1c43      	adds	r3, r0, #1
 80089f8:	d00a      	beq.n	8008a10 <sbrk_aligned+0x34>
 80089fa:	1cc4      	adds	r4, r0, #3
 80089fc:	f024 0403 	bic.w	r4, r4, #3
 8008a00:	42a0      	cmp	r0, r4
 8008a02:	d007      	beq.n	8008a14 <sbrk_aligned+0x38>
 8008a04:	1a21      	subs	r1, r4, r0
 8008a06:	4628      	mov	r0, r5
 8008a08:	f000 f9d8 	bl	8008dbc <_sbrk_r>
 8008a0c:	3001      	adds	r0, #1
 8008a0e:	d101      	bne.n	8008a14 <sbrk_aligned+0x38>
 8008a10:	f04f 34ff 	mov.w	r4, #4294967295
 8008a14:	4620      	mov	r0, r4
 8008a16:	bd70      	pop	{r4, r5, r6, pc}
 8008a18:	200002c4 	.word	0x200002c4

08008a1c <_malloc_r>:
 8008a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a20:	1ccd      	adds	r5, r1, #3
 8008a22:	f025 0503 	bic.w	r5, r5, #3
 8008a26:	3508      	adds	r5, #8
 8008a28:	2d0c      	cmp	r5, #12
 8008a2a:	bf38      	it	cc
 8008a2c:	250c      	movcc	r5, #12
 8008a2e:	2d00      	cmp	r5, #0
 8008a30:	4607      	mov	r7, r0
 8008a32:	db01      	blt.n	8008a38 <_malloc_r+0x1c>
 8008a34:	42a9      	cmp	r1, r5
 8008a36:	d905      	bls.n	8008a44 <_malloc_r+0x28>
 8008a38:	230c      	movs	r3, #12
 8008a3a:	603b      	str	r3, [r7, #0]
 8008a3c:	2600      	movs	r6, #0
 8008a3e:	4630      	mov	r0, r6
 8008a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a44:	4e2e      	ldr	r6, [pc, #184]	; (8008b00 <_malloc_r+0xe4>)
 8008a46:	f000 fa25 	bl	8008e94 <__malloc_lock>
 8008a4a:	6833      	ldr	r3, [r6, #0]
 8008a4c:	461c      	mov	r4, r3
 8008a4e:	bb34      	cbnz	r4, 8008a9e <_malloc_r+0x82>
 8008a50:	4629      	mov	r1, r5
 8008a52:	4638      	mov	r0, r7
 8008a54:	f7ff ffc2 	bl	80089dc <sbrk_aligned>
 8008a58:	1c43      	adds	r3, r0, #1
 8008a5a:	4604      	mov	r4, r0
 8008a5c:	d14d      	bne.n	8008afa <_malloc_r+0xde>
 8008a5e:	6834      	ldr	r4, [r6, #0]
 8008a60:	4626      	mov	r6, r4
 8008a62:	2e00      	cmp	r6, #0
 8008a64:	d140      	bne.n	8008ae8 <_malloc_r+0xcc>
 8008a66:	6823      	ldr	r3, [r4, #0]
 8008a68:	4631      	mov	r1, r6
 8008a6a:	4638      	mov	r0, r7
 8008a6c:	eb04 0803 	add.w	r8, r4, r3
 8008a70:	f000 f9a4 	bl	8008dbc <_sbrk_r>
 8008a74:	4580      	cmp	r8, r0
 8008a76:	d13a      	bne.n	8008aee <_malloc_r+0xd2>
 8008a78:	6821      	ldr	r1, [r4, #0]
 8008a7a:	3503      	adds	r5, #3
 8008a7c:	1a6d      	subs	r5, r5, r1
 8008a7e:	f025 0503 	bic.w	r5, r5, #3
 8008a82:	3508      	adds	r5, #8
 8008a84:	2d0c      	cmp	r5, #12
 8008a86:	bf38      	it	cc
 8008a88:	250c      	movcc	r5, #12
 8008a8a:	4629      	mov	r1, r5
 8008a8c:	4638      	mov	r0, r7
 8008a8e:	f7ff ffa5 	bl	80089dc <sbrk_aligned>
 8008a92:	3001      	adds	r0, #1
 8008a94:	d02b      	beq.n	8008aee <_malloc_r+0xd2>
 8008a96:	6823      	ldr	r3, [r4, #0]
 8008a98:	442b      	add	r3, r5
 8008a9a:	6023      	str	r3, [r4, #0]
 8008a9c:	e00e      	b.n	8008abc <_malloc_r+0xa0>
 8008a9e:	6822      	ldr	r2, [r4, #0]
 8008aa0:	1b52      	subs	r2, r2, r5
 8008aa2:	d41e      	bmi.n	8008ae2 <_malloc_r+0xc6>
 8008aa4:	2a0b      	cmp	r2, #11
 8008aa6:	d916      	bls.n	8008ad6 <_malloc_r+0xba>
 8008aa8:	1961      	adds	r1, r4, r5
 8008aaa:	42a3      	cmp	r3, r4
 8008aac:	6025      	str	r5, [r4, #0]
 8008aae:	bf18      	it	ne
 8008ab0:	6059      	strne	r1, [r3, #4]
 8008ab2:	6863      	ldr	r3, [r4, #4]
 8008ab4:	bf08      	it	eq
 8008ab6:	6031      	streq	r1, [r6, #0]
 8008ab8:	5162      	str	r2, [r4, r5]
 8008aba:	604b      	str	r3, [r1, #4]
 8008abc:	4638      	mov	r0, r7
 8008abe:	f104 060b 	add.w	r6, r4, #11
 8008ac2:	f000 f9ed 	bl	8008ea0 <__malloc_unlock>
 8008ac6:	f026 0607 	bic.w	r6, r6, #7
 8008aca:	1d23      	adds	r3, r4, #4
 8008acc:	1af2      	subs	r2, r6, r3
 8008ace:	d0b6      	beq.n	8008a3e <_malloc_r+0x22>
 8008ad0:	1b9b      	subs	r3, r3, r6
 8008ad2:	50a3      	str	r3, [r4, r2]
 8008ad4:	e7b3      	b.n	8008a3e <_malloc_r+0x22>
 8008ad6:	6862      	ldr	r2, [r4, #4]
 8008ad8:	42a3      	cmp	r3, r4
 8008ada:	bf0c      	ite	eq
 8008adc:	6032      	streq	r2, [r6, #0]
 8008ade:	605a      	strne	r2, [r3, #4]
 8008ae0:	e7ec      	b.n	8008abc <_malloc_r+0xa0>
 8008ae2:	4623      	mov	r3, r4
 8008ae4:	6864      	ldr	r4, [r4, #4]
 8008ae6:	e7b2      	b.n	8008a4e <_malloc_r+0x32>
 8008ae8:	4634      	mov	r4, r6
 8008aea:	6876      	ldr	r6, [r6, #4]
 8008aec:	e7b9      	b.n	8008a62 <_malloc_r+0x46>
 8008aee:	230c      	movs	r3, #12
 8008af0:	603b      	str	r3, [r7, #0]
 8008af2:	4638      	mov	r0, r7
 8008af4:	f000 f9d4 	bl	8008ea0 <__malloc_unlock>
 8008af8:	e7a1      	b.n	8008a3e <_malloc_r+0x22>
 8008afa:	6025      	str	r5, [r4, #0]
 8008afc:	e7de      	b.n	8008abc <_malloc_r+0xa0>
 8008afe:	bf00      	nop
 8008b00:	200002c0 	.word	0x200002c0

08008b04 <__ssputs_r>:
 8008b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b08:	688e      	ldr	r6, [r1, #8]
 8008b0a:	429e      	cmp	r6, r3
 8008b0c:	4682      	mov	sl, r0
 8008b0e:	460c      	mov	r4, r1
 8008b10:	4690      	mov	r8, r2
 8008b12:	461f      	mov	r7, r3
 8008b14:	d838      	bhi.n	8008b88 <__ssputs_r+0x84>
 8008b16:	898a      	ldrh	r2, [r1, #12]
 8008b18:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008b1c:	d032      	beq.n	8008b84 <__ssputs_r+0x80>
 8008b1e:	6825      	ldr	r5, [r4, #0]
 8008b20:	6909      	ldr	r1, [r1, #16]
 8008b22:	eba5 0901 	sub.w	r9, r5, r1
 8008b26:	6965      	ldr	r5, [r4, #20]
 8008b28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b30:	3301      	adds	r3, #1
 8008b32:	444b      	add	r3, r9
 8008b34:	106d      	asrs	r5, r5, #1
 8008b36:	429d      	cmp	r5, r3
 8008b38:	bf38      	it	cc
 8008b3a:	461d      	movcc	r5, r3
 8008b3c:	0553      	lsls	r3, r2, #21
 8008b3e:	d531      	bpl.n	8008ba4 <__ssputs_r+0xa0>
 8008b40:	4629      	mov	r1, r5
 8008b42:	f7ff ff6b 	bl	8008a1c <_malloc_r>
 8008b46:	4606      	mov	r6, r0
 8008b48:	b950      	cbnz	r0, 8008b60 <__ssputs_r+0x5c>
 8008b4a:	230c      	movs	r3, #12
 8008b4c:	f8ca 3000 	str.w	r3, [sl]
 8008b50:	89a3      	ldrh	r3, [r4, #12]
 8008b52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b56:	81a3      	strh	r3, [r4, #12]
 8008b58:	f04f 30ff 	mov.w	r0, #4294967295
 8008b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b60:	6921      	ldr	r1, [r4, #16]
 8008b62:	464a      	mov	r2, r9
 8008b64:	f7ff fb46 	bl	80081f4 <memcpy>
 8008b68:	89a3      	ldrh	r3, [r4, #12]
 8008b6a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b72:	81a3      	strh	r3, [r4, #12]
 8008b74:	6126      	str	r6, [r4, #16]
 8008b76:	6165      	str	r5, [r4, #20]
 8008b78:	444e      	add	r6, r9
 8008b7a:	eba5 0509 	sub.w	r5, r5, r9
 8008b7e:	6026      	str	r6, [r4, #0]
 8008b80:	60a5      	str	r5, [r4, #8]
 8008b82:	463e      	mov	r6, r7
 8008b84:	42be      	cmp	r6, r7
 8008b86:	d900      	bls.n	8008b8a <__ssputs_r+0x86>
 8008b88:	463e      	mov	r6, r7
 8008b8a:	6820      	ldr	r0, [r4, #0]
 8008b8c:	4632      	mov	r2, r6
 8008b8e:	4641      	mov	r1, r8
 8008b90:	f000 f966 	bl	8008e60 <memmove>
 8008b94:	68a3      	ldr	r3, [r4, #8]
 8008b96:	1b9b      	subs	r3, r3, r6
 8008b98:	60a3      	str	r3, [r4, #8]
 8008b9a:	6823      	ldr	r3, [r4, #0]
 8008b9c:	4433      	add	r3, r6
 8008b9e:	6023      	str	r3, [r4, #0]
 8008ba0:	2000      	movs	r0, #0
 8008ba2:	e7db      	b.n	8008b5c <__ssputs_r+0x58>
 8008ba4:	462a      	mov	r2, r5
 8008ba6:	f000 f981 	bl	8008eac <_realloc_r>
 8008baa:	4606      	mov	r6, r0
 8008bac:	2800      	cmp	r0, #0
 8008bae:	d1e1      	bne.n	8008b74 <__ssputs_r+0x70>
 8008bb0:	6921      	ldr	r1, [r4, #16]
 8008bb2:	4650      	mov	r0, sl
 8008bb4:	f7ff fec6 	bl	8008944 <_free_r>
 8008bb8:	e7c7      	b.n	8008b4a <__ssputs_r+0x46>
	...

08008bbc <_svfiprintf_r>:
 8008bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bc0:	4698      	mov	r8, r3
 8008bc2:	898b      	ldrh	r3, [r1, #12]
 8008bc4:	061b      	lsls	r3, r3, #24
 8008bc6:	b09d      	sub	sp, #116	; 0x74
 8008bc8:	4607      	mov	r7, r0
 8008bca:	460d      	mov	r5, r1
 8008bcc:	4614      	mov	r4, r2
 8008bce:	d50e      	bpl.n	8008bee <_svfiprintf_r+0x32>
 8008bd0:	690b      	ldr	r3, [r1, #16]
 8008bd2:	b963      	cbnz	r3, 8008bee <_svfiprintf_r+0x32>
 8008bd4:	2140      	movs	r1, #64	; 0x40
 8008bd6:	f7ff ff21 	bl	8008a1c <_malloc_r>
 8008bda:	6028      	str	r0, [r5, #0]
 8008bdc:	6128      	str	r0, [r5, #16]
 8008bde:	b920      	cbnz	r0, 8008bea <_svfiprintf_r+0x2e>
 8008be0:	230c      	movs	r3, #12
 8008be2:	603b      	str	r3, [r7, #0]
 8008be4:	f04f 30ff 	mov.w	r0, #4294967295
 8008be8:	e0d1      	b.n	8008d8e <_svfiprintf_r+0x1d2>
 8008bea:	2340      	movs	r3, #64	; 0x40
 8008bec:	616b      	str	r3, [r5, #20]
 8008bee:	2300      	movs	r3, #0
 8008bf0:	9309      	str	r3, [sp, #36]	; 0x24
 8008bf2:	2320      	movs	r3, #32
 8008bf4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008bf8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bfc:	2330      	movs	r3, #48	; 0x30
 8008bfe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008da8 <_svfiprintf_r+0x1ec>
 8008c02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c06:	f04f 0901 	mov.w	r9, #1
 8008c0a:	4623      	mov	r3, r4
 8008c0c:	469a      	mov	sl, r3
 8008c0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c12:	b10a      	cbz	r2, 8008c18 <_svfiprintf_r+0x5c>
 8008c14:	2a25      	cmp	r2, #37	; 0x25
 8008c16:	d1f9      	bne.n	8008c0c <_svfiprintf_r+0x50>
 8008c18:	ebba 0b04 	subs.w	fp, sl, r4
 8008c1c:	d00b      	beq.n	8008c36 <_svfiprintf_r+0x7a>
 8008c1e:	465b      	mov	r3, fp
 8008c20:	4622      	mov	r2, r4
 8008c22:	4629      	mov	r1, r5
 8008c24:	4638      	mov	r0, r7
 8008c26:	f7ff ff6d 	bl	8008b04 <__ssputs_r>
 8008c2a:	3001      	adds	r0, #1
 8008c2c:	f000 80aa 	beq.w	8008d84 <_svfiprintf_r+0x1c8>
 8008c30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c32:	445a      	add	r2, fp
 8008c34:	9209      	str	r2, [sp, #36]	; 0x24
 8008c36:	f89a 3000 	ldrb.w	r3, [sl]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	f000 80a2 	beq.w	8008d84 <_svfiprintf_r+0x1c8>
 8008c40:	2300      	movs	r3, #0
 8008c42:	f04f 32ff 	mov.w	r2, #4294967295
 8008c46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c4a:	f10a 0a01 	add.w	sl, sl, #1
 8008c4e:	9304      	str	r3, [sp, #16]
 8008c50:	9307      	str	r3, [sp, #28]
 8008c52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c56:	931a      	str	r3, [sp, #104]	; 0x68
 8008c58:	4654      	mov	r4, sl
 8008c5a:	2205      	movs	r2, #5
 8008c5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c60:	4851      	ldr	r0, [pc, #324]	; (8008da8 <_svfiprintf_r+0x1ec>)
 8008c62:	f7f7 fabd 	bl	80001e0 <memchr>
 8008c66:	9a04      	ldr	r2, [sp, #16]
 8008c68:	b9d8      	cbnz	r0, 8008ca2 <_svfiprintf_r+0xe6>
 8008c6a:	06d0      	lsls	r0, r2, #27
 8008c6c:	bf44      	itt	mi
 8008c6e:	2320      	movmi	r3, #32
 8008c70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c74:	0711      	lsls	r1, r2, #28
 8008c76:	bf44      	itt	mi
 8008c78:	232b      	movmi	r3, #43	; 0x2b
 8008c7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c7e:	f89a 3000 	ldrb.w	r3, [sl]
 8008c82:	2b2a      	cmp	r3, #42	; 0x2a
 8008c84:	d015      	beq.n	8008cb2 <_svfiprintf_r+0xf6>
 8008c86:	9a07      	ldr	r2, [sp, #28]
 8008c88:	4654      	mov	r4, sl
 8008c8a:	2000      	movs	r0, #0
 8008c8c:	f04f 0c0a 	mov.w	ip, #10
 8008c90:	4621      	mov	r1, r4
 8008c92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c96:	3b30      	subs	r3, #48	; 0x30
 8008c98:	2b09      	cmp	r3, #9
 8008c9a:	d94e      	bls.n	8008d3a <_svfiprintf_r+0x17e>
 8008c9c:	b1b0      	cbz	r0, 8008ccc <_svfiprintf_r+0x110>
 8008c9e:	9207      	str	r2, [sp, #28]
 8008ca0:	e014      	b.n	8008ccc <_svfiprintf_r+0x110>
 8008ca2:	eba0 0308 	sub.w	r3, r0, r8
 8008ca6:	fa09 f303 	lsl.w	r3, r9, r3
 8008caa:	4313      	orrs	r3, r2
 8008cac:	9304      	str	r3, [sp, #16]
 8008cae:	46a2      	mov	sl, r4
 8008cb0:	e7d2      	b.n	8008c58 <_svfiprintf_r+0x9c>
 8008cb2:	9b03      	ldr	r3, [sp, #12]
 8008cb4:	1d19      	adds	r1, r3, #4
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	9103      	str	r1, [sp, #12]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	bfbb      	ittet	lt
 8008cbe:	425b      	neglt	r3, r3
 8008cc0:	f042 0202 	orrlt.w	r2, r2, #2
 8008cc4:	9307      	strge	r3, [sp, #28]
 8008cc6:	9307      	strlt	r3, [sp, #28]
 8008cc8:	bfb8      	it	lt
 8008cca:	9204      	strlt	r2, [sp, #16]
 8008ccc:	7823      	ldrb	r3, [r4, #0]
 8008cce:	2b2e      	cmp	r3, #46	; 0x2e
 8008cd0:	d10c      	bne.n	8008cec <_svfiprintf_r+0x130>
 8008cd2:	7863      	ldrb	r3, [r4, #1]
 8008cd4:	2b2a      	cmp	r3, #42	; 0x2a
 8008cd6:	d135      	bne.n	8008d44 <_svfiprintf_r+0x188>
 8008cd8:	9b03      	ldr	r3, [sp, #12]
 8008cda:	1d1a      	adds	r2, r3, #4
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	9203      	str	r2, [sp, #12]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	bfb8      	it	lt
 8008ce4:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ce8:	3402      	adds	r4, #2
 8008cea:	9305      	str	r3, [sp, #20]
 8008cec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008db8 <_svfiprintf_r+0x1fc>
 8008cf0:	7821      	ldrb	r1, [r4, #0]
 8008cf2:	2203      	movs	r2, #3
 8008cf4:	4650      	mov	r0, sl
 8008cf6:	f7f7 fa73 	bl	80001e0 <memchr>
 8008cfa:	b140      	cbz	r0, 8008d0e <_svfiprintf_r+0x152>
 8008cfc:	2340      	movs	r3, #64	; 0x40
 8008cfe:	eba0 000a 	sub.w	r0, r0, sl
 8008d02:	fa03 f000 	lsl.w	r0, r3, r0
 8008d06:	9b04      	ldr	r3, [sp, #16]
 8008d08:	4303      	orrs	r3, r0
 8008d0a:	3401      	adds	r4, #1
 8008d0c:	9304      	str	r3, [sp, #16]
 8008d0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d12:	4826      	ldr	r0, [pc, #152]	; (8008dac <_svfiprintf_r+0x1f0>)
 8008d14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d18:	2206      	movs	r2, #6
 8008d1a:	f7f7 fa61 	bl	80001e0 <memchr>
 8008d1e:	2800      	cmp	r0, #0
 8008d20:	d038      	beq.n	8008d94 <_svfiprintf_r+0x1d8>
 8008d22:	4b23      	ldr	r3, [pc, #140]	; (8008db0 <_svfiprintf_r+0x1f4>)
 8008d24:	bb1b      	cbnz	r3, 8008d6e <_svfiprintf_r+0x1b2>
 8008d26:	9b03      	ldr	r3, [sp, #12]
 8008d28:	3307      	adds	r3, #7
 8008d2a:	f023 0307 	bic.w	r3, r3, #7
 8008d2e:	3308      	adds	r3, #8
 8008d30:	9303      	str	r3, [sp, #12]
 8008d32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d34:	4433      	add	r3, r6
 8008d36:	9309      	str	r3, [sp, #36]	; 0x24
 8008d38:	e767      	b.n	8008c0a <_svfiprintf_r+0x4e>
 8008d3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d3e:	460c      	mov	r4, r1
 8008d40:	2001      	movs	r0, #1
 8008d42:	e7a5      	b.n	8008c90 <_svfiprintf_r+0xd4>
 8008d44:	2300      	movs	r3, #0
 8008d46:	3401      	adds	r4, #1
 8008d48:	9305      	str	r3, [sp, #20]
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	f04f 0c0a 	mov.w	ip, #10
 8008d50:	4620      	mov	r0, r4
 8008d52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d56:	3a30      	subs	r2, #48	; 0x30
 8008d58:	2a09      	cmp	r2, #9
 8008d5a:	d903      	bls.n	8008d64 <_svfiprintf_r+0x1a8>
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d0c5      	beq.n	8008cec <_svfiprintf_r+0x130>
 8008d60:	9105      	str	r1, [sp, #20]
 8008d62:	e7c3      	b.n	8008cec <_svfiprintf_r+0x130>
 8008d64:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d68:	4604      	mov	r4, r0
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e7f0      	b.n	8008d50 <_svfiprintf_r+0x194>
 8008d6e:	ab03      	add	r3, sp, #12
 8008d70:	9300      	str	r3, [sp, #0]
 8008d72:	462a      	mov	r2, r5
 8008d74:	4b0f      	ldr	r3, [pc, #60]	; (8008db4 <_svfiprintf_r+0x1f8>)
 8008d76:	a904      	add	r1, sp, #16
 8008d78:	4638      	mov	r0, r7
 8008d7a:	f7fd ffb5 	bl	8006ce8 <_printf_float>
 8008d7e:	1c42      	adds	r2, r0, #1
 8008d80:	4606      	mov	r6, r0
 8008d82:	d1d6      	bne.n	8008d32 <_svfiprintf_r+0x176>
 8008d84:	89ab      	ldrh	r3, [r5, #12]
 8008d86:	065b      	lsls	r3, r3, #25
 8008d88:	f53f af2c 	bmi.w	8008be4 <_svfiprintf_r+0x28>
 8008d8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d8e:	b01d      	add	sp, #116	; 0x74
 8008d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d94:	ab03      	add	r3, sp, #12
 8008d96:	9300      	str	r3, [sp, #0]
 8008d98:	462a      	mov	r2, r5
 8008d9a:	4b06      	ldr	r3, [pc, #24]	; (8008db4 <_svfiprintf_r+0x1f8>)
 8008d9c:	a904      	add	r1, sp, #16
 8008d9e:	4638      	mov	r0, r7
 8008da0:	f7fe fa46 	bl	8007230 <_printf_i>
 8008da4:	e7eb      	b.n	8008d7e <_svfiprintf_r+0x1c2>
 8008da6:	bf00      	nop
 8008da8:	08009dd4 	.word	0x08009dd4
 8008dac:	08009dde 	.word	0x08009dde
 8008db0:	08006ce9 	.word	0x08006ce9
 8008db4:	08008b05 	.word	0x08008b05
 8008db8:	08009dda 	.word	0x08009dda

08008dbc <_sbrk_r>:
 8008dbc:	b538      	push	{r3, r4, r5, lr}
 8008dbe:	4d06      	ldr	r5, [pc, #24]	; (8008dd8 <_sbrk_r+0x1c>)
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	4604      	mov	r4, r0
 8008dc4:	4608      	mov	r0, r1
 8008dc6:	602b      	str	r3, [r5, #0]
 8008dc8:	f7fa fdee 	bl	80039a8 <_sbrk>
 8008dcc:	1c43      	adds	r3, r0, #1
 8008dce:	d102      	bne.n	8008dd6 <_sbrk_r+0x1a>
 8008dd0:	682b      	ldr	r3, [r5, #0]
 8008dd2:	b103      	cbz	r3, 8008dd6 <_sbrk_r+0x1a>
 8008dd4:	6023      	str	r3, [r4, #0]
 8008dd6:	bd38      	pop	{r3, r4, r5, pc}
 8008dd8:	200002c8 	.word	0x200002c8

08008ddc <__assert_func>:
 8008ddc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008dde:	4614      	mov	r4, r2
 8008de0:	461a      	mov	r2, r3
 8008de2:	4b09      	ldr	r3, [pc, #36]	; (8008e08 <__assert_func+0x2c>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4605      	mov	r5, r0
 8008de8:	68d8      	ldr	r0, [r3, #12]
 8008dea:	b14c      	cbz	r4, 8008e00 <__assert_func+0x24>
 8008dec:	4b07      	ldr	r3, [pc, #28]	; (8008e0c <__assert_func+0x30>)
 8008dee:	9100      	str	r1, [sp, #0]
 8008df0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008df4:	4906      	ldr	r1, [pc, #24]	; (8008e10 <__assert_func+0x34>)
 8008df6:	462b      	mov	r3, r5
 8008df8:	f000 f80e 	bl	8008e18 <fiprintf>
 8008dfc:	f000 faac 	bl	8009358 <abort>
 8008e00:	4b04      	ldr	r3, [pc, #16]	; (8008e14 <__assert_func+0x38>)
 8008e02:	461c      	mov	r4, r3
 8008e04:	e7f3      	b.n	8008dee <__assert_func+0x12>
 8008e06:	bf00      	nop
 8008e08:	20000030 	.word	0x20000030
 8008e0c:	08009de5 	.word	0x08009de5
 8008e10:	08009df2 	.word	0x08009df2
 8008e14:	08009e20 	.word	0x08009e20

08008e18 <fiprintf>:
 8008e18:	b40e      	push	{r1, r2, r3}
 8008e1a:	b503      	push	{r0, r1, lr}
 8008e1c:	4601      	mov	r1, r0
 8008e1e:	ab03      	add	r3, sp, #12
 8008e20:	4805      	ldr	r0, [pc, #20]	; (8008e38 <fiprintf+0x20>)
 8008e22:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e26:	6800      	ldr	r0, [r0, #0]
 8008e28:	9301      	str	r3, [sp, #4]
 8008e2a:	f000 f897 	bl	8008f5c <_vfiprintf_r>
 8008e2e:	b002      	add	sp, #8
 8008e30:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e34:	b003      	add	sp, #12
 8008e36:	4770      	bx	lr
 8008e38:	20000030 	.word	0x20000030

08008e3c <__ascii_mbtowc>:
 8008e3c:	b082      	sub	sp, #8
 8008e3e:	b901      	cbnz	r1, 8008e42 <__ascii_mbtowc+0x6>
 8008e40:	a901      	add	r1, sp, #4
 8008e42:	b142      	cbz	r2, 8008e56 <__ascii_mbtowc+0x1a>
 8008e44:	b14b      	cbz	r3, 8008e5a <__ascii_mbtowc+0x1e>
 8008e46:	7813      	ldrb	r3, [r2, #0]
 8008e48:	600b      	str	r3, [r1, #0]
 8008e4a:	7812      	ldrb	r2, [r2, #0]
 8008e4c:	1e10      	subs	r0, r2, #0
 8008e4e:	bf18      	it	ne
 8008e50:	2001      	movne	r0, #1
 8008e52:	b002      	add	sp, #8
 8008e54:	4770      	bx	lr
 8008e56:	4610      	mov	r0, r2
 8008e58:	e7fb      	b.n	8008e52 <__ascii_mbtowc+0x16>
 8008e5a:	f06f 0001 	mvn.w	r0, #1
 8008e5e:	e7f8      	b.n	8008e52 <__ascii_mbtowc+0x16>

08008e60 <memmove>:
 8008e60:	4288      	cmp	r0, r1
 8008e62:	b510      	push	{r4, lr}
 8008e64:	eb01 0402 	add.w	r4, r1, r2
 8008e68:	d902      	bls.n	8008e70 <memmove+0x10>
 8008e6a:	4284      	cmp	r4, r0
 8008e6c:	4623      	mov	r3, r4
 8008e6e:	d807      	bhi.n	8008e80 <memmove+0x20>
 8008e70:	1e43      	subs	r3, r0, #1
 8008e72:	42a1      	cmp	r1, r4
 8008e74:	d008      	beq.n	8008e88 <memmove+0x28>
 8008e76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e7e:	e7f8      	b.n	8008e72 <memmove+0x12>
 8008e80:	4402      	add	r2, r0
 8008e82:	4601      	mov	r1, r0
 8008e84:	428a      	cmp	r2, r1
 8008e86:	d100      	bne.n	8008e8a <memmove+0x2a>
 8008e88:	bd10      	pop	{r4, pc}
 8008e8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e92:	e7f7      	b.n	8008e84 <memmove+0x24>

08008e94 <__malloc_lock>:
 8008e94:	4801      	ldr	r0, [pc, #4]	; (8008e9c <__malloc_lock+0x8>)
 8008e96:	f000 bc1f 	b.w	80096d8 <__retarget_lock_acquire_recursive>
 8008e9a:	bf00      	nop
 8008e9c:	200002cc 	.word	0x200002cc

08008ea0 <__malloc_unlock>:
 8008ea0:	4801      	ldr	r0, [pc, #4]	; (8008ea8 <__malloc_unlock+0x8>)
 8008ea2:	f000 bc1a 	b.w	80096da <__retarget_lock_release_recursive>
 8008ea6:	bf00      	nop
 8008ea8:	200002cc 	.word	0x200002cc

08008eac <_realloc_r>:
 8008eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eb0:	4680      	mov	r8, r0
 8008eb2:	4614      	mov	r4, r2
 8008eb4:	460e      	mov	r6, r1
 8008eb6:	b921      	cbnz	r1, 8008ec2 <_realloc_r+0x16>
 8008eb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ebc:	4611      	mov	r1, r2
 8008ebe:	f7ff bdad 	b.w	8008a1c <_malloc_r>
 8008ec2:	b92a      	cbnz	r2, 8008ed0 <_realloc_r+0x24>
 8008ec4:	f7ff fd3e 	bl	8008944 <_free_r>
 8008ec8:	4625      	mov	r5, r4
 8008eca:	4628      	mov	r0, r5
 8008ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ed0:	f000 fc6a 	bl	80097a8 <_malloc_usable_size_r>
 8008ed4:	4284      	cmp	r4, r0
 8008ed6:	4607      	mov	r7, r0
 8008ed8:	d802      	bhi.n	8008ee0 <_realloc_r+0x34>
 8008eda:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008ede:	d812      	bhi.n	8008f06 <_realloc_r+0x5a>
 8008ee0:	4621      	mov	r1, r4
 8008ee2:	4640      	mov	r0, r8
 8008ee4:	f7ff fd9a 	bl	8008a1c <_malloc_r>
 8008ee8:	4605      	mov	r5, r0
 8008eea:	2800      	cmp	r0, #0
 8008eec:	d0ed      	beq.n	8008eca <_realloc_r+0x1e>
 8008eee:	42bc      	cmp	r4, r7
 8008ef0:	4622      	mov	r2, r4
 8008ef2:	4631      	mov	r1, r6
 8008ef4:	bf28      	it	cs
 8008ef6:	463a      	movcs	r2, r7
 8008ef8:	f7ff f97c 	bl	80081f4 <memcpy>
 8008efc:	4631      	mov	r1, r6
 8008efe:	4640      	mov	r0, r8
 8008f00:	f7ff fd20 	bl	8008944 <_free_r>
 8008f04:	e7e1      	b.n	8008eca <_realloc_r+0x1e>
 8008f06:	4635      	mov	r5, r6
 8008f08:	e7df      	b.n	8008eca <_realloc_r+0x1e>

08008f0a <__sfputc_r>:
 8008f0a:	6893      	ldr	r3, [r2, #8]
 8008f0c:	3b01      	subs	r3, #1
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	b410      	push	{r4}
 8008f12:	6093      	str	r3, [r2, #8]
 8008f14:	da08      	bge.n	8008f28 <__sfputc_r+0x1e>
 8008f16:	6994      	ldr	r4, [r2, #24]
 8008f18:	42a3      	cmp	r3, r4
 8008f1a:	db01      	blt.n	8008f20 <__sfputc_r+0x16>
 8008f1c:	290a      	cmp	r1, #10
 8008f1e:	d103      	bne.n	8008f28 <__sfputc_r+0x1e>
 8008f20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f24:	f000 b94a 	b.w	80091bc <__swbuf_r>
 8008f28:	6813      	ldr	r3, [r2, #0]
 8008f2a:	1c58      	adds	r0, r3, #1
 8008f2c:	6010      	str	r0, [r2, #0]
 8008f2e:	7019      	strb	r1, [r3, #0]
 8008f30:	4608      	mov	r0, r1
 8008f32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f36:	4770      	bx	lr

08008f38 <__sfputs_r>:
 8008f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f3a:	4606      	mov	r6, r0
 8008f3c:	460f      	mov	r7, r1
 8008f3e:	4614      	mov	r4, r2
 8008f40:	18d5      	adds	r5, r2, r3
 8008f42:	42ac      	cmp	r4, r5
 8008f44:	d101      	bne.n	8008f4a <__sfputs_r+0x12>
 8008f46:	2000      	movs	r0, #0
 8008f48:	e007      	b.n	8008f5a <__sfputs_r+0x22>
 8008f4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f4e:	463a      	mov	r2, r7
 8008f50:	4630      	mov	r0, r6
 8008f52:	f7ff ffda 	bl	8008f0a <__sfputc_r>
 8008f56:	1c43      	adds	r3, r0, #1
 8008f58:	d1f3      	bne.n	8008f42 <__sfputs_r+0xa>
 8008f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008f5c <_vfiprintf_r>:
 8008f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f60:	460d      	mov	r5, r1
 8008f62:	b09d      	sub	sp, #116	; 0x74
 8008f64:	4614      	mov	r4, r2
 8008f66:	4698      	mov	r8, r3
 8008f68:	4606      	mov	r6, r0
 8008f6a:	b118      	cbz	r0, 8008f74 <_vfiprintf_r+0x18>
 8008f6c:	6983      	ldr	r3, [r0, #24]
 8008f6e:	b90b      	cbnz	r3, 8008f74 <_vfiprintf_r+0x18>
 8008f70:	f000 fb14 	bl	800959c <__sinit>
 8008f74:	4b89      	ldr	r3, [pc, #548]	; (800919c <_vfiprintf_r+0x240>)
 8008f76:	429d      	cmp	r5, r3
 8008f78:	d11b      	bne.n	8008fb2 <_vfiprintf_r+0x56>
 8008f7a:	6875      	ldr	r5, [r6, #4]
 8008f7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f7e:	07d9      	lsls	r1, r3, #31
 8008f80:	d405      	bmi.n	8008f8e <_vfiprintf_r+0x32>
 8008f82:	89ab      	ldrh	r3, [r5, #12]
 8008f84:	059a      	lsls	r2, r3, #22
 8008f86:	d402      	bmi.n	8008f8e <_vfiprintf_r+0x32>
 8008f88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f8a:	f000 fba5 	bl	80096d8 <__retarget_lock_acquire_recursive>
 8008f8e:	89ab      	ldrh	r3, [r5, #12]
 8008f90:	071b      	lsls	r3, r3, #28
 8008f92:	d501      	bpl.n	8008f98 <_vfiprintf_r+0x3c>
 8008f94:	692b      	ldr	r3, [r5, #16]
 8008f96:	b9eb      	cbnz	r3, 8008fd4 <_vfiprintf_r+0x78>
 8008f98:	4629      	mov	r1, r5
 8008f9a:	4630      	mov	r0, r6
 8008f9c:	f000 f96e 	bl	800927c <__swsetup_r>
 8008fa0:	b1c0      	cbz	r0, 8008fd4 <_vfiprintf_r+0x78>
 8008fa2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fa4:	07dc      	lsls	r4, r3, #31
 8008fa6:	d50e      	bpl.n	8008fc6 <_vfiprintf_r+0x6a>
 8008fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fac:	b01d      	add	sp, #116	; 0x74
 8008fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fb2:	4b7b      	ldr	r3, [pc, #492]	; (80091a0 <_vfiprintf_r+0x244>)
 8008fb4:	429d      	cmp	r5, r3
 8008fb6:	d101      	bne.n	8008fbc <_vfiprintf_r+0x60>
 8008fb8:	68b5      	ldr	r5, [r6, #8]
 8008fba:	e7df      	b.n	8008f7c <_vfiprintf_r+0x20>
 8008fbc:	4b79      	ldr	r3, [pc, #484]	; (80091a4 <_vfiprintf_r+0x248>)
 8008fbe:	429d      	cmp	r5, r3
 8008fc0:	bf08      	it	eq
 8008fc2:	68f5      	ldreq	r5, [r6, #12]
 8008fc4:	e7da      	b.n	8008f7c <_vfiprintf_r+0x20>
 8008fc6:	89ab      	ldrh	r3, [r5, #12]
 8008fc8:	0598      	lsls	r0, r3, #22
 8008fca:	d4ed      	bmi.n	8008fa8 <_vfiprintf_r+0x4c>
 8008fcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fce:	f000 fb84 	bl	80096da <__retarget_lock_release_recursive>
 8008fd2:	e7e9      	b.n	8008fa8 <_vfiprintf_r+0x4c>
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	9309      	str	r3, [sp, #36]	; 0x24
 8008fd8:	2320      	movs	r3, #32
 8008fda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008fde:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fe2:	2330      	movs	r3, #48	; 0x30
 8008fe4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80091a8 <_vfiprintf_r+0x24c>
 8008fe8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008fec:	f04f 0901 	mov.w	r9, #1
 8008ff0:	4623      	mov	r3, r4
 8008ff2:	469a      	mov	sl, r3
 8008ff4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ff8:	b10a      	cbz	r2, 8008ffe <_vfiprintf_r+0xa2>
 8008ffa:	2a25      	cmp	r2, #37	; 0x25
 8008ffc:	d1f9      	bne.n	8008ff2 <_vfiprintf_r+0x96>
 8008ffe:	ebba 0b04 	subs.w	fp, sl, r4
 8009002:	d00b      	beq.n	800901c <_vfiprintf_r+0xc0>
 8009004:	465b      	mov	r3, fp
 8009006:	4622      	mov	r2, r4
 8009008:	4629      	mov	r1, r5
 800900a:	4630      	mov	r0, r6
 800900c:	f7ff ff94 	bl	8008f38 <__sfputs_r>
 8009010:	3001      	adds	r0, #1
 8009012:	f000 80aa 	beq.w	800916a <_vfiprintf_r+0x20e>
 8009016:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009018:	445a      	add	r2, fp
 800901a:	9209      	str	r2, [sp, #36]	; 0x24
 800901c:	f89a 3000 	ldrb.w	r3, [sl]
 8009020:	2b00      	cmp	r3, #0
 8009022:	f000 80a2 	beq.w	800916a <_vfiprintf_r+0x20e>
 8009026:	2300      	movs	r3, #0
 8009028:	f04f 32ff 	mov.w	r2, #4294967295
 800902c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009030:	f10a 0a01 	add.w	sl, sl, #1
 8009034:	9304      	str	r3, [sp, #16]
 8009036:	9307      	str	r3, [sp, #28]
 8009038:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800903c:	931a      	str	r3, [sp, #104]	; 0x68
 800903e:	4654      	mov	r4, sl
 8009040:	2205      	movs	r2, #5
 8009042:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009046:	4858      	ldr	r0, [pc, #352]	; (80091a8 <_vfiprintf_r+0x24c>)
 8009048:	f7f7 f8ca 	bl	80001e0 <memchr>
 800904c:	9a04      	ldr	r2, [sp, #16]
 800904e:	b9d8      	cbnz	r0, 8009088 <_vfiprintf_r+0x12c>
 8009050:	06d1      	lsls	r1, r2, #27
 8009052:	bf44      	itt	mi
 8009054:	2320      	movmi	r3, #32
 8009056:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800905a:	0713      	lsls	r3, r2, #28
 800905c:	bf44      	itt	mi
 800905e:	232b      	movmi	r3, #43	; 0x2b
 8009060:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009064:	f89a 3000 	ldrb.w	r3, [sl]
 8009068:	2b2a      	cmp	r3, #42	; 0x2a
 800906a:	d015      	beq.n	8009098 <_vfiprintf_r+0x13c>
 800906c:	9a07      	ldr	r2, [sp, #28]
 800906e:	4654      	mov	r4, sl
 8009070:	2000      	movs	r0, #0
 8009072:	f04f 0c0a 	mov.w	ip, #10
 8009076:	4621      	mov	r1, r4
 8009078:	f811 3b01 	ldrb.w	r3, [r1], #1
 800907c:	3b30      	subs	r3, #48	; 0x30
 800907e:	2b09      	cmp	r3, #9
 8009080:	d94e      	bls.n	8009120 <_vfiprintf_r+0x1c4>
 8009082:	b1b0      	cbz	r0, 80090b2 <_vfiprintf_r+0x156>
 8009084:	9207      	str	r2, [sp, #28]
 8009086:	e014      	b.n	80090b2 <_vfiprintf_r+0x156>
 8009088:	eba0 0308 	sub.w	r3, r0, r8
 800908c:	fa09 f303 	lsl.w	r3, r9, r3
 8009090:	4313      	orrs	r3, r2
 8009092:	9304      	str	r3, [sp, #16]
 8009094:	46a2      	mov	sl, r4
 8009096:	e7d2      	b.n	800903e <_vfiprintf_r+0xe2>
 8009098:	9b03      	ldr	r3, [sp, #12]
 800909a:	1d19      	adds	r1, r3, #4
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	9103      	str	r1, [sp, #12]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	bfbb      	ittet	lt
 80090a4:	425b      	neglt	r3, r3
 80090a6:	f042 0202 	orrlt.w	r2, r2, #2
 80090aa:	9307      	strge	r3, [sp, #28]
 80090ac:	9307      	strlt	r3, [sp, #28]
 80090ae:	bfb8      	it	lt
 80090b0:	9204      	strlt	r2, [sp, #16]
 80090b2:	7823      	ldrb	r3, [r4, #0]
 80090b4:	2b2e      	cmp	r3, #46	; 0x2e
 80090b6:	d10c      	bne.n	80090d2 <_vfiprintf_r+0x176>
 80090b8:	7863      	ldrb	r3, [r4, #1]
 80090ba:	2b2a      	cmp	r3, #42	; 0x2a
 80090bc:	d135      	bne.n	800912a <_vfiprintf_r+0x1ce>
 80090be:	9b03      	ldr	r3, [sp, #12]
 80090c0:	1d1a      	adds	r2, r3, #4
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	9203      	str	r2, [sp, #12]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	bfb8      	it	lt
 80090ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80090ce:	3402      	adds	r4, #2
 80090d0:	9305      	str	r3, [sp, #20]
 80090d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80091b8 <_vfiprintf_r+0x25c>
 80090d6:	7821      	ldrb	r1, [r4, #0]
 80090d8:	2203      	movs	r2, #3
 80090da:	4650      	mov	r0, sl
 80090dc:	f7f7 f880 	bl	80001e0 <memchr>
 80090e0:	b140      	cbz	r0, 80090f4 <_vfiprintf_r+0x198>
 80090e2:	2340      	movs	r3, #64	; 0x40
 80090e4:	eba0 000a 	sub.w	r0, r0, sl
 80090e8:	fa03 f000 	lsl.w	r0, r3, r0
 80090ec:	9b04      	ldr	r3, [sp, #16]
 80090ee:	4303      	orrs	r3, r0
 80090f0:	3401      	adds	r4, #1
 80090f2:	9304      	str	r3, [sp, #16]
 80090f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090f8:	482c      	ldr	r0, [pc, #176]	; (80091ac <_vfiprintf_r+0x250>)
 80090fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090fe:	2206      	movs	r2, #6
 8009100:	f7f7 f86e 	bl	80001e0 <memchr>
 8009104:	2800      	cmp	r0, #0
 8009106:	d03f      	beq.n	8009188 <_vfiprintf_r+0x22c>
 8009108:	4b29      	ldr	r3, [pc, #164]	; (80091b0 <_vfiprintf_r+0x254>)
 800910a:	bb1b      	cbnz	r3, 8009154 <_vfiprintf_r+0x1f8>
 800910c:	9b03      	ldr	r3, [sp, #12]
 800910e:	3307      	adds	r3, #7
 8009110:	f023 0307 	bic.w	r3, r3, #7
 8009114:	3308      	adds	r3, #8
 8009116:	9303      	str	r3, [sp, #12]
 8009118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800911a:	443b      	add	r3, r7
 800911c:	9309      	str	r3, [sp, #36]	; 0x24
 800911e:	e767      	b.n	8008ff0 <_vfiprintf_r+0x94>
 8009120:	fb0c 3202 	mla	r2, ip, r2, r3
 8009124:	460c      	mov	r4, r1
 8009126:	2001      	movs	r0, #1
 8009128:	e7a5      	b.n	8009076 <_vfiprintf_r+0x11a>
 800912a:	2300      	movs	r3, #0
 800912c:	3401      	adds	r4, #1
 800912e:	9305      	str	r3, [sp, #20]
 8009130:	4619      	mov	r1, r3
 8009132:	f04f 0c0a 	mov.w	ip, #10
 8009136:	4620      	mov	r0, r4
 8009138:	f810 2b01 	ldrb.w	r2, [r0], #1
 800913c:	3a30      	subs	r2, #48	; 0x30
 800913e:	2a09      	cmp	r2, #9
 8009140:	d903      	bls.n	800914a <_vfiprintf_r+0x1ee>
 8009142:	2b00      	cmp	r3, #0
 8009144:	d0c5      	beq.n	80090d2 <_vfiprintf_r+0x176>
 8009146:	9105      	str	r1, [sp, #20]
 8009148:	e7c3      	b.n	80090d2 <_vfiprintf_r+0x176>
 800914a:	fb0c 2101 	mla	r1, ip, r1, r2
 800914e:	4604      	mov	r4, r0
 8009150:	2301      	movs	r3, #1
 8009152:	e7f0      	b.n	8009136 <_vfiprintf_r+0x1da>
 8009154:	ab03      	add	r3, sp, #12
 8009156:	9300      	str	r3, [sp, #0]
 8009158:	462a      	mov	r2, r5
 800915a:	4b16      	ldr	r3, [pc, #88]	; (80091b4 <_vfiprintf_r+0x258>)
 800915c:	a904      	add	r1, sp, #16
 800915e:	4630      	mov	r0, r6
 8009160:	f7fd fdc2 	bl	8006ce8 <_printf_float>
 8009164:	4607      	mov	r7, r0
 8009166:	1c78      	adds	r0, r7, #1
 8009168:	d1d6      	bne.n	8009118 <_vfiprintf_r+0x1bc>
 800916a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800916c:	07d9      	lsls	r1, r3, #31
 800916e:	d405      	bmi.n	800917c <_vfiprintf_r+0x220>
 8009170:	89ab      	ldrh	r3, [r5, #12]
 8009172:	059a      	lsls	r2, r3, #22
 8009174:	d402      	bmi.n	800917c <_vfiprintf_r+0x220>
 8009176:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009178:	f000 faaf 	bl	80096da <__retarget_lock_release_recursive>
 800917c:	89ab      	ldrh	r3, [r5, #12]
 800917e:	065b      	lsls	r3, r3, #25
 8009180:	f53f af12 	bmi.w	8008fa8 <_vfiprintf_r+0x4c>
 8009184:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009186:	e711      	b.n	8008fac <_vfiprintf_r+0x50>
 8009188:	ab03      	add	r3, sp, #12
 800918a:	9300      	str	r3, [sp, #0]
 800918c:	462a      	mov	r2, r5
 800918e:	4b09      	ldr	r3, [pc, #36]	; (80091b4 <_vfiprintf_r+0x258>)
 8009190:	a904      	add	r1, sp, #16
 8009192:	4630      	mov	r0, r6
 8009194:	f7fe f84c 	bl	8007230 <_printf_i>
 8009198:	e7e4      	b.n	8009164 <_vfiprintf_r+0x208>
 800919a:	bf00      	nop
 800919c:	08009f4c 	.word	0x08009f4c
 80091a0:	08009f6c 	.word	0x08009f6c
 80091a4:	08009f2c 	.word	0x08009f2c
 80091a8:	08009dd4 	.word	0x08009dd4
 80091ac:	08009dde 	.word	0x08009dde
 80091b0:	08006ce9 	.word	0x08006ce9
 80091b4:	08008f39 	.word	0x08008f39
 80091b8:	08009dda 	.word	0x08009dda

080091bc <__swbuf_r>:
 80091bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091be:	460e      	mov	r6, r1
 80091c0:	4614      	mov	r4, r2
 80091c2:	4605      	mov	r5, r0
 80091c4:	b118      	cbz	r0, 80091ce <__swbuf_r+0x12>
 80091c6:	6983      	ldr	r3, [r0, #24]
 80091c8:	b90b      	cbnz	r3, 80091ce <__swbuf_r+0x12>
 80091ca:	f000 f9e7 	bl	800959c <__sinit>
 80091ce:	4b21      	ldr	r3, [pc, #132]	; (8009254 <__swbuf_r+0x98>)
 80091d0:	429c      	cmp	r4, r3
 80091d2:	d12b      	bne.n	800922c <__swbuf_r+0x70>
 80091d4:	686c      	ldr	r4, [r5, #4]
 80091d6:	69a3      	ldr	r3, [r4, #24]
 80091d8:	60a3      	str	r3, [r4, #8]
 80091da:	89a3      	ldrh	r3, [r4, #12]
 80091dc:	071a      	lsls	r2, r3, #28
 80091de:	d52f      	bpl.n	8009240 <__swbuf_r+0x84>
 80091e0:	6923      	ldr	r3, [r4, #16]
 80091e2:	b36b      	cbz	r3, 8009240 <__swbuf_r+0x84>
 80091e4:	6923      	ldr	r3, [r4, #16]
 80091e6:	6820      	ldr	r0, [r4, #0]
 80091e8:	1ac0      	subs	r0, r0, r3
 80091ea:	6963      	ldr	r3, [r4, #20]
 80091ec:	b2f6      	uxtb	r6, r6
 80091ee:	4283      	cmp	r3, r0
 80091f0:	4637      	mov	r7, r6
 80091f2:	dc04      	bgt.n	80091fe <__swbuf_r+0x42>
 80091f4:	4621      	mov	r1, r4
 80091f6:	4628      	mov	r0, r5
 80091f8:	f000 f93c 	bl	8009474 <_fflush_r>
 80091fc:	bb30      	cbnz	r0, 800924c <__swbuf_r+0x90>
 80091fe:	68a3      	ldr	r3, [r4, #8]
 8009200:	3b01      	subs	r3, #1
 8009202:	60a3      	str	r3, [r4, #8]
 8009204:	6823      	ldr	r3, [r4, #0]
 8009206:	1c5a      	adds	r2, r3, #1
 8009208:	6022      	str	r2, [r4, #0]
 800920a:	701e      	strb	r6, [r3, #0]
 800920c:	6963      	ldr	r3, [r4, #20]
 800920e:	3001      	adds	r0, #1
 8009210:	4283      	cmp	r3, r0
 8009212:	d004      	beq.n	800921e <__swbuf_r+0x62>
 8009214:	89a3      	ldrh	r3, [r4, #12]
 8009216:	07db      	lsls	r3, r3, #31
 8009218:	d506      	bpl.n	8009228 <__swbuf_r+0x6c>
 800921a:	2e0a      	cmp	r6, #10
 800921c:	d104      	bne.n	8009228 <__swbuf_r+0x6c>
 800921e:	4621      	mov	r1, r4
 8009220:	4628      	mov	r0, r5
 8009222:	f000 f927 	bl	8009474 <_fflush_r>
 8009226:	b988      	cbnz	r0, 800924c <__swbuf_r+0x90>
 8009228:	4638      	mov	r0, r7
 800922a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800922c:	4b0a      	ldr	r3, [pc, #40]	; (8009258 <__swbuf_r+0x9c>)
 800922e:	429c      	cmp	r4, r3
 8009230:	d101      	bne.n	8009236 <__swbuf_r+0x7a>
 8009232:	68ac      	ldr	r4, [r5, #8]
 8009234:	e7cf      	b.n	80091d6 <__swbuf_r+0x1a>
 8009236:	4b09      	ldr	r3, [pc, #36]	; (800925c <__swbuf_r+0xa0>)
 8009238:	429c      	cmp	r4, r3
 800923a:	bf08      	it	eq
 800923c:	68ec      	ldreq	r4, [r5, #12]
 800923e:	e7ca      	b.n	80091d6 <__swbuf_r+0x1a>
 8009240:	4621      	mov	r1, r4
 8009242:	4628      	mov	r0, r5
 8009244:	f000 f81a 	bl	800927c <__swsetup_r>
 8009248:	2800      	cmp	r0, #0
 800924a:	d0cb      	beq.n	80091e4 <__swbuf_r+0x28>
 800924c:	f04f 37ff 	mov.w	r7, #4294967295
 8009250:	e7ea      	b.n	8009228 <__swbuf_r+0x6c>
 8009252:	bf00      	nop
 8009254:	08009f4c 	.word	0x08009f4c
 8009258:	08009f6c 	.word	0x08009f6c
 800925c:	08009f2c 	.word	0x08009f2c

08009260 <__ascii_wctomb>:
 8009260:	b149      	cbz	r1, 8009276 <__ascii_wctomb+0x16>
 8009262:	2aff      	cmp	r2, #255	; 0xff
 8009264:	bf85      	ittet	hi
 8009266:	238a      	movhi	r3, #138	; 0x8a
 8009268:	6003      	strhi	r3, [r0, #0]
 800926a:	700a      	strbls	r2, [r1, #0]
 800926c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009270:	bf98      	it	ls
 8009272:	2001      	movls	r0, #1
 8009274:	4770      	bx	lr
 8009276:	4608      	mov	r0, r1
 8009278:	4770      	bx	lr
	...

0800927c <__swsetup_r>:
 800927c:	4b32      	ldr	r3, [pc, #200]	; (8009348 <__swsetup_r+0xcc>)
 800927e:	b570      	push	{r4, r5, r6, lr}
 8009280:	681d      	ldr	r5, [r3, #0]
 8009282:	4606      	mov	r6, r0
 8009284:	460c      	mov	r4, r1
 8009286:	b125      	cbz	r5, 8009292 <__swsetup_r+0x16>
 8009288:	69ab      	ldr	r3, [r5, #24]
 800928a:	b913      	cbnz	r3, 8009292 <__swsetup_r+0x16>
 800928c:	4628      	mov	r0, r5
 800928e:	f000 f985 	bl	800959c <__sinit>
 8009292:	4b2e      	ldr	r3, [pc, #184]	; (800934c <__swsetup_r+0xd0>)
 8009294:	429c      	cmp	r4, r3
 8009296:	d10f      	bne.n	80092b8 <__swsetup_r+0x3c>
 8009298:	686c      	ldr	r4, [r5, #4]
 800929a:	89a3      	ldrh	r3, [r4, #12]
 800929c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80092a0:	0719      	lsls	r1, r3, #28
 80092a2:	d42c      	bmi.n	80092fe <__swsetup_r+0x82>
 80092a4:	06dd      	lsls	r5, r3, #27
 80092a6:	d411      	bmi.n	80092cc <__swsetup_r+0x50>
 80092a8:	2309      	movs	r3, #9
 80092aa:	6033      	str	r3, [r6, #0]
 80092ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80092b0:	81a3      	strh	r3, [r4, #12]
 80092b2:	f04f 30ff 	mov.w	r0, #4294967295
 80092b6:	e03e      	b.n	8009336 <__swsetup_r+0xba>
 80092b8:	4b25      	ldr	r3, [pc, #148]	; (8009350 <__swsetup_r+0xd4>)
 80092ba:	429c      	cmp	r4, r3
 80092bc:	d101      	bne.n	80092c2 <__swsetup_r+0x46>
 80092be:	68ac      	ldr	r4, [r5, #8]
 80092c0:	e7eb      	b.n	800929a <__swsetup_r+0x1e>
 80092c2:	4b24      	ldr	r3, [pc, #144]	; (8009354 <__swsetup_r+0xd8>)
 80092c4:	429c      	cmp	r4, r3
 80092c6:	bf08      	it	eq
 80092c8:	68ec      	ldreq	r4, [r5, #12]
 80092ca:	e7e6      	b.n	800929a <__swsetup_r+0x1e>
 80092cc:	0758      	lsls	r0, r3, #29
 80092ce:	d512      	bpl.n	80092f6 <__swsetup_r+0x7a>
 80092d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80092d2:	b141      	cbz	r1, 80092e6 <__swsetup_r+0x6a>
 80092d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092d8:	4299      	cmp	r1, r3
 80092da:	d002      	beq.n	80092e2 <__swsetup_r+0x66>
 80092dc:	4630      	mov	r0, r6
 80092de:	f7ff fb31 	bl	8008944 <_free_r>
 80092e2:	2300      	movs	r3, #0
 80092e4:	6363      	str	r3, [r4, #52]	; 0x34
 80092e6:	89a3      	ldrh	r3, [r4, #12]
 80092e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80092ec:	81a3      	strh	r3, [r4, #12]
 80092ee:	2300      	movs	r3, #0
 80092f0:	6063      	str	r3, [r4, #4]
 80092f2:	6923      	ldr	r3, [r4, #16]
 80092f4:	6023      	str	r3, [r4, #0]
 80092f6:	89a3      	ldrh	r3, [r4, #12]
 80092f8:	f043 0308 	orr.w	r3, r3, #8
 80092fc:	81a3      	strh	r3, [r4, #12]
 80092fe:	6923      	ldr	r3, [r4, #16]
 8009300:	b94b      	cbnz	r3, 8009316 <__swsetup_r+0x9a>
 8009302:	89a3      	ldrh	r3, [r4, #12]
 8009304:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009308:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800930c:	d003      	beq.n	8009316 <__swsetup_r+0x9a>
 800930e:	4621      	mov	r1, r4
 8009310:	4630      	mov	r0, r6
 8009312:	f000 fa09 	bl	8009728 <__smakebuf_r>
 8009316:	89a0      	ldrh	r0, [r4, #12]
 8009318:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800931c:	f010 0301 	ands.w	r3, r0, #1
 8009320:	d00a      	beq.n	8009338 <__swsetup_r+0xbc>
 8009322:	2300      	movs	r3, #0
 8009324:	60a3      	str	r3, [r4, #8]
 8009326:	6963      	ldr	r3, [r4, #20]
 8009328:	425b      	negs	r3, r3
 800932a:	61a3      	str	r3, [r4, #24]
 800932c:	6923      	ldr	r3, [r4, #16]
 800932e:	b943      	cbnz	r3, 8009342 <__swsetup_r+0xc6>
 8009330:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009334:	d1ba      	bne.n	80092ac <__swsetup_r+0x30>
 8009336:	bd70      	pop	{r4, r5, r6, pc}
 8009338:	0781      	lsls	r1, r0, #30
 800933a:	bf58      	it	pl
 800933c:	6963      	ldrpl	r3, [r4, #20]
 800933e:	60a3      	str	r3, [r4, #8]
 8009340:	e7f4      	b.n	800932c <__swsetup_r+0xb0>
 8009342:	2000      	movs	r0, #0
 8009344:	e7f7      	b.n	8009336 <__swsetup_r+0xba>
 8009346:	bf00      	nop
 8009348:	20000030 	.word	0x20000030
 800934c:	08009f4c 	.word	0x08009f4c
 8009350:	08009f6c 	.word	0x08009f6c
 8009354:	08009f2c 	.word	0x08009f2c

08009358 <abort>:
 8009358:	b508      	push	{r3, lr}
 800935a:	2006      	movs	r0, #6
 800935c:	f000 fa54 	bl	8009808 <raise>
 8009360:	2001      	movs	r0, #1
 8009362:	f7fa faa9 	bl	80038b8 <_exit>
	...

08009368 <__sflush_r>:
 8009368:	898a      	ldrh	r2, [r1, #12]
 800936a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800936e:	4605      	mov	r5, r0
 8009370:	0710      	lsls	r0, r2, #28
 8009372:	460c      	mov	r4, r1
 8009374:	d458      	bmi.n	8009428 <__sflush_r+0xc0>
 8009376:	684b      	ldr	r3, [r1, #4]
 8009378:	2b00      	cmp	r3, #0
 800937a:	dc05      	bgt.n	8009388 <__sflush_r+0x20>
 800937c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800937e:	2b00      	cmp	r3, #0
 8009380:	dc02      	bgt.n	8009388 <__sflush_r+0x20>
 8009382:	2000      	movs	r0, #0
 8009384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009388:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800938a:	2e00      	cmp	r6, #0
 800938c:	d0f9      	beq.n	8009382 <__sflush_r+0x1a>
 800938e:	2300      	movs	r3, #0
 8009390:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009394:	682f      	ldr	r7, [r5, #0]
 8009396:	602b      	str	r3, [r5, #0]
 8009398:	d032      	beq.n	8009400 <__sflush_r+0x98>
 800939a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800939c:	89a3      	ldrh	r3, [r4, #12]
 800939e:	075a      	lsls	r2, r3, #29
 80093a0:	d505      	bpl.n	80093ae <__sflush_r+0x46>
 80093a2:	6863      	ldr	r3, [r4, #4]
 80093a4:	1ac0      	subs	r0, r0, r3
 80093a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80093a8:	b10b      	cbz	r3, 80093ae <__sflush_r+0x46>
 80093aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80093ac:	1ac0      	subs	r0, r0, r3
 80093ae:	2300      	movs	r3, #0
 80093b0:	4602      	mov	r2, r0
 80093b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80093b4:	6a21      	ldr	r1, [r4, #32]
 80093b6:	4628      	mov	r0, r5
 80093b8:	47b0      	blx	r6
 80093ba:	1c43      	adds	r3, r0, #1
 80093bc:	89a3      	ldrh	r3, [r4, #12]
 80093be:	d106      	bne.n	80093ce <__sflush_r+0x66>
 80093c0:	6829      	ldr	r1, [r5, #0]
 80093c2:	291d      	cmp	r1, #29
 80093c4:	d82c      	bhi.n	8009420 <__sflush_r+0xb8>
 80093c6:	4a2a      	ldr	r2, [pc, #168]	; (8009470 <__sflush_r+0x108>)
 80093c8:	40ca      	lsrs	r2, r1
 80093ca:	07d6      	lsls	r6, r2, #31
 80093cc:	d528      	bpl.n	8009420 <__sflush_r+0xb8>
 80093ce:	2200      	movs	r2, #0
 80093d0:	6062      	str	r2, [r4, #4]
 80093d2:	04d9      	lsls	r1, r3, #19
 80093d4:	6922      	ldr	r2, [r4, #16]
 80093d6:	6022      	str	r2, [r4, #0]
 80093d8:	d504      	bpl.n	80093e4 <__sflush_r+0x7c>
 80093da:	1c42      	adds	r2, r0, #1
 80093dc:	d101      	bne.n	80093e2 <__sflush_r+0x7a>
 80093de:	682b      	ldr	r3, [r5, #0]
 80093e0:	b903      	cbnz	r3, 80093e4 <__sflush_r+0x7c>
 80093e2:	6560      	str	r0, [r4, #84]	; 0x54
 80093e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093e6:	602f      	str	r7, [r5, #0]
 80093e8:	2900      	cmp	r1, #0
 80093ea:	d0ca      	beq.n	8009382 <__sflush_r+0x1a>
 80093ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093f0:	4299      	cmp	r1, r3
 80093f2:	d002      	beq.n	80093fa <__sflush_r+0x92>
 80093f4:	4628      	mov	r0, r5
 80093f6:	f7ff faa5 	bl	8008944 <_free_r>
 80093fa:	2000      	movs	r0, #0
 80093fc:	6360      	str	r0, [r4, #52]	; 0x34
 80093fe:	e7c1      	b.n	8009384 <__sflush_r+0x1c>
 8009400:	6a21      	ldr	r1, [r4, #32]
 8009402:	2301      	movs	r3, #1
 8009404:	4628      	mov	r0, r5
 8009406:	47b0      	blx	r6
 8009408:	1c41      	adds	r1, r0, #1
 800940a:	d1c7      	bne.n	800939c <__sflush_r+0x34>
 800940c:	682b      	ldr	r3, [r5, #0]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d0c4      	beq.n	800939c <__sflush_r+0x34>
 8009412:	2b1d      	cmp	r3, #29
 8009414:	d001      	beq.n	800941a <__sflush_r+0xb2>
 8009416:	2b16      	cmp	r3, #22
 8009418:	d101      	bne.n	800941e <__sflush_r+0xb6>
 800941a:	602f      	str	r7, [r5, #0]
 800941c:	e7b1      	b.n	8009382 <__sflush_r+0x1a>
 800941e:	89a3      	ldrh	r3, [r4, #12]
 8009420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009424:	81a3      	strh	r3, [r4, #12]
 8009426:	e7ad      	b.n	8009384 <__sflush_r+0x1c>
 8009428:	690f      	ldr	r7, [r1, #16]
 800942a:	2f00      	cmp	r7, #0
 800942c:	d0a9      	beq.n	8009382 <__sflush_r+0x1a>
 800942e:	0793      	lsls	r3, r2, #30
 8009430:	680e      	ldr	r6, [r1, #0]
 8009432:	bf08      	it	eq
 8009434:	694b      	ldreq	r3, [r1, #20]
 8009436:	600f      	str	r7, [r1, #0]
 8009438:	bf18      	it	ne
 800943a:	2300      	movne	r3, #0
 800943c:	eba6 0807 	sub.w	r8, r6, r7
 8009440:	608b      	str	r3, [r1, #8]
 8009442:	f1b8 0f00 	cmp.w	r8, #0
 8009446:	dd9c      	ble.n	8009382 <__sflush_r+0x1a>
 8009448:	6a21      	ldr	r1, [r4, #32]
 800944a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800944c:	4643      	mov	r3, r8
 800944e:	463a      	mov	r2, r7
 8009450:	4628      	mov	r0, r5
 8009452:	47b0      	blx	r6
 8009454:	2800      	cmp	r0, #0
 8009456:	dc06      	bgt.n	8009466 <__sflush_r+0xfe>
 8009458:	89a3      	ldrh	r3, [r4, #12]
 800945a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800945e:	81a3      	strh	r3, [r4, #12]
 8009460:	f04f 30ff 	mov.w	r0, #4294967295
 8009464:	e78e      	b.n	8009384 <__sflush_r+0x1c>
 8009466:	4407      	add	r7, r0
 8009468:	eba8 0800 	sub.w	r8, r8, r0
 800946c:	e7e9      	b.n	8009442 <__sflush_r+0xda>
 800946e:	bf00      	nop
 8009470:	20400001 	.word	0x20400001

08009474 <_fflush_r>:
 8009474:	b538      	push	{r3, r4, r5, lr}
 8009476:	690b      	ldr	r3, [r1, #16]
 8009478:	4605      	mov	r5, r0
 800947a:	460c      	mov	r4, r1
 800947c:	b913      	cbnz	r3, 8009484 <_fflush_r+0x10>
 800947e:	2500      	movs	r5, #0
 8009480:	4628      	mov	r0, r5
 8009482:	bd38      	pop	{r3, r4, r5, pc}
 8009484:	b118      	cbz	r0, 800948e <_fflush_r+0x1a>
 8009486:	6983      	ldr	r3, [r0, #24]
 8009488:	b90b      	cbnz	r3, 800948e <_fflush_r+0x1a>
 800948a:	f000 f887 	bl	800959c <__sinit>
 800948e:	4b14      	ldr	r3, [pc, #80]	; (80094e0 <_fflush_r+0x6c>)
 8009490:	429c      	cmp	r4, r3
 8009492:	d11b      	bne.n	80094cc <_fflush_r+0x58>
 8009494:	686c      	ldr	r4, [r5, #4]
 8009496:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d0ef      	beq.n	800947e <_fflush_r+0xa>
 800949e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80094a0:	07d0      	lsls	r0, r2, #31
 80094a2:	d404      	bmi.n	80094ae <_fflush_r+0x3a>
 80094a4:	0599      	lsls	r1, r3, #22
 80094a6:	d402      	bmi.n	80094ae <_fflush_r+0x3a>
 80094a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094aa:	f000 f915 	bl	80096d8 <__retarget_lock_acquire_recursive>
 80094ae:	4628      	mov	r0, r5
 80094b0:	4621      	mov	r1, r4
 80094b2:	f7ff ff59 	bl	8009368 <__sflush_r>
 80094b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80094b8:	07da      	lsls	r2, r3, #31
 80094ba:	4605      	mov	r5, r0
 80094bc:	d4e0      	bmi.n	8009480 <_fflush_r+0xc>
 80094be:	89a3      	ldrh	r3, [r4, #12]
 80094c0:	059b      	lsls	r3, r3, #22
 80094c2:	d4dd      	bmi.n	8009480 <_fflush_r+0xc>
 80094c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094c6:	f000 f908 	bl	80096da <__retarget_lock_release_recursive>
 80094ca:	e7d9      	b.n	8009480 <_fflush_r+0xc>
 80094cc:	4b05      	ldr	r3, [pc, #20]	; (80094e4 <_fflush_r+0x70>)
 80094ce:	429c      	cmp	r4, r3
 80094d0:	d101      	bne.n	80094d6 <_fflush_r+0x62>
 80094d2:	68ac      	ldr	r4, [r5, #8]
 80094d4:	e7df      	b.n	8009496 <_fflush_r+0x22>
 80094d6:	4b04      	ldr	r3, [pc, #16]	; (80094e8 <_fflush_r+0x74>)
 80094d8:	429c      	cmp	r4, r3
 80094da:	bf08      	it	eq
 80094dc:	68ec      	ldreq	r4, [r5, #12]
 80094de:	e7da      	b.n	8009496 <_fflush_r+0x22>
 80094e0:	08009f4c 	.word	0x08009f4c
 80094e4:	08009f6c 	.word	0x08009f6c
 80094e8:	08009f2c 	.word	0x08009f2c

080094ec <std>:
 80094ec:	2300      	movs	r3, #0
 80094ee:	b510      	push	{r4, lr}
 80094f0:	4604      	mov	r4, r0
 80094f2:	e9c0 3300 	strd	r3, r3, [r0]
 80094f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80094fa:	6083      	str	r3, [r0, #8]
 80094fc:	8181      	strh	r1, [r0, #12]
 80094fe:	6643      	str	r3, [r0, #100]	; 0x64
 8009500:	81c2      	strh	r2, [r0, #14]
 8009502:	6183      	str	r3, [r0, #24]
 8009504:	4619      	mov	r1, r3
 8009506:	2208      	movs	r2, #8
 8009508:	305c      	adds	r0, #92	; 0x5c
 800950a:	f7fd fb45 	bl	8006b98 <memset>
 800950e:	4b05      	ldr	r3, [pc, #20]	; (8009524 <std+0x38>)
 8009510:	6263      	str	r3, [r4, #36]	; 0x24
 8009512:	4b05      	ldr	r3, [pc, #20]	; (8009528 <std+0x3c>)
 8009514:	62a3      	str	r3, [r4, #40]	; 0x28
 8009516:	4b05      	ldr	r3, [pc, #20]	; (800952c <std+0x40>)
 8009518:	62e3      	str	r3, [r4, #44]	; 0x2c
 800951a:	4b05      	ldr	r3, [pc, #20]	; (8009530 <std+0x44>)
 800951c:	6224      	str	r4, [r4, #32]
 800951e:	6323      	str	r3, [r4, #48]	; 0x30
 8009520:	bd10      	pop	{r4, pc}
 8009522:	bf00      	nop
 8009524:	08009841 	.word	0x08009841
 8009528:	08009863 	.word	0x08009863
 800952c:	0800989b 	.word	0x0800989b
 8009530:	080098bf 	.word	0x080098bf

08009534 <_cleanup_r>:
 8009534:	4901      	ldr	r1, [pc, #4]	; (800953c <_cleanup_r+0x8>)
 8009536:	f000 b8af 	b.w	8009698 <_fwalk_reent>
 800953a:	bf00      	nop
 800953c:	08009475 	.word	0x08009475

08009540 <__sfmoreglue>:
 8009540:	b570      	push	{r4, r5, r6, lr}
 8009542:	2268      	movs	r2, #104	; 0x68
 8009544:	1e4d      	subs	r5, r1, #1
 8009546:	4355      	muls	r5, r2
 8009548:	460e      	mov	r6, r1
 800954a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800954e:	f7ff fa65 	bl	8008a1c <_malloc_r>
 8009552:	4604      	mov	r4, r0
 8009554:	b140      	cbz	r0, 8009568 <__sfmoreglue+0x28>
 8009556:	2100      	movs	r1, #0
 8009558:	e9c0 1600 	strd	r1, r6, [r0]
 800955c:	300c      	adds	r0, #12
 800955e:	60a0      	str	r0, [r4, #8]
 8009560:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009564:	f7fd fb18 	bl	8006b98 <memset>
 8009568:	4620      	mov	r0, r4
 800956a:	bd70      	pop	{r4, r5, r6, pc}

0800956c <__sfp_lock_acquire>:
 800956c:	4801      	ldr	r0, [pc, #4]	; (8009574 <__sfp_lock_acquire+0x8>)
 800956e:	f000 b8b3 	b.w	80096d8 <__retarget_lock_acquire_recursive>
 8009572:	bf00      	nop
 8009574:	200002cd 	.word	0x200002cd

08009578 <__sfp_lock_release>:
 8009578:	4801      	ldr	r0, [pc, #4]	; (8009580 <__sfp_lock_release+0x8>)
 800957a:	f000 b8ae 	b.w	80096da <__retarget_lock_release_recursive>
 800957e:	bf00      	nop
 8009580:	200002cd 	.word	0x200002cd

08009584 <__sinit_lock_acquire>:
 8009584:	4801      	ldr	r0, [pc, #4]	; (800958c <__sinit_lock_acquire+0x8>)
 8009586:	f000 b8a7 	b.w	80096d8 <__retarget_lock_acquire_recursive>
 800958a:	bf00      	nop
 800958c:	200002ce 	.word	0x200002ce

08009590 <__sinit_lock_release>:
 8009590:	4801      	ldr	r0, [pc, #4]	; (8009598 <__sinit_lock_release+0x8>)
 8009592:	f000 b8a2 	b.w	80096da <__retarget_lock_release_recursive>
 8009596:	bf00      	nop
 8009598:	200002ce 	.word	0x200002ce

0800959c <__sinit>:
 800959c:	b510      	push	{r4, lr}
 800959e:	4604      	mov	r4, r0
 80095a0:	f7ff fff0 	bl	8009584 <__sinit_lock_acquire>
 80095a4:	69a3      	ldr	r3, [r4, #24]
 80095a6:	b11b      	cbz	r3, 80095b0 <__sinit+0x14>
 80095a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095ac:	f7ff bff0 	b.w	8009590 <__sinit_lock_release>
 80095b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80095b4:	6523      	str	r3, [r4, #80]	; 0x50
 80095b6:	4b13      	ldr	r3, [pc, #76]	; (8009604 <__sinit+0x68>)
 80095b8:	4a13      	ldr	r2, [pc, #76]	; (8009608 <__sinit+0x6c>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80095be:	42a3      	cmp	r3, r4
 80095c0:	bf04      	itt	eq
 80095c2:	2301      	moveq	r3, #1
 80095c4:	61a3      	streq	r3, [r4, #24]
 80095c6:	4620      	mov	r0, r4
 80095c8:	f000 f820 	bl	800960c <__sfp>
 80095cc:	6060      	str	r0, [r4, #4]
 80095ce:	4620      	mov	r0, r4
 80095d0:	f000 f81c 	bl	800960c <__sfp>
 80095d4:	60a0      	str	r0, [r4, #8]
 80095d6:	4620      	mov	r0, r4
 80095d8:	f000 f818 	bl	800960c <__sfp>
 80095dc:	2200      	movs	r2, #0
 80095de:	60e0      	str	r0, [r4, #12]
 80095e0:	2104      	movs	r1, #4
 80095e2:	6860      	ldr	r0, [r4, #4]
 80095e4:	f7ff ff82 	bl	80094ec <std>
 80095e8:	68a0      	ldr	r0, [r4, #8]
 80095ea:	2201      	movs	r2, #1
 80095ec:	2109      	movs	r1, #9
 80095ee:	f7ff ff7d 	bl	80094ec <std>
 80095f2:	68e0      	ldr	r0, [r4, #12]
 80095f4:	2202      	movs	r2, #2
 80095f6:	2112      	movs	r1, #18
 80095f8:	f7ff ff78 	bl	80094ec <std>
 80095fc:	2301      	movs	r3, #1
 80095fe:	61a3      	str	r3, [r4, #24]
 8009600:	e7d2      	b.n	80095a8 <__sinit+0xc>
 8009602:	bf00      	nop
 8009604:	08009bb4 	.word	0x08009bb4
 8009608:	08009535 	.word	0x08009535

0800960c <__sfp>:
 800960c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800960e:	4607      	mov	r7, r0
 8009610:	f7ff ffac 	bl	800956c <__sfp_lock_acquire>
 8009614:	4b1e      	ldr	r3, [pc, #120]	; (8009690 <__sfp+0x84>)
 8009616:	681e      	ldr	r6, [r3, #0]
 8009618:	69b3      	ldr	r3, [r6, #24]
 800961a:	b913      	cbnz	r3, 8009622 <__sfp+0x16>
 800961c:	4630      	mov	r0, r6
 800961e:	f7ff ffbd 	bl	800959c <__sinit>
 8009622:	3648      	adds	r6, #72	; 0x48
 8009624:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009628:	3b01      	subs	r3, #1
 800962a:	d503      	bpl.n	8009634 <__sfp+0x28>
 800962c:	6833      	ldr	r3, [r6, #0]
 800962e:	b30b      	cbz	r3, 8009674 <__sfp+0x68>
 8009630:	6836      	ldr	r6, [r6, #0]
 8009632:	e7f7      	b.n	8009624 <__sfp+0x18>
 8009634:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009638:	b9d5      	cbnz	r5, 8009670 <__sfp+0x64>
 800963a:	4b16      	ldr	r3, [pc, #88]	; (8009694 <__sfp+0x88>)
 800963c:	60e3      	str	r3, [r4, #12]
 800963e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009642:	6665      	str	r5, [r4, #100]	; 0x64
 8009644:	f000 f847 	bl	80096d6 <__retarget_lock_init_recursive>
 8009648:	f7ff ff96 	bl	8009578 <__sfp_lock_release>
 800964c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009650:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009654:	6025      	str	r5, [r4, #0]
 8009656:	61a5      	str	r5, [r4, #24]
 8009658:	2208      	movs	r2, #8
 800965a:	4629      	mov	r1, r5
 800965c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009660:	f7fd fa9a 	bl	8006b98 <memset>
 8009664:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009668:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800966c:	4620      	mov	r0, r4
 800966e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009670:	3468      	adds	r4, #104	; 0x68
 8009672:	e7d9      	b.n	8009628 <__sfp+0x1c>
 8009674:	2104      	movs	r1, #4
 8009676:	4638      	mov	r0, r7
 8009678:	f7ff ff62 	bl	8009540 <__sfmoreglue>
 800967c:	4604      	mov	r4, r0
 800967e:	6030      	str	r0, [r6, #0]
 8009680:	2800      	cmp	r0, #0
 8009682:	d1d5      	bne.n	8009630 <__sfp+0x24>
 8009684:	f7ff ff78 	bl	8009578 <__sfp_lock_release>
 8009688:	230c      	movs	r3, #12
 800968a:	603b      	str	r3, [r7, #0]
 800968c:	e7ee      	b.n	800966c <__sfp+0x60>
 800968e:	bf00      	nop
 8009690:	08009bb4 	.word	0x08009bb4
 8009694:	ffff0001 	.word	0xffff0001

08009698 <_fwalk_reent>:
 8009698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800969c:	4606      	mov	r6, r0
 800969e:	4688      	mov	r8, r1
 80096a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80096a4:	2700      	movs	r7, #0
 80096a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80096aa:	f1b9 0901 	subs.w	r9, r9, #1
 80096ae:	d505      	bpl.n	80096bc <_fwalk_reent+0x24>
 80096b0:	6824      	ldr	r4, [r4, #0]
 80096b2:	2c00      	cmp	r4, #0
 80096b4:	d1f7      	bne.n	80096a6 <_fwalk_reent+0xe>
 80096b6:	4638      	mov	r0, r7
 80096b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096bc:	89ab      	ldrh	r3, [r5, #12]
 80096be:	2b01      	cmp	r3, #1
 80096c0:	d907      	bls.n	80096d2 <_fwalk_reent+0x3a>
 80096c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80096c6:	3301      	adds	r3, #1
 80096c8:	d003      	beq.n	80096d2 <_fwalk_reent+0x3a>
 80096ca:	4629      	mov	r1, r5
 80096cc:	4630      	mov	r0, r6
 80096ce:	47c0      	blx	r8
 80096d0:	4307      	orrs	r7, r0
 80096d2:	3568      	adds	r5, #104	; 0x68
 80096d4:	e7e9      	b.n	80096aa <_fwalk_reent+0x12>

080096d6 <__retarget_lock_init_recursive>:
 80096d6:	4770      	bx	lr

080096d8 <__retarget_lock_acquire_recursive>:
 80096d8:	4770      	bx	lr

080096da <__retarget_lock_release_recursive>:
 80096da:	4770      	bx	lr

080096dc <__swhatbuf_r>:
 80096dc:	b570      	push	{r4, r5, r6, lr}
 80096de:	460e      	mov	r6, r1
 80096e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096e4:	2900      	cmp	r1, #0
 80096e6:	b096      	sub	sp, #88	; 0x58
 80096e8:	4614      	mov	r4, r2
 80096ea:	461d      	mov	r5, r3
 80096ec:	da08      	bge.n	8009700 <__swhatbuf_r+0x24>
 80096ee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80096f2:	2200      	movs	r2, #0
 80096f4:	602a      	str	r2, [r5, #0]
 80096f6:	061a      	lsls	r2, r3, #24
 80096f8:	d410      	bmi.n	800971c <__swhatbuf_r+0x40>
 80096fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096fe:	e00e      	b.n	800971e <__swhatbuf_r+0x42>
 8009700:	466a      	mov	r2, sp
 8009702:	f000 f903 	bl	800990c <_fstat_r>
 8009706:	2800      	cmp	r0, #0
 8009708:	dbf1      	blt.n	80096ee <__swhatbuf_r+0x12>
 800970a:	9a01      	ldr	r2, [sp, #4]
 800970c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009710:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009714:	425a      	negs	r2, r3
 8009716:	415a      	adcs	r2, r3
 8009718:	602a      	str	r2, [r5, #0]
 800971a:	e7ee      	b.n	80096fa <__swhatbuf_r+0x1e>
 800971c:	2340      	movs	r3, #64	; 0x40
 800971e:	2000      	movs	r0, #0
 8009720:	6023      	str	r3, [r4, #0]
 8009722:	b016      	add	sp, #88	; 0x58
 8009724:	bd70      	pop	{r4, r5, r6, pc}
	...

08009728 <__smakebuf_r>:
 8009728:	898b      	ldrh	r3, [r1, #12]
 800972a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800972c:	079d      	lsls	r5, r3, #30
 800972e:	4606      	mov	r6, r0
 8009730:	460c      	mov	r4, r1
 8009732:	d507      	bpl.n	8009744 <__smakebuf_r+0x1c>
 8009734:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009738:	6023      	str	r3, [r4, #0]
 800973a:	6123      	str	r3, [r4, #16]
 800973c:	2301      	movs	r3, #1
 800973e:	6163      	str	r3, [r4, #20]
 8009740:	b002      	add	sp, #8
 8009742:	bd70      	pop	{r4, r5, r6, pc}
 8009744:	ab01      	add	r3, sp, #4
 8009746:	466a      	mov	r2, sp
 8009748:	f7ff ffc8 	bl	80096dc <__swhatbuf_r>
 800974c:	9900      	ldr	r1, [sp, #0]
 800974e:	4605      	mov	r5, r0
 8009750:	4630      	mov	r0, r6
 8009752:	f7ff f963 	bl	8008a1c <_malloc_r>
 8009756:	b948      	cbnz	r0, 800976c <__smakebuf_r+0x44>
 8009758:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800975c:	059a      	lsls	r2, r3, #22
 800975e:	d4ef      	bmi.n	8009740 <__smakebuf_r+0x18>
 8009760:	f023 0303 	bic.w	r3, r3, #3
 8009764:	f043 0302 	orr.w	r3, r3, #2
 8009768:	81a3      	strh	r3, [r4, #12]
 800976a:	e7e3      	b.n	8009734 <__smakebuf_r+0xc>
 800976c:	4b0d      	ldr	r3, [pc, #52]	; (80097a4 <__smakebuf_r+0x7c>)
 800976e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009770:	89a3      	ldrh	r3, [r4, #12]
 8009772:	6020      	str	r0, [r4, #0]
 8009774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009778:	81a3      	strh	r3, [r4, #12]
 800977a:	9b00      	ldr	r3, [sp, #0]
 800977c:	6163      	str	r3, [r4, #20]
 800977e:	9b01      	ldr	r3, [sp, #4]
 8009780:	6120      	str	r0, [r4, #16]
 8009782:	b15b      	cbz	r3, 800979c <__smakebuf_r+0x74>
 8009784:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009788:	4630      	mov	r0, r6
 800978a:	f000 f8d1 	bl	8009930 <_isatty_r>
 800978e:	b128      	cbz	r0, 800979c <__smakebuf_r+0x74>
 8009790:	89a3      	ldrh	r3, [r4, #12]
 8009792:	f023 0303 	bic.w	r3, r3, #3
 8009796:	f043 0301 	orr.w	r3, r3, #1
 800979a:	81a3      	strh	r3, [r4, #12]
 800979c:	89a0      	ldrh	r0, [r4, #12]
 800979e:	4305      	orrs	r5, r0
 80097a0:	81a5      	strh	r5, [r4, #12]
 80097a2:	e7cd      	b.n	8009740 <__smakebuf_r+0x18>
 80097a4:	08009535 	.word	0x08009535

080097a8 <_malloc_usable_size_r>:
 80097a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097ac:	1f18      	subs	r0, r3, #4
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	bfbc      	itt	lt
 80097b2:	580b      	ldrlt	r3, [r1, r0]
 80097b4:	18c0      	addlt	r0, r0, r3
 80097b6:	4770      	bx	lr

080097b8 <_raise_r>:
 80097b8:	291f      	cmp	r1, #31
 80097ba:	b538      	push	{r3, r4, r5, lr}
 80097bc:	4604      	mov	r4, r0
 80097be:	460d      	mov	r5, r1
 80097c0:	d904      	bls.n	80097cc <_raise_r+0x14>
 80097c2:	2316      	movs	r3, #22
 80097c4:	6003      	str	r3, [r0, #0]
 80097c6:	f04f 30ff 	mov.w	r0, #4294967295
 80097ca:	bd38      	pop	{r3, r4, r5, pc}
 80097cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80097ce:	b112      	cbz	r2, 80097d6 <_raise_r+0x1e>
 80097d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80097d4:	b94b      	cbnz	r3, 80097ea <_raise_r+0x32>
 80097d6:	4620      	mov	r0, r4
 80097d8:	f000 f830 	bl	800983c <_getpid_r>
 80097dc:	462a      	mov	r2, r5
 80097de:	4601      	mov	r1, r0
 80097e0:	4620      	mov	r0, r4
 80097e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097e6:	f000 b817 	b.w	8009818 <_kill_r>
 80097ea:	2b01      	cmp	r3, #1
 80097ec:	d00a      	beq.n	8009804 <_raise_r+0x4c>
 80097ee:	1c59      	adds	r1, r3, #1
 80097f0:	d103      	bne.n	80097fa <_raise_r+0x42>
 80097f2:	2316      	movs	r3, #22
 80097f4:	6003      	str	r3, [r0, #0]
 80097f6:	2001      	movs	r0, #1
 80097f8:	e7e7      	b.n	80097ca <_raise_r+0x12>
 80097fa:	2400      	movs	r4, #0
 80097fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009800:	4628      	mov	r0, r5
 8009802:	4798      	blx	r3
 8009804:	2000      	movs	r0, #0
 8009806:	e7e0      	b.n	80097ca <_raise_r+0x12>

08009808 <raise>:
 8009808:	4b02      	ldr	r3, [pc, #8]	; (8009814 <raise+0xc>)
 800980a:	4601      	mov	r1, r0
 800980c:	6818      	ldr	r0, [r3, #0]
 800980e:	f7ff bfd3 	b.w	80097b8 <_raise_r>
 8009812:	bf00      	nop
 8009814:	20000030 	.word	0x20000030

08009818 <_kill_r>:
 8009818:	b538      	push	{r3, r4, r5, lr}
 800981a:	4d07      	ldr	r5, [pc, #28]	; (8009838 <_kill_r+0x20>)
 800981c:	2300      	movs	r3, #0
 800981e:	4604      	mov	r4, r0
 8009820:	4608      	mov	r0, r1
 8009822:	4611      	mov	r1, r2
 8009824:	602b      	str	r3, [r5, #0]
 8009826:	f7fa f837 	bl	8003898 <_kill>
 800982a:	1c43      	adds	r3, r0, #1
 800982c:	d102      	bne.n	8009834 <_kill_r+0x1c>
 800982e:	682b      	ldr	r3, [r5, #0]
 8009830:	b103      	cbz	r3, 8009834 <_kill_r+0x1c>
 8009832:	6023      	str	r3, [r4, #0]
 8009834:	bd38      	pop	{r3, r4, r5, pc}
 8009836:	bf00      	nop
 8009838:	200002c8 	.word	0x200002c8

0800983c <_getpid_r>:
 800983c:	f7fa b824 	b.w	8003888 <_getpid>

08009840 <__sread>:
 8009840:	b510      	push	{r4, lr}
 8009842:	460c      	mov	r4, r1
 8009844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009848:	f000 f894 	bl	8009974 <_read_r>
 800984c:	2800      	cmp	r0, #0
 800984e:	bfab      	itete	ge
 8009850:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009852:	89a3      	ldrhlt	r3, [r4, #12]
 8009854:	181b      	addge	r3, r3, r0
 8009856:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800985a:	bfac      	ite	ge
 800985c:	6563      	strge	r3, [r4, #84]	; 0x54
 800985e:	81a3      	strhlt	r3, [r4, #12]
 8009860:	bd10      	pop	{r4, pc}

08009862 <__swrite>:
 8009862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009866:	461f      	mov	r7, r3
 8009868:	898b      	ldrh	r3, [r1, #12]
 800986a:	05db      	lsls	r3, r3, #23
 800986c:	4605      	mov	r5, r0
 800986e:	460c      	mov	r4, r1
 8009870:	4616      	mov	r6, r2
 8009872:	d505      	bpl.n	8009880 <__swrite+0x1e>
 8009874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009878:	2302      	movs	r3, #2
 800987a:	2200      	movs	r2, #0
 800987c:	f000 f868 	bl	8009950 <_lseek_r>
 8009880:	89a3      	ldrh	r3, [r4, #12]
 8009882:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009886:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800988a:	81a3      	strh	r3, [r4, #12]
 800988c:	4632      	mov	r2, r6
 800988e:	463b      	mov	r3, r7
 8009890:	4628      	mov	r0, r5
 8009892:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009896:	f000 b817 	b.w	80098c8 <_write_r>

0800989a <__sseek>:
 800989a:	b510      	push	{r4, lr}
 800989c:	460c      	mov	r4, r1
 800989e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098a2:	f000 f855 	bl	8009950 <_lseek_r>
 80098a6:	1c43      	adds	r3, r0, #1
 80098a8:	89a3      	ldrh	r3, [r4, #12]
 80098aa:	bf15      	itete	ne
 80098ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80098ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80098b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80098b6:	81a3      	strheq	r3, [r4, #12]
 80098b8:	bf18      	it	ne
 80098ba:	81a3      	strhne	r3, [r4, #12]
 80098bc:	bd10      	pop	{r4, pc}

080098be <__sclose>:
 80098be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098c2:	f000 b813 	b.w	80098ec <_close_r>
	...

080098c8 <_write_r>:
 80098c8:	b538      	push	{r3, r4, r5, lr}
 80098ca:	4d07      	ldr	r5, [pc, #28]	; (80098e8 <_write_r+0x20>)
 80098cc:	4604      	mov	r4, r0
 80098ce:	4608      	mov	r0, r1
 80098d0:	4611      	mov	r1, r2
 80098d2:	2200      	movs	r2, #0
 80098d4:	602a      	str	r2, [r5, #0]
 80098d6:	461a      	mov	r2, r3
 80098d8:	f7fa f815 	bl	8003906 <_write>
 80098dc:	1c43      	adds	r3, r0, #1
 80098de:	d102      	bne.n	80098e6 <_write_r+0x1e>
 80098e0:	682b      	ldr	r3, [r5, #0]
 80098e2:	b103      	cbz	r3, 80098e6 <_write_r+0x1e>
 80098e4:	6023      	str	r3, [r4, #0]
 80098e6:	bd38      	pop	{r3, r4, r5, pc}
 80098e8:	200002c8 	.word	0x200002c8

080098ec <_close_r>:
 80098ec:	b538      	push	{r3, r4, r5, lr}
 80098ee:	4d06      	ldr	r5, [pc, #24]	; (8009908 <_close_r+0x1c>)
 80098f0:	2300      	movs	r3, #0
 80098f2:	4604      	mov	r4, r0
 80098f4:	4608      	mov	r0, r1
 80098f6:	602b      	str	r3, [r5, #0]
 80098f8:	f7fa f821 	bl	800393e <_close>
 80098fc:	1c43      	adds	r3, r0, #1
 80098fe:	d102      	bne.n	8009906 <_close_r+0x1a>
 8009900:	682b      	ldr	r3, [r5, #0]
 8009902:	b103      	cbz	r3, 8009906 <_close_r+0x1a>
 8009904:	6023      	str	r3, [r4, #0]
 8009906:	bd38      	pop	{r3, r4, r5, pc}
 8009908:	200002c8 	.word	0x200002c8

0800990c <_fstat_r>:
 800990c:	b538      	push	{r3, r4, r5, lr}
 800990e:	4d07      	ldr	r5, [pc, #28]	; (800992c <_fstat_r+0x20>)
 8009910:	2300      	movs	r3, #0
 8009912:	4604      	mov	r4, r0
 8009914:	4608      	mov	r0, r1
 8009916:	4611      	mov	r1, r2
 8009918:	602b      	str	r3, [r5, #0]
 800991a:	f7fa f81c 	bl	8003956 <_fstat>
 800991e:	1c43      	adds	r3, r0, #1
 8009920:	d102      	bne.n	8009928 <_fstat_r+0x1c>
 8009922:	682b      	ldr	r3, [r5, #0]
 8009924:	b103      	cbz	r3, 8009928 <_fstat_r+0x1c>
 8009926:	6023      	str	r3, [r4, #0]
 8009928:	bd38      	pop	{r3, r4, r5, pc}
 800992a:	bf00      	nop
 800992c:	200002c8 	.word	0x200002c8

08009930 <_isatty_r>:
 8009930:	b538      	push	{r3, r4, r5, lr}
 8009932:	4d06      	ldr	r5, [pc, #24]	; (800994c <_isatty_r+0x1c>)
 8009934:	2300      	movs	r3, #0
 8009936:	4604      	mov	r4, r0
 8009938:	4608      	mov	r0, r1
 800993a:	602b      	str	r3, [r5, #0]
 800993c:	f7fa f81b 	bl	8003976 <_isatty>
 8009940:	1c43      	adds	r3, r0, #1
 8009942:	d102      	bne.n	800994a <_isatty_r+0x1a>
 8009944:	682b      	ldr	r3, [r5, #0]
 8009946:	b103      	cbz	r3, 800994a <_isatty_r+0x1a>
 8009948:	6023      	str	r3, [r4, #0]
 800994a:	bd38      	pop	{r3, r4, r5, pc}
 800994c:	200002c8 	.word	0x200002c8

08009950 <_lseek_r>:
 8009950:	b538      	push	{r3, r4, r5, lr}
 8009952:	4d07      	ldr	r5, [pc, #28]	; (8009970 <_lseek_r+0x20>)
 8009954:	4604      	mov	r4, r0
 8009956:	4608      	mov	r0, r1
 8009958:	4611      	mov	r1, r2
 800995a:	2200      	movs	r2, #0
 800995c:	602a      	str	r2, [r5, #0]
 800995e:	461a      	mov	r2, r3
 8009960:	f7fa f814 	bl	800398c <_lseek>
 8009964:	1c43      	adds	r3, r0, #1
 8009966:	d102      	bne.n	800996e <_lseek_r+0x1e>
 8009968:	682b      	ldr	r3, [r5, #0]
 800996a:	b103      	cbz	r3, 800996e <_lseek_r+0x1e>
 800996c:	6023      	str	r3, [r4, #0]
 800996e:	bd38      	pop	{r3, r4, r5, pc}
 8009970:	200002c8 	.word	0x200002c8

08009974 <_read_r>:
 8009974:	b538      	push	{r3, r4, r5, lr}
 8009976:	4d07      	ldr	r5, [pc, #28]	; (8009994 <_read_r+0x20>)
 8009978:	4604      	mov	r4, r0
 800997a:	4608      	mov	r0, r1
 800997c:	4611      	mov	r1, r2
 800997e:	2200      	movs	r2, #0
 8009980:	602a      	str	r2, [r5, #0]
 8009982:	461a      	mov	r2, r3
 8009984:	f7f9 ffa2 	bl	80038cc <_read>
 8009988:	1c43      	adds	r3, r0, #1
 800998a:	d102      	bne.n	8009992 <_read_r+0x1e>
 800998c:	682b      	ldr	r3, [r5, #0]
 800998e:	b103      	cbz	r3, 8009992 <_read_r+0x1e>
 8009990:	6023      	str	r3, [r4, #0]
 8009992:	bd38      	pop	{r3, r4, r5, pc}
 8009994:	200002c8 	.word	0x200002c8

08009998 <_init>:
 8009998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800999a:	bf00      	nop
 800999c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800999e:	bc08      	pop	{r3}
 80099a0:	469e      	mov	lr, r3
 80099a2:	4770      	bx	lr

080099a4 <_fini>:
 80099a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099a6:	bf00      	nop
 80099a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099aa:	bc08      	pop	{r3}
 80099ac:	469e      	mov	lr, r3
 80099ae:	4770      	bx	lr
