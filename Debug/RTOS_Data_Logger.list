
RTOS_Data_Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc74  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000082c  0800ce08  0800ce08  0001ce08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d634  0800d634  00020214  2**0
                  CONTENTS
  4 .ARM          00000008  0800d634  0800d634  0001d634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d63c  0800d63c  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d63c  0800d63c  0001d63c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d640  0800d640  0001d640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  0800d644  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020214  2**0
                  CONTENTS
 10 .bss          00012f40  20000214  20000214  00020214  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20013154  20013154  00020214  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018f21  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033f7  00000000  00000000  00039165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001638  00000000  00000000  0003c560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001508  00000000  00000000  0003db98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024774  00000000  00000000  0003f0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a805  00000000  00000000  00063814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9b66  00000000  00000000  0007e019  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00157b7f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007054  00000000  00000000  00157bd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000214 	.word	0x20000214
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cdec 	.word	0x0800cdec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000218 	.word	0x20000218
 80001cc:	0800cdec 	.word	0x0800cdec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <bme68x_init>:
/* @brief This API reads the chip-id of the sensor which is the first step to
* verify the sensor and also calibrates the sensor
* As this API is the entry point, call this API before using other APIs.
*/
int8_t bme68x_init(struct bme68x_dev *dev)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    (void) bme68x_soft_reset(dev);
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f000 f8fb 	bl	80010b0 <bme68x_soft_reset>

    rslt = bme68x_get_regs(BME68X_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8000eba:	6879      	ldr	r1, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	20d0      	movs	r0, #208	; 0xd0
 8000ec2:	f000 f8b1 	bl	8001028 <bme68x_get_regs>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 8000eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d114      	bne.n	8000efc <bme68x_init+0x50>
    {
        if (dev->chip_id == BME68X_CHIP_ID)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b61      	cmp	r3, #97	; 0x61
 8000ed8:	d10e      	bne.n	8000ef8 <bme68x_init+0x4c>
        {
            /* Read Variant ID */
            rslt = read_variant_id(dev);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f002 f858 	bl	8002f90 <read_variant_id>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	73fb      	strb	r3, [r7, #15]

            if (rslt == BME68X_OK)
 8000ee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d107      	bne.n	8000efc <bme68x_init+0x50>
            {
                /* Get the Calibration data */
                rslt = get_calib_data(dev);
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f001 ff4b 	bl	8002d88 <get_calib_data>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	73fb      	strb	r3, [r7, #15]
 8000ef6:	e001      	b.n	8000efc <bme68x_init+0x50>
            }
        }
        else
        {
            rslt = BME68X_E_DEV_NOT_FOUND;
 8000ef8:	23fd      	movs	r3, #253	; 0xfd
 8000efa:	73fb      	strb	r3, [r7, #15]
        }
    }
    return rslt;
 8000efc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3710      	adds	r7, #16
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <bme68x_set_regs>:

/*
 * @brief This API writes the given data to the register address of the sensor
 */
int8_t bme68x_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 8000f08:	b5b0      	push	{r4, r5, r7, lr}
 8000f0a:	b08a      	sub	sp, #40	; 0x28
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
 8000f14:	603b      	str	r3, [r7, #0]
    int8_t rslt;

    /* Length of the temporary buffer is 2*(length of register)*/
    uint8_t tmp_buff[BME68X_LEN_INTERLEAVE_BUFF] = { 0 };
 8000f16:	2300      	movs	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	f107 0314 	add.w	r3, r7, #20
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
 8000f26:	60da      	str	r2, [r3, #12]
    uint16_t index;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000f28:	6838      	ldr	r0, [r7, #0]
 8000f2a:	f001 fd07 	bl	800293c <null_ptr_check>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if ((rslt == BME68X_OK) && reg_addr && reg_data)
 8000f34:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d16c      	bne.n	8001016 <bme68x_set_regs+0x10e>
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d069      	beq.n	8001016 <bme68x_set_regs+0x10e>
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d066      	beq.n	8001016 <bme68x_set_regs+0x10e>
    {
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d05d      	beq.n	800100a <bme68x_set_regs+0x102>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2b0a      	cmp	r3, #10
 8000f52:	d85a      	bhi.n	800100a <bme68x_set_regs+0x102>
        {
            /* Interleave the 2 arrays */
            for (index = 0; index < len; index++)
 8000f54:	2300      	movs	r3, #0
 8000f56:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000f58:	e034      	b.n	8000fc4 <bme68x_set_regs+0xbc>
            {
                if (dev->intf == BME68X_SPI_INTF)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	7b1b      	ldrb	r3, [r3, #12]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d118      	bne.n	8000f94 <bme68x_set_regs+0x8c>
                {
                    /* Set the memory page */
                    rslt = set_mem_page(reg_addr[index], dev);
 8000f62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f64:	68fa      	ldr	r2, [r7, #12]
 8000f66:	4413      	add	r3, r2
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	6839      	ldr	r1, [r7, #0]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f001 fc24 	bl	80027ba <set_mem_page>
 8000f72:	4603      	mov	r3, r0
 8000f74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8000f78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	781a      	ldrb	r2, [r3, #0]
 8000f80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000f88:	b2d2      	uxtb	r2, r2
 8000f8a:	3328      	adds	r3, #40	; 0x28
 8000f8c:	443b      	add	r3, r7
 8000f8e:	f803 2c18 	strb.w	r2, [r3, #-24]
 8000f92:	e009      	b.n	8000fa8 <bme68x_set_regs+0xa0>
                }
                else
                {
                    tmp_buff[(2 * index)] = reg_addr[index];
 8000f94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	441a      	add	r2, r3
 8000f9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	7812      	ldrb	r2, [r2, #0]
 8000fa0:	3328      	adds	r3, #40	; 0x28
 8000fa2:	443b      	add	r3, r7
 8000fa4:	f803 2c18 	strb.w	r2, [r3, #-24]
                }

                tmp_buff[(2 * index) + 1] = reg_data[index];
 8000fa8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	441a      	add	r2, r3
 8000fae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	7812      	ldrb	r2, [r2, #0]
 8000fb6:	3328      	adds	r3, #40	; 0x28
 8000fb8:	443b      	add	r3, r7
 8000fba:	f803 2c18 	strb.w	r2, [r3, #-24]
            for (index = 0; index < len; index++)
 8000fbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000fc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d8c6      	bhi.n	8000f5a <bme68x_set_regs+0x52>
            }

            /* Write the interleaved array */
            if (rslt == BME68X_OK)
 8000fcc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d11e      	bne.n	8001012 <bme68x_set_regs+0x10a>
            {
                dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1], (2 * len) - 1, dev->intf_ptr);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8000fd8:	7c38      	ldrb	r0, [r7, #16]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	1e5a      	subs	r2, r3, #1
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685d      	ldr	r5, [r3, #4]
 8000fe4:	f107 0310 	add.w	r3, r7, #16
 8000fe8:	1c59      	adds	r1, r3, #1
 8000fea:	462b      	mov	r3, r5
 8000fec:	47a0      	blx	r4
 8000fee:	4603      	mov	r3, r0
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
                if (dev->intf_rslt != 0)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d007      	beq.n	8001012 <bme68x_set_regs+0x10a>
                {
                    rslt = BME68X_E_COM_FAIL;
 8001002:	23fe      	movs	r3, #254	; 0xfe
 8001004:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if (rslt == BME68X_OK)
 8001008:	e003      	b.n	8001012 <bme68x_set_regs+0x10a>
                }
            }
        }
        else
        {
            rslt = BME68X_E_INVALID_LENGTH;
 800100a:	23fc      	movs	r3, #252	; 0xfc
 800100c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8001010:	e004      	b.n	800101c <bme68x_set_regs+0x114>
            if (rslt == BME68X_OK)
 8001012:	bf00      	nop
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8001014:	e002      	b.n	800101c <bme68x_set_regs+0x114>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8001016:	23ff      	movs	r3, #255	; 0xff
 8001018:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 800101c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001020:	4618      	mov	r0, r3
 8001022:	3728      	adds	r7, #40	; 0x28
 8001024:	46bd      	mov	sp, r7
 8001026:	bdb0      	pop	{r4, r5, r7, pc}

08001028 <bme68x_get_regs>:

/*
 * @brief This API reads the data from the given register address of sensor.
 */
int8_t bme68x_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b087      	sub	sp, #28
 800102c:	af00      	add	r7, sp, #0
 800102e:	60b9      	str	r1, [r7, #8]
 8001030:	607a      	str	r2, [r7, #4]
 8001032:	603b      	str	r3, [r7, #0]
 8001034:	4603      	mov	r3, r0
 8001036:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001038:	6838      	ldr	r0, [r7, #0]
 800103a:	f001 fc7f 	bl	800293c <null_ptr_check>
 800103e:	4603      	mov	r3, r0
 8001040:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BME68X_OK) && reg_data)
 8001042:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d12a      	bne.n	80010a0 <bme68x_get_regs+0x78>
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d027      	beq.n	80010a0 <bme68x_get_regs+0x78>
    {
        if (dev->intf == BME68X_SPI_INTF)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	7b1b      	ldrb	r3, [r3, #12]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d10e      	bne.n	8001076 <bme68x_get_regs+0x4e>
        {
            /* Set the memory page */
            rslt = set_mem_page(reg_addr, dev);
 8001058:	7bfb      	ldrb	r3, [r7, #15]
 800105a:	6839      	ldr	r1, [r7, #0]
 800105c:	4618      	mov	r0, r3
 800105e:	f001 fbac 	bl	80027ba <set_mem_page>
 8001062:	4603      	mov	r3, r0
 8001064:	75fb      	strb	r3, [r7, #23]
            if (rslt == BME68X_OK)
 8001066:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d103      	bne.n	8001076 <bme68x_get_regs+0x4e>
            {
                reg_addr = reg_addr | BME68X_SPI_RD_MSK;
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001074:	73fb      	strb	r3, [r7, #15]
            }
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	7bf8      	ldrb	r0, [r7, #15]
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	68b9      	ldr	r1, [r7, #8]
 8001084:	47a0      	blx	r4
 8001086:	4603      	mov	r3, r0
 8001088:	461a      	mov	r2, r3
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (dev->intf_rslt != 0)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 8001096:	2b00      	cmp	r3, #0
 8001098:	d004      	beq.n	80010a4 <bme68x_get_regs+0x7c>
        {
            rslt = BME68X_E_COM_FAIL;
 800109a:	23fe      	movs	r3, #254	; 0xfe
 800109c:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != 0)
 800109e:	e001      	b.n	80010a4 <bme68x_get_regs+0x7c>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80010a0:	23ff      	movs	r3, #255	; 0xff
 80010a2:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80010a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	371c      	adds	r7, #28
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd90      	pop	{r4, r7, pc}

080010b0 <bme68x_soft_reset>:

/*
 * @brief This API soft-resets the sensor.
 */
int8_t bme68x_soft_reset(struct bme68x_dev *dev)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME68X_REG_SOFT_RESET;
 80010b8:	23e0      	movs	r3, #224	; 0xe0
 80010ba:	73bb      	strb	r3, [r7, #14]

    /* 0xb6 is the soft reset command */
    uint8_t soft_rst_cmd = BME68X_SOFT_RESET_CMD;
 80010bc:	23b6      	movs	r3, #182	; 0xb6
 80010be:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f001 fc3b 	bl	800293c <null_ptr_check>
 80010c6:	4603      	mov	r3, r0
 80010c8:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 80010ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d12b      	bne.n	800112a <bme68x_soft_reset+0x7a>
    {
        if (dev->intf == BME68X_SPI_INTF)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	7b1b      	ldrb	r3, [r3, #12]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d104      	bne.n	80010e4 <bme68x_soft_reset+0x34>
        {
            rslt = get_mem_page(dev);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f001 fbd2 	bl	8002884 <get_mem_page>
 80010e0:	4603      	mov	r3, r0
 80010e2:	73fb      	strb	r3, [r7, #15]
        }

        /* Reset the device */
        if (rslt == BME68X_OK)
 80010e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d11e      	bne.n	800112a <bme68x_soft_reset+0x7a>
        {
            rslt = bme68x_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80010ec:	f107 010d 	add.w	r1, r7, #13
 80010f0:	f107 000e 	add.w	r0, r7, #14
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2201      	movs	r2, #1
 80010f8:	f7ff ff06 	bl	8000f08 <bme68x_set_regs>
 80010fc:	4603      	mov	r3, r0
 80010fe:	73fb      	strb	r3, [r7, #15]

            if (rslt == BME68X_OK)
 8001100:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d110      	bne.n	800112a <bme68x_soft_reset+0x7a>
            {
                /* Wait for 5ms */
                dev->delay_us(BME68X_PERIOD_RESET, dev->intf_ptr);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	6852      	ldr	r2, [r2, #4]
 8001110:	4611      	mov	r1, r2
 8001112:	f242 7010 	movw	r0, #10000	; 0x2710
 8001116:	4798      	blx	r3

                /* After reset get the memory page */
                if (dev->intf == BME68X_SPI_INTF)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	7b1b      	ldrb	r3, [r3, #12]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d104      	bne.n	800112a <bme68x_soft_reset+0x7a>
                {
                    rslt = get_mem_page(dev);
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f001 fbaf 	bl	8002884 <get_mem_page>
 8001126:	4603      	mov	r3, r0
 8001128:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 800112a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <bme68x_set_conf>:

/*
 * @brief This API is used to set the oversampling, filter and odr configuration
 */
int8_t bme68x_set_conf(struct bme68x_conf *conf, struct bme68x_dev *dev)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b088      	sub	sp, #32
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t odr20 = 0, odr3 = 1;
 8001142:	2300      	movs	r3, #0
 8001144:	77bb      	strb	r3, [r7, #30]
 8001146:	2301      	movs	r3, #1
 8001148:	777b      	strb	r3, [r7, #29]
    uint8_t current_op_mode;

    /* Register data starting from BME68X_REG_CTRL_GAS_1(0x71) up to BME68X_REG_CONFIG(0x75) */
    uint8_t reg_array[BME68X_LEN_CONFIG] = { 0x71, 0x72, 0x73, 0x74, 0x75 };
 800114a:	4a7c      	ldr	r2, [pc, #496]	; (800133c <bme68x_set_conf+0x204>)
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001154:	6018      	str	r0, [r3, #0]
 8001156:	3304      	adds	r3, #4
 8001158:	7019      	strb	r1, [r3, #0]
    uint8_t data_array[BME68X_LEN_CONFIG] = { 0 };
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	2300      	movs	r3, #0
 8001160:	743b      	strb	r3, [r7, #16]

    rslt = bme68x_get_op_mode(&current_op_mode, dev);
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	6839      	ldr	r1, [r7, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f000 f94a 	bl	8001402 <bme68x_get_op_mode>
 800116e:	4603      	mov	r3, r0
 8001170:	77fb      	strb	r3, [r7, #31]
    if (rslt == BME68X_OK)
 8001172:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d105      	bne.n	8001186 <bme68x_set_conf+0x4e>
    {
        /* Configure only in the sleep mode */
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 800117a:	6839      	ldr	r1, [r7, #0]
 800117c:	2000      	movs	r0, #0
 800117e:	f000 f8df 	bl	8001340 <bme68x_set_op_mode>
 8001182:	4603      	mov	r3, r0
 8001184:	77fb      	strb	r3, [r7, #31]
    }

    if (conf == NULL)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d102      	bne.n	8001192 <bme68x_set_conf+0x5a>
    {
        rslt = BME68X_E_NULL_PTR;
 800118c:	23ff      	movs	r3, #255	; 0xff
 800118e:	77fb      	strb	r3, [r7, #31]
 8001190:	e0b2      	b.n	80012f8 <bme68x_set_conf+0x1c0>
    }
    else if (rslt == BME68X_OK)
 8001192:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001196:	2b00      	cmp	r3, #0
 8001198:	f040 80ae 	bne.w	80012f8 <bme68x_set_conf+0x1c0>
    {
        /* Read the whole configuration and write it back once later */
        rslt = bme68x_get_regs(reg_array[0], data_array, BME68X_LEN_CONFIG, dev);
 800119c:	7d38      	ldrb	r0, [r7, #20]
 800119e:	f107 010c 	add.w	r1, r7, #12
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	2205      	movs	r2, #5
 80011a6:	f7ff ff3f 	bl	8001028 <bme68x_get_regs>
 80011aa:	4603      	mov	r3, r0
 80011ac:	77fb      	strb	r3, [r7, #31]
        dev->info_msg = BME68X_OK;
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        if (rslt == BME68X_OK)
 80011b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d108      	bne.n	80011d0 <bme68x_set_conf+0x98>
        {
            rslt = boundary_check(&conf->filter, BME68X_FILTER_SIZE_127, dev);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	3303      	adds	r3, #3
 80011c2:	683a      	ldr	r2, [r7, #0]
 80011c4:	2107      	movs	r1, #7
 80011c6:	4618      	mov	r0, r3
 80011c8:	f001 fb8b 	bl	80028e2 <boundary_check>
 80011cc:	4603      	mov	r3, r0
 80011ce:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 80011d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d108      	bne.n	80011ea <bme68x_set_conf+0xb2>
        {
            rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3301      	adds	r3, #1
 80011dc:	683a      	ldr	r2, [r7, #0]
 80011de:	2105      	movs	r1, #5
 80011e0:	4618      	mov	r0, r3
 80011e2:	f001 fb7e 	bl	80028e2 <boundary_check>
 80011e6:	4603      	mov	r3, r0
 80011e8:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 80011ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d108      	bne.n	8001204 <bme68x_set_conf+0xcc>
        {
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3302      	adds	r3, #2
 80011f6:	683a      	ldr	r2, [r7, #0]
 80011f8:	2105      	movs	r1, #5
 80011fa:	4618      	mov	r0, r3
 80011fc:	f001 fb71 	bl	80028e2 <boundary_check>
 8001200:	4603      	mov	r3, r0
 8001202:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8001204:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d107      	bne.n	800121c <bme68x_set_conf+0xe4>
        {
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	683a      	ldr	r2, [r7, #0]
 8001210:	2105      	movs	r1, #5
 8001212:	4618      	mov	r0, r3
 8001214:	f001 fb65 	bl	80028e2 <boundary_check>
 8001218:	4603      	mov	r3, r0
 800121a:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 800121c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d108      	bne.n	8001236 <bme68x_set_conf+0xfe>
        {
            rslt = boundary_check(&conf->odr, BME68X_ODR_NONE, dev);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3304      	adds	r3, #4
 8001228:	683a      	ldr	r2, [r7, #0]
 800122a:	2108      	movs	r1, #8
 800122c:	4618      	mov	r0, r3
 800122e:	f001 fb58 	bl	80028e2 <boundary_check>
 8001232:	4603      	mov	r3, r0
 8001234:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8001236:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d15c      	bne.n	80012f8 <bme68x_set_conf+0x1c0>
        {
            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_FILTER, conf->filter);
 800123e:	7c3b      	ldrb	r3, [r7, #16]
 8001240:	b25b      	sxtb	r3, r3
 8001242:	f023 031c 	bic.w	r3, r3, #28
 8001246:	b25a      	sxtb	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	78db      	ldrb	r3, [r3, #3]
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	b25b      	sxtb	r3, r3
 8001250:	f003 031c 	and.w	r3, r3, #28
 8001254:	b25b      	sxtb	r3, r3
 8001256:	4313      	orrs	r3, r2
 8001258:	b25b      	sxtb	r3, r3
 800125a:	b2db      	uxtb	r3, r3
 800125c:	743b      	strb	r3, [r7, #16]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OST, conf->os_temp);
 800125e:	7bfb      	ldrb	r3, [r7, #15]
 8001260:	b25b      	sxtb	r3, r3
 8001262:	f003 031f 	and.w	r3, r3, #31
 8001266:	b25a      	sxtb	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	785b      	ldrb	r3, [r3, #1]
 800126c:	015b      	lsls	r3, r3, #5
 800126e:	b25b      	sxtb	r3, r3
 8001270:	4313      	orrs	r3, r2
 8001272:	b25b      	sxtb	r3, r3
 8001274:	b2db      	uxtb	r3, r3
 8001276:	73fb      	strb	r3, [r7, #15]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OSP, conf->os_pres);
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	b25b      	sxtb	r3, r3
 800127c:	f023 031c 	bic.w	r3, r3, #28
 8001280:	b25a      	sxtb	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	789b      	ldrb	r3, [r3, #2]
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	b25b      	sxtb	r3, r3
 800128a:	f003 031c 	and.w	r3, r3, #28
 800128e:	b25b      	sxtb	r3, r3
 8001290:	4313      	orrs	r3, r2
 8001292:	b25b      	sxtb	r3, r3
 8001294:	b2db      	uxtb	r3, r3
 8001296:	73fb      	strb	r3, [r7, #15]
            data_array[1] = BME68X_SET_BITS_POS_0(data_array[1], BME68X_OSH, conf->os_hum);
 8001298:	7b7b      	ldrb	r3, [r7, #13]
 800129a:	b25b      	sxtb	r3, r3
 800129c:	f023 0307 	bic.w	r3, r3, #7
 80012a0:	b25a      	sxtb	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	b25b      	sxtb	r3, r3
 80012a8:	f003 0307 	and.w	r3, r3, #7
 80012ac:	b25b      	sxtb	r3, r3
 80012ae:	4313      	orrs	r3, r2
 80012b0:	b25b      	sxtb	r3, r3
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	737b      	strb	r3, [r7, #13]
            if (conf->odr != BME68X_ODR_NONE)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	791b      	ldrb	r3, [r3, #4]
 80012ba:	2b08      	cmp	r3, #8
 80012bc:	d004      	beq.n	80012c8 <bme68x_set_conf+0x190>
            {
                odr20 = conf->odr;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	791b      	ldrb	r3, [r3, #4]
 80012c2:	77bb      	strb	r3, [r7, #30]
                odr3 = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	777b      	strb	r3, [r7, #29]
            }

            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_ODR20, odr20);
 80012c8:	7c3b      	ldrb	r3, [r7, #16]
 80012ca:	b25b      	sxtb	r3, r3
 80012cc:	f003 031f 	and.w	r3, r3, #31
 80012d0:	b25a      	sxtb	r2, r3
 80012d2:	7fbb      	ldrb	r3, [r7, #30]
 80012d4:	015b      	lsls	r3, r3, #5
 80012d6:	b25b      	sxtb	r3, r3
 80012d8:	4313      	orrs	r3, r2
 80012da:	b25b      	sxtb	r3, r3
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	743b      	strb	r3, [r7, #16]
            data_array[0] = BME68X_SET_BITS(data_array[0], BME68X_ODR3, odr3);
 80012e0:	7b3b      	ldrb	r3, [r7, #12]
 80012e2:	b25b      	sxtb	r3, r3
 80012e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80012e8:	b25a      	sxtb	r2, r3
 80012ea:	7f7b      	ldrb	r3, [r7, #29]
 80012ec:	01db      	lsls	r3, r3, #7
 80012ee:	b25b      	sxtb	r3, r3
 80012f0:	4313      	orrs	r3, r2
 80012f2:	b25b      	sxtb	r3, r3
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	733b      	strb	r3, [r7, #12]
        }
    }

    if (rslt == BME68X_OK)
 80012f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d109      	bne.n	8001314 <bme68x_set_conf+0x1dc>
    {
        rslt = bme68x_set_regs(reg_array, data_array, BME68X_LEN_CONFIG, dev);
 8001300:	f107 010c 	add.w	r1, r7, #12
 8001304:	f107 0014 	add.w	r0, r7, #20
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	2205      	movs	r2, #5
 800130c:	f7ff fdfc 	bl	8000f08 <bme68x_set_regs>
 8001310:	4603      	mov	r3, r0
 8001312:	77fb      	strb	r3, [r7, #31]
    }

    if ((current_op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 8001314:	7f3b      	ldrb	r3, [r7, #28]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d00a      	beq.n	8001330 <bme68x_set_conf+0x1f8>
 800131a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d106      	bne.n	8001330 <bme68x_set_conf+0x1f8>
    {
        rslt = bme68x_set_op_mode(current_op_mode, dev);
 8001322:	7f3b      	ldrb	r3, [r7, #28]
 8001324:	6839      	ldr	r1, [r7, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f000 f80a 	bl	8001340 <bme68x_set_op_mode>
 800132c:	4603      	mov	r3, r0
 800132e:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8001330:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001334:	4618      	mov	r0, r3
 8001336:	3720      	adds	r7, #32
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	0800ce08 	.word	0x0800ce08

08001340 <bme68x_set_op_mode>:

/*
 * @brief This API is used to set the operation mode of the sensor
 */
int8_t bme68x_set_op_mode(const uint8_t op_mode, struct bme68x_dev *dev)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	6039      	str	r1, [r7, #0]
 800134a:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t tmp_pow_mode;
    uint8_t pow_mode = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	73bb      	strb	r3, [r7, #14]
    uint8_t reg_addr = BME68X_REG_CTRL_MEAS;
 8001350:	2374      	movs	r3, #116	; 0x74
 8001352:	733b      	strb	r3, [r7, #12]

    /* Call until in sleep */
    do
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &tmp_pow_mode, 1, dev);
 8001354:	f107 010d 	add.w	r1, r7, #13
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	2201      	movs	r2, #1
 800135c:	2074      	movs	r0, #116	; 0x74
 800135e:	f7ff fe63 	bl	8001028 <bme68x_get_regs>
 8001362:	4603      	mov	r3, r0
 8001364:	73fb      	strb	r3, [r7, #15]
        if (rslt == BME68X_OK)
 8001366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d11d      	bne.n	80013aa <bme68x_set_op_mode+0x6a>
        {
            /* Put to sleep before changing mode */
            pow_mode = (tmp_pow_mode & BME68X_MODE_MSK);
 800136e:	7b7b      	ldrb	r3, [r7, #13]
 8001370:	f003 0303 	and.w	r3, r3, #3
 8001374:	73bb      	strb	r3, [r7, #14]
            if (pow_mode != BME68X_SLEEP_MODE)
 8001376:	7bbb      	ldrb	r3, [r7, #14]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d016      	beq.n	80013aa <bme68x_set_op_mode+0x6a>
            {
                tmp_pow_mode &= ~BME68X_MODE_MSK; /* Set to sleep */
 800137c:	7b7b      	ldrb	r3, [r7, #13]
 800137e:	f023 0303 	bic.w	r3, r3, #3
 8001382:	b2db      	uxtb	r3, r3
 8001384:	737b      	strb	r3, [r7, #13]
                rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8001386:	f107 010d 	add.w	r1, r7, #13
 800138a:	f107 000c 	add.w	r0, r7, #12
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	2201      	movs	r2, #1
 8001392:	f7ff fdb9 	bl	8000f08 <bme68x_set_regs>
 8001396:	4603      	mov	r3, r0
 8001398:	73fb      	strb	r3, [r7, #15]
                dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800139e:	683a      	ldr	r2, [r7, #0]
 80013a0:	6852      	ldr	r2, [r2, #4]
 80013a2:	4611      	mov	r1, r2
 80013a4:	f242 7010 	movw	r0, #10000	; 0x2710
 80013a8:	4798      	blx	r3
            }
        }
    } while ((pow_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK));
 80013aa:	7bbb      	ldrb	r3, [r7, #14]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <bme68x_set_op_mode+0x78>
 80013b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d0cd      	beq.n	8001354 <bme68x_set_op_mode+0x14>

    /* Already in sleep */
    if ((op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d01b      	beq.n	80013f6 <bme68x_set_op_mode+0xb6>
 80013be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d117      	bne.n	80013f6 <bme68x_set_op_mode+0xb6>
    {
        tmp_pow_mode = (tmp_pow_mode & ~BME68X_MODE_MSK) | (op_mode & BME68X_MODE_MSK);
 80013c6:	7b7b      	ldrb	r3, [r7, #13]
 80013c8:	b25b      	sxtb	r3, r3
 80013ca:	f023 0303 	bic.w	r3, r3, #3
 80013ce:	b25a      	sxtb	r2, r3
 80013d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d4:	f003 0303 	and.w	r3, r3, #3
 80013d8:	b25b      	sxtb	r3, r3
 80013da:	4313      	orrs	r3, r2
 80013dc:	b25b      	sxtb	r3, r3
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	737b      	strb	r3, [r7, #13]
        rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80013e2:	f107 010d 	add.w	r1, r7, #13
 80013e6:	f107 000c 	add.w	r0, r7, #12
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	2201      	movs	r2, #1
 80013ee:	f7ff fd8b 	bl	8000f08 <bme68x_set_regs>
 80013f2:	4603      	mov	r3, r0
 80013f4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80013f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <bme68x_get_op_mode>:

/*
 * @brief This API is used to get the operation mode of the sensor.
 */
int8_t bme68x_get_op_mode(uint8_t *op_mode, struct bme68x_dev *dev)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b084      	sub	sp, #16
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
 800140a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t mode;

    if (op_mode)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d00f      	beq.n	8001432 <bme68x_get_op_mode+0x30>
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &mode, 1, dev);
 8001412:	f107 010e 	add.w	r1, r7, #14
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	2201      	movs	r2, #1
 800141a:	2074      	movs	r0, #116	; 0x74
 800141c:	f7ff fe04 	bl	8001028 <bme68x_get_regs>
 8001420:	4603      	mov	r3, r0
 8001422:	73fb      	strb	r3, [r7, #15]

        /* Masking the other register bit info*/
        *op_mode = mode & BME68X_MODE_MSK;
 8001424:	7bbb      	ldrb	r3, [r7, #14]
 8001426:	f003 0303 	and.w	r3, r3, #3
 800142a:	b2da      	uxtb	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	701a      	strb	r2, [r3, #0]
 8001430:	e001      	b.n	8001436 <bme68x_get_op_mode+0x34>
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8001432:	23ff      	movs	r3, #255	; 0xff
 8001434:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001436:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800143a:	4618      	mov	r0, r3
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <bme68x_get_meas_dur>:

/*
 * @brief This API is used to get the remaining duration that can be used for heating.
 */
uint32_t bme68x_get_meas_dur(const uint8_t op_mode, struct bme68x_conf *conf, struct bme68x_dev *dev)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08a      	sub	sp, #40	; 0x28
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
 8001450:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t meas_dur = 0; /* Calculate in us */
 8001452:	2300      	movs	r3, #0
 8001454:	623b      	str	r3, [r7, #32]
    uint32_t meas_cycles;
    uint8_t os_to_meas_cycles[6] = { 0, 1, 2, 4, 8, 16 };
 8001456:	4a34      	ldr	r2, [pc, #208]	; (8001528 <bme68x_get_meas_dur+0xe4>)
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001460:	6018      	str	r0, [r3, #0]
 8001462:	3304      	adds	r3, #4
 8001464:	8019      	strh	r1, [r3, #0]

    if (conf != NULL)
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d058      	beq.n	800151e <bme68x_get_meas_dur+0xda>
    {
        /* Boundary check for temperature oversampling */
        rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	3301      	adds	r3, #1
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	2105      	movs	r1, #5
 8001474:	4618      	mov	r0, r3
 8001476:	f001 fa34 	bl	80028e2 <boundary_check>
 800147a:	4603      	mov	r3, r0
 800147c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (rslt == BME68X_OK)
 8001480:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001484:	2b00      	cmp	r3, #0
 8001486:	d109      	bne.n	800149c <bme68x_get_meas_dur+0x58>
        {
            /* Boundary check for pressure oversampling */
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	3302      	adds	r3, #2
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	2105      	movs	r1, #5
 8001490:	4618      	mov	r0, r3
 8001492:	f001 fa26 	bl	80028e2 <boundary_check>
 8001496:	4603      	mov	r3, r0
 8001498:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }

        if (rslt == BME68X_OK)
 800149c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d108      	bne.n	80014b6 <bme68x_get_meas_dur+0x72>
        {
            /* Boundary check for humidity oversampling */
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	2105      	movs	r1, #5
 80014aa:	4618      	mov	r0, r3
 80014ac:	f001 fa19 	bl	80028e2 <boundary_check>
 80014b0:	4603      	mov	r3, r0
 80014b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }

        if (rslt == BME68X_OK)
 80014b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d12f      	bne.n	800151e <bme68x_get_meas_dur+0xda>
        {
            meas_cycles = os_to_meas_cycles[conf->os_temp];
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	785b      	ldrb	r3, [r3, #1]
 80014c2:	3328      	adds	r3, #40	; 0x28
 80014c4:	443b      	add	r3, r7
 80014c6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80014ca:	61fb      	str	r3, [r7, #28]
            meas_cycles += os_to_meas_cycles[conf->os_pres];
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	789b      	ldrb	r3, [r3, #2]
 80014d0:	3328      	adds	r3, #40	; 0x28
 80014d2:	443b      	add	r3, r7
 80014d4:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80014d8:	461a      	mov	r2, r3
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	4413      	add	r3, r2
 80014de:	61fb      	str	r3, [r7, #28]
            meas_cycles += os_to_meas_cycles[conf->os_hum];
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	3328      	adds	r3, #40	; 0x28
 80014e6:	443b      	add	r3, r7
 80014e8:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80014ec:	461a      	mov	r2, r3
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	4413      	add	r3, r2
 80014f2:	61fb      	str	r3, [r7, #28]

            /* TPH measurement duration */
            meas_dur = meas_cycles * UINT32_C(1963);
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	f240 72ab 	movw	r2, #1963	; 0x7ab
 80014fa:	fb02 f303 	mul.w	r3, r2, r3
 80014fe:	623b      	str	r3, [r7, #32]
            meas_dur += UINT32_C(477 * 4); /* TPH switching duration */
 8001500:	6a3b      	ldr	r3, [r7, #32]
 8001502:	f203 7374 	addw	r3, r3, #1908	; 0x774
 8001506:	623b      	str	r3, [r7, #32]
            meas_dur += UINT32_C(477 * 5); /* Gas measurement duration */
 8001508:	6a3b      	ldr	r3, [r7, #32]
 800150a:	f603 1351 	addw	r3, r3, #2385	; 0x951
 800150e:	623b      	str	r3, [r7, #32]

            if (op_mode != BME68X_PARALLEL_MODE)
 8001510:	7bfb      	ldrb	r3, [r7, #15]
 8001512:	2b02      	cmp	r3, #2
 8001514:	d003      	beq.n	800151e <bme68x_get_meas_dur+0xda>
            {
                meas_dur += UINT32_C(1000); /* Wake up duration of 1ms */
 8001516:	6a3b      	ldr	r3, [r7, #32]
 8001518:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800151c:	623b      	str	r3, [r7, #32]
            }
        }
    }

    return meas_dur;
 800151e:	6a3b      	ldr	r3, [r7, #32]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3728      	adds	r7, #40	; 0x28
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	0800ce10 	.word	0x0800ce10

0800152c <bme68x_get_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme68x_data
 * structure instance passed by the user.
 */
int8_t bme68x_get_data(uint8_t op_mode, struct bme68x_data *data, uint8_t *n_data, struct bme68x_dev *dev)
{
 800152c:	b5b0      	push	{r4, r5, r7, lr}
 800152e:	b09a      	sub	sp, #104	; 0x68
 8001530:	af00      	add	r7, sp, #0
 8001532:	60b9      	str	r1, [r7, #8]
 8001534:	607a      	str	r2, [r7, #4]
 8001536:	603b      	str	r3, [r7, #0]
 8001538:	4603      	mov	r3, r0
 800153a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t i = 0, j = 0, new_fields = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8001542:	2300      	movs	r3, #0
 8001544:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8001548:	2300      	movs	r3, #0
 800154a:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
    struct bme68x_data *field_ptr[3] = { 0 };
 800154e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	605a      	str	r2, [r3, #4]
 8001558:	609a      	str	r2, [r3, #8]
    struct bme68x_data field_data[3] = { { 0 } };
 800155a:	f107 0310 	add.w	r3, r7, #16
 800155e:	2248      	movs	r2, #72	; 0x48
 8001560:	2100      	movs	r1, #0
 8001562:	4618      	mov	r0, r3
 8001564:	f008 fd50 	bl	800a008 <memset>

    field_ptr[0] = &field_data[0];
 8001568:	f107 0310 	add.w	r3, r7, #16
 800156c:	65bb      	str	r3, [r7, #88]	; 0x58
    field_ptr[1] = &field_data[1];
 800156e:	f107 0310 	add.w	r3, r7, #16
 8001572:	3318      	adds	r3, #24
 8001574:	65fb      	str	r3, [r7, #92]	; 0x5c
    field_ptr[2] = &field_data[2];
 8001576:	f107 0310 	add.w	r3, r7, #16
 800157a:	3330      	adds	r3, #48	; 0x30
 800157c:	663b      	str	r3, [r7, #96]	; 0x60

    rslt = null_ptr_check(dev);
 800157e:	6838      	ldr	r0, [r7, #0]
 8001580:	f001 f9dc 	bl	800293c <null_ptr_check>
 8001584:	4603      	mov	r3, r0
 8001586:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if ((rslt == BME68X_OK) && (data != NULL))
 800158a:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800158e:	2b00      	cmp	r3, #0
 8001590:	f040 80c1 	bne.w	8001716 <bme68x_get_data+0x1ea>
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	2b00      	cmp	r3, #0
 8001598:	f000 80bd 	beq.w	8001716 <bme68x_get_data+0x1ea>
    {
        /* Reading the sensor data in forced mode only */
        if (op_mode == BME68X_FORCED_MODE)
 800159c:	7bfb      	ldrb	r3, [r7, #15]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d11c      	bne.n	80015dc <bme68x_get_data+0xb0>
        {
            rslt = read_field_data(0, data, dev);
 80015a2:	683a      	ldr	r2, [r7, #0]
 80015a4:	68b9      	ldr	r1, [r7, #8]
 80015a6:	2000      	movs	r0, #0
 80015a8:	f000 fd8b 	bl	80020c2 <read_field_data>
 80015ac:	4603      	mov	r3, r0
 80015ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            if (rslt == BME68X_OK)
 80015b2:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	f040 80a1 	bne.w	80016fe <bme68x_get_data+0x1d2>
            {
                if (data->status & BME68X_NEW_DATA_MSK)
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	b25b      	sxtb	r3, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	da03      	bge.n	80015ce <bme68x_get_data+0xa2>
                {
                    new_fields = 1;
 80015c6:	2301      	movs	r3, #1
 80015c8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 80015cc:	e097      	b.n	80016fe <bme68x_get_data+0x1d2>
                }
                else
                {
                    new_fields = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    rslt = BME68X_W_NO_NEW_DATA;
 80015d4:	2302      	movs	r3, #2
 80015d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80015da:	e090      	b.n	80016fe <bme68x_get_data+0x1d2>
                }
            }
        }
        else if ((op_mode == BME68X_PARALLEL_MODE) || (op_mode == BME68X_SEQUENTIAL_MODE))
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d003      	beq.n	80015ea <bme68x_get_data+0xbe>
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
 80015e4:	2b03      	cmp	r3, #3
 80015e6:	f040 8087 	bne.w	80016f8 <bme68x_get_data+0x1cc>
        {
            /* Read the 3 fields and count the number of new data fields */
            rslt = read_all_field_data(field_ptr, dev);
 80015ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80015ee:	6839      	ldr	r1, [r7, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f000 feb0 	bl	8002356 <read_all_field_data>
 80015f6:	4603      	mov	r3, r0
 80015f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

            new_fields = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 8001602:	2300      	movs	r3, #0
 8001604:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8001608:	e014      	b.n	8001634 <bme68x_get_data+0x108>
            {
                if (field_ptr[i]->status & BME68X_NEW_DATA_MSK)
 800160a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	3368      	adds	r3, #104	; 0x68
 8001612:	443b      	add	r3, r7
 8001614:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	b25b      	sxtb	r3, r3
 800161c:	2b00      	cmp	r3, #0
 800161e:	da04      	bge.n	800162a <bme68x_get_data+0xfe>
                {
                    new_fields++;
 8001620:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001624:	3301      	adds	r3, #1
 8001626:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 800162a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800162e:	3301      	adds	r3, #1
 8001630:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8001634:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001638:	2b02      	cmp	r3, #2
 800163a:	d803      	bhi.n	8001644 <bme68x_get_data+0x118>
 800163c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8001640:	2b00      	cmp	r3, #0
 8001642:	d0e2      	beq.n	800160a <bme68x_get_data+0xde>
                }
            }

            /* Sort the sensor data in parallel & sequential modes*/
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
 8001644:	2300      	movs	r3, #0
 8001646:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800164a:	e01c      	b.n	8001686 <bme68x_get_data+0x15a>
            {
                for (j = i + 1; j < 3; j++)
 800164c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001650:	3301      	adds	r3, #1
 8001652:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8001656:	e00d      	b.n	8001674 <bme68x_get_data+0x148>
                {
                    sort_sensor_data(i, j, field_ptr);
 8001658:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800165c:	f897 1065 	ldrb.w	r1, [r7, #101]	; 0x65
 8001660:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001664:	4618      	mov	r0, r3
 8001666:	f001 fb15 	bl	8002c94 <sort_sensor_data>
                for (j = i + 1; j < 3; j++)
 800166a:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800166e:	3301      	adds	r3, #1
 8001670:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8001674:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001678:	2b02      	cmp	r3, #2
 800167a:	d9ed      	bls.n	8001658 <bme68x_get_data+0x12c>
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
 800167c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001680:	3301      	adds	r3, #1
 8001682:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8001686:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800168a:	2b01      	cmp	r3, #1
 800168c:	d803      	bhi.n	8001696 <bme68x_get_data+0x16a>
 800168e:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0da      	beq.n	800164c <bme68x_get_data+0x120>
                }
            }

            /* Copy the sorted data */
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8001696:	2300      	movs	r3, #0
 8001698:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800169c:	e01c      	b.n	80016d8 <bme68x_get_data+0x1ac>
            {
                data[i] = *field_ptr[i];
 800169e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	3368      	adds	r3, #104	; 0x68
 80016a6:	443b      	add	r3, r7
 80016a8:	f853 1c10 	ldr.w	r1, [r3, #-16]
 80016ac:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 80016b0:	4613      	mov	r3, r2
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	4413      	add	r3, r2
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	461a      	mov	r2, r3
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	4413      	add	r3, r2
 80016be:	461c      	mov	r4, r3
 80016c0:	460d      	mov	r5, r1
 80016c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016c6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80016ca:	e884 0003 	stmia.w	r4, {r0, r1}
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 80016ce:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80016d2:	3301      	adds	r3, #1
 80016d4:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80016d8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d803      	bhi.n	80016e8 <bme68x_get_data+0x1bc>
 80016e0:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d0da      	beq.n	800169e <bme68x_get_data+0x172>
            }

            if (new_fields == 0)
 80016e8:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d106      	bne.n	80016fe <bme68x_get_data+0x1d2>
            {
                rslt = BME68X_W_NO_NEW_DATA;
 80016f0:	2302      	movs	r3, #2
 80016f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            if (new_fields == 0)
 80016f6:	e002      	b.n	80016fe <bme68x_get_data+0x1d2>
            }
        }
        else
        {
            rslt = BME68X_W_DEFINE_OP_MODE;
 80016f8:	2301      	movs	r3, #1
 80016fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        }

        if (n_data == NULL)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d103      	bne.n	800170c <bme68x_get_data+0x1e0>
        {
            rslt = BME68X_E_NULL_PTR;
 8001704:	23ff      	movs	r3, #255	; 0xff
 8001706:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        if (n_data == NULL)
 800170a:	e007      	b.n	800171c <bme68x_get_data+0x1f0>
        }
        else
        {
            *n_data = new_fields;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8001712:	701a      	strb	r2, [r3, #0]
        if (n_data == NULL)
 8001714:	e002      	b.n	800171c <bme68x_get_data+0x1f0>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8001716:	23ff      	movs	r3, #255	; 0xff
 8001718:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    }

    return rslt;
 800171c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 8001720:	4618      	mov	r0, r3
 8001722:	3768      	adds	r7, #104	; 0x68
 8001724:	46bd      	mov	sp, r7
 8001726:	bdb0      	pop	{r4, r5, r7, pc}

08001728 <bme68x_set_heatr_conf>:

/*
 * @brief This API is used to set the gas configuration of the sensor.
 */
int8_t bme68x_set_heatr_conf(uint8_t op_mode, const struct bme68x_heatr_conf *conf, struct bme68x_dev *dev)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b088      	sub	sp, #32
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
 8001734:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t nb_conv = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	773b      	strb	r3, [r7, #28]
    uint8_t hctrl, run_gas = 0;
 800173a:	2300      	movs	r3, #0
 800173c:	777b      	strb	r3, [r7, #29]
    uint8_t ctrl_gas_data[2];
    uint8_t ctrl_gas_addr[2] = { BME68X_REG_CTRL_GAS_0, BME68X_REG_CTRL_GAS_1 };
 800173e:	f247 1370 	movw	r3, #29040	; 0x7170
 8001742:	82bb      	strh	r3, [r7, #20]

    if (conf != NULL)
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d06e      	beq.n	8001828 <bme68x_set_heatr_conf+0x100>
    {
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 800174a:	6879      	ldr	r1, [r7, #4]
 800174c:	2000      	movs	r0, #0
 800174e:	f7ff fdf7 	bl	8001340 <bme68x_set_op_mode>
 8001752:	4603      	mov	r3, r0
 8001754:	77fb      	strb	r3, [r7, #31]
        if (rslt == BME68X_OK)
 8001756:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d108      	bne.n	8001770 <bme68x_set_heatr_conf+0x48>
        {
            rslt = set_conf(conf, op_mode, &nb_conv, dev);
 800175e:	f107 021c 	add.w	r2, r7, #28
 8001762:	7bf9      	ldrb	r1, [r7, #15]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	68b8      	ldr	r0, [r7, #8]
 8001768:	f001 f908 	bl	800297c <set_conf>
 800176c:	4603      	mov	r3, r0
 800176e:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8001770:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d159      	bne.n	800182c <bme68x_set_heatr_conf+0x104>
        {
            rslt = bme68x_get_regs(BME68X_REG_CTRL_GAS_0, ctrl_gas_data, 2, dev);
 8001778:	f107 0118 	add.w	r1, r7, #24
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2202      	movs	r2, #2
 8001780:	2070      	movs	r0, #112	; 0x70
 8001782:	f7ff fc51 	bl	8001028 <bme68x_get_regs>
 8001786:	4603      	mov	r3, r0
 8001788:	77fb      	strb	r3, [r7, #31]
            if (rslt == BME68X_OK)
 800178a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d14c      	bne.n	800182c <bme68x_set_heatr_conf+0x104>
            {
                if (conf->enable == BME68X_ENABLE)
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d10b      	bne.n	80017b2 <bme68x_set_heatr_conf+0x8a>
                {
                    hctrl = BME68X_ENABLE_HEATER;
 800179a:	2300      	movs	r3, #0
 800179c:	77bb      	strb	r3, [r7, #30]
                    if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d102      	bne.n	80017ac <bme68x_set_heatr_conf+0x84>
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_H;
 80017a6:	2302      	movs	r3, #2
 80017a8:	777b      	strb	r3, [r7, #29]
 80017aa:	e006      	b.n	80017ba <bme68x_set_heatr_conf+0x92>
                    }
                    else
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_L;
 80017ac:	2301      	movs	r3, #1
 80017ae:	777b      	strb	r3, [r7, #29]
 80017b0:	e003      	b.n	80017ba <bme68x_set_heatr_conf+0x92>
                    }
                }
                else
                {
                    hctrl = BME68X_DISABLE_HEATER;
 80017b2:	2301      	movs	r3, #1
 80017b4:	77bb      	strb	r3, [r7, #30]
                    run_gas = BME68X_DISABLE_GAS_MEAS;
 80017b6:	2300      	movs	r3, #0
 80017b8:	777b      	strb	r3, [r7, #29]
                }

                ctrl_gas_data[0] = BME68X_SET_BITS(ctrl_gas_data[0], BME68X_HCTRL, hctrl);
 80017ba:	7e3b      	ldrb	r3, [r7, #24]
 80017bc:	b25b      	sxtb	r3, r3
 80017be:	f023 0308 	bic.w	r3, r3, #8
 80017c2:	b25a      	sxtb	r2, r3
 80017c4:	7fbb      	ldrb	r3, [r7, #30]
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	b25b      	sxtb	r3, r3
 80017ca:	f003 0308 	and.w	r3, r3, #8
 80017ce:	b25b      	sxtb	r3, r3
 80017d0:	4313      	orrs	r3, r2
 80017d2:	b25b      	sxtb	r3, r3
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	763b      	strb	r3, [r7, #24]
                ctrl_gas_data[1] = BME68X_SET_BITS_POS_0(ctrl_gas_data[1], BME68X_NBCONV, nb_conv);
 80017d8:	7e7b      	ldrb	r3, [r7, #25]
 80017da:	b25b      	sxtb	r3, r3
 80017dc:	f023 030f 	bic.w	r3, r3, #15
 80017e0:	b25a      	sxtb	r2, r3
 80017e2:	7f3b      	ldrb	r3, [r7, #28]
 80017e4:	b25b      	sxtb	r3, r3
 80017e6:	f003 030f 	and.w	r3, r3, #15
 80017ea:	b25b      	sxtb	r3, r3
 80017ec:	4313      	orrs	r3, r2
 80017ee:	b25b      	sxtb	r3, r3
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	767b      	strb	r3, [r7, #25]
                ctrl_gas_data[1] = BME68X_SET_BITS(ctrl_gas_data[1], BME68X_RUN_GAS, run_gas);
 80017f4:	7e7b      	ldrb	r3, [r7, #25]
 80017f6:	b25b      	sxtb	r3, r3
 80017f8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80017fc:	b25a      	sxtb	r2, r3
 80017fe:	7f7b      	ldrb	r3, [r7, #29]
 8001800:	011b      	lsls	r3, r3, #4
 8001802:	b25b      	sxtb	r3, r3
 8001804:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001808:	b25b      	sxtb	r3, r3
 800180a:	4313      	orrs	r3, r2
 800180c:	b25b      	sxtb	r3, r3
 800180e:	b2db      	uxtb	r3, r3
 8001810:	767b      	strb	r3, [r7, #25]
                rslt = bme68x_set_regs(ctrl_gas_addr, ctrl_gas_data, 2, dev);
 8001812:	f107 0118 	add.w	r1, r7, #24
 8001816:	f107 0014 	add.w	r0, r7, #20
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2202      	movs	r2, #2
 800181e:	f7ff fb73 	bl	8000f08 <bme68x_set_regs>
 8001822:	4603      	mov	r3, r0
 8001824:	77fb      	strb	r3, [r7, #31]
 8001826:	e001      	b.n	800182c <bme68x_set_heatr_conf+0x104>
            }
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8001828:	23ff      	movs	r3, #255	; 0xff
 800182a:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 800182c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001830:	4618      	mov	r0, r3
 8001832:	3720      	adds	r7, #32
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <calc_temperature>:

#else

/* @brief This internal API is used to calculate the temperature value. */
static float calc_temperature(uint32_t temp_adc, struct bme68x_dev *dev)
{
 8001838:	b480      	push	{r7}
 800183a:	b087      	sub	sp, #28
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
    float var1;
    float var2;
    float calc_temp;

    /* calculate var1 data */
    var1 = ((((float)temp_adc / 16384.0f) - ((float)dev->calib.par_t1 / 1024.0f)) * ((float)dev->calib.par_t2));
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	ee07 3a90 	vmov	s15, r3
 8001848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800184c:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001930 <calc_temperature+0xf8>
 8001850:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	8bdb      	ldrh	r3, [r3, #30]
 8001858:	ee07 3a90 	vmov	s15, r3
 800185c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001860:	ed9f 6a34 	vldr	s12, [pc, #208]	; 8001934 <calc_temperature+0xfc>
 8001864:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001868:	ee37 7a67 	vsub.f32	s14, s14, s15
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001872:	ee07 3a90 	vmov	s15, r3
 8001876:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800187a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800187e:	edc7 7a05 	vstr	s15, [r7, #20]

    /* calculate var2 data */
    var2 =
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	ee07 3a90 	vmov	s15, r3
 8001888:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800188c:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8001938 <calc_temperature+0x100>
 8001890:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	8bdb      	ldrh	r3, [r3, #30]
 8001898:	ee07 3a90 	vmov	s15, r3
 800189c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80018a0:	ed9f 6a26 	vldr	s12, [pc, #152]	; 800193c <calc_temperature+0x104>
 80018a4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80018a8:	ee37 7a67 	vsub.f32	s14, s14, s15
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	ee07 3a90 	vmov	s15, r3
 80018b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018b6:	ed9f 6a20 	vldr	s12, [pc, #128]	; 8001938 <calc_temperature+0x100>
 80018ba:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	8bdb      	ldrh	r3, [r3, #30]
 80018c2:	ee07 3a90 	vmov	s15, r3
 80018c6:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 80018ca:	eddf 5a1c 	vldr	s11, [pc, #112]	; 800193c <calc_temperature+0x104>
 80018ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80018d2:	ee76 7ae7 	vsub.f32	s15, s13, s15
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 80018d6:	ee27 7a27 	vmul.f32	s14, s14, s15
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 80018e0:	ee07 3a90 	vmov	s15, r3
 80018e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018e8:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80018ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
    var2 =
 80018f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018f4:	edc7 7a04 	vstr	s15, [r7, #16]

    /* t_fine value*/
    dev->calib.t_fine = (var1 + var2);
 80018f8:	ed97 7a05 	vldr	s14, [r7, #20]
 80018fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001900:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

    /* compensated temperature data*/
    calc_temp = ((dev->calib.t_fine) / 5120.0f);
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8001910:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001940 <calc_temperature+0x108>
 8001914:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001918:	edc7 7a03 	vstr	s15, [r7, #12]

    return calc_temp;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	ee07 3a90 	vmov	s15, r3
}
 8001922:	eeb0 0a67 	vmov.f32	s0, s15
 8001926:	371c      	adds	r7, #28
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	46800000 	.word	0x46800000
 8001934:	44800000 	.word	0x44800000
 8001938:	48000000 	.word	0x48000000
 800193c:	46000000 	.word	0x46000000
 8001940:	45a00000 	.word	0x45a00000

08001944 <calc_pressure>:

/* @brief This internal API is used to calculate the pressure value. */
static float calc_pressure(uint32_t pres_adc, const struct bme68x_dev *dev)
{
 8001944:	b480      	push	{r7}
 8001946:	b087      	sub	sp, #28
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
    float var1;
    float var2;
    float var3;
    float calc_pres;

    var1 = (((float)dev->calib.t_fine / 2.0f) - 64000.0f);
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8001954:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001958:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800195c:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8001b98 <calc_pressure+0x254>
 8001960:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001964:	edc7 7a04 	vstr	s15, [r7, #16]
    var2 = var1 * var1 * (((float)dev->calib.par_p6) / (131072.0f));
 8001968:	edd7 7a04 	vldr	s15, [r7, #16]
 800196c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	f993 302e 	ldrsb.w	r3, [r3, #46]	; 0x2e
 8001976:	ee07 3a90 	vmov	s15, r3
 800197a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800197e:	ed9f 6a87 	vldr	s12, [pc, #540]	; 8001b9c <calc_pressure+0x258>
 8001982:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800198a:	edc7 7a03 	vstr	s15, [r7, #12]
    var2 = var2 + (var1 * ((float)dev->calib.par_p5) * 2.0f);
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001994:	ee07 3a90 	vmov	s15, r3
 8001998:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800199c:	edd7 7a04 	vldr	s15, [r7, #16]
 80019a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019a4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80019a8:	ed97 7a03 	vldr	s14, [r7, #12]
 80019ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019b0:	edc7 7a03 	vstr	s15, [r7, #12]
    var2 = (var2 / 4.0f) + (((float)dev->calib.par_p4) * 65536.0f);
 80019b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80019b8:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80019bc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80019c6:	ee07 3a90 	vmov	s15, r3
 80019ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ce:	eddf 6a74 	vldr	s13, [pc, #464]	; 8001ba0 <calc_pressure+0x25c>
 80019d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80019d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019da:	edc7 7a03 	vstr	s15, [r7, #12]
    var1 = (((((float)dev->calib.par_p3 * var1 * var1) / 16384.0f) + ((float)dev->calib.par_p2 * var1)) / 524288.0f);
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
 80019e4:	ee07 3a90 	vmov	s15, r3
 80019e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80019f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80019f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019fc:	eddf 6a69 	vldr	s13, [pc, #420]	; 8001ba4 <calc_pressure+0x260>
 8001a00:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8001a0a:	ee07 3a90 	vmov	s15, r3
 8001a0e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a12:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a1e:	eddf 6a62 	vldr	s13, [pc, #392]	; 8001ba8 <calc_pressure+0x264>
 8001a22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a26:	edc7 7a04 	vstr	s15, [r7, #16]
    var1 = ((1.0f + (var1 / 32768.0f)) * ((float)dev->calib.par_p1));
 8001a2a:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a2e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8001bac <calc_pressure+0x268>
 8001a32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001a42:	ee07 3a90 	vmov	s15, r3
 8001a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a4e:	edc7 7a04 	vstr	s15, [r7, #16]
    calc_pres = (1048576.0f - ((float)pres_adc));
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	ee07 3a90 	vmov	s15, r3
 8001a58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a5c:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001bb0 <calc_pressure+0x26c>
 8001a60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a64:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Avoid exception caused by division by zero */
    if ((int)var1 != 0)
 8001a68:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a70:	ee17 3a90 	vmov	r3, s15
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f000 8081 	beq.w	8001b7c <calc_pressure+0x238>
    {
        calc_pres = (((calc_pres - (var2 / 4096.0f)) * 6250.0f) / var1);
 8001a7a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a7e:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8001bb4 <calc_pressure+0x270>
 8001a82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a86:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a8e:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001bb8 <calc_pressure+0x274>
 8001a92:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001a96:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a9e:	edc7 7a05 	vstr	s15, [r7, #20]
        var1 = (((float)dev->calib.par_p9) * calc_pres * calc_pres) / 2147483648.0f;
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8001aa8:	ee07 3a90 	vmov	s15, r3
 8001aac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ab0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ab4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ab8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001abc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ac0:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8001bbc <calc_pressure+0x278>
 8001ac4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ac8:	edc7 7a04 	vstr	s15, [r7, #16]
        var2 = calc_pres * (((float)dev->calib.par_p8) / 32768.0f);
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8001ad2:	ee07 3a90 	vmov	s15, r3
 8001ad6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ada:	eddf 6a34 	vldr	s13, [pc, #208]	; 8001bac <calc_pressure+0x268>
 8001ade:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ae2:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aea:	edc7 7a03 	vstr	s15, [r7, #12]
        var3 = ((calc_pres / 256.0f) * (calc_pres / 256.0f) * (calc_pres / 256.0f) * (dev->calib.par_p10 / 131072.0f));
 8001aee:	edd7 7a05 	vldr	s15, [r7, #20]
 8001af2:	eddf 6a33 	vldr	s13, [pc, #204]	; 8001bc0 <calc_pressure+0x27c>
 8001af6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001afa:	edd7 6a05 	vldr	s13, [r7, #20]
 8001afe:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8001bc0 <calc_pressure+0x27c>
 8001b02:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001b06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b0a:	edd7 6a05 	vldr	s13, [r7, #20]
 8001b0e:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8001bc0 <calc_pressure+0x27c>
 8001b12:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001b16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b20:	ee07 3a90 	vmov	s15, r3
 8001b24:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b28:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8001b9c <calc_pressure+0x258>
 8001b2c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001b30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b34:	edc7 7a02 	vstr	s15, [r7, #8]
        calc_pres = (calc_pres + (var1 + var2 + var3 + ((float)dev->calib.par_p7 * 128.0f)) / 16.0f);
 8001b38:	ed97 7a04 	vldr	s14, [r7, #16]
 8001b3c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b44:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	f993 302f 	ldrsb.w	r3, [r3, #47]	; 0x2f
 8001b52:	ee07 3a90 	vmov	s15, r3
 8001b56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b5a:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001bc4 <calc_pressure+0x280>
 8001b5e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001b62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b66:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001b6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b6e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b76:	edc7 7a05 	vstr	s15, [r7, #20]
 8001b7a:	e002      	b.n	8001b82 <calc_pressure+0x23e>
    }
    else
    {
        calc_pres = 0;
 8001b7c:	f04f 0300 	mov.w	r3, #0
 8001b80:	617b      	str	r3, [r7, #20]
    }

    return calc_pres;
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	ee07 3a90 	vmov	s15, r3
}
 8001b88:	eeb0 0a67 	vmov.f32	s0, s15
 8001b8c:	371c      	adds	r7, #28
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	477a0000 	.word	0x477a0000
 8001b9c:	48000000 	.word	0x48000000
 8001ba0:	47800000 	.word	0x47800000
 8001ba4:	46800000 	.word	0x46800000
 8001ba8:	49000000 	.word	0x49000000
 8001bac:	47000000 	.word	0x47000000
 8001bb0:	49800000 	.word	0x49800000
 8001bb4:	45800000 	.word	0x45800000
 8001bb8:	45c35000 	.word	0x45c35000
 8001bbc:	4f000000 	.word	0x4f000000
 8001bc0:	43800000 	.word	0x43800000
 8001bc4:	43000000 	.word	0x43000000

08001bc8 <calc_humidity>:

/* This internal API is used to calculate the humidity in integer */
static float calc_humidity(uint16_t hum_adc, const struct bme68x_dev *dev)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b089      	sub	sp, #36	; 0x24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	6039      	str	r1, [r7, #0]
 8001bd2:	80fb      	strh	r3, [r7, #6]
    float var3;
    float var4;
    float temp_comp;

    /* compensated temperature data*/
    temp_comp = ((dev->calib.t_fine) / 5120.0f);
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8001bda:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8001d44 <calc_humidity+0x17c>
 8001bde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001be2:	edc7 7a06 	vstr	s15, [r7, #24]
    var1 = (float)((float)hum_adc) -
 8001be6:	88fb      	ldrh	r3, [r7, #6]
 8001be8:	ee07 3a90 	vmov	s15, r3
 8001bec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
           (((float)dev->calib.par_h1 * 16.0f) + (((float)dev->calib.par_h3 / 2.0f) * temp_comp));
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	8a1b      	ldrh	r3, [r3, #16]
 8001bf4:	ee07 3a90 	vmov	s15, r3
 8001bf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bfc:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001c00:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8001c0a:	ee07 3a90 	vmov	s15, r3
 8001c0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c12:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001c16:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8001c1a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c1e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
    var1 = (float)((float)hum_adc) -
 8001c26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c2a:	edc7 7a05 	vstr	s15, [r7, #20]
    var2 = var1 *
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	8a5b      	ldrh	r3, [r3, #18]
 8001c32:	ee07 3a90 	vmov	s15, r3
 8001c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c3a:	eddf 6a43 	vldr	s13, [pc, #268]	; 8001d48 <calc_humidity+0x180>
 8001c3e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8001c48:	ee07 3a90 	vmov	s15, r3
 8001c4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c50:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8001d4c <calc_humidity+0x184>
 8001c54:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001c58:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c64:	ee77 6aa6 	vadd.f32	s13, s15, s13
                     (((float)dev->calib.par_h5 / 1048576.0f) * temp_comp * temp_comp))));
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001c6e:	ee07 3a90 	vmov	s15, r3
 8001c72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c76:	eddf 5a36 	vldr	s11, [pc, #216]	; 8001d50 <calc_humidity+0x188>
 8001c7a:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8001c7e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c82:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c86:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c8a:	ee66 7a27 	vmul.f32	s15, s12, s15
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
 8001c8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
 8001c92:	ee67 7a27 	vmul.f32	s15, s14, s15
    var2 = var1 *
 8001c96:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c9e:	edc7 7a04 	vstr	s15, [r7, #16]
    var3 = (float)dev->calib.par_h6 / 16384.0f;
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	7ddb      	ldrb	r3, [r3, #23]
 8001ca6:	ee07 3a90 	vmov	s15, r3
 8001caa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001cae:	eddf 6a27 	vldr	s13, [pc, #156]	; 8001d4c <calc_humidity+0x184>
 8001cb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cb6:	edc7 7a03 	vstr	s15, [r7, #12]
    var4 = (float)dev->calib.par_h7 / 2097152.0f;
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8001cc0:	ee07 3a90 	vmov	s15, r3
 8001cc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cc8:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001d54 <calc_humidity+0x18c>
 8001ccc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cd0:	edc7 7a02 	vstr	s15, [r7, #8]
    calc_hum = var2 + ((var3 + (var4 * temp_comp)) * var2 * var2);
 8001cd4:	ed97 7a02 	vldr	s14, [r7, #8]
 8001cd8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ce0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ce4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ce8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cf0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cf8:	ed97 7a04 	vldr	s14, [r7, #16]
 8001cfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d00:	edc7 7a07 	vstr	s15, [r7, #28]
    if (calc_hum > 100.0f)
 8001d04:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d08:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001d58 <calc_humidity+0x190>
 8001d0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d14:	dd02      	ble.n	8001d1c <calc_humidity+0x154>
    {
        calc_hum = 100.0f;
 8001d16:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <calc_humidity+0x194>)
 8001d18:	61fb      	str	r3, [r7, #28]
 8001d1a:	e009      	b.n	8001d30 <calc_humidity+0x168>
    }
    else if (calc_hum < 0.0f)
 8001d1c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d28:	d502      	bpl.n	8001d30 <calc_humidity+0x168>
    {
        calc_hum = 0.0f;
 8001d2a:	f04f 0300 	mov.w	r3, #0
 8001d2e:	61fb      	str	r3, [r7, #28]
    }

    return calc_hum;
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	ee07 3a90 	vmov	s15, r3
}
 8001d36:	eeb0 0a67 	vmov.f32	s0, s15
 8001d3a:	3724      	adds	r7, #36	; 0x24
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	45a00000 	.word	0x45a00000
 8001d48:	48800000 	.word	0x48800000
 8001d4c:	46800000 	.word	0x46800000
 8001d50:	49800000 	.word	0x49800000
 8001d54:	4a000000 	.word	0x4a000000
 8001d58:	42c80000 	.word	0x42c80000
 8001d5c:	42c80000 	.word	0x42c80000

08001d60 <calc_gas_resistance_low>:

/* This internal API is used to calculate the gas resistance low value in float */
static float calc_gas_resistance_low(uint16_t gas_res_adc, uint8_t gas_range, const struct bme68x_dev *dev)
{
 8001d60:	b4b0      	push	{r4, r5, r7}
 8001d62:	b0a9      	sub	sp, #164	; 0xa4
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	603a      	str	r2, [r7, #0]
 8001d6a:	80fb      	strh	r3, [r7, #6]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	717b      	strb	r3, [r7, #5]
    float calc_gas_res;
    float var1;
    float var2;
    float var3;
    float gas_res_f = gas_res_adc;
 8001d70:	88fb      	ldrh	r3, [r7, #6]
 8001d72:	ee07 3a90 	vmov	s15, r3
 8001d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d7a:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
    float gas_range_f = (1U << gas_range); /*lint !e790 / Suspicious truncation, integral to float */
 8001d7e:	797b      	ldrb	r3, [r7, #5]
 8001d80:	2201      	movs	r2, #1
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	ee07 3a90 	vmov	s15, r3
 8001d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d8e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
    const float lookup_k1_range[16] = {
 8001d92:	4b3e      	ldr	r3, [pc, #248]	; (8001e8c <calc_gas_resistance_low+0x12c>)
 8001d94:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8001d98:	461d      	mov	r5, r3
 8001d9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001da0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001da2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001da4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001da6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001daa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, -1.0f, 0.0f, -0.8f, 0.0f, 0.0f, -0.2f, -0.5f, 0.0f, -1.0f, 0.0f, 0.0f
    };
    const float lookup_k2_range[16] = {
 8001dae:	4b38      	ldr	r3, [pc, #224]	; (8001e90 <calc_gas_resistance_low+0x130>)
 8001db0:	f107 0408 	add.w	r4, r7, #8
 8001db4:	461d      	mov	r5, r3
 8001db6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001db8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dc2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001dc6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0.0f, 0.0f, 0.0f, 0.0f, 0.1f, 0.7f, 0.0f, -0.8f, -0.1f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f
    };

    var1 = (1340.0f + (5.0f * dev->calib.range_sw_err));
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	f993 303e 	ldrsb.w	r3, [r3, #62]	; 0x3e
 8001dd0:	ee07 3a90 	vmov	s15, r3
 8001dd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dd8:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001ddc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001de0:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001e94 <calc_gas_resistance_low+0x134>
 8001de4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001de8:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
    var2 = (var1) * (1.0f + lookup_k1_range[gas_range] / 100.0f);
 8001dec:	797b      	ldrb	r3, [r7, #5]
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	33a0      	adds	r3, #160	; 0xa0
 8001df2:	443b      	add	r3, r7
 8001df4:	3b58      	subs	r3, #88	; 0x58
 8001df6:	ed93 7a00 	vldr	s14, [r3]
 8001dfa:	eddf 6a27 	vldr	s13, [pc, #156]	; 8001e98 <calc_gas_resistance_low+0x138>
 8001dfe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e06:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e0a:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8001e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e12:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
    var3 = 1.0f + (lookup_k2_range[gas_range] / 100.0f);
 8001e16:	797b      	ldrb	r3, [r7, #5]
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	33a0      	adds	r3, #160	; 0xa0
 8001e1c:	443b      	add	r3, r7
 8001e1e:	3b98      	subs	r3, #152	; 0x98
 8001e20:	ed93 7a00 	vldr	s14, [r3]
 8001e24:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001e98 <calc_gas_resistance_low+0x138>
 8001e28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e30:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e34:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
    calc_gas_res = 1.0f / (float)(var3 * (0.000000125f) * gas_range_f * (((gas_res_f - 512.0f) / var2) + 1.0f));
 8001e38:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001e3c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001e9c <calc_gas_resistance_low+0x13c>
 8001e40:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e44:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001e48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e4c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001e50:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001ea0 <calc_gas_resistance_low+0x140>
 8001e54:	ee37 6ae6 	vsub.f32	s12, s15, s13
 8001e58:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 8001e5c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001e60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e74:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88

    return calc_gas_res;
 8001e78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e7c:	ee07 3a90 	vmov	s15, r3
}
 8001e80:	eeb0 0a67 	vmov.f32	s0, s15
 8001e84:	37a4      	adds	r7, #164	; 0xa4
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bcb0      	pop	{r4, r5, r7}
 8001e8a:	4770      	bx	lr
 8001e8c:	0800ce18 	.word	0x0800ce18
 8001e90:	0800ce58 	.word	0x0800ce58
 8001e94:	44a78000 	.word	0x44a78000
 8001e98:	42c80000 	.word	0x42c80000
 8001e9c:	340637bd 	.word	0x340637bd
 8001ea0:	44000000 	.word	0x44000000

08001ea4 <calc_gas_resistance_high>:

/* This internal API is used to calculate the gas resistance value in float */
static float calc_gas_resistance_high(uint16_t gas_res_adc, uint8_t gas_range)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b087      	sub	sp, #28
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	460a      	mov	r2, r1
 8001eae:	80fb      	strh	r3, [r7, #6]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	717b      	strb	r3, [r7, #5]
    float calc_gas_res;
    uint32_t var1 = UINT32_C(262144) >> gas_range;
 8001eb4:	797b      	ldrb	r3, [r7, #5]
 8001eb6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001eba:	fa22 f303 	lsr.w	r3, r2, r3
 8001ebe:	617b      	str	r3, [r7, #20]
    int32_t var2 = (int32_t)gas_res_adc - INT32_C(512);
 8001ec0:	88fb      	ldrh	r3, [r7, #6]
 8001ec2:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001ec6:	613b      	str	r3, [r7, #16]

    var2 *= INT32_C(3);
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	4413      	add	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
    var2 = INT32_C(4096) + var2;
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ed8:	613b      	str	r3, [r7, #16]

    calc_gas_res = 1000000.0f * (float)var1 / (float)var2;
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	ee07 3a90 	vmov	s15, r3
 8001ee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ee4:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001f14 <calc_gas_resistance_high+0x70>
 8001ee8:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	ee07 3a90 	vmov	s15, r3
 8001ef2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ef6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001efa:	edc7 7a03 	vstr	s15, [r7, #12]

    return calc_gas_res;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	ee07 3a90 	vmov	s15, r3
}
 8001f04:	eeb0 0a67 	vmov.f32	s0, s15
 8001f08:	371c      	adds	r7, #28
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	49742400 	.word	0x49742400

08001f18 <calc_res_heat>:

/* This internal API is used to calculate the heater resistance value using float */
static uint8_t calc_res_heat(uint16_t temp, const struct bme68x_dev *dev)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b08b      	sub	sp, #44	; 0x2c
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	81fb      	strh	r3, [r7, #14]
    float var3;
    float var4;
    float var5;
    uint8_t res_heat;

    if (temp > 400) /* Cap temperature */
 8001f24:	89fb      	ldrh	r3, [r7, #14]
 8001f26:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001f2a:	d902      	bls.n	8001f32 <calc_res_heat+0x1a>
    {
        temp = 400;
 8001f2c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001f30:	81fb      	strh	r3, [r7, #14]
    }

    var1 = (((float)dev->calib.par_gh1 / (16.0f)) + 49.0f);
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	f993 3019 	ldrsb.w	r3, [r3, #25]
 8001f38:	ee07 3a90 	vmov	s15, r3
 8001f3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f40:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001f44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f48:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800205c <calc_res_heat+0x144>
 8001f4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f50:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    var2 = ((((float)dev->calib.par_gh2 / (32768.0f)) * (0.0005f)) + 0.00235f);
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001f5a:	ee07 3a90 	vmov	s15, r3
 8001f5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f62:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8002060 <calc_res_heat+0x148>
 8001f66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f6a:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8002064 <calc_res_heat+0x14c>
 8001f6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f72:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8002068 <calc_res_heat+0x150>
 8001f76:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f7a:	edc7 7a08 	vstr	s15, [r7, #32]
    var3 = ((float)dev->calib.par_gh3 / (1024.0f));
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	f993 301c 	ldrsb.w	r3, [r3, #28]
 8001f84:	ee07 3a90 	vmov	s15, r3
 8001f88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f8c:	eddf 6a37 	vldr	s13, [pc, #220]	; 800206c <calc_res_heat+0x154>
 8001f90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f94:	edc7 7a07 	vstr	s15, [r7, #28]
    var4 = (var1 * (1.0f + (var2 * (float)temp)));
 8001f98:	89fb      	ldrh	r3, [r7, #14]
 8001f9a:	ee07 3a90 	vmov	s15, r3
 8001f9e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fa2:	edd7 7a08 	vldr	s15, [r7, #32]
 8001fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001faa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001fae:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fb2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fba:	edc7 7a06 	vstr	s15, [r7, #24]
    var5 = (var4 + (var3 * (float)dev->amb_temp));
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8001fc4:	ee07 3a90 	vmov	s15, r3
 8001fc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fcc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001fd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fd4:	ed97 7a06 	vldr	s14, [r7, #24]
 8001fd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fdc:	edc7 7a05 	vstr	s15, [r7, #20]
    res_heat =
        (uint8_t)(3.4f *
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fe6:	ee07 3a90 	vmov	s15, r3
 8001fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fee:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001ff2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ff6:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ffe:	edd7 7a05 	vldr	s15, [r7, #20]
 8002002:	ee27 7a27 	vmul.f32	s14, s14, s15
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	f993 303d 	ldrsb.w	r3, [r3, #61]	; 0x3d
 800200c:	ee07 3a90 	vmov	s15, r3
 8002010:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002014:	eddf 6a16 	vldr	s13, [pc, #88]	; 8002070 <calc_res_heat+0x158>
 8002018:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800201c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002020:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8002024:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002028:	eec6 7a26 	vdiv.f32	s15, s12, s13
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 800202c:	ee67 7a27 	vmul.f32	s15, s14, s15
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 8002030:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002034:	ee77 7ac7 	vsub.f32	s15, s15, s14
        (uint8_t)(3.4f *
 8002038:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002074 <calc_res_heat+0x15c>
 800203c:	ee67 7a87 	vmul.f32	s15, s15, s14
    res_heat =
 8002040:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002044:	edc7 7a01 	vstr	s15, [r7, #4]
 8002048:	793b      	ldrb	r3, [r7, #4]
 800204a:	74fb      	strb	r3, [r7, #19]
                   25));

    return res_heat;
 800204c:	7cfb      	ldrb	r3, [r7, #19]
}
 800204e:	4618      	mov	r0, r3
 8002050:	372c      	adds	r7, #44	; 0x2c
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	42440000 	.word	0x42440000
 8002060:	47000000 	.word	0x47000000
 8002064:	3a03126f 	.word	0x3a03126f
 8002068:	3b1a0275 	.word	0x3b1a0275
 800206c:	44800000 	.word	0x44800000
 8002070:	3b03126f 	.word	0x3b03126f
 8002074:	4059999a 	.word	0x4059999a

08002078 <calc_gas_wait>:

#endif

/* This internal API is used to calculate the gas wait */
static uint8_t calc_gas_wait(uint16_t dur)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	80fb      	strh	r3, [r7, #6]
    uint8_t factor = 0;
 8002082:	2300      	movs	r3, #0
 8002084:	73fb      	strb	r3, [r7, #15]
    uint8_t durval;

    if (dur >= 0xfc0)
 8002086:	88fb      	ldrh	r3, [r7, #6]
 8002088:	f5b3 6f7c 	cmp.w	r3, #4032	; 0xfc0
 800208c:	d308      	bcc.n	80020a0 <calc_gas_wait+0x28>
    {
        durval = 0xff; /* Max duration*/
 800208e:	23ff      	movs	r3, #255	; 0xff
 8002090:	73bb      	strb	r3, [r7, #14]
 8002092:	e00f      	b.n	80020b4 <calc_gas_wait+0x3c>
    }
    else
    {
        while (dur > 0x3F)
        {
            dur = dur / 4;
 8002094:	88fb      	ldrh	r3, [r7, #6]
 8002096:	089b      	lsrs	r3, r3, #2
 8002098:	80fb      	strh	r3, [r7, #6]
            factor += 1;
 800209a:	7bfb      	ldrb	r3, [r7, #15]
 800209c:	3301      	adds	r3, #1
 800209e:	73fb      	strb	r3, [r7, #15]
        while (dur > 0x3F)
 80020a0:	88fb      	ldrh	r3, [r7, #6]
 80020a2:	2b3f      	cmp	r3, #63	; 0x3f
 80020a4:	d8f6      	bhi.n	8002094 <calc_gas_wait+0x1c>
        }

        durval = (uint8_t)(dur + (factor * 64));
 80020a6:	88fb      	ldrh	r3, [r7, #6]
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	7bfb      	ldrb	r3, [r7, #15]
 80020ac:	019b      	lsls	r3, r3, #6
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	4413      	add	r3, r2
 80020b2:	73bb      	strb	r3, [r7, #14]
    }

    return durval;
 80020b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <read_field_data>:

/* This internal API is used to read a single data of the sensor */
static int8_t read_field_data(uint8_t index, struct bme68x_data *data, struct bme68x_dev *dev)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b08e      	sub	sp, #56	; 0x38
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	4603      	mov	r3, r0
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	607a      	str	r2, [r7, #4]
 80020ce:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME68X_OK;
 80020d0:	2300      	movs	r3, #0
 80020d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint8_t buff[BME68X_LEN_FIELD] = { 0 };
 80020d6:	2300      	movs	r3, #0
 80020d8:	613b      	str	r3, [r7, #16]
 80020da:	f107 0314 	add.w	r3, r7, #20
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	605a      	str	r2, [r3, #4]
 80020e4:	609a      	str	r2, [r3, #8]
 80020e6:	731a      	strb	r2, [r3, #12]
    uint8_t gas_range_l, gas_range_h;
    uint32_t adc_temp;
    uint32_t adc_pres;
    uint16_t adc_hum;
    uint16_t adc_gas_res_low, adc_gas_res_high;
    uint8_t tries = 5;
 80020e8:	2305      	movs	r3, #5
 80020ea:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    while ((tries) && (rslt == BME68X_OK))
 80020ee:	e123      	b.n	8002338 <read_field_data+0x276>
    {
        rslt = bme68x_get_regs(((uint8_t)(BME68X_REG_FIELD0 + (index * BME68X_LEN_FIELD_OFFSET))),
 80020f0:	7bfb      	ldrb	r3, [r7, #15]
 80020f2:	461a      	mov	r2, r3
 80020f4:	0112      	lsls	r2, r2, #4
 80020f6:	4413      	add	r3, r2
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	331d      	adds	r3, #29
 80020fc:	b2d8      	uxtb	r0, r3
 80020fe:	f107 0110 	add.w	r1, r7, #16
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2211      	movs	r2, #17
 8002106:	f7fe ff8f 	bl	8001028 <bme68x_get_regs>
 800210a:	4603      	mov	r3, r0
 800210c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                               buff,
                               (uint16_t)BME68X_LEN_FIELD,
                               dev);
        if (!data)
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d103      	bne.n	800211e <read_field_data+0x5c>
        {
            rslt = BME68X_E_NULL_PTR;
 8002116:	23ff      	movs	r3, #255	; 0xff
 8002118:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            break;
 800211c:	e115      	b.n	800234a <read_field_data+0x288>
        }

        data->status = buff[0] & BME68X_NEW_DATA_MSK;
 800211e:	7c3b      	ldrb	r3, [r7, #16]
 8002120:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002124:	b2da      	uxtb	r2, r3
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	701a      	strb	r2, [r3, #0]
        data->gas_index = buff[0] & BME68X_GAS_INDEX_MSK;
 800212a:	7c3b      	ldrb	r3, [r7, #16]
 800212c:	f003 030f 	and.w	r3, r3, #15
 8002130:	b2da      	uxtb	r2, r3
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	705a      	strb	r2, [r3, #1]
        data->meas_index = buff[1];
 8002136:	7c7a      	ldrb	r2, [r7, #17]
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	709a      	strb	r2, [r3, #2]

        /* read the raw data from the sensor */
        adc_pres = (uint32_t)(((uint32_t)buff[2] * 4096) | ((uint32_t)buff[3] * 16) | ((uint32_t)buff[4] / 16));
 800213c:	7cbb      	ldrb	r3, [r7, #18]
 800213e:	031a      	lsls	r2, r3, #12
 8002140:	7cfb      	ldrb	r3, [r7, #19]
 8002142:	011b      	lsls	r3, r3, #4
 8002144:	4313      	orrs	r3, r2
 8002146:	7d3a      	ldrb	r2, [r7, #20]
 8002148:	0912      	lsrs	r2, r2, #4
 800214a:	b2d2      	uxtb	r2, r2
 800214c:	4313      	orrs	r3, r2
 800214e:	633b      	str	r3, [r7, #48]	; 0x30
        adc_temp = (uint32_t)(((uint32_t)buff[5] * 4096) | ((uint32_t)buff[6] * 16) | ((uint32_t)buff[7] / 16));
 8002150:	7d7b      	ldrb	r3, [r7, #21]
 8002152:	031a      	lsls	r2, r3, #12
 8002154:	7dbb      	ldrb	r3, [r7, #22]
 8002156:	011b      	lsls	r3, r3, #4
 8002158:	4313      	orrs	r3, r2
 800215a:	7dfa      	ldrb	r2, [r7, #23]
 800215c:	0912      	lsrs	r2, r2, #4
 800215e:	b2d2      	uxtb	r2, r2
 8002160:	4313      	orrs	r3, r2
 8002162:	62fb      	str	r3, [r7, #44]	; 0x2c
        adc_hum = (uint16_t)(((uint32_t)buff[8] * 256) | (uint32_t)buff[9]);
 8002164:	7e3b      	ldrb	r3, [r7, #24]
 8002166:	b29b      	uxth	r3, r3
 8002168:	021b      	lsls	r3, r3, #8
 800216a:	b29a      	uxth	r2, r3
 800216c:	7e7b      	ldrb	r3, [r7, #25]
 800216e:	b29b      	uxth	r3, r3
 8002170:	4313      	orrs	r3, r2
 8002172:	857b      	strh	r3, [r7, #42]	; 0x2a
        adc_gas_res_low = (uint16_t)((uint32_t)buff[13] * 4 | (((uint32_t)buff[14]) / 64));
 8002174:	7f7b      	ldrb	r3, [r7, #29]
 8002176:	b29b      	uxth	r3, r3
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	b29a      	uxth	r2, r3
 800217c:	7fbb      	ldrb	r3, [r7, #30]
 800217e:	099b      	lsrs	r3, r3, #6
 8002180:	b2db      	uxtb	r3, r3
 8002182:	b29b      	uxth	r3, r3
 8002184:	4313      	orrs	r3, r2
 8002186:	853b      	strh	r3, [r7, #40]	; 0x28
        adc_gas_res_high = (uint16_t)((uint32_t)buff[15] * 4 | (((uint32_t)buff[16]) / 64));
 8002188:	7ffb      	ldrb	r3, [r7, #31]
 800218a:	b29b      	uxth	r3, r3
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	b29a      	uxth	r2, r3
 8002190:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002194:	099b      	lsrs	r3, r3, #6
 8002196:	b2db      	uxtb	r3, r3
 8002198:	b29b      	uxth	r3, r3
 800219a:	4313      	orrs	r3, r2
 800219c:	84fb      	strh	r3, [r7, #38]	; 0x26
        gas_range_l = buff[14] & BME68X_GAS_RANGE_MSK;
 800219e:	7fbb      	ldrb	r3, [r7, #30]
 80021a0:	f003 030f 	and.w	r3, r3, #15
 80021a4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        gas_range_h = buff[16] & BME68X_GAS_RANGE_MSK;
 80021a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80021ac:	f003 030f 	and.w	r3, r3, #15
 80021b0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d11c      	bne.n	80021f6 <read_field_data+0x134>
        {
            data->status |= buff[16] & BME68X_GASM_VALID_MSK;
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	b25a      	sxtb	r2, r3
 80021c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80021c6:	b25b      	sxtb	r3, r3
 80021c8:	f003 0320 	and.w	r3, r3, #32
 80021cc:	b25b      	sxtb	r3, r3
 80021ce:	4313      	orrs	r3, r2
 80021d0:	b25b      	sxtb	r3, r3
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	701a      	strb	r2, [r3, #0]
            data->status |= buff[16] & BME68X_HEAT_STAB_MSK;
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	b25a      	sxtb	r2, r3
 80021de:	f897 3020 	ldrb.w	r3, [r7, #32]
 80021e2:	b25b      	sxtb	r3, r3
 80021e4:	f003 0310 	and.w	r3, r3, #16
 80021e8:	b25b      	sxtb	r3, r3
 80021ea:	4313      	orrs	r3, r2
 80021ec:	b25b      	sxtb	r3, r3
 80021ee:	b2da      	uxtb	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	701a      	strb	r2, [r3, #0]
 80021f4:	e019      	b.n	800222a <read_field_data+0x168>
        }
        else
        {
            data->status |= buff[14] & BME68X_GASM_VALID_MSK;
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	b25a      	sxtb	r2, r3
 80021fc:	7fbb      	ldrb	r3, [r7, #30]
 80021fe:	b25b      	sxtb	r3, r3
 8002200:	f003 0320 	and.w	r3, r3, #32
 8002204:	b25b      	sxtb	r3, r3
 8002206:	4313      	orrs	r3, r2
 8002208:	b25b      	sxtb	r3, r3
 800220a:	b2da      	uxtb	r2, r3
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	701a      	strb	r2, [r3, #0]
            data->status |= buff[14] & BME68X_HEAT_STAB_MSK;
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	b25a      	sxtb	r2, r3
 8002216:	7fbb      	ldrb	r3, [r7, #30]
 8002218:	b25b      	sxtb	r3, r3
 800221a:	f003 0310 	and.w	r3, r3, #16
 800221e:	b25b      	sxtb	r3, r3
 8002220:	4313      	orrs	r3, r2
 8002222:	b25b      	sxtb	r3, r3
 8002224:	b2da      	uxtb	r2, r3
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	701a      	strb	r2, [r3, #0]
        }

        if ((data->status & BME68X_NEW_DATA_MSK) && (rslt == BME68X_OK))
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	b25b      	sxtb	r3, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	da70      	bge.n	8002316 <read_field_data+0x254>
 8002234:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002238:	2b00      	cmp	r3, #0
 800223a:	d16c      	bne.n	8002316 <read_field_data+0x254>
        {
            rslt = bme68x_get_regs(BME68X_REG_RES_HEAT0 + data->gas_index, &data->res_heat, 1, dev);
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	785b      	ldrb	r3, [r3, #1]
 8002240:	335a      	adds	r3, #90	; 0x5a
 8002242:	b2d8      	uxtb	r0, r3
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	1cd9      	adds	r1, r3, #3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f7fe feec 	bl	8001028 <bme68x_get_regs>
 8002250:	4603      	mov	r3, r0
 8002252:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            if (rslt == BME68X_OK)
 8002256:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800225a:	2b00      	cmp	r3, #0
 800225c:	d10c      	bne.n	8002278 <read_field_data+0x1b6>
            {
                rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0 + data->gas_index, &data->idac, 1, dev);
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	785b      	ldrb	r3, [r3, #1]
 8002262:	3350      	adds	r3, #80	; 0x50
 8002264:	b2d8      	uxtb	r0, r3
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	1d19      	adds	r1, r3, #4
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2201      	movs	r2, #1
 800226e:	f7fe fedb 	bl	8001028 <bme68x_get_regs>
 8002272:	4603      	mov	r3, r0
 8002274:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            }

            if (rslt == BME68X_OK)
 8002278:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800227c:	2b00      	cmp	r3, #0
 800227e:	d10c      	bne.n	800229a <read_field_data+0x1d8>
            {
                rslt = bme68x_get_regs(BME68X_REG_GAS_WAIT0 + data->gas_index, &data->gas_wait, 1, dev);
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	785b      	ldrb	r3, [r3, #1]
 8002284:	3364      	adds	r3, #100	; 0x64
 8002286:	b2d8      	uxtb	r0, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	1d59      	adds	r1, r3, #5
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f7fe feca 	bl	8001028 <bme68x_get_regs>
 8002294:	4603      	mov	r3, r0
 8002296:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            }

            if (rslt == BME68X_OK)
 800229a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d139      	bne.n	8002316 <read_field_data+0x254>
            {
                data->temperature = calc_temperature(adc_temp, dev);
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80022a6:	f7ff fac7 	bl	8001838 <calc_temperature>
 80022aa:	eef0 7a40 	vmov.f32	s15, s0
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	edc3 7a02 	vstr	s15, [r3, #8]
                data->pressure = calc_pressure(adc_pres, dev);
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022b8:	f7ff fb44 	bl	8001944 <calc_pressure>
 80022bc:	eef0 7a40 	vmov.f32	s15, s0
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	edc3 7a03 	vstr	s15, [r3, #12]
                data->humidity = calc_humidity(adc_hum, dev);
 80022c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff fc7c 	bl	8001bc8 <calc_humidity>
 80022d0:	eef0 7a40 	vmov.f32	s15, s0
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	edc3 7a04 	vstr	s15, [r3, #16]
                if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d10c      	bne.n	80022fc <read_field_data+0x23a>
                {
                    data->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
 80022e2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80022e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80022e8:	4611      	mov	r1, r2
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff fdda 	bl	8001ea4 <calc_gas_resistance_high>
 80022f0:	eef0 7a40 	vmov.f32	s15, s0
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	edc3 7a05 	vstr	s15, [r3, #20]
                else
                {
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
                }

                break;
 80022fa:	e026      	b.n	800234a <read_field_data+0x288>
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 80022fc:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8002300:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff fd2b 	bl	8001d60 <calc_gas_resistance_low>
 800230a:	eef0 7a40 	vmov.f32	s15, s0
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	edc3 7a05 	vstr	s15, [r3, #20]
                break;
 8002314:	e019      	b.n	800234a <read_field_data+0x288>
            }
        }

        if (rslt == BME68X_OK)
 8002316:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800231a:	2b00      	cmp	r3, #0
 800231c:	d107      	bne.n	800232e <read_field_data+0x26c>
        {
            dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	6852      	ldr	r2, [r2, #4]
 8002326:	4611      	mov	r1, r2
 8002328:	f242 7010 	movw	r0, #10000	; 0x2710
 800232c:	4798      	blx	r3
        }

        tries--;
 800232e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002332:	3b01      	subs	r3, #1
 8002334:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    while ((tries) && (rslt == BME68X_OK))
 8002338:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800233c:	2b00      	cmp	r3, #0
 800233e:	d004      	beq.n	800234a <read_field_data+0x288>
 8002340:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002344:	2b00      	cmp	r3, #0
 8002346:	f43f aed3 	beq.w	80020f0 <read_field_data+0x2e>
    }

    return rslt;
 800234a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800234e:	4618      	mov	r0, r3
 8002350:	3738      	adds	r7, #56	; 0x38
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <read_all_field_data>:

/* This internal API is used to read all data fields of the sensor */
static int8_t read_all_field_data(struct bme68x_data * const data[], struct bme68x_dev *dev)
{
 8002356:	b590      	push	{r4, r7, lr}
 8002358:	b09d      	sub	sp, #116	; 0x74
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
 800235e:	6039      	str	r1, [r7, #0]
    int8_t rslt = BME68X_OK;
 8002360:	2300      	movs	r3, #0
 8002362:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    uint8_t buff[BME68X_LEN_FIELD * 3] = { 0 };
 8002366:	2300      	movs	r3, #0
 8002368:	62bb      	str	r3, [r7, #40]	; 0x28
 800236a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800236e:	222f      	movs	r2, #47	; 0x2f
 8002370:	2100      	movs	r1, #0
 8002372:	4618      	mov	r0, r3
 8002374:	f007 fe48 	bl	800a008 <memset>
    uint32_t adc_temp;
    uint32_t adc_pres;
    uint16_t adc_hum;
    uint16_t adc_gas_res_low, adc_gas_res_high;
    uint8_t off;
    uint8_t set_val[30] = { 0 }; /* idac, res_heat, gas_wait */
 8002378:	2300      	movs	r3, #0
 800237a:	60bb      	str	r3, [r7, #8]
 800237c:	f107 030c 	add.w	r3, r7, #12
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	605a      	str	r2, [r3, #4]
 8002386:	609a      	str	r2, [r3, #8]
 8002388:	60da      	str	r2, [r3, #12]
 800238a:	611a      	str	r2, [r3, #16]
 800238c:	615a      	str	r2, [r3, #20]
 800238e:	831a      	strh	r2, [r3, #24]
    uint8_t i;

    if (!data[0] && !data[1] && !data[2])
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d10c      	bne.n	80023b2 <read_all_field_data+0x5c>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3304      	adds	r3, #4
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d107      	bne.n	80023b2 <read_all_field_data+0x5c>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3308      	adds	r3, #8
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d102      	bne.n	80023b2 <read_all_field_data+0x5c>
    {
        rslt = BME68X_E_NULL_PTR;
 80023ac:	23ff      	movs	r3, #255	; 0xff
 80023ae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }

    if (rslt == BME68X_OK)
 80023b2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d109      	bne.n	80023ce <read_all_field_data+0x78>
    {
        rslt = bme68x_get_regs(BME68X_REG_FIELD0, buff, (uint32_t) BME68X_LEN_FIELD * 3, dev);
 80023ba:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	2233      	movs	r2, #51	; 0x33
 80023c2:	201d      	movs	r0, #29
 80023c4:	f7fe fe30 	bl	8001028 <bme68x_get_regs>
 80023c8:	4603      	mov	r3, r0
 80023ca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }

    if (rslt == BME68X_OK)
 80023ce:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d109      	bne.n	80023ea <read_all_field_data+0x94>
    {
        rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0, set_val, 30, dev);
 80023d6:	f107 0108 	add.w	r1, r7, #8
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	221e      	movs	r2, #30
 80023de:	2050      	movs	r0, #80	; 0x50
 80023e0:	f7fe fe22 	bl	8001028 <bme68x_get_regs>
 80023e4:	4603      	mov	r3, r0
 80023e6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }

    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 80023ea:	2300      	movs	r3, #0
 80023ec:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 80023f0:	e1d4      	b.n	800279c <read_all_field_data+0x446>
    {
        off = (uint8_t)(i * BME68X_LEN_FIELD);
 80023f2:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80023f6:	461a      	mov	r2, r3
 80023f8:	0112      	lsls	r2, r2, #4
 80023fa:	4413      	add	r3, r2
 80023fc:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
        data[i]->status = buff[off] & BME68X_NEW_DATA_MSK;
 8002400:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002404:	3370      	adds	r3, #112	; 0x70
 8002406:	443b      	add	r3, r7
 8002408:	f813 2c48 	ldrb.w	r2, [r3, #-72]
 800240c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	440b      	add	r3, r1
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800241c:	b2d2      	uxtb	r2, r2
 800241e:	701a      	strb	r2, [r3, #0]
        data[i]->gas_index = buff[off] & BME68X_GAS_INDEX_MSK;
 8002420:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002424:	3370      	adds	r3, #112	; 0x70
 8002426:	443b      	add	r3, r7
 8002428:	f813 2c48 	ldrb.w	r2, [r3, #-72]
 800242c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	440b      	add	r3, r1
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f002 020f 	and.w	r2, r2, #15
 800243c:	b2d2      	uxtb	r2, r2
 800243e:	705a      	strb	r2, [r3, #1]
        data[i]->meas_index = buff[off + 1];
 8002440:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002444:	1c5a      	adds	r2, r3, #1
 8002446:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	6879      	ldr	r1, [r7, #4]
 800244e:	440b      	add	r3, r1
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	3270      	adds	r2, #112	; 0x70
 8002454:	443a      	add	r2, r7
 8002456:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 800245a:	709a      	strb	r2, [r3, #2]

        /* read the raw data from the sensor */
        adc_pres =
            (uint32_t) (((uint32_t) buff[off + 2] * 4096) | ((uint32_t) buff[off + 3] * 16) |
 800245c:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002460:	3302      	adds	r3, #2
 8002462:	3370      	adds	r3, #112	; 0x70
 8002464:	443b      	add	r3, r7
 8002466:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800246a:	031a      	lsls	r2, r3, #12
 800246c:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002470:	3303      	adds	r3, #3
 8002472:	3370      	adds	r3, #112	; 0x70
 8002474:	443b      	add	r3, r7
 8002476:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800247a:	011b      	lsls	r3, r3, #4
 800247c:	4313      	orrs	r3, r2
                        ((uint32_t) buff[off + 4] / 16));
 800247e:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 8002482:	3204      	adds	r2, #4
 8002484:	3270      	adds	r2, #112	; 0x70
 8002486:	443a      	add	r2, r7
 8002488:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 800248c:	0912      	lsrs	r2, r2, #4
 800248e:	b2d2      	uxtb	r2, r2
        adc_pres =
 8002490:	4313      	orrs	r3, r2
 8002492:	66bb      	str	r3, [r7, #104]	; 0x68
        adc_temp =
            (uint32_t) (((uint32_t) buff[off + 5] * 4096) | ((uint32_t) buff[off + 6] * 16) |
 8002494:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002498:	3305      	adds	r3, #5
 800249a:	3370      	adds	r3, #112	; 0x70
 800249c:	443b      	add	r3, r7
 800249e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80024a2:	031a      	lsls	r2, r3, #12
 80024a4:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80024a8:	3306      	adds	r3, #6
 80024aa:	3370      	adds	r3, #112	; 0x70
 80024ac:	443b      	add	r3, r7
 80024ae:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80024b2:	011b      	lsls	r3, r3, #4
 80024b4:	4313      	orrs	r3, r2
                        ((uint32_t) buff[off + 7] / 16));
 80024b6:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 80024ba:	3207      	adds	r2, #7
 80024bc:	3270      	adds	r2, #112	; 0x70
 80024be:	443a      	add	r2, r7
 80024c0:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 80024c4:	0912      	lsrs	r2, r2, #4
 80024c6:	b2d2      	uxtb	r2, r2
        adc_temp =
 80024c8:	4313      	orrs	r3, r2
 80024ca:	667b      	str	r3, [r7, #100]	; 0x64
        adc_hum = (uint16_t) (((uint32_t) buff[off + 8] * 256) | (uint32_t) buff[off + 9]);
 80024cc:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80024d0:	3308      	adds	r3, #8
 80024d2:	3370      	adds	r3, #112	; 0x70
 80024d4:	443b      	add	r3, r7
 80024d6:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80024da:	b29b      	uxth	r3, r3
 80024dc:	021b      	lsls	r3, r3, #8
 80024de:	b29a      	uxth	r2, r3
 80024e0:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80024e4:	3309      	adds	r3, #9
 80024e6:	3370      	adds	r3, #112	; 0x70
 80024e8:	443b      	add	r3, r7
 80024ea:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	4313      	orrs	r3, r2
 80024f2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        adc_gas_res_low = (uint16_t) ((uint32_t) buff[off + 13] * 4 | (((uint32_t) buff[off + 14]) / 64));
 80024f6:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80024fa:	330d      	adds	r3, #13
 80024fc:	3370      	adds	r3, #112	; 0x70
 80024fe:	443b      	add	r3, r7
 8002500:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002504:	b29b      	uxth	r3, r3
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	b29a      	uxth	r2, r3
 800250a:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800250e:	330e      	adds	r3, #14
 8002510:	3370      	adds	r3, #112	; 0x70
 8002512:	443b      	add	r3, r7
 8002514:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002518:	099b      	lsrs	r3, r3, #6
 800251a:	b2db      	uxtb	r3, r3
 800251c:	b29b      	uxth	r3, r3
 800251e:	4313      	orrs	r3, r2
 8002520:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4 | (((uint32_t) buff[off + 16]) / 64));
 8002524:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002528:	330f      	adds	r3, #15
 800252a:	3370      	adds	r3, #112	; 0x70
 800252c:	443b      	add	r3, r7
 800252e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002532:	b29b      	uxth	r3, r3
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	b29a      	uxth	r2, r3
 8002538:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800253c:	3310      	adds	r3, #16
 800253e:	3370      	adds	r3, #112	; 0x70
 8002540:	443b      	add	r3, r7
 8002542:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002546:	099b      	lsrs	r3, r3, #6
 8002548:	b2db      	uxtb	r3, r3
 800254a:	b29b      	uxth	r3, r3
 800254c:	4313      	orrs	r3, r2
 800254e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
        gas_range_l = buff[off + 14] & BME68X_GAS_RANGE_MSK;
 8002552:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002556:	330e      	adds	r3, #14
 8002558:	3370      	adds	r3, #112	; 0x70
 800255a:	443b      	add	r3, r7
 800255c:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002560:	f003 030f 	and.w	r3, r3, #15
 8002564:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        gas_range_h = buff[off + 16] & BME68X_GAS_RANGE_MSK;
 8002568:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800256c:	3310      	adds	r3, #16
 800256e:	3370      	adds	r3, #112	; 0x70
 8002570:	443b      	add	r3, r7
 8002572:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d13a      	bne.n	80025fc <read_all_field_data+0x2a6>
        {
            data[i]->status |= buff[off + 16] & BME68X_GASM_VALID_MSK;
 8002586:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	4413      	add	r3, r2
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	b25a      	sxtb	r2, r3
 8002596:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800259a:	3310      	adds	r3, #16
 800259c:	3370      	adds	r3, #112	; 0x70
 800259e:	443b      	add	r3, r7
 80025a0:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80025a4:	b25b      	sxtb	r3, r3
 80025a6:	f003 0320 	and.w	r3, r3, #32
 80025aa:	b25b      	sxtb	r3, r3
 80025ac:	4313      	orrs	r3, r2
 80025ae:	b259      	sxtb	r1, r3
 80025b0:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	4413      	add	r3, r2
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	b2ca      	uxtb	r2, r1
 80025be:	701a      	strb	r2, [r3, #0]
            data[i]->status |= buff[off + 16] & BME68X_HEAT_STAB_MSK;
 80025c0:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	4413      	add	r3, r2
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	b25a      	sxtb	r2, r3
 80025d0:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80025d4:	3310      	adds	r3, #16
 80025d6:	3370      	adds	r3, #112	; 0x70
 80025d8:	443b      	add	r3, r7
 80025da:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80025de:	b25b      	sxtb	r3, r3
 80025e0:	f003 0310 	and.w	r3, r3, #16
 80025e4:	b25b      	sxtb	r3, r3
 80025e6:	4313      	orrs	r3, r2
 80025e8:	b259      	sxtb	r1, r3
 80025ea:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	4413      	add	r3, r2
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	b2ca      	uxtb	r2, r1
 80025f8:	701a      	strb	r2, [r3, #0]
 80025fa:	e039      	b.n	8002670 <read_all_field_data+0x31a>
        }
        else
        {
            data[i]->status |= buff[off + 14] & BME68X_GASM_VALID_MSK;
 80025fc:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	4413      	add	r3, r2
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	b25a      	sxtb	r2, r3
 800260c:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002610:	330e      	adds	r3, #14
 8002612:	3370      	adds	r3, #112	; 0x70
 8002614:	443b      	add	r3, r7
 8002616:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800261a:	b25b      	sxtb	r3, r3
 800261c:	f003 0320 	and.w	r3, r3, #32
 8002620:	b25b      	sxtb	r3, r3
 8002622:	4313      	orrs	r3, r2
 8002624:	b259      	sxtb	r1, r3
 8002626:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	4413      	add	r3, r2
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	b2ca      	uxtb	r2, r1
 8002634:	701a      	strb	r2, [r3, #0]
            data[i]->status |= buff[off + 14] & BME68X_HEAT_STAB_MSK;
 8002636:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	4413      	add	r3, r2
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	b25a      	sxtb	r2, r3
 8002646:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800264a:	330e      	adds	r3, #14
 800264c:	3370      	adds	r3, #112	; 0x70
 800264e:	443b      	add	r3, r7
 8002650:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002654:	b25b      	sxtb	r3, r3
 8002656:	f003 0310 	and.w	r3, r3, #16
 800265a:	b25b      	sxtb	r3, r3
 800265c:	4313      	orrs	r3, r2
 800265e:	b259      	sxtb	r1, r3
 8002660:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	4413      	add	r3, r2
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	b2ca      	uxtb	r2, r1
 800266e:	701a      	strb	r2, [r3, #0]
        }

        data[i]->idac = set_val[data[i]->gas_index];
 8002670:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	4413      	add	r3, r2
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	785b      	ldrb	r3, [r3, #1]
 800267e:	4619      	mov	r1, r3
 8002680:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	4413      	add	r3, r2
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f101 0270 	add.w	r2, r1, #112	; 0x70
 8002690:	443a      	add	r2, r7
 8002692:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 8002696:	711a      	strb	r2, [r3, #4]
        data[i]->res_heat = set_val[10 + data[i]->gas_index];
 8002698:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	4413      	add	r3, r2
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	785b      	ldrb	r3, [r3, #1]
 80026a6:	f103 020a 	add.w	r2, r3, #10
 80026aa:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	6879      	ldr	r1, [r7, #4]
 80026b2:	440b      	add	r3, r1
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	3270      	adds	r2, #112	; 0x70
 80026b8:	443a      	add	r2, r7
 80026ba:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 80026be:	70da      	strb	r2, [r3, #3]
        data[i]->gas_wait = set_val[20 + data[i]->gas_index];
 80026c0:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	4413      	add	r3, r2
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	785b      	ldrb	r3, [r3, #1]
 80026ce:	f103 0214 	add.w	r2, r3, #20
 80026d2:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	440b      	add	r3, r1
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	3270      	adds	r2, #112	; 0x70
 80026e0:	443a      	add	r2, r7
 80026e2:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 80026e6:	715a      	strb	r2, [r3, #5]
        data[i]->temperature = calc_temperature(adc_temp, dev);
 80026e8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	4413      	add	r3, r2
 80026f2:	681c      	ldr	r4, [r3, #0]
 80026f4:	6839      	ldr	r1, [r7, #0]
 80026f6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80026f8:	f7ff f89e 	bl	8001838 <calc_temperature>
 80026fc:	eef0 7a40 	vmov.f32	s15, s0
 8002700:	edc4 7a02 	vstr	s15, [r4, #8]
        data[i]->pressure = calc_pressure(adc_pres, dev);
 8002704:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	4413      	add	r3, r2
 800270e:	681c      	ldr	r4, [r3, #0]
 8002710:	6839      	ldr	r1, [r7, #0]
 8002712:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002714:	f7ff f916 	bl	8001944 <calc_pressure>
 8002718:	eef0 7a40 	vmov.f32	s15, s0
 800271c:	edc4 7a03 	vstr	s15, [r4, #12]
        data[i]->humidity = calc_humidity(adc_hum, dev);
 8002720:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	4413      	add	r3, r2
 800272a:	681c      	ldr	r4, [r3, #0]
 800272c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8002730:	6839      	ldr	r1, [r7, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff fa48 	bl	8001bc8 <calc_humidity>
 8002738:	eef0 7a40 	vmov.f32	s15, s0
 800273c:	edc4 7a04 	vstr	s15, [r4, #16]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d112      	bne.n	800276e <read_all_field_data+0x418>
        {
            data[i]->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
 8002748:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	4413      	add	r3, r2
 8002752:	681c      	ldr	r4, [r3, #0]
 8002754:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8002758:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800275c:	4611      	mov	r1, r2
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff fba0 	bl	8001ea4 <calc_gas_resistance_high>
 8002764:	eef0 7a40 	vmov.f32	s15, s0
 8002768:	edc4 7a05 	vstr	s15, [r4, #20]
 800276c:	e011      	b.n	8002792 <read_all_field_data+0x43c>
        }
        else
        {
            data[i]->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 800276e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	4413      	add	r3, r2
 8002778:	681c      	ldr	r4, [r3, #0]
 800277a:	f897 105d 	ldrb.w	r1, [r7, #93]	; 0x5d
 800277e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff faeb 	bl	8001d60 <calc_gas_resistance_low>
 800278a:	eef0 7a40 	vmov.f32	s15, s0
 800278e:	edc4 7a05 	vstr	s15, [r4, #20]
    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8002792:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002796:	3301      	adds	r3, #1
 8002798:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 800279c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d804      	bhi.n	80027ae <read_all_field_data+0x458>
 80027a4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f43f ae22 	beq.w	80023f2 <read_all_field_data+0x9c>
        }
    }

    return rslt;
 80027ae:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3774      	adds	r7, #116	; 0x74
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd90      	pop	{r4, r7, pc}

080027ba <set_mem_page>:

/* This internal API is used to switch between SPI memory pages */
static int8_t set_mem_page(uint8_t reg_addr, struct bme68x_dev *dev)
{
 80027ba:	b590      	push	{r4, r7, lr}
 80027bc:	b085      	sub	sp, #20
 80027be:	af00      	add	r7, sp, #0
 80027c0:	4603      	mov	r3, r0
 80027c2:	6039      	str	r1, [r7, #0]
 80027c4:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg;
    uint8_t mem_page;

    /* Check for null pointers in the device structure*/
    rslt = null_ptr_check(dev);
 80027c6:	6838      	ldr	r0, [r7, #0]
 80027c8:	f000 f8b8 	bl	800293c <null_ptr_check>
 80027cc:	4603      	mov	r3, r0
 80027ce:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 80027d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d14f      	bne.n	8002878 <set_mem_page+0xbe>
    {
        if (reg_addr > 0x7f)
 80027d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	da02      	bge.n	80027e6 <set_mem_page+0x2c>
        {
            mem_page = BME68X_MEM_PAGE1;
 80027e0:	2300      	movs	r3, #0
 80027e2:	73bb      	strb	r3, [r7, #14]
 80027e4:	e001      	b.n	80027ea <set_mem_page+0x30>
        }
        else
        {
            mem_page = BME68X_MEM_PAGE0;
 80027e6:	2310      	movs	r3, #16
 80027e8:	73bb      	strb	r3, [r7, #14]
        }

        if (mem_page != dev->mem_page)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	7b5b      	ldrb	r3, [r3, #13]
 80027ee:	7bba      	ldrb	r2, [r7, #14]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d041      	beq.n	8002878 <set_mem_page+0xbe>
        {
            dev->mem_page = mem_page;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	7bba      	ldrb	r2, [r7, #14]
 80027f8:	735a      	strb	r2, [r3, #13]
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f107 010d 	add.w	r1, r7, #13
 8002806:	2201      	movs	r2, #1
 8002808:	20f3      	movs	r0, #243	; 0xf3
 800280a:	47a0      	blx	r4
 800280c:	4603      	mov	r3, r0
 800280e:	461a      	mov	r2, r3
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            if (dev->intf_rslt != 0)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <set_mem_page+0x6a>
            {
                rslt = BME68X_E_COM_FAIL;
 8002820:	23fe      	movs	r3, #254	; 0xfe
 8002822:	73fb      	strb	r3, [r7, #15]
            }

            if (rslt == BME68X_OK)
 8002824:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d125      	bne.n	8002878 <set_mem_page+0xbe>
            {
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 800282c:	7b7b      	ldrb	r3, [r7, #13]
 800282e:	f023 0310 	bic.w	r3, r3, #16
 8002832:	b2db      	uxtb	r3, r3
 8002834:	737b      	strb	r3, [r7, #13]
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	7b5b      	ldrb	r3, [r3, #13]
 800283a:	b25b      	sxtb	r3, r3
 800283c:	f003 0310 	and.w	r3, r3, #16
 8002840:	b25a      	sxtb	r2, r3
 8002842:	7b7b      	ldrb	r3, [r7, #13]
 8002844:	b25b      	sxtb	r3, r3
 8002846:	4313      	orrs	r3, r2
 8002848:	b25b      	sxtb	r3, r3
 800284a:	b2db      	uxtb	r3, r3
 800284c:	737b      	strb	r3, [r7, #13]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f107 010d 	add.w	r1, r7, #13
 800285a:	2201      	movs	r2, #1
 800285c:	2073      	movs	r0, #115	; 0x73
 800285e:	47a0      	blx	r4
 8002860:	4603      	mov	r3, r0
 8002862:	461a      	mov	r2, r3
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
                if (dev->intf_rslt != 0)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <set_mem_page+0xbe>
                {
                    rslt = BME68X_E_COM_FAIL;
 8002874:	23fe      	movs	r3, #254	; 0xfe
 8002876:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8002878:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800287c:	4618      	mov	r0, r3
 800287e:	3714      	adds	r7, #20
 8002880:	46bd      	mov	sp, r7
 8002882:	bd90      	pop	{r4, r7, pc}

08002884 <get_mem_page>:

/* This internal API is used to get the current SPI memory page */
static int8_t get_mem_page(struct bme68x_dev *dev)
{
 8002884:	b590      	push	{r4, r7, lr}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 f855 	bl	800293c <null_ptr_check>
 8002892:	4603      	mov	r3, r0
 8002894:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 8002896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d11b      	bne.n	80028d6 <get_mem_page+0x52>
    {
        dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f107 010e 	add.w	r1, r7, #14
 80028aa:	2201      	movs	r2, #1
 80028ac:	20f3      	movs	r0, #243	; 0xf3
 80028ae:	47a0      	blx	r4
 80028b0:	4603      	mov	r3, r0
 80028b2:	461a      	mov	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (dev->intf_rslt != 0)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d002      	beq.n	80028ca <get_mem_page+0x46>
        {
            rslt = BME68X_E_COM_FAIL;
 80028c4:	23fe      	movs	r3, #254	; 0xfe
 80028c6:	73fb      	strb	r3, [r7, #15]
 80028c8:	e005      	b.n	80028d6 <get_mem_page+0x52>
        }
        else
        {
            dev->mem_page = reg & BME68X_MEM_PAGE_MSK;
 80028ca:	7bbb      	ldrb	r3, [r7, #14]
 80028cc:	f003 0310 	and.w	r3, r3, #16
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	735a      	strb	r2, [r3, #13]
        }
    }

    return rslt;
 80028d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3714      	adds	r7, #20
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd90      	pop	{r4, r7, pc}

080028e2 <boundary_check>:

/* This internal API is used to limit the max value of a parameter */
static int8_t boundary_check(uint8_t *value, uint8_t max, struct bme68x_dev *dev)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b086      	sub	sp, #24
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	60f8      	str	r0, [r7, #12]
 80028ea:	460b      	mov	r3, r1
 80028ec:	607a      	str	r2, [r7, #4]
 80028ee:	72fb      	strb	r3, [r7, #11]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 f823 	bl	800293c <null_ptr_check>
 80028f6:	4603      	mov	r3, r0
 80028f8:	75fb      	strb	r3, [r7, #23]
    if ((value != NULL) && (rslt == BME68X_OK))
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d015      	beq.n	800292c <boundary_check+0x4a>
 8002900:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d111      	bne.n	800292c <boundary_check+0x4a>
    {
        /* Check if value is above maximum value */
        if (*value > max)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	7afa      	ldrb	r2, [r7, #11]
 800290e:	429a      	cmp	r2, r3
 8002910:	d20e      	bcs.n	8002930 <boundary_check+0x4e>
        {
            /* Auto correct the invalid value to maximum value */
            *value = max;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	7afa      	ldrb	r2, [r7, #11]
 8002916:	701a      	strb	r2, [r3, #0]
            dev->info_msg |= BME68X_I_PARAM_CORR;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800291e:	f043 0301 	orr.w	r3, r3, #1
 8002922:	b2da      	uxtb	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        if (*value > max)
 800292a:	e001      	b.n	8002930 <boundary_check+0x4e>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 800292c:	23ff      	movs	r3, #255	; 0xff
 800292e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002930:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002934:	4618      	mov	r0, r3
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <null_ptr_check>:

/* This internal API is used to check the bme68x_dev for null pointers */
static int8_t null_ptr_check(const struct bme68x_dev *dev)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
    int8_t rslt = BME68X_OK;
 8002944:	2300      	movs	r3, #0
 8002946:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00b      	beq.n	8002966 <null_ptr_check+0x2a>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	2b00      	cmp	r3, #0
 8002954:	d007      	beq.n	8002966 <null_ptr_check+0x2a>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <null_ptr_check+0x2a>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <null_ptr_check+0x2e>
    {
        /* Device structure pointer is not valid */
        rslt = BME68X_E_NULL_PTR;
 8002966:	23ff      	movs	r3, #255	; 0xff
 8002968:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800296a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800296e:	4618      	mov	r0, r3
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
	...

0800297c <set_conf>:

/* This internal API is used to set heater configurations */
static int8_t set_conf(const struct bme68x_heatr_conf *conf, uint8_t op_mode, uint8_t *nb_conv, struct bme68x_dev *dev)
{
 800297c:	b590      	push	{r4, r7, lr}
 800297e:	b093      	sub	sp, #76	; 0x4c
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	607a      	str	r2, [r7, #4]
 8002986:	603b      	str	r3, [r7, #0]
 8002988:	460b      	mov	r3, r1
 800298a:	72fb      	strb	r3, [r7, #11]
    int8_t rslt = BME68X_OK;
 800298c:	2300      	movs	r3, #0
 800298e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t i;
    uint8_t shared_dur;
    uint8_t write_len = 0;
 8002992:	2300      	movs	r3, #0
 8002994:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    uint8_t heater_dur_shared_addr = BME68X_REG_SHD_HEATR_DUR;
 8002998:	236e      	movs	r3, #110	; 0x6e
 800299a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 800299e:	4aa1      	ldr	r2, [pc, #644]	; (8002c24 <set_conf+0x2a8>)
 80029a0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80029a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80029a6:	c303      	stmia	r3!, {r0, r1}
 80029a8:	801a      	strh	r2, [r3, #0]
    uint8_t rh_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80029aa:	4a9e      	ldr	r2, [pc, #632]	; (8002c24 <set_conf+0x2a8>)
 80029ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80029b2:	c303      	stmia	r3!, {r0, r1}
 80029b4:	801a      	strh	r2, [r3, #0]
    uint8_t gw_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80029b6:	4a9b      	ldr	r2, [pc, #620]	; (8002c24 <set_conf+0x2a8>)
 80029b8:	f107 0320 	add.w	r3, r7, #32
 80029bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80029be:	c303      	stmia	r3!, {r0, r1}
 80029c0:	801a      	strh	r2, [r3, #0]
    uint8_t gw_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80029c2:	4a98      	ldr	r2, [pc, #608]	; (8002c24 <set_conf+0x2a8>)
 80029c4:	f107 0314 	add.w	r3, r7, #20
 80029c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80029ca:	c303      	stmia	r3!, {r0, r1}
 80029cc:	801a      	strh	r2, [r3, #0]

    switch (op_mode)
 80029ce:	7afb      	ldrb	r3, [r7, #11]
 80029d0:	2b03      	cmp	r3, #3
 80029d2:	d024      	beq.n	8002a1e <set_conf+0xa2>
 80029d4:	2b03      	cmp	r3, #3
 80029d6:	f300 80f9 	bgt.w	8002bcc <set_conf+0x250>
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d002      	beq.n	80029e4 <set_conf+0x68>
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d07c      	beq.n	8002adc <set_conf+0x160>
 80029e2:	e0f3      	b.n	8002bcc <set_conf+0x250>
    {
        case BME68X_FORCED_MODE:
            rh_reg_addr[0] = BME68X_REG_RES_HEAT0;
 80029e4:	235a      	movs	r3, #90	; 0x5a
 80029e6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
            rh_reg_data[0] = calc_res_heat(conf->heatr_temp, dev);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	885b      	ldrh	r3, [r3, #2]
 80029ee:	6839      	ldr	r1, [r7, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff fa91 	bl	8001f18 <calc_res_heat>
 80029f6:	4603      	mov	r3, r0
 80029f8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
            gw_reg_addr[0] = BME68X_REG_GAS_WAIT0;
 80029fc:	2364      	movs	r3, #100	; 0x64
 80029fe:	f887 3020 	strb.w	r3, [r7, #32]
            gw_reg_data[0] = calc_gas_wait(conf->heatr_dur);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	889b      	ldrh	r3, [r3, #4]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7ff fb36 	bl	8002078 <calc_gas_wait>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	753b      	strb	r3, [r7, #20]
            (*nb_conv) = 0;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	701a      	strb	r2, [r3, #0]
            write_len = 1;
 8002a16:	2301      	movs	r3, #1
 8002a18:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
 8002a1c:	e0db      	b.n	8002bd6 <set_conf+0x25a>
        case BME68X_SEQUENTIAL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d003      	beq.n	8002a2e <set_conf+0xb2>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d103      	bne.n	8002a36 <set_conf+0xba>
            {
                rslt = BME68X_E_NULL_PTR;
 8002a2e:	23ff      	movs	r3, #255	; 0xff
 8002a30:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                break;
 8002a34:	e0cf      	b.n	8002bd6 <set_conf+0x25a>
            }

            for (i = 0; i < conf->profile_len; i++)
 8002a36:	2300      	movs	r3, #0
 8002a38:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002a3c:	e03f      	b.n	8002abe <set_conf+0x142>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8002a3e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002a42:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8002a46:	325a      	adds	r2, #90	; 0x5a
 8002a48:	b2d2      	uxtb	r2, r2
 8002a4a:	3348      	adds	r3, #72	; 0x48
 8002a4c:	443b      	add	r3, r7
 8002a4e:	f803 2c10 	strb.w	r2, [r3, #-16]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	689a      	ldr	r2, [r3, #8]
 8002a56:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	4413      	add	r3, r2
 8002a5e:	881b      	ldrh	r3, [r3, #0]
 8002a60:	f897 4046 	ldrb.w	r4, [r7, #70]	; 0x46
 8002a64:	6839      	ldr	r1, [r7, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff fa56 	bl	8001f18 <calc_res_heat>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	461a      	mov	r2, r3
 8002a70:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8002a74:	443b      	add	r3, r7
 8002a76:	f803 2c1c 	strb.w	r2, [r3, #-28]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 8002a7a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002a7e:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8002a82:	3264      	adds	r2, #100	; 0x64
 8002a84:	b2d2      	uxtb	r2, r2
 8002a86:	3348      	adds	r3, #72	; 0x48
 8002a88:	443b      	add	r3, r7
 8002a8a:	f803 2c28 	strb.w	r2, [r3, #-40]
                gw_reg_data[i] = calc_gas_wait(conf->heatr_dur_prof[i]);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	68da      	ldr	r2, [r3, #12]
 8002a92:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	4413      	add	r3, r2
 8002a9a:	881b      	ldrh	r3, [r3, #0]
 8002a9c:	f897 4046 	ldrb.w	r4, [r7, #70]	; 0x46
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff fae9 	bl	8002078 <calc_gas_wait>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8002aae:	443b      	add	r3, r7
 8002ab0:	f803 2c34 	strb.w	r2, [r3, #-52]
            for (i = 0; i < conf->profile_len; i++)
 8002ab4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002ab8:	3301      	adds	r3, #1
 8002aba:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	7c1b      	ldrb	r3, [r3, #16]
 8002ac2:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d3b9      	bcc.n	8002a3e <set_conf+0xc2>
            }

            (*nb_conv) = conf->profile_len;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	7c1a      	ldrb	r2, [r3, #16]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	7c1b      	ldrb	r3, [r3, #16]
 8002ad6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
 8002ada:	e07c      	b.n	8002bd6 <set_conf+0x25a>
        case BME68X_PARALLEL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <set_conf+0x170>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d103      	bne.n	8002af4 <set_conf+0x178>
            {
                rslt = BME68X_E_NULL_PTR;
 8002aec:	23ff      	movs	r3, #255	; 0xff
 8002aee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                break;
 8002af2:	e070      	b.n	8002bd6 <set_conf+0x25a>
            }

            if (conf->shared_heatr_dur == 0)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8a5b      	ldrh	r3, [r3, #18]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d102      	bne.n	8002b02 <set_conf+0x186>
            {
                rslt = BME68X_W_DEFINE_SHD_HEATR_DUR;
 8002afc:	2303      	movs	r3, #3
 8002afe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            }

            for (i = 0; i < conf->profile_len; i++)
 8002b02:	2300      	movs	r3, #0
 8002b04:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002b08:	e03a      	b.n	8002b80 <set_conf+0x204>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8002b0a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002b0e:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8002b12:	325a      	adds	r2, #90	; 0x5a
 8002b14:	b2d2      	uxtb	r2, r2
 8002b16:	3348      	adds	r3, #72	; 0x48
 8002b18:	443b      	add	r3, r7
 8002b1a:	f803 2c10 	strb.w	r2, [r3, #-16]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	689a      	ldr	r2, [r3, #8]
 8002b22:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	4413      	add	r3, r2
 8002b2a:	881b      	ldrh	r3, [r3, #0]
 8002b2c:	f897 4046 	ldrb.w	r4, [r7, #70]	; 0x46
 8002b30:	6839      	ldr	r1, [r7, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7ff f9f0 	bl	8001f18 <calc_res_heat>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8002b40:	443b      	add	r3, r7
 8002b42:	f803 2c1c 	strb.w	r2, [r3, #-28]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 8002b46:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002b4a:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8002b4e:	3264      	adds	r2, #100	; 0x64
 8002b50:	b2d2      	uxtb	r2, r2
 8002b52:	3348      	adds	r3, #72	; 0x48
 8002b54:	443b      	add	r3, r7
 8002b56:	f803 2c28 	strb.w	r2, [r3, #-40]
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	68da      	ldr	r2, [r3, #12]
 8002b5e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	4413      	add	r3, r2
 8002b66:	881a      	ldrh	r2, [r3, #0]
 8002b68:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002b6c:	b2d2      	uxtb	r2, r2
 8002b6e:	3348      	adds	r3, #72	; 0x48
 8002b70:	443b      	add	r3, r7
 8002b72:	f803 2c34 	strb.w	r2, [r3, #-52]
            for (i = 0; i < conf->profile_len; i++)
 8002b76:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	7c1b      	ldrb	r3, [r3, #16]
 8002b84:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d3be      	bcc.n	8002b0a <set_conf+0x18e>
            }

            (*nb_conv) = conf->profile_len;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	7c1a      	ldrb	r2, [r3, #16]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	7c1b      	ldrb	r3, [r3, #16]
 8002b98:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            shared_dur = calc_heatr_dur_shared(conf->shared_heatr_dur);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8a5b      	ldrh	r3, [r3, #18]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f000 f841 	bl	8002c28 <calc_heatr_dur_shared>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
            if (rslt == BME68X_OK)
 8002bac:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d10f      	bne.n	8002bd4 <set_conf+0x258>
            {
                rslt = bme68x_set_regs(&heater_dur_shared_addr, &shared_dur, 1, dev);
 8002bb4:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8002bb8:	f107 0043 	add.w	r0, r7, #67	; 0x43
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f7fe f9a2 	bl	8000f08 <bme68x_set_regs>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            }

            break;
 8002bca:	e003      	b.n	8002bd4 <set_conf+0x258>
        default:
            rslt = BME68X_W_DEFINE_OP_MODE;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002bd2:	e000      	b.n	8002bd6 <set_conf+0x25a>
            break;
 8002bd4:	bf00      	nop
    }

    if (rslt == BME68X_OK)
 8002bd6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10b      	bne.n	8002bf6 <set_conf+0x27a>
    {
        rslt = bme68x_set_regs(rh_reg_addr, rh_reg_data, write_len, dev);
 8002bde:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002be2:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002be6:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	f7fe f98c 	bl	8000f08 <bme68x_set_regs>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    if (rslt == BME68X_OK)
 8002bf6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10b      	bne.n	8002c16 <set_conf+0x29a>
    {
        rslt = bme68x_set_regs(gw_reg_addr, gw_reg_data, write_len, dev);
 8002bfe:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002c02:	f107 0114 	add.w	r1, r7, #20
 8002c06:	f107 0020 	add.w	r0, r7, #32
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	f7fe f97c 	bl	8000f08 <bme68x_set_regs>
 8002c10:	4603      	mov	r3, r0
 8002c12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    return rslt;
 8002c16:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	374c      	adds	r7, #76	; 0x4c
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd90      	pop	{r4, r7, pc}
 8002c22:	bf00      	nop
 8002c24:	0800ce98 	.word	0x0800ce98

08002c28 <calc_heatr_dur_shared>:

/* This internal API is used to calculate the register value for
 * shared heater duration */
static uint8_t calc_heatr_dur_shared(uint16_t dur)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	80fb      	strh	r3, [r7, #6]
    uint8_t factor = 0;
 8002c32:	2300      	movs	r3, #0
 8002c34:	73fb      	strb	r3, [r7, #15]
    uint8_t heatdurval;

    if (dur >= 0x783)
 8002c36:	88fb      	ldrh	r3, [r7, #6]
 8002c38:	f240 7282 	movw	r2, #1922	; 0x782
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d902      	bls.n	8002c46 <calc_heatr_dur_shared+0x1e>
    {
        heatdurval = 0xff; /* Max duration */
 8002c40:	23ff      	movs	r3, #255	; 0xff
 8002c42:	73bb      	strb	r3, [r7, #14]
 8002c44:	e01d      	b.n	8002c82 <calc_heatr_dur_shared+0x5a>
    }
    else
    {
        /* Step size of 0.477ms */
        dur = (uint16_t)(((uint32_t)dur * 1000) / 477);
 8002c46:	88fb      	ldrh	r3, [r7, #6]
 8002c48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c4c:	fb03 f202 	mul.w	r2, r3, r2
 8002c50:	4b0f      	ldr	r3, [pc, #60]	; (8002c90 <calc_heatr_dur_shared+0x68>)
 8002c52:	fba3 1302 	umull	r1, r3, r3, r2
 8002c56:	1ad2      	subs	r2, r2, r3
 8002c58:	0852      	lsrs	r2, r2, #1
 8002c5a:	4413      	add	r3, r2
 8002c5c:	0a1b      	lsrs	r3, r3, #8
 8002c5e:	80fb      	strh	r3, [r7, #6]
        while (dur > 0x3F)
 8002c60:	e005      	b.n	8002c6e <calc_heatr_dur_shared+0x46>
        {
            dur = dur >> 2;
 8002c62:	88fb      	ldrh	r3, [r7, #6]
 8002c64:	089b      	lsrs	r3, r3, #2
 8002c66:	80fb      	strh	r3, [r7, #6]
            factor += 1;
 8002c68:	7bfb      	ldrb	r3, [r7, #15]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	73fb      	strb	r3, [r7, #15]
        while (dur > 0x3F)
 8002c6e:	88fb      	ldrh	r3, [r7, #6]
 8002c70:	2b3f      	cmp	r3, #63	; 0x3f
 8002c72:	d8f6      	bhi.n	8002c62 <calc_heatr_dur_shared+0x3a>
        }

        heatdurval = (uint8_t)(dur + (factor * 64));
 8002c74:	88fb      	ldrh	r3, [r7, #6]
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	7bfb      	ldrb	r3, [r7, #15]
 8002c7a:	019b      	lsls	r3, r3, #6
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	4413      	add	r3, r2
 8002c80:	73bb      	strb	r3, [r7, #14]
    }

    return heatdurval;
 8002c82:	7bbb      	ldrb	r3, [r7, #14]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3714      	adds	r7, #20
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr
 8002c90:	12c8b89f 	.word	0x12c8b89f

08002c94 <sort_sensor_data>:

/* This internal API is used sort the sensor data */
static void sort_sensor_data(uint8_t low_index, uint8_t high_index, struct bme68x_data *field[])
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	603a      	str	r2, [r7, #0]
 8002c9e:	71fb      	strb	r3, [r7, #7]
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	71bb      	strb	r3, [r7, #6]
    int16_t meas_index1;
    int16_t meas_index2;

    meas_index1 = (int16_t)field[low_index]->meas_index;
 8002ca4:	79fb      	ldrb	r3, [r7, #7]
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	4413      	add	r3, r2
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	789b      	ldrb	r3, [r3, #2]
 8002cb0:	81fb      	strh	r3, [r7, #14]
    meas_index2 = (int16_t)field[high_index]->meas_index;
 8002cb2:	79bb      	ldrb	r3, [r7, #6]
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	4413      	add	r3, r2
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	789b      	ldrb	r3, [r3, #2]
 8002cbe:	81bb      	strh	r3, [r7, #12]
    if ((field[low_index]->status & BME68X_NEW_DATA_MSK) && (field[high_index]->status & BME68X_NEW_DATA_MSK))
 8002cc0:	79fb      	ldrb	r3, [r7, #7]
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	b25b      	sxtb	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	da21      	bge.n	8002d16 <sort_sensor_data+0x82>
 8002cd2:	79bb      	ldrb	r3, [r7, #6]
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	4413      	add	r3, r2
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	b25b      	sxtb	r3, r3
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	da18      	bge.n	8002d16 <sort_sensor_data+0x82>
    {
        int16_t diff = meas_index2 - meas_index1;
 8002ce4:	89ba      	ldrh	r2, [r7, #12]
 8002ce6:	89fb      	ldrh	r3, [r7, #14]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	817b      	strh	r3, [r7, #10]
        if (((diff > -3) && (diff < 0)) || (diff > 2))
 8002cee:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002cf2:	f113 0f02 	cmn.w	r3, #2
 8002cf6:	db03      	blt.n	8002d00 <sort_sensor_data+0x6c>
 8002cf8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	db03      	blt.n	8002d08 <sort_sensor_data+0x74>
 8002d00:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	dd16      	ble.n	8002d36 <sort_sensor_data+0xa2>
        {
            swap_fields(low_index, high_index, field);
 8002d08:	79b9      	ldrb	r1, [r7, #6]
 8002d0a:	79fb      	ldrb	r3, [r7, #7]
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f000 f816 	bl	8002d40 <swap_fields>
    {
 8002d14:	e00f      	b.n	8002d36 <sort_sensor_data+0xa2>
        }
    }
    else if (field[high_index]->status & BME68X_NEW_DATA_MSK)
 8002d16:	79bb      	ldrb	r3, [r7, #6]
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	683a      	ldr	r2, [r7, #0]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	b25b      	sxtb	r3, r3
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	da07      	bge.n	8002d38 <sort_sensor_data+0xa4>
    {
        swap_fields(low_index, high_index, field);
 8002d28:	79b9      	ldrb	r1, [r7, #6]
 8002d2a:	79fb      	ldrb	r3, [r7, #7]
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 f806 	bl	8002d40 <swap_fields>
     *         - diff > 2, case 4.
     *
     *     Here the limits of -3 and 2 derive from the fact that there are 3 fields.
     *     These values decrease or increase respectively if the number of fields increases.
     */
}
 8002d34:	e000      	b.n	8002d38 <sort_sensor_data+0xa4>
    {
 8002d36:	bf00      	nop
}
 8002d38:	bf00      	nop
 8002d3a:	3710      	adds	r7, #16
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <swap_fields>:

/* This internal API is used sort the sensor data */
static void swap_fields(uint8_t index1, uint8_t index2, struct bme68x_data *field[])
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	4603      	mov	r3, r0
 8002d48:	603a      	str	r2, [r7, #0]
 8002d4a:	71fb      	strb	r3, [r7, #7]
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	71bb      	strb	r3, [r7, #6]
    struct bme68x_data *temp;

    temp = field[index1];
 8002d50:	79fb      	ldrb	r3, [r7, #7]
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	4413      	add	r3, r2
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	60fb      	str	r3, [r7, #12]
    field[index1] = field[index2];
 8002d5c:	79bb      	ldrb	r3, [r7, #6]
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	441a      	add	r2, r3
 8002d64:	79fb      	ldrb	r3, [r7, #7]
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	6839      	ldr	r1, [r7, #0]
 8002d6a:	440b      	add	r3, r1
 8002d6c:	6812      	ldr	r2, [r2, #0]
 8002d6e:	601a      	str	r2, [r3, #0]
    field[index2] = temp;
 8002d70:	79bb      	ldrb	r3, [r7, #6]
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	4413      	add	r3, r2
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	601a      	str	r2, [r3, #0]
}
 8002d7c:	bf00      	nop
 8002d7e:	3714      	adds	r7, #20
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <get_calib_data>:
    return rslt;
}

/* This internal API is used to read the calibration coefficients */
static int8_t get_calib_data(struct bme68x_dev *dev)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b08e      	sub	sp, #56	; 0x38
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t coeff_array[BME68X_LEN_COEFF_ALL];

    rslt = bme68x_get_regs(BME68X_REG_COEFF1, coeff_array, BME68X_LEN_COEFF1, dev);
 8002d90:	f107 010c 	add.w	r1, r7, #12
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2217      	movs	r2, #23
 8002d98:	208a      	movs	r0, #138	; 0x8a
 8002d9a:	f7fe f945 	bl	8001028 <bme68x_get_regs>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (rslt == BME68X_OK)
 8002da4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d10b      	bne.n	8002dc4 <get_calib_data+0x3c>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF2, &coeff_array[BME68X_LEN_COEFF1], BME68X_LEN_COEFF2, dev);
 8002dac:	f107 030c 	add.w	r3, r7, #12
 8002db0:	f103 0117 	add.w	r1, r3, #23
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	220e      	movs	r2, #14
 8002db8:	20e1      	movs	r0, #225	; 0xe1
 8002dba:	f7fe f935 	bl	8001028 <bme68x_get_regs>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }

    if (rslt == BME68X_OK)
 8002dc4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10b      	bne.n	8002de4 <get_calib_data+0x5c>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF3,
 8002dcc:	f107 030c 	add.w	r3, r7, #12
 8002dd0:	f103 0125 	add.w	r1, r3, #37	; 0x25
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2205      	movs	r2, #5
 8002dd8:	2000      	movs	r0, #0
 8002dda:	f7fe f925 	bl	8001028 <bme68x_get_regs>
 8002dde:	4603      	mov	r3, r0
 8002de0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                               &coeff_array[BME68X_LEN_COEFF1 + BME68X_LEN_COEFF2],
                               BME68X_LEN_COEFF3,
                               dev);
    }

    if (rslt == BME68X_OK)
 8002de4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f040 80cb 	bne.w	8002f84 <get_calib_data+0x1fc>
    {
        /* Temperature related coefficients */
        dev->calib.par_t1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T1_MSB], coeff_array[BME68X_IDX_T1_LSB]));
 8002dee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002df2:	021b      	lsls	r3, r3, #8
 8002df4:	b21a      	sxth	r2, r3
 8002df6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002dfa:	b21b      	sxth	r3, r3
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	b21b      	sxth	r3, r3
 8002e00:	b29a      	uxth	r2, r3
        dev->calib.par_t1 =
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	83da      	strh	r2, [r3, #30]
        dev->calib.par_t2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T2_MSB], coeff_array[BME68X_IDX_T2_LSB]));
 8002e06:	7b7b      	ldrb	r3, [r7, #13]
 8002e08:	021b      	lsls	r3, r3, #8
 8002e0a:	b21a      	sxth	r2, r3
 8002e0c:	7b3b      	ldrb	r3, [r7, #12]
 8002e0e:	b21b      	sxth	r3, r3
 8002e10:	4313      	orrs	r3, r2
 8002e12:	b21a      	sxth	r2, r3
        dev->calib.par_t2 =
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	841a      	strh	r2, [r3, #32]
        dev->calib.par_t3 = (int8_t)(coeff_array[BME68X_IDX_T3]);
 8002e18:	7bbb      	ldrb	r3, [r7, #14]
 8002e1a:	b25a      	sxtb	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

        /* Pressure related coefficients */
        dev->calib.par_p1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P1_MSB], coeff_array[BME68X_IDX_P1_LSB]));
 8002e22:	7c7b      	ldrb	r3, [r7, #17]
 8002e24:	021b      	lsls	r3, r3, #8
 8002e26:	b21a      	sxth	r2, r3
 8002e28:	7c3b      	ldrb	r3, [r7, #16]
 8002e2a:	b21b      	sxth	r3, r3
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	b21b      	sxth	r3, r3
 8002e30:	b29a      	uxth	r2, r3
        dev->calib.par_p1 =
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	849a      	strh	r2, [r3, #36]	; 0x24
        dev->calib.par_p2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P2_MSB], coeff_array[BME68X_IDX_P2_LSB]));
 8002e36:	7cfb      	ldrb	r3, [r7, #19]
 8002e38:	021b      	lsls	r3, r3, #8
 8002e3a:	b21a      	sxth	r2, r3
 8002e3c:	7cbb      	ldrb	r3, [r7, #18]
 8002e3e:	b21b      	sxth	r3, r3
 8002e40:	4313      	orrs	r3, r2
 8002e42:	b21a      	sxth	r2, r3
        dev->calib.par_p2 =
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	84da      	strh	r2, [r3, #38]	; 0x26
        dev->calib.par_p3 = (int8_t)coeff_array[BME68X_IDX_P3];
 8002e48:	7d3b      	ldrb	r3, [r7, #20]
 8002e4a:	b25a      	sxtb	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        dev->calib.par_p4 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P4_MSB], coeff_array[BME68X_IDX_P4_LSB]));
 8002e52:	7dfb      	ldrb	r3, [r7, #23]
 8002e54:	021b      	lsls	r3, r3, #8
 8002e56:	b21a      	sxth	r2, r3
 8002e58:	7dbb      	ldrb	r3, [r7, #22]
 8002e5a:	b21b      	sxth	r3, r3
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	b21a      	sxth	r2, r3
        dev->calib.par_p4 =
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	855a      	strh	r2, [r3, #42]	; 0x2a
        dev->calib.par_p5 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P5_MSB], coeff_array[BME68X_IDX_P5_LSB]));
 8002e64:	7e7b      	ldrb	r3, [r7, #25]
 8002e66:	021b      	lsls	r3, r3, #8
 8002e68:	b21a      	sxth	r2, r3
 8002e6a:	7e3b      	ldrb	r3, [r7, #24]
 8002e6c:	b21b      	sxth	r3, r3
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	b21a      	sxth	r2, r3
        dev->calib.par_p5 =
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	859a      	strh	r2, [r3, #44]	; 0x2c
        dev->calib.par_p6 = (int8_t)(coeff_array[BME68X_IDX_P6]);
 8002e76:	7efb      	ldrb	r3, [r7, #27]
 8002e78:	b25a      	sxtb	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        dev->calib.par_p7 = (int8_t)(coeff_array[BME68X_IDX_P7]);
 8002e80:	7ebb      	ldrb	r3, [r7, #26]
 8002e82:	b25a      	sxtb	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
        dev->calib.par_p8 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P8_MSB], coeff_array[BME68X_IDX_P8_LSB]));
 8002e8a:	7ffb      	ldrb	r3, [r7, #31]
 8002e8c:	021b      	lsls	r3, r3, #8
 8002e8e:	b21a      	sxth	r2, r3
 8002e90:	7fbb      	ldrb	r3, [r7, #30]
 8002e92:	b21b      	sxth	r3, r3
 8002e94:	4313      	orrs	r3, r2
 8002e96:	b21a      	sxth	r2, r3
        dev->calib.par_p8 =
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	861a      	strh	r2, [r3, #48]	; 0x30
        dev->calib.par_p9 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P9_MSB], coeff_array[BME68X_IDX_P9_LSB]));
 8002e9c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002ea0:	021b      	lsls	r3, r3, #8
 8002ea2:	b21a      	sxth	r2, r3
 8002ea4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ea8:	b21b      	sxth	r3, r3
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	b21a      	sxth	r2, r3
        dev->calib.par_p9 =
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	865a      	strh	r2, [r3, #50]	; 0x32
        dev->calib.par_p10 = (uint8_t)(coeff_array[BME68X_IDX_P10]);
 8002eb2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Humidity related coefficients */
        dev->calib.par_h1 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 8002ebc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	b21a      	sxth	r2, r3
                       (coeff_array[BME68X_IDX_H1_LSB] & BME68X_BIT_H1_DATA_MSK));
 8002ec4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002ec8:	b21b      	sxth	r3, r3
 8002eca:	f003 030f 	and.w	r3, r3, #15
 8002ece:	b21b      	sxth	r3, r3
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	b21b      	sxth	r3, r3
 8002ed4:	b29a      	uxth	r2, r3
        dev->calib.par_h1 =
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	821a      	strh	r2, [r3, #16]
        dev->calib.par_h2 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H2_MSB] << 4) | ((coeff_array[BME68X_IDX_H2_LSB]) >> 4));
 8002eda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ede:	011b      	lsls	r3, r3, #4
 8002ee0:	b21a      	sxth	r2, r3
 8002ee2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002ee6:	091b      	lsrs	r3, r3, #4
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	b21b      	sxth	r3, r3
 8002eec:	4313      	orrs	r3, r2
 8002eee:	b21b      	sxth	r3, r3
 8002ef0:	b29a      	uxth	r2, r3
        dev->calib.par_h2 =
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	825a      	strh	r2, [r3, #18]
        dev->calib.par_h3 = (int8_t)coeff_array[BME68X_IDX_H3];
 8002ef6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002efa:	b25a      	sxtb	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	751a      	strb	r2, [r3, #20]
        dev->calib.par_h4 = (int8_t)coeff_array[BME68X_IDX_H4];
 8002f00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f04:	b25a      	sxtb	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	755a      	strb	r2, [r3, #21]
        dev->calib.par_h5 = (int8_t)coeff_array[BME68X_IDX_H5];
 8002f0a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002f0e:	b25a      	sxtb	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	759a      	strb	r2, [r3, #22]
        dev->calib.par_h6 = (uint8_t)coeff_array[BME68X_IDX_H6];
 8002f14:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	75da      	strb	r2, [r3, #23]
        dev->calib.par_h7 = (int8_t)coeff_array[BME68X_IDX_H7];
 8002f1c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002f20:	b25a      	sxtb	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	761a      	strb	r2, [r3, #24]

        /* Gas heater related coefficients */
        dev->calib.par_gh1 = (int8_t)coeff_array[BME68X_IDX_GH1];
 8002f26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002f2a:	b25a      	sxtb	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	765a      	strb	r2, [r3, #25]
        dev->calib.par_gh2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_GH2_MSB], coeff_array[BME68X_IDX_GH2_LSB]));
 8002f30:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002f34:	021b      	lsls	r3, r3, #8
 8002f36:	b21a      	sxth	r2, r3
 8002f38:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002f3c:	b21b      	sxth	r3, r3
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	b21a      	sxth	r2, r3
        dev->calib.par_gh2 =
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	835a      	strh	r2, [r3, #26]
        dev->calib.par_gh3 = (int8_t)coeff_array[BME68X_IDX_GH3];
 8002f46:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002f4a:	b25a      	sxtb	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	771a      	strb	r2, [r3, #28]

        /* Other coefficients */
        dev->calib.res_heat_range = ((coeff_array[BME68X_IDX_RES_HEAT_RANGE] & BME68X_RHRANGE_MSK) / 16);
 8002f50:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f54:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	da00      	bge.n	8002f5e <get_calib_data+0x1d6>
 8002f5c:	330f      	adds	r3, #15
 8002f5e:	111b      	asrs	r3, r3, #4
 8002f60:	b2da      	uxtb	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        dev->calib.res_heat_val = (int8_t)coeff_array[BME68X_IDX_RES_HEAT_VAL];
 8002f68:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002f6c:	b25a      	sxtb	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        dev->calib.range_sw_err = ((int8_t)(coeff_array[BME68X_IDX_RANGE_SW_ERR] & BME68X_RSERROR_MSK)) / 16;
 8002f74:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002f78:	b25b      	sxtb	r3, r3
 8002f7a:	111b      	asrs	r3, r3, #4
 8002f7c:	b25a      	sxtb	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }

    return rslt;
 8002f84:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3738      	adds	r7, #56	; 0x38
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <read_variant_id>:

/* This internal API is used to read variant ID information from the register */
static int8_t read_variant_id(struct bme68x_dev *dev)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data = 0;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	73bb      	strb	r3, [r7, #14]

    /* Read variant ID information register */
    rslt = bme68x_get_regs(BME68X_REG_VARIANT_ID, &reg_data, 1, dev);
 8002f9c:	f107 010e 	add.w	r1, r7, #14
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	20f0      	movs	r0, #240	; 0xf0
 8002fa6:	f7fe f83f 	bl	8001028 <bme68x_get_regs>
 8002faa:	4603      	mov	r3, r0
 8002fac:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME68X_OK)
 8002fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d103      	bne.n	8002fbe <read_variant_id+0x2e>
    {
        dev->variant_id = reg_data;
 8002fb6:	7bbb      	ldrb	r3, [r7, #14]
 8002fb8:	461a      	mov	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	609a      	str	r2, [r3, #8]
    }

    return rslt;
 8002fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
	...

08002fcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b08a      	sub	sp, #40	; 0x28
 8002fd0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002fd2:	f001 f861 	bl	8004098 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002fd6:	f000 f8f3 	bl	80031c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002fda:	f000 f9b3 	bl	8003344 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002fde:	f000 f959 	bl	8003294 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8002fe2:	f000 f985 	bl	80032f0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  int8_t result;

  //// Set up sensor
  // Initialize the interface
  bme680_interface_init(&bme);
 8002fe6:	4863      	ldr	r0, [pc, #396]	; (8003174 <main+0x1a8>)
 8002fe8:	f000 fb6a 	bl	80036c0 <bme680_interface_init>
  // initialize
  result = bme68x_init(&bme);
 8002fec:	4861      	ldr	r0, [pc, #388]	; (8003174 <main+0x1a8>)
 8002fee:	f7fd ff5d 	bl	8000eac <bme68x_init>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	77fb      	strb	r3, [r7, #31]
	print_error(result);
 8002ff6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f000 fbc6 	bl	800378c <print_error>
	if(result != BME68X_OK)
 8003000:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d005      	beq.n	8003014 <main+0x48>
	{
		printmsg(init_fail);
 8003008:	4b5b      	ldr	r3, [pc, #364]	; (8003178 <main+0x1ac>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4618      	mov	r0, r3
 800300e:	f000 fae5 	bl	80035dc <printmsg>
 8003012:	e004      	b.n	800301e <main+0x52>
	}
	else
	{
		printmsg(init_suc);
 8003014:	4b59      	ldr	r3, [pc, #356]	; (800317c <main+0x1b0>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4618      	mov	r0, r3
 800301a:	f000 fadf 	bl	80035dc <printmsg>
	}
  // configure oversampling
  result = bme680_config(&bme);
 800301e:	4855      	ldr	r0, [pc, #340]	; (8003174 <main+0x1a8>)
 8003020:	f000 fb74 	bl	800370c <bme680_config>
 8003024:	4603      	mov	r3, r0
 8003026:	77fb      	strb	r3, [r7, #31]
  if(result != BME68X_OK)
 8003028:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d005      	beq.n	800303c <main+0x70>
  {
  	printmsg(conf_failt);
 8003030:	4b53      	ldr	r3, [pc, #332]	; (8003180 <main+0x1b4>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	f000 fad1 	bl	80035dc <printmsg>
 800303a:	e004      	b.n	8003046 <main+0x7a>
  }
	else
	{
		printmsg(conf_suc);
 800303c:	4b51      	ldr	r3, [pc, #324]	; (8003184 <main+0x1b8>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4618      	mov	r0, r3
 8003042:	f000 facb 	bl	80035dc <printmsg>
	}
  // configure heater
  result = bme680_htr_config(&bme);
 8003046:	484b      	ldr	r0, [pc, #300]	; (8003174 <main+0x1a8>)
 8003048:	f000 fb82 	bl	8003750 <bme680_htr_config>
 800304c:	4603      	mov	r3, r0
 800304e:	77fb      	strb	r3, [r7, #31]
  if(result != BME68X_OK)
 8003050:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d005      	beq.n	8003064 <main+0x98>
  {
  	printmsg(htr_conf_fail);
 8003058:	4b4b      	ldr	r3, [pc, #300]	; (8003188 <main+0x1bc>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4618      	mov	r0, r3
 800305e:	f000 fabd 	bl	80035dc <printmsg>
 8003062:	e004      	b.n	800306e <main+0xa2>
  }
	else
	{
		printmsg(htr_conf_suc);
 8003064:	4b49      	ldr	r3, [pc, #292]	; (800318c <main+0x1c0>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4618      	mov	r0, r3
 800306a:	f000 fab7 	bl	80035dc <printmsg>
	}

  //// Set up task
  DWT_CTRL |= ( 1 << 0 );
 800306e:	4b48      	ldr	r3, [pc, #288]	; (8003190 <main+0x1c4>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a47      	ldr	r2, [pc, #284]	; (8003190 <main+0x1c4>)
 8003074:	f043 0301 	orr.w	r3, r3, #1
 8003078:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(sensor_handler, "Sensor_Task", 250, NULL, 2, &sensor_handle);
 800307a:	4b46      	ldr	r3, [pc, #280]	; (8003194 <main+0x1c8>)
 800307c:	9301      	str	r3, [sp, #4]
 800307e:	2302      	movs	r3, #2
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	2300      	movs	r3, #0
 8003084:	22fa      	movs	r2, #250	; 0xfa
 8003086:	4944      	ldr	r1, [pc, #272]	; (8003198 <main+0x1cc>)
 8003088:	4844      	ldr	r0, [pc, #272]	; (800319c <main+0x1d0>)
 800308a:	f005 f875 	bl	8008178 <xTaskCreate>
 800308e:	61b8      	str	r0, [r7, #24]
  configASSERT(status == pdPASS);
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d00a      	beq.n	80030ac <main+0xe0>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8003096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800309a:	f383 8811 	msr	BASEPRI, r3
 800309e:	f3bf 8f6f 	isb	sy
 80030a2:	f3bf 8f4f 	dsb	sy
 80030a6:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80030a8:	bf00      	nop
 80030aa:	e7fe      	b.n	80030aa <main+0xde>

  status = xTaskCreate(processing_handler, "Processing_Task", 250, NULL, 2, &processing_handle);
 80030ac:	4b3c      	ldr	r3, [pc, #240]	; (80031a0 <main+0x1d4>)
 80030ae:	9301      	str	r3, [sp, #4]
 80030b0:	2302      	movs	r3, #2
 80030b2:	9300      	str	r3, [sp, #0]
 80030b4:	2300      	movs	r3, #0
 80030b6:	22fa      	movs	r2, #250	; 0xfa
 80030b8:	493a      	ldr	r1, [pc, #232]	; (80031a4 <main+0x1d8>)
 80030ba:	483b      	ldr	r0, [pc, #236]	; (80031a8 <main+0x1dc>)
 80030bc:	f005 f85c 	bl	8008178 <xTaskCreate>
 80030c0:	61b8      	str	r0, [r7, #24]
  configASSERT(status == pdPASS);
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d00a      	beq.n	80030de <main+0x112>
        __asm volatile
 80030c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030cc:	f383 8811 	msr	BASEPRI, r3
 80030d0:	f3bf 8f6f 	isb	sy
 80030d4:	f3bf 8f4f 	dsb	sy
 80030d8:	613b      	str	r3, [r7, #16]
    }
 80030da:	bf00      	nop
 80030dc:	e7fe      	b.n	80030dc <main+0x110>

  status = xTaskCreate(displaying_handler, "Displaying_Task", 250, NULL, 2, &displaying_handle);
 80030de:	4b33      	ldr	r3, [pc, #204]	; (80031ac <main+0x1e0>)
 80030e0:	9301      	str	r3, [sp, #4]
 80030e2:	2302      	movs	r3, #2
 80030e4:	9300      	str	r3, [sp, #0]
 80030e6:	2300      	movs	r3, #0
 80030e8:	22fa      	movs	r2, #250	; 0xfa
 80030ea:	4931      	ldr	r1, [pc, #196]	; (80031b0 <main+0x1e4>)
 80030ec:	4831      	ldr	r0, [pc, #196]	; (80031b4 <main+0x1e8>)
 80030ee:	f005 f843 	bl	8008178 <xTaskCreate>
 80030f2:	61b8      	str	r0, [r7, #24]
  configASSERT(status == pdPASS);
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d00a      	beq.n	8003110 <main+0x144>
        __asm volatile
 80030fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030fe:	f383 8811 	msr	BASEPRI, r3
 8003102:	f3bf 8f6f 	isb	sy
 8003106:	f3bf 8f4f 	dsb	sy
 800310a:	60fb      	str	r3, [r7, #12]
    }
 800310c:	bf00      	nop
 800310e:	e7fe      	b.n	800310e <main+0x142>

  // set up queue
  measurement_data_queue = xQueueCreate(10, sizeof(size_t));
 8003110:	2200      	movs	r2, #0
 8003112:	2104      	movs	r1, #4
 8003114:	200a      	movs	r0, #10
 8003116:	f004 fbb7 	bl	8007888 <xQueueGenericCreate>
 800311a:	4603      	mov	r3, r0
 800311c:	4a26      	ldr	r2, [pc, #152]	; (80031b8 <main+0x1ec>)
 800311e:	6013      	str	r3, [r2, #0]
  configASSERT(measurement_data_queue != NULL);
 8003120:	4b25      	ldr	r3, [pc, #148]	; (80031b8 <main+0x1ec>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d10a      	bne.n	800313e <main+0x172>
        __asm volatile
 8003128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800312c:	f383 8811 	msr	BASEPRI, r3
 8003130:	f3bf 8f6f 	isb	sy
 8003134:	f3bf 8f4f 	dsb	sy
 8003138:	60bb      	str	r3, [r7, #8]
    }
 800313a:	bf00      	nop
 800313c:	e7fe      	b.n	800313c <main+0x170>
  display_information_queue = xQueueCreate(10, sizeof(char));
 800313e:	2200      	movs	r2, #0
 8003140:	2101      	movs	r1, #1
 8003142:	200a      	movs	r0, #10
 8003144:	f004 fba0 	bl	8007888 <xQueueGenericCreate>
 8003148:	4603      	mov	r3, r0
 800314a:	4a1c      	ldr	r2, [pc, #112]	; (80031bc <main+0x1f0>)
 800314c:	6013      	str	r3, [r2, #0]
  configASSERT(display_information_queue != NULL);
 800314e:	4b1b      	ldr	r3, [pc, #108]	; (80031bc <main+0x1f0>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10a      	bne.n	800316c <main+0x1a0>
        __asm volatile
 8003156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800315a:	f383 8811 	msr	BASEPRI, r3
 800315e:	f3bf 8f6f 	isb	sy
 8003162:	f3bf 8f4f 	dsb	sy
 8003166:	607b      	str	r3, [r7, #4]
    }
 8003168:	bf00      	nop
 800316a:	e7fe      	b.n	800316a <main+0x19e>
  // start scheduler
  vTaskStartScheduler();
 800316c:	f005 f94a 	bl	8008404 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003170:	e7fe      	b.n	8003170 <main+0x1a4>
 8003172:	bf00      	nop
 8003174:	200002f4 	.word	0x200002f4
 8003178:	20000000 	.word	0x20000000
 800317c:	20000004 	.word	0x20000004
 8003180:	20000008 	.word	0x20000008
 8003184:	2000000c 	.word	0x2000000c
 8003188:	20000010 	.word	0x20000010
 800318c:	20000014 	.word	0x20000014
 8003190:	e0001000 	.word	0xe0001000
 8003194:	200002e8 	.word	0x200002e8
 8003198:	0800d040 	.word	0x0800d040
 800319c:	080038a9 	.word	0x080038a9
 80031a0:	200002ec 	.word	0x200002ec
 80031a4:	0800d04c 	.word	0x0800d04c
 80031a8:	080039d9 	.word	0x080039d9
 80031ac:	200002f0 	.word	0x200002f0
 80031b0:	0800d05c 	.word	0x0800d05c
 80031b4:	08003b11 	.word	0x08003b11
 80031b8:	20000344 	.word	0x20000344
 80031bc:	20000348 	.word	0x20000348

080031c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b094      	sub	sp, #80	; 0x50
 80031c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031c6:	f107 0320 	add.w	r3, r7, #32
 80031ca:	2230      	movs	r2, #48	; 0x30
 80031cc:	2100      	movs	r1, #0
 80031ce:	4618      	mov	r0, r3
 80031d0:	f006 ff1a 	bl	800a008 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031d4:	f107 030c 	add.w	r3, r7, #12
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	605a      	str	r2, [r3, #4]
 80031de:	609a      	str	r2, [r3, #8]
 80031e0:	60da      	str	r2, [r3, #12]
 80031e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80031e4:	2300      	movs	r3, #0
 80031e6:	60bb      	str	r3, [r7, #8]
 80031e8:	4b28      	ldr	r3, [pc, #160]	; (800328c <SystemClock_Config+0xcc>)
 80031ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ec:	4a27      	ldr	r2, [pc, #156]	; (800328c <SystemClock_Config+0xcc>)
 80031ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031f2:	6413      	str	r3, [r2, #64]	; 0x40
 80031f4:	4b25      	ldr	r3, [pc, #148]	; (800328c <SystemClock_Config+0xcc>)
 80031f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031fc:	60bb      	str	r3, [r7, #8]
 80031fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003200:	2300      	movs	r3, #0
 8003202:	607b      	str	r3, [r7, #4]
 8003204:	4b22      	ldr	r3, [pc, #136]	; (8003290 <SystemClock_Config+0xd0>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a21      	ldr	r2, [pc, #132]	; (8003290 <SystemClock_Config+0xd0>)
 800320a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800320e:	6013      	str	r3, [r2, #0]
 8003210:	4b1f      	ldr	r3, [pc, #124]	; (8003290 <SystemClock_Config+0xd0>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003218:	607b      	str	r3, [r7, #4]
 800321a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800321c:	2302      	movs	r3, #2
 800321e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003220:	2301      	movs	r3, #1
 8003222:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003224:	2310      	movs	r3, #16
 8003226:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003228:	2302      	movs	r3, #2
 800322a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800322c:	2300      	movs	r3, #0
 800322e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003230:	2308      	movs	r3, #8
 8003232:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8003234:	2332      	movs	r3, #50	; 0x32
 8003236:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003238:	2304      	movs	r3, #4
 800323a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800323c:	2307      	movs	r3, #7
 800323e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003240:	f107 0320 	add.w	r3, r7, #32
 8003244:	4618      	mov	r0, r3
 8003246:	f002 fa77 	bl	8005738 <HAL_RCC_OscConfig>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003250:	f000 fcb4 	bl	8003bbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003254:	230f      	movs	r3, #15
 8003256:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003258:	2302      	movs	r3, #2
 800325a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800325c:	2300      	movs	r3, #0
 800325e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003260:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003264:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003266:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800326a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800326c:	f107 030c 	add.w	r3, r7, #12
 8003270:	2100      	movs	r1, #0
 8003272:	4618      	mov	r0, r3
 8003274:	f002 fcd8 	bl	8005c28 <HAL_RCC_ClockConfig>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800327e:	f000 fc9d 	bl	8003bbc <Error_Handler>
  }
}
 8003282:	bf00      	nop
 8003284:	3750      	adds	r7, #80	; 0x50
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	40023800 	.word	0x40023800
 8003290:	40007000 	.word	0x40007000

08003294 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003298:	4b12      	ldr	r3, [pc, #72]	; (80032e4 <MX_I2C1_Init+0x50>)
 800329a:	4a13      	ldr	r2, [pc, #76]	; (80032e8 <MX_I2C1_Init+0x54>)
 800329c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800329e:	4b11      	ldr	r3, [pc, #68]	; (80032e4 <MX_I2C1_Init+0x50>)
 80032a0:	4a12      	ldr	r2, [pc, #72]	; (80032ec <MX_I2C1_Init+0x58>)
 80032a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80032a4:	4b0f      	ldr	r3, [pc, #60]	; (80032e4 <MX_I2C1_Init+0x50>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80032aa:	4b0e      	ldr	r3, [pc, #56]	; (80032e4 <MX_I2C1_Init+0x50>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80032b0:	4b0c      	ldr	r3, [pc, #48]	; (80032e4 <MX_I2C1_Init+0x50>)
 80032b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80032b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80032b8:	4b0a      	ldr	r3, [pc, #40]	; (80032e4 <MX_I2C1_Init+0x50>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80032be:	4b09      	ldr	r3, [pc, #36]	; (80032e4 <MX_I2C1_Init+0x50>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80032c4:	4b07      	ldr	r3, [pc, #28]	; (80032e4 <MX_I2C1_Init+0x50>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80032ca:	4b06      	ldr	r3, [pc, #24]	; (80032e4 <MX_I2C1_Init+0x50>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80032d0:	4804      	ldr	r0, [pc, #16]	; (80032e4 <MX_I2C1_Init+0x50>)
 80032d2:	f001 fa71 	bl	80047b8 <HAL_I2C_Init>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80032dc:	f000 fc6e 	bl	8003bbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80032e0:	bf00      	nop
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	20000230 	.word	0x20000230
 80032e8:	40005400 	.word	0x40005400
 80032ec:	000186a0 	.word	0x000186a0

080032f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80032f4:	4b11      	ldr	r3, [pc, #68]	; (800333c <MX_USART2_UART_Init+0x4c>)
 80032f6:	4a12      	ldr	r2, [pc, #72]	; (8003340 <MX_USART2_UART_Init+0x50>)
 80032f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80032fa:	4b10      	ldr	r3, [pc, #64]	; (800333c <MX_USART2_UART_Init+0x4c>)
 80032fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003300:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003302:	4b0e      	ldr	r3, [pc, #56]	; (800333c <MX_USART2_UART_Init+0x4c>)
 8003304:	2200      	movs	r2, #0
 8003306:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003308:	4b0c      	ldr	r3, [pc, #48]	; (800333c <MX_USART2_UART_Init+0x4c>)
 800330a:	2200      	movs	r2, #0
 800330c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800330e:	4b0b      	ldr	r3, [pc, #44]	; (800333c <MX_USART2_UART_Init+0x4c>)
 8003310:	2200      	movs	r2, #0
 8003312:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003314:	4b09      	ldr	r3, [pc, #36]	; (800333c <MX_USART2_UART_Init+0x4c>)
 8003316:	220c      	movs	r2, #12
 8003318:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800331a:	4b08      	ldr	r3, [pc, #32]	; (800333c <MX_USART2_UART_Init+0x4c>)
 800331c:	2200      	movs	r2, #0
 800331e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003320:	4b06      	ldr	r3, [pc, #24]	; (800333c <MX_USART2_UART_Init+0x4c>)
 8003322:	2200      	movs	r2, #0
 8003324:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003326:	4805      	ldr	r0, [pc, #20]	; (800333c <MX_USART2_UART_Init+0x4c>)
 8003328:	f003 f97e 	bl	8006628 <HAL_UART_Init>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003332:	f000 fc43 	bl	8003bbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003336:	bf00      	nop
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	20000284 	.word	0x20000284
 8003340:	40004400 	.word	0x40004400

08003344 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b08c      	sub	sp, #48	; 0x30
 8003348:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800334a:	f107 031c 	add.w	r3, r7, #28
 800334e:	2200      	movs	r2, #0
 8003350:	601a      	str	r2, [r3, #0]
 8003352:	605a      	str	r2, [r3, #4]
 8003354:	609a      	str	r2, [r3, #8]
 8003356:	60da      	str	r2, [r3, #12]
 8003358:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800335a:	2300      	movs	r3, #0
 800335c:	61bb      	str	r3, [r7, #24]
 800335e:	4b99      	ldr	r3, [pc, #612]	; (80035c4 <MX_GPIO_Init+0x280>)
 8003360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003362:	4a98      	ldr	r2, [pc, #608]	; (80035c4 <MX_GPIO_Init+0x280>)
 8003364:	f043 0310 	orr.w	r3, r3, #16
 8003368:	6313      	str	r3, [r2, #48]	; 0x30
 800336a:	4b96      	ldr	r3, [pc, #600]	; (80035c4 <MX_GPIO_Init+0x280>)
 800336c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336e:	f003 0310 	and.w	r3, r3, #16
 8003372:	61bb      	str	r3, [r7, #24]
 8003374:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003376:	2300      	movs	r3, #0
 8003378:	617b      	str	r3, [r7, #20]
 800337a:	4b92      	ldr	r3, [pc, #584]	; (80035c4 <MX_GPIO_Init+0x280>)
 800337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337e:	4a91      	ldr	r2, [pc, #580]	; (80035c4 <MX_GPIO_Init+0x280>)
 8003380:	f043 0304 	orr.w	r3, r3, #4
 8003384:	6313      	str	r3, [r2, #48]	; 0x30
 8003386:	4b8f      	ldr	r3, [pc, #572]	; (80035c4 <MX_GPIO_Init+0x280>)
 8003388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338a:	f003 0304 	and.w	r3, r3, #4
 800338e:	617b      	str	r3, [r7, #20]
 8003390:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003392:	2300      	movs	r3, #0
 8003394:	613b      	str	r3, [r7, #16]
 8003396:	4b8b      	ldr	r3, [pc, #556]	; (80035c4 <MX_GPIO_Init+0x280>)
 8003398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339a:	4a8a      	ldr	r2, [pc, #552]	; (80035c4 <MX_GPIO_Init+0x280>)
 800339c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033a0:	6313      	str	r3, [r2, #48]	; 0x30
 80033a2:	4b88      	ldr	r3, [pc, #544]	; (80035c4 <MX_GPIO_Init+0x280>)
 80033a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033aa:	613b      	str	r3, [r7, #16]
 80033ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ae:	2300      	movs	r3, #0
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	4b84      	ldr	r3, [pc, #528]	; (80035c4 <MX_GPIO_Init+0x280>)
 80033b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b6:	4a83      	ldr	r2, [pc, #524]	; (80035c4 <MX_GPIO_Init+0x280>)
 80033b8:	f043 0301 	orr.w	r3, r3, #1
 80033bc:	6313      	str	r3, [r2, #48]	; 0x30
 80033be:	4b81      	ldr	r3, [pc, #516]	; (80035c4 <MX_GPIO_Init+0x280>)
 80033c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	60fb      	str	r3, [r7, #12]
 80033c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ca:	2300      	movs	r3, #0
 80033cc:	60bb      	str	r3, [r7, #8]
 80033ce:	4b7d      	ldr	r3, [pc, #500]	; (80035c4 <MX_GPIO_Init+0x280>)
 80033d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d2:	4a7c      	ldr	r2, [pc, #496]	; (80035c4 <MX_GPIO_Init+0x280>)
 80033d4:	f043 0302 	orr.w	r3, r3, #2
 80033d8:	6313      	str	r3, [r2, #48]	; 0x30
 80033da:	4b7a      	ldr	r3, [pc, #488]	; (80035c4 <MX_GPIO_Init+0x280>)
 80033dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	60bb      	str	r3, [r7, #8]
 80033e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80033e6:	2300      	movs	r3, #0
 80033e8:	607b      	str	r3, [r7, #4]
 80033ea:	4b76      	ldr	r3, [pc, #472]	; (80035c4 <MX_GPIO_Init+0x280>)
 80033ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ee:	4a75      	ldr	r2, [pc, #468]	; (80035c4 <MX_GPIO_Init+0x280>)
 80033f0:	f043 0308 	orr.w	r3, r3, #8
 80033f4:	6313      	str	r3, [r2, #48]	; 0x30
 80033f6:	4b73      	ldr	r3, [pc, #460]	; (80035c4 <MX_GPIO_Init+0x280>)
 80033f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fa:	f003 0308 	and.w	r3, r3, #8
 80033fe:	607b      	str	r3, [r7, #4]
 8003400:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8003402:	2200      	movs	r2, #0
 8003404:	2108      	movs	r1, #8
 8003406:	4870      	ldr	r0, [pc, #448]	; (80035c8 <MX_GPIO_Init+0x284>)
 8003408:	f001 f9bc 	bl	8004784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800340c:	2201      	movs	r2, #1
 800340e:	2101      	movs	r1, #1
 8003410:	486e      	ldr	r0, [pc, #440]	; (80035cc <MX_GPIO_Init+0x288>)
 8003412:	f001 f9b7 	bl	8004784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8003416:	2200      	movs	r2, #0
 8003418:	f24f 0110 	movw	r1, #61456	; 0xf010
 800341c:	486c      	ldr	r0, [pc, #432]	; (80035d0 <MX_GPIO_Init+0x28c>)
 800341e:	f001 f9b1 	bl	8004784 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8003422:	2308      	movs	r3, #8
 8003424:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003426:	2301      	movs	r3, #1
 8003428:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342a:	2300      	movs	r3, #0
 800342c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800342e:	2300      	movs	r3, #0
 8003430:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8003432:	f107 031c 	add.w	r3, r7, #28
 8003436:	4619      	mov	r1, r3
 8003438:	4863      	ldr	r0, [pc, #396]	; (80035c8 <MX_GPIO_Init+0x284>)
 800343a:	f001 f807 	bl	800444c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800343e:	2301      	movs	r3, #1
 8003440:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003442:	2301      	movs	r3, #1
 8003444:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003446:	2300      	movs	r3, #0
 8003448:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800344a:	2300      	movs	r3, #0
 800344c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800344e:	f107 031c 	add.w	r3, r7, #28
 8003452:	4619      	mov	r1, r3
 8003454:	485d      	ldr	r0, [pc, #372]	; (80035cc <MX_GPIO_Init+0x288>)
 8003456:	f000 fff9 	bl	800444c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800345a:	2308      	movs	r3, #8
 800345c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800345e:	2302      	movs	r3, #2
 8003460:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003462:	2300      	movs	r3, #0
 8003464:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003466:	2300      	movs	r3, #0
 8003468:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800346a:	2305      	movs	r3, #5
 800346c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800346e:	f107 031c 	add.w	r3, r7, #28
 8003472:	4619      	mov	r1, r3
 8003474:	4855      	ldr	r0, [pc, #340]	; (80035cc <MX_GPIO_Init+0x288>)
 8003476:	f000 ffe9 	bl	800444c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800347a:	2301      	movs	r3, #1
 800347c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800347e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003482:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003484:	2300      	movs	r3, #0
 8003486:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003488:	f107 031c 	add.w	r3, r7, #28
 800348c:	4619      	mov	r1, r3
 800348e:	4851      	ldr	r0, [pc, #324]	; (80035d4 <MX_GPIO_Init+0x290>)
 8003490:	f000 ffdc 	bl	800444c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8003494:	2310      	movs	r3, #16
 8003496:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003498:	2302      	movs	r3, #2
 800349a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349c:	2300      	movs	r3, #0
 800349e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034a0:	2300      	movs	r3, #0
 80034a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80034a4:	2306      	movs	r3, #6
 80034a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80034a8:	f107 031c 	add.w	r3, r7, #28
 80034ac:	4619      	mov	r1, r3
 80034ae:	4849      	ldr	r0, [pc, #292]	; (80035d4 <MX_GPIO_Init+0x290>)
 80034b0:	f000 ffcc 	bl	800444c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80034b4:	23e0      	movs	r3, #224	; 0xe0
 80034b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b8:	2302      	movs	r3, #2
 80034ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034bc:	2300      	movs	r3, #0
 80034be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034c0:	2300      	movs	r3, #0
 80034c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80034c4:	2305      	movs	r3, #5
 80034c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034c8:	f107 031c 	add.w	r3, r7, #28
 80034cc:	4619      	mov	r1, r3
 80034ce:	4841      	ldr	r0, [pc, #260]	; (80035d4 <MX_GPIO_Init+0x290>)
 80034d0:	f000 ffbc 	bl	800444c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80034d4:	2304      	movs	r3, #4
 80034d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034d8:	2300      	movs	r3, #0
 80034da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034dc:	2300      	movs	r3, #0
 80034de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80034e0:	f107 031c 	add.w	r3, r7, #28
 80034e4:	4619      	mov	r1, r3
 80034e6:	483c      	ldr	r0, [pc, #240]	; (80035d8 <MX_GPIO_Init+0x294>)
 80034e8:	f000 ffb0 	bl	800444c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80034ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f2:	2302      	movs	r3, #2
 80034f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f6:	2300      	movs	r3, #0
 80034f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034fa:	2300      	movs	r3, #0
 80034fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80034fe:	2305      	movs	r3, #5
 8003500:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8003502:	f107 031c 	add.w	r3, r7, #28
 8003506:	4619      	mov	r1, r3
 8003508:	4833      	ldr	r0, [pc, #204]	; (80035d8 <MX_GPIO_Init+0x294>)
 800350a:	f000 ff9f 	bl	800444c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800350e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8003512:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003514:	2301      	movs	r3, #1
 8003516:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003518:	2300      	movs	r3, #0
 800351a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800351c:	2300      	movs	r3, #0
 800351e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003520:	f107 031c 	add.w	r3, r7, #28
 8003524:	4619      	mov	r1, r3
 8003526:	482a      	ldr	r0, [pc, #168]	; (80035d0 <MX_GPIO_Init+0x28c>)
 8003528:	f000 ff90 	bl	800444c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800352c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8003530:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003532:	2302      	movs	r3, #2
 8003534:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003536:	2300      	movs	r3, #0
 8003538:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800353a:	2300      	movs	r3, #0
 800353c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800353e:	2306      	movs	r3, #6
 8003540:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003542:	f107 031c 	add.w	r3, r7, #28
 8003546:	4619      	mov	r1, r3
 8003548:	4820      	ldr	r0, [pc, #128]	; (80035cc <MX_GPIO_Init+0x288>)
 800354a:	f000 ff7f 	bl	800444c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800354e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003552:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003554:	2300      	movs	r3, #0
 8003556:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003558:	2300      	movs	r3, #0
 800355a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800355c:	f107 031c 	add.w	r3, r7, #28
 8003560:	4619      	mov	r1, r3
 8003562:	481c      	ldr	r0, [pc, #112]	; (80035d4 <MX_GPIO_Init+0x290>)
 8003564:	f000 ff72 	bl	800444c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8003568:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800356c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800356e:	2302      	movs	r3, #2
 8003570:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003572:	2300      	movs	r3, #0
 8003574:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003576:	2300      	movs	r3, #0
 8003578:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800357a:	230a      	movs	r3, #10
 800357c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800357e:	f107 031c 	add.w	r3, r7, #28
 8003582:	4619      	mov	r1, r3
 8003584:	4813      	ldr	r0, [pc, #76]	; (80035d4 <MX_GPIO_Init+0x290>)
 8003586:	f000 ff61 	bl	800444c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800358a:	2320      	movs	r3, #32
 800358c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800358e:	2300      	movs	r3, #0
 8003590:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003592:	2300      	movs	r3, #0
 8003594:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003596:	f107 031c 	add.w	r3, r7, #28
 800359a:	4619      	mov	r1, r3
 800359c:	480c      	ldr	r0, [pc, #48]	; (80035d0 <MX_GPIO_Init+0x28c>)
 800359e:	f000 ff55 	bl	800444c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80035a2:	2302      	movs	r3, #2
 80035a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80035a6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80035aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ac:	2300      	movs	r3, #0
 80035ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80035b0:	f107 031c 	add.w	r3, r7, #28
 80035b4:	4619      	mov	r1, r3
 80035b6:	4804      	ldr	r0, [pc, #16]	; (80035c8 <MX_GPIO_Init+0x284>)
 80035b8:	f000 ff48 	bl	800444c <HAL_GPIO_Init>

}
 80035bc:	bf00      	nop
 80035be:	3730      	adds	r7, #48	; 0x30
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40023800 	.word	0x40023800
 80035c8:	40021000 	.word	0x40021000
 80035cc:	40020800 	.word	0x40020800
 80035d0:	40020c00 	.word	0x40020c00
 80035d4:	40020000 	.word	0x40020000
 80035d8:	40020400 	.word	0x40020400

080035dc <printmsg>:

/* USER CODE BEGIN 4 */
void printmsg(const char* msg)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f7fc fdf3 	bl	80001d0 <strlen>
 80035ea:	4603      	mov	r3, r0
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	f04f 33ff 	mov.w	r3, #4294967295
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	4803      	ldr	r0, [pc, #12]	; (8003604 <printmsg+0x28>)
 80035f6:	f003 f864 	bl	80066c2 <HAL_UART_Transmit>
}
 80035fa:	bf00      	nop
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	20000284 	.word	0x20000284

08003608 <user_i2c_read>:

BME68X_INTF_RET_TYPE user_i2c_read(uint8_t reg_addr, uint8_t *data, uint32_t len, void *intf_ptr)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b08a      	sub	sp, #40	; 0x28
 800360c:	af04      	add	r7, sp, #16
 800360e:	60b9      	str	r1, [r7, #8]
 8003610:	607a      	str	r2, [r7, #4]
 8003612:	603b      	str	r3, [r7, #0]
 8003614:	4603      	mov	r3, r0
 8003616:	73fb      	strb	r3, [r7, #15]
	uint8_t dev_addr = *(uint8_t*)intf_ptr;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	75fb      	strb	r3, [r7, #23]
	uint16_t DevAddress = dev_addr <<1;
 800361e:	7dfb      	ldrb	r3, [r7, #23]
 8003620:	b29b      	uxth	r3, r3
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	82bb      	strh	r3, [r7, #20]
//  HAL_I2C_Master_Transmit(&hi2c1, DevAddress, &reg_addr, 1, 1000);
//  HAL_I2C_Master_Receive(&hi2c1, DevAddress, data, len, 1000);
	HAL_I2C_Mem_Read(&hi2c1, DevAddress, reg_addr, 1, data, len, 15);
 8003626:	7bfb      	ldrb	r3, [r7, #15]
 8003628:	b29a      	uxth	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	b29b      	uxth	r3, r3
 800362e:	8ab9      	ldrh	r1, [r7, #20]
 8003630:	200f      	movs	r0, #15
 8003632:	9002      	str	r0, [sp, #8]
 8003634:	9301      	str	r3, [sp, #4]
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	2301      	movs	r3, #1
 800363c:	4803      	ldr	r0, [pc, #12]	; (800364c <user_i2c_read+0x44>)
 800363e:	f001 faf9 	bl	8004c34 <HAL_I2C_Mem_Read>
  return 0; // Success
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3718      	adds	r7, #24
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	20000230 	.word	0x20000230

08003650 <user_i2c_write>:

BME68X_INTF_RET_TYPE user_i2c_write(uint8_t reg_addr, const uint8_t *data, uint32_t len, void *intf_ptr)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b08a      	sub	sp, #40	; 0x28
 8003654:	af04      	add	r7, sp, #16
 8003656:	60b9      	str	r1, [r7, #8]
 8003658:	607a      	str	r2, [r7, #4]
 800365a:	603b      	str	r3, [r7, #0]
 800365c:	4603      	mov	r3, r0
 800365e:	73fb      	strb	r3, [r7, #15]
	uint8_t dev_addr = *(uint8_t*)intf_ptr;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	75fb      	strb	r3, [r7, #23]
	uint16_t DevAddress = dev_addr <<1;
 8003666:	7dfb      	ldrb	r3, [r7, #23]
 8003668:	b29b      	uxth	r3, r3
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	82bb      	strh	r3, [r7, #20]
//	HAL_I2C_Master_Transmit(&hi2c1, DevAddress, &reg_addr, len+1, 1000);
	HAL_I2C_Mem_Write(&hi2c1, DevAddress, reg_addr, 1, (uint8_t*)data, len, 15);
 800366e:	7bfb      	ldrb	r3, [r7, #15]
 8003670:	b29a      	uxth	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	b29b      	uxth	r3, r3
 8003676:	8ab9      	ldrh	r1, [r7, #20]
 8003678:	200f      	movs	r0, #15
 800367a:	9002      	str	r0, [sp, #8]
 800367c:	9301      	str	r3, [sp, #4]
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	9300      	str	r3, [sp, #0]
 8003682:	2301      	movs	r3, #1
 8003684:	4803      	ldr	r0, [pc, #12]	; (8003694 <user_i2c_write+0x44>)
 8003686:	f001 f9db 	bl	8004a40 <HAL_I2C_Mem_Write>
  return 0; // Success
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3718      	adds	r7, #24
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	20000230 	.word	0x20000230

08003698 <bme68x_delay_us>:

void bme68x_delay_us(uint32_t period, void *ntf_ptr)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
	HAL_Delay(period/1000);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a05      	ldr	r2, [pc, #20]	; (80036bc <bme68x_delay_us+0x24>)
 80036a6:	fba2 2303 	umull	r2, r3, r2, r3
 80036aa:	099b      	lsrs	r3, r3, #6
 80036ac:	4618      	mov	r0, r3
 80036ae:	f000 fd35 	bl	800411c <HAL_Delay>
}
 80036b2:	bf00      	nop
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	10624dd3 	.word	0x10624dd3

080036c0 <bme680_interface_init>:

static void bme680_interface_init(struct bme68x_dev* dev_ptr)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  uint8_t dev_addr;
	dev_addr = BME68X_I2C_ADDR_HIGH;
 80036c8:	2377      	movs	r3, #119	; 0x77
 80036ca:	73fb      	strb	r3, [r7, #15]
	dev_ptr -> intf = BME68X_I2C_INTF;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	731a      	strb	r2, [r3, #12]
	dev_ptr -> read = user_i2c_read;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a0a      	ldr	r2, [pc, #40]	; (8003700 <bme680_interface_init+0x40>)
 80036d6:	641a      	str	r2, [r3, #64]	; 0x40
	dev_ptr -> write = user_i2c_write;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a0a      	ldr	r2, [pc, #40]	; (8003704 <bme680_interface_init+0x44>)
 80036dc:	645a      	str	r2, [r3, #68]	; 0x44
	dev_ptr -> delay_us = bme68x_delay_us;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a09      	ldr	r2, [pc, #36]	; (8003708 <bme680_interface_init+0x48>)
 80036e2:	649a      	str	r2, [r3, #72]	; 0x48
	dev_ptr -> intf_ptr = &dev_addr;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f107 020f 	add.w	r2, r7, #15
 80036ea:	605a      	str	r2, [r3, #4]
	dev_ptr -> amb_temp = 25;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2219      	movs	r2, #25
 80036f0:	739a      	strb	r2, [r3, #14]
}
 80036f2:	bf00      	nop
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	08003609 	.word	0x08003609
 8003704:	08003651 	.word	0x08003651
 8003708:	08003699 	.word	0x08003699

0800370c <bme680_config>:

static int8_t bme680_config(struct bme68x_dev* bme680_ptr)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
	sensor_conf.filter = iir_filter;
 8003714:	4b0d      	ldr	r3, [pc, #52]	; (800374c <bme680_config+0x40>)
 8003716:	2200      	movs	r2, #0
 8003718:	70da      	strb	r2, [r3, #3]
	sensor_conf.odr = odr_time;
 800371a:	4b0c      	ldr	r3, [pc, #48]	; (800374c <bme680_config+0x40>)
 800371c:	2208      	movs	r2, #8
 800371e:	711a      	strb	r2, [r3, #4]
	sensor_conf.os_hum = hum_os;
 8003720:	4b0a      	ldr	r3, [pc, #40]	; (800374c <bme680_config+0x40>)
 8003722:	2205      	movs	r2, #5
 8003724:	701a      	strb	r2, [r3, #0]
	sensor_conf.os_pres = pres_os;
 8003726:	4b09      	ldr	r3, [pc, #36]	; (800374c <bme680_config+0x40>)
 8003728:	2201      	movs	r2, #1
 800372a:	709a      	strb	r2, [r3, #2]
	sensor_conf.os_temp = temp_os;
 800372c:	4b07      	ldr	r3, [pc, #28]	; (800374c <bme680_config+0x40>)
 800372e:	2202      	movs	r2, #2
 8003730:	705a      	strb	r2, [r3, #1]

	int8_t rslt = bme68x_set_conf(&sensor_conf, bme680_ptr);
 8003732:	6879      	ldr	r1, [r7, #4]
 8003734:	4805      	ldr	r0, [pc, #20]	; (800374c <bme680_config+0x40>)
 8003736:	f7fd fcff 	bl	8001138 <bme68x_set_conf>
 800373a:	4603      	mov	r3, r0
 800373c:	73fb      	strb	r3, [r7, #15]
	return rslt;
 800373e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003742:	4618      	mov	r0, r3
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	200002cc 	.word	0x200002cc

08003750 <bme680_htr_config>:

static int8_t bme680_htr_config(struct bme68x_dev* bme680_ptr)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
	htr_conf.enable = htr_enable;
 8003758:	4b0b      	ldr	r3, [pc, #44]	; (8003788 <bme680_htr_config+0x38>)
 800375a:	2201      	movs	r2, #1
 800375c:	701a      	strb	r2, [r3, #0]
	htr_conf.heatr_dur = htr_dur;
 800375e:	4b0a      	ldr	r3, [pc, #40]	; (8003788 <bme680_htr_config+0x38>)
 8003760:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003764:	809a      	strh	r2, [r3, #4]
	htr_conf.heatr_temp = htr_temp;
 8003766:	4b08      	ldr	r3, [pc, #32]	; (8003788 <bme680_htr_config+0x38>)
 8003768:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800376c:	805a      	strh	r2, [r3, #2]

	int8_t rslt = bme68x_set_heatr_conf(BME68X_FORCED_MODE, &htr_conf, bme680_ptr);
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	4905      	ldr	r1, [pc, #20]	; (8003788 <bme680_htr_config+0x38>)
 8003772:	2001      	movs	r0, #1
 8003774:	f7fd ffd8 	bl	8001728 <bme68x_set_heatr_conf>
 8003778:	4603      	mov	r3, r0
 800377a:	73fb      	strb	r3, [r7, #15]
	return rslt;
 800377c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003780:	4618      	mov	r0, r3
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	200002d4 	.word	0x200002d4

0800378c <print_error>:

void print_error(int8_t result)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	4603      	mov	r3, r0
 8003794:	71fb      	strb	r3, [r7, #7]
	const char *return_msg;
	if(result == BME68X_OK)
 8003796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d105      	bne.n	80037aa <print_error+0x1e>
	{
		return_msg = "Init Result: BME68X_OK\n";
 800379e:	4b37      	ldr	r3, [pc, #220]	; (800387c <print_error+0xf0>)
 80037a0:	60fb      	str	r3, [r7, #12]
		printmsg(return_msg);
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f7ff ff1a 	bl	80035dc <printmsg>
	else
	{
		return_msg = "Init Result: Not identified\n";
		printmsg(return_msg);
	}
}
 80037a8:	e063      	b.n	8003872 <print_error+0xe6>
	else if(result == BME68X_E_NULL_PTR)
 80037aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b2:	d105      	bne.n	80037c0 <print_error+0x34>
		return_msg = "Init Result: BME68X_E_NULL_PTR\n";
 80037b4:	4b32      	ldr	r3, [pc, #200]	; (8003880 <print_error+0xf4>)
 80037b6:	60fb      	str	r3, [r7, #12]
		printmsg(return_msg);
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f7ff ff0f 	bl	80035dc <printmsg>
}
 80037be:	e058      	b.n	8003872 <print_error+0xe6>
	else if(result == BME68X_E_COM_FAIL)
 80037c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c4:	f113 0f02 	cmn.w	r3, #2
 80037c8:	d105      	bne.n	80037d6 <print_error+0x4a>
		return_msg = "Init Result: BME68X_E_COM_FAIL\n";
 80037ca:	4b2e      	ldr	r3, [pc, #184]	; (8003884 <print_error+0xf8>)
 80037cc:	60fb      	str	r3, [r7, #12]
		printmsg(return_msg);
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f7ff ff04 	bl	80035dc <printmsg>
}
 80037d4:	e04d      	b.n	8003872 <print_error+0xe6>
	else if(result == BME68X_E_DEV_NOT_FOUND)
 80037d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037da:	f113 0f03 	cmn.w	r3, #3
 80037de:	d105      	bne.n	80037ec <print_error+0x60>
		return_msg = "Init Result: BME68X_E_DEV_NOT_FOUND\n";
 80037e0:	4b29      	ldr	r3, [pc, #164]	; (8003888 <print_error+0xfc>)
 80037e2:	60fb      	str	r3, [r7, #12]
		printmsg(return_msg);
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f7ff fef9 	bl	80035dc <printmsg>
}
 80037ea:	e042      	b.n	8003872 <print_error+0xe6>
	else if(result == BME68X_E_INVALID_LENGTH)
 80037ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f0:	f113 0f04 	cmn.w	r3, #4
 80037f4:	d105      	bne.n	8003802 <print_error+0x76>
		return_msg = "Init Result: BME68X_E_INVALID_LENGTH\n";
 80037f6:	4b25      	ldr	r3, [pc, #148]	; (800388c <print_error+0x100>)
 80037f8:	60fb      	str	r3, [r7, #12]
		printmsg(return_msg);
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f7ff feee 	bl	80035dc <printmsg>
}
 8003800:	e037      	b.n	8003872 <print_error+0xe6>
	else if(result == BME68X_E_SELF_TEST)
 8003802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003806:	f113 0f05 	cmn.w	r3, #5
 800380a:	d105      	bne.n	8003818 <print_error+0x8c>
		return_msg = "Init Result: BME68X_E_SELF_TEST\n";
 800380c:	4b20      	ldr	r3, [pc, #128]	; (8003890 <print_error+0x104>)
 800380e:	60fb      	str	r3, [r7, #12]
		printmsg(return_msg);
 8003810:	68f8      	ldr	r0, [r7, #12]
 8003812:	f7ff fee3 	bl	80035dc <printmsg>
}
 8003816:	e02c      	b.n	8003872 <print_error+0xe6>
	else if(result == BME68X_W_DEFINE_OP_MODE)
 8003818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d105      	bne.n	800382c <print_error+0xa0>
		return_msg = "Init Result: BME68X_W_DEFINE_OP_MODE\n";
 8003820:	4b1c      	ldr	r3, [pc, #112]	; (8003894 <print_error+0x108>)
 8003822:	60fb      	str	r3, [r7, #12]
		printmsg(return_msg);
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f7ff fed9 	bl	80035dc <printmsg>
}
 800382a:	e022      	b.n	8003872 <print_error+0xe6>
	else if(result == BME68X_W_NO_NEW_DATA)
 800382c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003830:	2b02      	cmp	r3, #2
 8003832:	d105      	bne.n	8003840 <print_error+0xb4>
		return_msg = "Init Result: BME68X_W_NO_NEW_DATA\n";
 8003834:	4b18      	ldr	r3, [pc, #96]	; (8003898 <print_error+0x10c>)
 8003836:	60fb      	str	r3, [r7, #12]
		printmsg(return_msg);
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f7ff fecf 	bl	80035dc <printmsg>
}
 800383e:	e018      	b.n	8003872 <print_error+0xe6>
	else if(result == BME68X_W_DEFINE_SHD_HEATR_DUR)
 8003840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003844:	2b03      	cmp	r3, #3
 8003846:	d105      	bne.n	8003854 <print_error+0xc8>
		return_msg = "Init Result: BME68X_W_DEFINE_SHD_HEATR_DUR\n";
 8003848:	4b14      	ldr	r3, [pc, #80]	; (800389c <print_error+0x110>)
 800384a:	60fb      	str	r3, [r7, #12]
		printmsg(return_msg);
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f7ff fec5 	bl	80035dc <printmsg>
}
 8003852:	e00e      	b.n	8003872 <print_error+0xe6>
	else if(result == BME68X_I_PARAM_CORR)
 8003854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d105      	bne.n	8003868 <print_error+0xdc>
		return_msg = "Init Result: BME68X_I_PARAM_CORR\n";
 800385c:	4b10      	ldr	r3, [pc, #64]	; (80038a0 <print_error+0x114>)
 800385e:	60fb      	str	r3, [r7, #12]
		printmsg(return_msg);
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	f7ff febb 	bl	80035dc <printmsg>
}
 8003866:	e004      	b.n	8003872 <print_error+0xe6>
		return_msg = "Init Result: Not identified\n";
 8003868:	4b0e      	ldr	r3, [pc, #56]	; (80038a4 <print_error+0x118>)
 800386a:	60fb      	str	r3, [r7, #12]
		printmsg(return_msg);
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f7ff feb5 	bl	80035dc <printmsg>
}
 8003872:	bf00      	nop
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	0800d06c 	.word	0x0800d06c
 8003880:	0800d084 	.word	0x0800d084
 8003884:	0800d0a4 	.word	0x0800d0a4
 8003888:	0800d0c4 	.word	0x0800d0c4
 800388c:	0800d0ec 	.word	0x0800d0ec
 8003890:	0800d114 	.word	0x0800d114
 8003894:	0800d138 	.word	0x0800d138
 8003898:	0800d160 	.word	0x0800d160
 800389c:	0800d184 	.word	0x0800d184
 80038a0:	0800d1b0 	.word	0x0800d1b0
 80038a4:	0800d1d4 	.word	0x0800d1d4

080038a8 <sensor_handler>:

static void sensor_handler(void* parameters)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b08e      	sub	sp, #56	; 0x38
 80038ac:	af02      	add	r7, sp, #8
 80038ae:	6078      	str	r0, [r7, #4]
	struct bme68x_data data;
	BaseType_t status;
	printmsg(sensor_task);
 80038b0:	4b3e      	ldr	r3, [pc, #248]	; (80039ac <sensor_handler+0x104>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7ff fe91 	bl	80035dc <printmsg>
  //char msg[100];
  //int len;
  int8_t result;
  uint32_t del_period;
  uint8_t num_fail_2_reset = 0;
 80038ba:	2300      	movs	r3, #0
 80038bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	while(1)
	{
		result = bme68x_set_op_mode(BME68X_FORCED_MODE, &bme);
 80038c0:	493b      	ldr	r1, [pc, #236]	; (80039b0 <sensor_handler+0x108>)
 80038c2:	2001      	movs	r0, #1
 80038c4:	f7fd fd3c 	bl	8001340 <bme68x_set_op_mode>
 80038c8:	4603      	mov	r3, r0
 80038ca:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		del_period = bme68x_get_meas_dur(BME68X_FORCED_MODE, &sensor_conf, &bme) + (htr_conf.heatr_dur * 1000);
 80038ce:	4a38      	ldr	r2, [pc, #224]	; (80039b0 <sensor_handler+0x108>)
 80038d0:	4938      	ldr	r1, [pc, #224]	; (80039b4 <sensor_handler+0x10c>)
 80038d2:	2001      	movs	r0, #1
 80038d4:	f7fd fdb6 	bl	8001444 <bme68x_get_meas_dur>
 80038d8:	4603      	mov	r3, r0
 80038da:	4a37      	ldr	r2, [pc, #220]	; (80039b8 <sensor_handler+0x110>)
 80038dc:	8892      	ldrh	r2, [r2, #4]
 80038de:	4611      	mov	r1, r2
 80038e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80038e4:	fb01 f202 	mul.w	r2, r1, r2
 80038e8:	4413      	add	r3, r2
 80038ea:	62bb      	str	r3, [r7, #40]	; 0x28
		bme.delay_us(del_period, bme.intf_ptr);
 80038ec:	4b30      	ldr	r3, [pc, #192]	; (80039b0 <sensor_handler+0x108>)
 80038ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038f0:	4a2f      	ldr	r2, [pc, #188]	; (80039b0 <sensor_handler+0x108>)
 80038f2:	6852      	ldr	r2, [r2, #4]
 80038f4:	4611      	mov	r1, r2
 80038f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038f8:	4798      	blx	r3
		// get data
		result = bme68x_get_data(BME68X_FORCED_MODE, &data, &n_fields, &bme);
 80038fa:	f107 0108 	add.w	r1, r7, #8
 80038fe:	4b2c      	ldr	r3, [pc, #176]	; (80039b0 <sensor_handler+0x108>)
 8003900:	4a2e      	ldr	r2, [pc, #184]	; (80039bc <sensor_handler+0x114>)
 8003902:	2001      	movs	r0, #1
 8003904:	f7fd fe12 	bl	800152c <bme68x_get_data>
 8003908:	4603      	mov	r3, r0
 800390a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		print_error(result);
 800390e:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8003912:	4618      	mov	r0, r3
 8003914:	f7ff ff3a 	bl	800378c <print_error>
		if(result == 0)
 8003918:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 800391c:	2b00      	cmp	r3, #0
 800391e:	d105      	bne.n	800392c <sensor_handler+0x84>
		{
			// print out data
			printmsg(rd_dt_suc);
 8003920:	4b27      	ldr	r3, [pc, #156]	; (80039c0 <sensor_handler+0x118>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4618      	mov	r0, r3
 8003926:	f7ff fe59 	bl	80035dc <printmsg>
 800392a:	e019      	b.n	8003960 <sensor_handler+0xb8>
			//HAL_UART_Transmit(&huart2, (uint8_t *)msg, len, HAL_MAX_DELAY);
		}
		else
		{
			// print out error
			num_fail_2_reset++;
 800392c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003930:	3301      	adds	r3, #1
 8003932:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			printmsg(rd_dt_fail);
 8003936:	4b23      	ldr	r3, [pc, #140]	; (80039c4 <sensor_handler+0x11c>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4618      	mov	r0, r3
 800393c:	f7ff fe4e 	bl	80035dc <printmsg>
			//len = snprintf(msg, 50, "result of data getting: %d\n", result);
			//HAL_UART_Transmit(&huart2, (uint8_t *)msg, len, HAL_MAX_DELAY);
			if(num_fail_2_reset >= max_number_of_data_fail)
 8003940:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003944:	2b09      	cmp	r3, #9
 8003946:	d905      	bls.n	8003954 <sensor_handler+0xac>
			{
				num_fail_2_reset = 0;
 8003948:	2300      	movs	r3, #0
 800394a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				bme68x_soft_reset(&bme);
 800394e:	4818      	ldr	r0, [pc, #96]	; (80039b0 <sensor_handler+0x108>)
 8003950:	f7fd fbae 	bl	80010b0 <bme68x_soft_reset>
			}
			// put place holder into data
			data.temperature = 99.99;
 8003954:	4b1c      	ldr	r3, [pc, #112]	; (80039c8 <sensor_handler+0x120>)
 8003956:	613b      	str	r3, [r7, #16]
			data.pressure = 99.99;
 8003958:	4b1b      	ldr	r3, [pc, #108]	; (80039c8 <sensor_handler+0x120>)
 800395a:	617b      	str	r3, [r7, #20]
			data.humidity = 99.99;
 800395c:	4b1a      	ldr	r3, [pc, #104]	; (80039c8 <sensor_handler+0x120>)
 800395e:	61bb      	str	r3, [r7, #24]
		}
		xQueueSend(measurement_data_queue, &data, portMAX_DELAY);
 8003960:	4b1a      	ldr	r3, [pc, #104]	; (80039cc <sensor_handler+0x124>)
 8003962:	6818      	ldr	r0, [r3, #0]
 8003964:	f107 0108 	add.w	r1, r7, #8
 8003968:	2300      	movs	r3, #0
 800396a:	f04f 32ff 	mov.w	r2, #4294967295
 800396e:	f004 f80d 	bl	800798c <xQueueGenericSend>
		status = xTaskNotify(processing_handle, 0, eNoAction);
 8003972:	4b17      	ldr	r3, [pc, #92]	; (80039d0 <sensor_handler+0x128>)
 8003974:	6818      	ldr	r0, [r3, #0]
 8003976:	2300      	movs	r3, #0
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	2300      	movs	r3, #0
 800397c:	2200      	movs	r2, #0
 800397e:	2100      	movs	r1, #0
 8003980:	f005 fa64 	bl	8008e4c <xTaskGenericNotify>
 8003984:	6278      	str	r0, [r7, #36]	; 0x24
		configASSERT(status == pdPASS);
 8003986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003988:	2b01      	cmp	r3, #1
 800398a:	d00a      	beq.n	80039a2 <sensor_handler+0xfa>
        __asm volatile
 800398c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003990:	f383 8811 	msr	BASEPRI, r3
 8003994:	f3bf 8f6f 	isb	sy
 8003998:	f3bf 8f4f 	dsb	sy
 800399c:	623b      	str	r3, [r7, #32]
    }
 800399e:	bf00      	nop
 80039a0:	e7fe      	b.n	80039a0 <sensor_handler+0xf8>
		HAL_Delay(500);
 80039a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80039a6:	f000 fbb9 	bl	800411c <HAL_Delay>
		result = bme68x_set_op_mode(BME68X_FORCED_MODE, &bme);
 80039aa:	e789      	b.n	80038c0 <sensor_handler+0x18>
 80039ac:	20000024 	.word	0x20000024
 80039b0:	200002f4 	.word	0x200002f4
 80039b4:	200002cc 	.word	0x200002cc
 80039b8:	200002d4 	.word	0x200002d4
 80039bc:	200002c8 	.word	0x200002c8
 80039c0:	2000001c 	.word	0x2000001c
 80039c4:	20000018 	.word	0x20000018
 80039c8:	42c7fae1 	.word	0x42c7fae1
 80039cc:	20000344 	.word	0x20000344
 80039d0:	200002ec 	.word	0x200002ec
 80039d4:	00000000 	.word	0x00000000

080039d8 <processing_handler>:
	}
}

static void processing_handler(void* parameters)
{
 80039d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80039dc:	b0aa      	sub	sp, #168	; 0xa8
 80039de:	af06      	add	r7, sp, #24
 80039e0:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	printmsg(processing_task);
 80039e2:	4b45      	ldr	r3, [pc, #276]	; (8003af8 <processing_handler+0x120>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7ff fdf8 	bl	80035dc <printmsg>
	char msg[100];
	struct bme68x_data received_data;
	while(1)
	{
		// wait for data to be insert into the measurement queue
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80039ec:	f04f 33ff 	mov.w	r3, #4294967295
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	2300      	movs	r3, #0
 80039f4:	2200      	movs	r2, #0
 80039f6:	2100      	movs	r1, #0
 80039f8:	2000      	movs	r0, #0
 80039fa:	f005 f9a7 	bl	8008d4c <xTaskGenericNotifyWait>
		xQueueReceive(measurement_data_queue, &received_data, 0);
 80039fe:	4b3f      	ldr	r3, [pc, #252]	; (8003afc <processing_handler+0x124>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f107 010c 	add.w	r1, r7, #12
 8003a06:	2200      	movs	r2, #0
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f004 f967 	bl	8007cdc <xQueueReceive>
		if((received_data.temperature == 99.99) && (received_data.pressure == 99.99) && (received_data.humidity == 99.99))
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7fc fd99 	bl	8000548 <__aeabi_f2d>
 8003a16:	a336      	add	r3, pc, #216	; (adr r3, 8003af0 <processing_handler+0x118>)
 8003a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1c:	f7fd f854 	bl	8000ac8 <__aeabi_dcmpeq>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d020      	beq.n	8003a68 <processing_handler+0x90>
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7fc fd8d 	bl	8000548 <__aeabi_f2d>
 8003a2e:	a330      	add	r3, pc, #192	; (adr r3, 8003af0 <processing_handler+0x118>)
 8003a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a34:	f7fd f848 	bl	8000ac8 <__aeabi_dcmpeq>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d014      	beq.n	8003a68 <processing_handler+0x90>
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fc fd81 	bl	8000548 <__aeabi_f2d>
 8003a46:	a32a      	add	r3, pc, #168	; (adr r3, 8003af0 <processing_handler+0x118>)
 8003a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4c:	f7fd f83c 	bl	8000ac8 <__aeabi_dcmpeq>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d008      	beq.n	8003a68 <processing_handler+0x90>
		{
			xQueueSend(display_information_queue, &process_fail, portMAX_DELAY);
 8003a56:	4b2a      	ldr	r3, [pc, #168]	; (8003b00 <processing_handler+0x128>)
 8003a58:	6818      	ldr	r0, [r3, #0]
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a60:	4928      	ldr	r1, [pc, #160]	; (8003b04 <processing_handler+0x12c>)
 8003a62:	f003 ff93 	bl	800798c <xQueueGenericSend>
 8003a66:	e026      	b.n	8003ab6 <processing_handler+0xde>
		}
		else
		{
			snprintf(msg, 100, "Temperature: %.2f, Pressure: %.2f, Humidity: %.2f\n", received_data.temperature, received_data.pressure, received_data.humidity);
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fc fd6c 	bl	8000548 <__aeabi_f2d>
 8003a70:	4604      	mov	r4, r0
 8003a72:	460d      	mov	r5, r1
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7fc fd66 	bl	8000548 <__aeabi_f2d>
 8003a7c:	4680      	mov	r8, r0
 8003a7e:	4689      	mov	r9, r1
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fc fd60 	bl	8000548 <__aeabi_f2d>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003a90:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003a94:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003a98:	e9cd 4500 	strd	r4, r5, [sp]
 8003a9c:	4a1a      	ldr	r2, [pc, #104]	; (8003b08 <processing_handler+0x130>)
 8003a9e:	2164      	movs	r1, #100	; 0x64
 8003aa0:	f006 ff24 	bl	800a8ec <sniprintf>
			xQueueSend(display_information_queue, (void*)&msg, portMAX_DELAY);
 8003aa4:	4b16      	ldr	r3, [pc, #88]	; (8003b00 <processing_handler+0x128>)
 8003aa6:	6818      	ldr	r0, [r3, #0]
 8003aa8:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8003aac:	2300      	movs	r3, #0
 8003aae:	f04f 32ff 	mov.w	r2, #4294967295
 8003ab2:	f003 ff6b 	bl	800798c <xQueueGenericSend>
		}
		status = xTaskNotify(displaying_handle, 0, eNoAction);
 8003ab6:	4b15      	ldr	r3, [pc, #84]	; (8003b0c <processing_handler+0x134>)
 8003ab8:	6818      	ldr	r0, [r3, #0]
 8003aba:	2300      	movs	r3, #0
 8003abc:	9300      	str	r3, [sp, #0]
 8003abe:	2300      	movs	r3, #0
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	f005 f9c2 	bl	8008e4c <xTaskGenericNotify>
 8003ac8:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		configASSERT(status == pdPASS);
 8003acc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d08b      	beq.n	80039ec <processing_handler+0x14>
        __asm volatile
 8003ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad8:	f383 8811 	msr	BASEPRI, r3
 8003adc:	f3bf 8f6f 	isb	sy
 8003ae0:	f3bf 8f4f 	dsb	sy
 8003ae4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    }
 8003ae8:	bf00      	nop
 8003aea:	e7fe      	b.n	8003aea <processing_handler+0x112>
 8003aec:	f3af 8000 	nop.w
 8003af0:	28f5c28f 	.word	0x28f5c28f
 8003af4:	4058ff5c 	.word	0x4058ff5c
 8003af8:	20000028 	.word	0x20000028
 8003afc:	20000344 	.word	0x20000344
 8003b00:	20000348 	.word	0x20000348
 8003b04:	20000020 	.word	0x20000020
 8003b08:	0800d1f4 	.word	0x0800d1f4
 8003b0c:	200002f0 	.word	0x200002f0

08003b10 <displaying_handler>:
	}
}

static void displaying_handler(void* parameters)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b0a0      	sub	sp, #128	; 0x80
 8003b14:	af02      	add	r7, sp, #8
 8003b16:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	printmsg(displaying_task);
 8003b18:	4b1c      	ldr	r3, [pc, #112]	; (8003b8c <displaying_handler+0x7c>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7ff fd5d 	bl	80035dc <printmsg>
	char msg[100];
	while(1)
	{
		status = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8003b22:	f04f 33ff 	mov.w	r3, #4294967295
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	2300      	movs	r3, #0
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	2000      	movs	r0, #0
 8003b30:	f005 f90c 	bl	8008d4c <xTaskGenericNotifyWait>
 8003b34:	6778      	str	r0, [r7, #116]	; 0x74
		configASSERT(status == pdPASS);
 8003b36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d00a      	beq.n	8003b52 <displaying_handler+0x42>
        __asm volatile
 8003b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b40:	f383 8811 	msr	BASEPRI, r3
 8003b44:	f3bf 8f6f 	isb	sy
 8003b48:	f3bf 8f4f 	dsb	sy
 8003b4c:	673b      	str	r3, [r7, #112]	; 0x70
    }
 8003b4e:	bf00      	nop
 8003b50:	e7fe      	b.n	8003b50 <displaying_handler+0x40>
		xQueueReceive(display_information_queue, (void*)&msg, portMAX_DELAY);
 8003b52:	4b0f      	ldr	r3, [pc, #60]	; (8003b90 <displaying_handler+0x80>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f107 010c 	add.w	r1, r7, #12
 8003b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f004 f8bc 	bl	8007cdc <xQueueReceive>
		printmsg(msg);
 8003b64:	f107 030c 	add.w	r3, r7, #12
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7ff fd37 	bl	80035dc <printmsg>
		xTaskNotify(sensor_handle, 0, eNoAction);
 8003b6e:	4b09      	ldr	r3, [pc, #36]	; (8003b94 <displaying_handler+0x84>)
 8003b70:	6818      	ldr	r0, [r3, #0]
 8003b72:	2300      	movs	r3, #0
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	2300      	movs	r3, #0
 8003b78:	2200      	movs	r2, #0
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	f005 f966 	bl	8008e4c <xTaskGenericNotify>
		HAL_Delay(500);
 8003b80:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003b84:	f000 faca 	bl	800411c <HAL_Delay>
		status = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8003b88:	e7cb      	b.n	8003b22 <displaying_handler+0x12>
 8003b8a:	bf00      	nop
 8003b8c:	2000002c 	.word	0x2000002c
 8003b90:	20000348 	.word	0x20000348
 8003b94:	200002e8 	.word	0x200002e8

08003b98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a04      	ldr	r2, [pc, #16]	; (8003bb8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d101      	bne.n	8003bae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003baa:	f000 fa97 	bl	80040dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003bae:	bf00      	nop
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	40001000 	.word	0x40001000

08003bbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003bc0:	b672      	cpsid	i
}
 8003bc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003bc4:	e7fe      	b.n	8003bc4 <Error_Handler+0x8>
	...

08003bc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bce:	2300      	movs	r3, #0
 8003bd0:	607b      	str	r3, [r7, #4]
 8003bd2:	4b10      	ldr	r3, [pc, #64]	; (8003c14 <HAL_MspInit+0x4c>)
 8003bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd6:	4a0f      	ldr	r2, [pc, #60]	; (8003c14 <HAL_MspInit+0x4c>)
 8003bd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bdc:	6453      	str	r3, [r2, #68]	; 0x44
 8003bde:	4b0d      	ldr	r3, [pc, #52]	; (8003c14 <HAL_MspInit+0x4c>)
 8003be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003be6:	607b      	str	r3, [r7, #4]
 8003be8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003bea:	2300      	movs	r3, #0
 8003bec:	603b      	str	r3, [r7, #0]
 8003bee:	4b09      	ldr	r3, [pc, #36]	; (8003c14 <HAL_MspInit+0x4c>)
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	4a08      	ldr	r2, [pc, #32]	; (8003c14 <HAL_MspInit+0x4c>)
 8003bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8003bfa:	4b06      	ldr	r3, [pc, #24]	; (8003c14 <HAL_MspInit+0x4c>)
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c02:	603b      	str	r3, [r7, #0]
 8003c04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c06:	bf00      	nop
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	40023800 	.word	0x40023800

08003c18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b08a      	sub	sp, #40	; 0x28
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c20:	f107 0314 	add.w	r3, r7, #20
 8003c24:	2200      	movs	r2, #0
 8003c26:	601a      	str	r2, [r3, #0]
 8003c28:	605a      	str	r2, [r3, #4]
 8003c2a:	609a      	str	r2, [r3, #8]
 8003c2c:	60da      	str	r2, [r3, #12]
 8003c2e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a19      	ldr	r2, [pc, #100]	; (8003c9c <HAL_I2C_MspInit+0x84>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d12c      	bne.n	8003c94 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	613b      	str	r3, [r7, #16]
 8003c3e:	4b18      	ldr	r3, [pc, #96]	; (8003ca0 <HAL_I2C_MspInit+0x88>)
 8003c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c42:	4a17      	ldr	r2, [pc, #92]	; (8003ca0 <HAL_I2C_MspInit+0x88>)
 8003c44:	f043 0302 	orr.w	r3, r3, #2
 8003c48:	6313      	str	r3, [r2, #48]	; 0x30
 8003c4a:	4b15      	ldr	r3, [pc, #84]	; (8003ca0 <HAL_I2C_MspInit+0x88>)
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	613b      	str	r3, [r7, #16]
 8003c54:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8003c56:	f44f 7310 	mov.w	r3, #576	; 0x240
 8003c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c5c:	2312      	movs	r3, #18
 8003c5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c60:	2301      	movs	r3, #1
 8003c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c64:	2300      	movs	r3, #0
 8003c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003c68:	2304      	movs	r3, #4
 8003c6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c6c:	f107 0314 	add.w	r3, r7, #20
 8003c70:	4619      	mov	r1, r3
 8003c72:	480c      	ldr	r0, [pc, #48]	; (8003ca4 <HAL_I2C_MspInit+0x8c>)
 8003c74:	f000 fbea 	bl	800444c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003c78:	2300      	movs	r3, #0
 8003c7a:	60fb      	str	r3, [r7, #12]
 8003c7c:	4b08      	ldr	r3, [pc, #32]	; (8003ca0 <HAL_I2C_MspInit+0x88>)
 8003c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c80:	4a07      	ldr	r2, [pc, #28]	; (8003ca0 <HAL_I2C_MspInit+0x88>)
 8003c82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c86:	6413      	str	r3, [r2, #64]	; 0x40
 8003c88:	4b05      	ldr	r3, [pc, #20]	; (8003ca0 <HAL_I2C_MspInit+0x88>)
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c90:	60fb      	str	r3, [r7, #12]
 8003c92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003c94:	bf00      	nop
 8003c96:	3728      	adds	r7, #40	; 0x28
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	40005400 	.word	0x40005400
 8003ca0:	40023800 	.word	0x40023800
 8003ca4:	40020400 	.word	0x40020400

08003ca8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b08a      	sub	sp, #40	; 0x28
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cb0:	f107 0314 	add.w	r3, r7, #20
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	605a      	str	r2, [r3, #4]
 8003cba:	609a      	str	r2, [r3, #8]
 8003cbc:	60da      	str	r2, [r3, #12]
 8003cbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a1d      	ldr	r2, [pc, #116]	; (8003d3c <HAL_UART_MspInit+0x94>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d133      	bne.n	8003d32 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003cca:	2300      	movs	r3, #0
 8003ccc:	613b      	str	r3, [r7, #16]
 8003cce:	4b1c      	ldr	r3, [pc, #112]	; (8003d40 <HAL_UART_MspInit+0x98>)
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd2:	4a1b      	ldr	r2, [pc, #108]	; (8003d40 <HAL_UART_MspInit+0x98>)
 8003cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8003cda:	4b19      	ldr	r3, [pc, #100]	; (8003d40 <HAL_UART_MspInit+0x98>)
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce2:	613b      	str	r3, [r7, #16]
 8003ce4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	60fb      	str	r3, [r7, #12]
 8003cea:	4b15      	ldr	r3, [pc, #84]	; (8003d40 <HAL_UART_MspInit+0x98>)
 8003cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cee:	4a14      	ldr	r2, [pc, #80]	; (8003d40 <HAL_UART_MspInit+0x98>)
 8003cf0:	f043 0301 	orr.w	r3, r3, #1
 8003cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cf6:	4b12      	ldr	r3, [pc, #72]	; (8003d40 <HAL_UART_MspInit+0x98>)
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	60fb      	str	r3, [r7, #12]
 8003d00:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003d02:	230c      	movs	r3, #12
 8003d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d06:	2302      	movs	r3, #2
 8003d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003d12:	2307      	movs	r3, #7
 8003d14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d16:	f107 0314 	add.w	r3, r7, #20
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	4809      	ldr	r0, [pc, #36]	; (8003d44 <HAL_UART_MspInit+0x9c>)
 8003d1e:	f000 fb95 	bl	800444c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003d22:	2200      	movs	r2, #0
 8003d24:	2100      	movs	r1, #0
 8003d26:	2026      	movs	r0, #38	; 0x26
 8003d28:	f000 fad4 	bl	80042d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003d2c:	2026      	movs	r0, #38	; 0x26
 8003d2e:	f000 faed 	bl	800430c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003d32:	bf00      	nop
 8003d34:	3728      	adds	r7, #40	; 0x28
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	40004400 	.word	0x40004400
 8003d40:	40023800 	.word	0x40023800
 8003d44:	40020000 	.word	0x40020000

08003d48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b08e      	sub	sp, #56	; 0x38
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003d50:	2300      	movs	r3, #0
 8003d52:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003d54:	2300      	movs	r3, #0
 8003d56:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003d58:	2300      	movs	r3, #0
 8003d5a:	60fb      	str	r3, [r7, #12]
 8003d5c:	4b33      	ldr	r3, [pc, #204]	; (8003e2c <HAL_InitTick+0xe4>)
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d60:	4a32      	ldr	r2, [pc, #200]	; (8003e2c <HAL_InitTick+0xe4>)
 8003d62:	f043 0310 	orr.w	r3, r3, #16
 8003d66:	6413      	str	r3, [r2, #64]	; 0x40
 8003d68:	4b30      	ldr	r3, [pc, #192]	; (8003e2c <HAL_InitTick+0xe4>)
 8003d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6c:	f003 0310 	and.w	r3, r3, #16
 8003d70:	60fb      	str	r3, [r7, #12]
 8003d72:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003d74:	f107 0210 	add.w	r2, r7, #16
 8003d78:	f107 0314 	add.w	r3, r7, #20
 8003d7c:	4611      	mov	r1, r2
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f002 f972 	bl	8006068 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003d84:	6a3b      	ldr	r3, [r7, #32]
 8003d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d103      	bne.n	8003d96 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003d8e:	f002 f943 	bl	8006018 <HAL_RCC_GetPCLK1Freq>
 8003d92:	6378      	str	r0, [r7, #52]	; 0x34
 8003d94:	e004      	b.n	8003da0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003d96:	f002 f93f 	bl	8006018 <HAL_RCC_GetPCLK1Freq>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003da2:	4a23      	ldr	r2, [pc, #140]	; (8003e30 <HAL_InitTick+0xe8>)
 8003da4:	fba2 2303 	umull	r2, r3, r2, r3
 8003da8:	0c9b      	lsrs	r3, r3, #18
 8003daa:	3b01      	subs	r3, #1
 8003dac:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003dae:	4b21      	ldr	r3, [pc, #132]	; (8003e34 <HAL_InitTick+0xec>)
 8003db0:	4a21      	ldr	r2, [pc, #132]	; (8003e38 <HAL_InitTick+0xf0>)
 8003db2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003db4:	4b1f      	ldr	r3, [pc, #124]	; (8003e34 <HAL_InitTick+0xec>)
 8003db6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003dba:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003dbc:	4a1d      	ldr	r2, [pc, #116]	; (8003e34 <HAL_InitTick+0xec>)
 8003dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003dc2:	4b1c      	ldr	r3, [pc, #112]	; (8003e34 <HAL_InitTick+0xec>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dc8:	4b1a      	ldr	r3, [pc, #104]	; (8003e34 <HAL_InitTick+0xec>)
 8003dca:	2200      	movs	r2, #0
 8003dcc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003dce:	4b19      	ldr	r3, [pc, #100]	; (8003e34 <HAL_InitTick+0xec>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003dd4:	4817      	ldr	r0, [pc, #92]	; (8003e34 <HAL_InitTick+0xec>)
 8003dd6:	f002 f979 	bl	80060cc <HAL_TIM_Base_Init>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003de0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d11b      	bne.n	8003e20 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003de8:	4812      	ldr	r0, [pc, #72]	; (8003e34 <HAL_InitTick+0xec>)
 8003dea:	f002 f9c9 	bl	8006180 <HAL_TIM_Base_Start_IT>
 8003dee:	4603      	mov	r3, r0
 8003df0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003df4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d111      	bne.n	8003e20 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003dfc:	2036      	movs	r0, #54	; 0x36
 8003dfe:	f000 fa85 	bl	800430c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2b0f      	cmp	r3, #15
 8003e06:	d808      	bhi.n	8003e1a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003e08:	2200      	movs	r2, #0
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	2036      	movs	r0, #54	; 0x36
 8003e0e:	f000 fa61 	bl	80042d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003e12:	4a0a      	ldr	r2, [pc, #40]	; (8003e3c <HAL_InitTick+0xf4>)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6013      	str	r3, [r2, #0]
 8003e18:	e002      	b.n	8003e20 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003e20:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3738      	adds	r7, #56	; 0x38
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	40023800 	.word	0x40023800
 8003e30:	431bde83 	.word	0x431bde83
 8003e34:	2000034c 	.word	0x2000034c
 8003e38:	40001000 	.word	0x40001000
 8003e3c:	20000034 	.word	0x20000034

08003e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e40:	b480      	push	{r7}
 8003e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e44:	e7fe      	b.n	8003e44 <NMI_Handler+0x4>

08003e46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e46:	b480      	push	{r7}
 8003e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e4a:	e7fe      	b.n	8003e4a <HardFault_Handler+0x4>

08003e4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e50:	e7fe      	b.n	8003e50 <MemManage_Handler+0x4>

08003e52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e52:	b480      	push	{r7}
 8003e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e56:	e7fe      	b.n	8003e56 <BusFault_Handler+0x4>

08003e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e5c:	e7fe      	b.n	8003e5c <UsageFault_Handler+0x4>

08003e5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e62:	bf00      	nop
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003e70:	4802      	ldr	r0, [pc, #8]	; (8003e7c <USART2_IRQHandler+0x10>)
 8003e72:	f002 fcb9 	bl	80067e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003e76:	bf00      	nop
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	20000284 	.word	0x20000284

08003e80 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003e84:	4802      	ldr	r0, [pc, #8]	; (8003e90 <TIM6_DAC_IRQHandler+0x10>)
 8003e86:	f002 f9eb 	bl	8006260 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003e8a:	bf00      	nop
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	2000034c 	.word	0x2000034c

08003e94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003e94:	b480      	push	{r7}
 8003e96:	af00      	add	r7, sp, #0
	return 1;
 8003e98:	2301      	movs	r3, #1
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <_kill>:

int _kill(int pid, int sig)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003eae:	f006 f873 	bl	8009f98 <__errno>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2216      	movs	r2, #22
 8003eb6:	601a      	str	r2, [r3, #0]
	return -1;
 8003eb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3708      	adds	r7, #8
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <_exit>:

void _exit (int status)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f7ff ffe7 	bl	8003ea4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003ed6:	e7fe      	b.n	8003ed6 <_exit+0x12>

08003ed8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b086      	sub	sp, #24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	617b      	str	r3, [r7, #20]
 8003ee8:	e00a      	b.n	8003f00 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003eea:	f3af 8000 	nop.w
 8003eee:	4601      	mov	r1, r0
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	1c5a      	adds	r2, r3, #1
 8003ef4:	60ba      	str	r2, [r7, #8]
 8003ef6:	b2ca      	uxtb	r2, r1
 8003ef8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	3301      	adds	r3, #1
 8003efe:	617b      	str	r3, [r7, #20]
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	dbf0      	blt.n	8003eea <_read+0x12>
	}

return len;
 8003f08:	687b      	ldr	r3, [r7, #4]
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3718      	adds	r7, #24
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b086      	sub	sp, #24
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	60f8      	str	r0, [r7, #12]
 8003f1a:	60b9      	str	r1, [r7, #8]
 8003f1c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f1e:	2300      	movs	r3, #0
 8003f20:	617b      	str	r3, [r7, #20]
 8003f22:	e009      	b.n	8003f38 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	1c5a      	adds	r2, r3, #1
 8003f28:	60ba      	str	r2, [r7, #8]
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	3301      	adds	r3, #1
 8003f36:	617b      	str	r3, [r7, #20]
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	dbf1      	blt.n	8003f24 <_write+0x12>
	}
	return len;
 8003f40:	687b      	ldr	r3, [r7, #4]
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3718      	adds	r7, #24
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <_close>:

int _close(int file)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b083      	sub	sp, #12
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
	return -1;
 8003f52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr

08003f62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f62:	b480      	push	{r7}
 8003f64:	b083      	sub	sp, #12
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
 8003f6a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f72:	605a      	str	r2, [r3, #4]
	return 0;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr

08003f82 <_isatty>:

int _isatty(int file)
{
 8003f82:	b480      	push	{r7}
 8003f84:	b083      	sub	sp, #12
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
	return 1;
 8003f8a:	2301      	movs	r3, #1
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
	return 0;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3714      	adds	r7, #20
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
	...

08003fb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003fbc:	4a14      	ldr	r2, [pc, #80]	; (8004010 <_sbrk+0x5c>)
 8003fbe:	4b15      	ldr	r3, [pc, #84]	; (8004014 <_sbrk+0x60>)
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003fc8:	4b13      	ldr	r3, [pc, #76]	; (8004018 <_sbrk+0x64>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d102      	bne.n	8003fd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003fd0:	4b11      	ldr	r3, [pc, #68]	; (8004018 <_sbrk+0x64>)
 8003fd2:	4a12      	ldr	r2, [pc, #72]	; (800401c <_sbrk+0x68>)
 8003fd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003fd6:	4b10      	ldr	r3, [pc, #64]	; (8004018 <_sbrk+0x64>)
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4413      	add	r3, r2
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d207      	bcs.n	8003ff4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003fe4:	f005 ffd8 	bl	8009f98 <__errno>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	220c      	movs	r2, #12
 8003fec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003fee:	f04f 33ff 	mov.w	r3, #4294967295
 8003ff2:	e009      	b.n	8004008 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ff4:	4b08      	ldr	r3, [pc, #32]	; (8004018 <_sbrk+0x64>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ffa:	4b07      	ldr	r3, [pc, #28]	; (8004018 <_sbrk+0x64>)
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4413      	add	r3, r2
 8004002:	4a05      	ldr	r2, [pc, #20]	; (8004018 <_sbrk+0x64>)
 8004004:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004006:	68fb      	ldr	r3, [r7, #12]
}
 8004008:	4618      	mov	r0, r3
 800400a:	3718      	adds	r7, #24
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	20020000 	.word	0x20020000
 8004014:	00000400 	.word	0x00000400
 8004018:	20000394 	.word	0x20000394
 800401c:	20013158 	.word	0x20013158

08004020 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004020:	b480      	push	{r7}
 8004022:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004024:	4b06      	ldr	r3, [pc, #24]	; (8004040 <SystemInit+0x20>)
 8004026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402a:	4a05      	ldr	r2, [pc, #20]	; (8004040 <SystemInit+0x20>)
 800402c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004030:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004034:	bf00      	nop
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	e000ed00 	.word	0xe000ed00

08004044 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004044:	f8df d034 	ldr.w	sp, [pc, #52]	; 800407c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004048:	480d      	ldr	r0, [pc, #52]	; (8004080 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800404a:	490e      	ldr	r1, [pc, #56]	; (8004084 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800404c:	4a0e      	ldr	r2, [pc, #56]	; (8004088 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800404e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004050:	e002      	b.n	8004058 <LoopCopyDataInit>

08004052 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004056:	3304      	adds	r3, #4

08004058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800405a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800405c:	d3f9      	bcc.n	8004052 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800405e:	4a0b      	ldr	r2, [pc, #44]	; (800408c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004060:	4c0b      	ldr	r4, [pc, #44]	; (8004090 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004062:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004064:	e001      	b.n	800406a <LoopFillZerobss>

08004066 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004066:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004068:	3204      	adds	r2, #4

0800406a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800406a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800406c:	d3fb      	bcc.n	8004066 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800406e:	f7ff ffd7 	bl	8004020 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004072:	f005 ff97 	bl	8009fa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004076:	f7fe ffa9 	bl	8002fcc <main>
  bx  lr    
 800407a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800407c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004080:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004084:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8004088:	0800d644 	.word	0x0800d644
  ldr r2, =_sbss
 800408c:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 8004090:	20013154 	.word	0x20013154

08004094 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004094:	e7fe      	b.n	8004094 <ADC_IRQHandler>
	...

08004098 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800409c:	4b0e      	ldr	r3, [pc, #56]	; (80040d8 <HAL_Init+0x40>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a0d      	ldr	r2, [pc, #52]	; (80040d8 <HAL_Init+0x40>)
 80040a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80040a8:	4b0b      	ldr	r3, [pc, #44]	; (80040d8 <HAL_Init+0x40>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a0a      	ldr	r2, [pc, #40]	; (80040d8 <HAL_Init+0x40>)
 80040ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040b4:	4b08      	ldr	r3, [pc, #32]	; (80040d8 <HAL_Init+0x40>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a07      	ldr	r2, [pc, #28]	; (80040d8 <HAL_Init+0x40>)
 80040ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040c0:	2003      	movs	r0, #3
 80040c2:	f000 f8fc 	bl	80042be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80040c6:	2000      	movs	r0, #0
 80040c8:	f7ff fe3e 	bl	8003d48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80040cc:	f7ff fd7c 	bl	8003bc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	40023c00 	.word	0x40023c00

080040dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040dc:	b480      	push	{r7}
 80040de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040e0:	4b06      	ldr	r3, [pc, #24]	; (80040fc <HAL_IncTick+0x20>)
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	461a      	mov	r2, r3
 80040e6:	4b06      	ldr	r3, [pc, #24]	; (8004100 <HAL_IncTick+0x24>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4413      	add	r3, r2
 80040ec:	4a04      	ldr	r2, [pc, #16]	; (8004100 <HAL_IncTick+0x24>)
 80040ee:	6013      	str	r3, [r2, #0]
}
 80040f0:	bf00      	nop
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	20000038 	.word	0x20000038
 8004100:	20000398 	.word	0x20000398

08004104 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004104:	b480      	push	{r7}
 8004106:	af00      	add	r7, sp, #0
  return uwTick;
 8004108:	4b03      	ldr	r3, [pc, #12]	; (8004118 <HAL_GetTick+0x14>)
 800410a:	681b      	ldr	r3, [r3, #0]
}
 800410c:	4618      	mov	r0, r3
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	20000398 	.word	0x20000398

0800411c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004124:	f7ff ffee 	bl	8004104 <HAL_GetTick>
 8004128:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004134:	d005      	beq.n	8004142 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004136:	4b0a      	ldr	r3, [pc, #40]	; (8004160 <HAL_Delay+0x44>)
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	461a      	mov	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	4413      	add	r3, r2
 8004140:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004142:	bf00      	nop
 8004144:	f7ff ffde 	bl	8004104 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	429a      	cmp	r2, r3
 8004152:	d8f7      	bhi.n	8004144 <HAL_Delay+0x28>
  {
  }
}
 8004154:	bf00      	nop
 8004156:	bf00      	nop
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	20000038 	.word	0x20000038

08004164 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f003 0307 	and.w	r3, r3, #7
 8004172:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004174:	4b0c      	ldr	r3, [pc, #48]	; (80041a8 <__NVIC_SetPriorityGrouping+0x44>)
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800417a:	68ba      	ldr	r2, [r7, #8]
 800417c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004180:	4013      	ands	r3, r2
 8004182:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800418c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004194:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004196:	4a04      	ldr	r2, [pc, #16]	; (80041a8 <__NVIC_SetPriorityGrouping+0x44>)
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	60d3      	str	r3, [r2, #12]
}
 800419c:	bf00      	nop
 800419e:	3714      	adds	r7, #20
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr
 80041a8:	e000ed00 	.word	0xe000ed00

080041ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041b0:	4b04      	ldr	r3, [pc, #16]	; (80041c4 <__NVIC_GetPriorityGrouping+0x18>)
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	0a1b      	lsrs	r3, r3, #8
 80041b6:	f003 0307 	and.w	r3, r3, #7
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr
 80041c4:	e000ed00 	.word	0xe000ed00

080041c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	4603      	mov	r3, r0
 80041d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	db0b      	blt.n	80041f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041da:	79fb      	ldrb	r3, [r7, #7]
 80041dc:	f003 021f 	and.w	r2, r3, #31
 80041e0:	4907      	ldr	r1, [pc, #28]	; (8004200 <__NVIC_EnableIRQ+0x38>)
 80041e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e6:	095b      	lsrs	r3, r3, #5
 80041e8:	2001      	movs	r0, #1
 80041ea:	fa00 f202 	lsl.w	r2, r0, r2
 80041ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80041f2:	bf00      	nop
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	e000e100 	.word	0xe000e100

08004204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	4603      	mov	r3, r0
 800420c:	6039      	str	r1, [r7, #0]
 800420e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004214:	2b00      	cmp	r3, #0
 8004216:	db0a      	blt.n	800422e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	b2da      	uxtb	r2, r3
 800421c:	490c      	ldr	r1, [pc, #48]	; (8004250 <__NVIC_SetPriority+0x4c>)
 800421e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004222:	0112      	lsls	r2, r2, #4
 8004224:	b2d2      	uxtb	r2, r2
 8004226:	440b      	add	r3, r1
 8004228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800422c:	e00a      	b.n	8004244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	b2da      	uxtb	r2, r3
 8004232:	4908      	ldr	r1, [pc, #32]	; (8004254 <__NVIC_SetPriority+0x50>)
 8004234:	79fb      	ldrb	r3, [r7, #7]
 8004236:	f003 030f 	and.w	r3, r3, #15
 800423a:	3b04      	subs	r3, #4
 800423c:	0112      	lsls	r2, r2, #4
 800423e:	b2d2      	uxtb	r2, r2
 8004240:	440b      	add	r3, r1
 8004242:	761a      	strb	r2, [r3, #24]
}
 8004244:	bf00      	nop
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr
 8004250:	e000e100 	.word	0xe000e100
 8004254:	e000ed00 	.word	0xe000ed00

08004258 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004258:	b480      	push	{r7}
 800425a:	b089      	sub	sp, #36	; 0x24
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f003 0307 	and.w	r3, r3, #7
 800426a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	f1c3 0307 	rsb	r3, r3, #7
 8004272:	2b04      	cmp	r3, #4
 8004274:	bf28      	it	cs
 8004276:	2304      	movcs	r3, #4
 8004278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	3304      	adds	r3, #4
 800427e:	2b06      	cmp	r3, #6
 8004280:	d902      	bls.n	8004288 <NVIC_EncodePriority+0x30>
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	3b03      	subs	r3, #3
 8004286:	e000      	b.n	800428a <NVIC_EncodePriority+0x32>
 8004288:	2300      	movs	r3, #0
 800428a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800428c:	f04f 32ff 	mov.w	r2, #4294967295
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	fa02 f303 	lsl.w	r3, r2, r3
 8004296:	43da      	mvns	r2, r3
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	401a      	ands	r2, r3
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042a0:	f04f 31ff 	mov.w	r1, #4294967295
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	fa01 f303 	lsl.w	r3, r1, r3
 80042aa:	43d9      	mvns	r1, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042b0:	4313      	orrs	r3, r2
         );
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3724      	adds	r7, #36	; 0x24
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b082      	sub	sp, #8
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f7ff ff4c 	bl	8004164 <__NVIC_SetPriorityGrouping>
}
 80042cc:	bf00      	nop
 80042ce:	3708      	adds	r7, #8
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	4603      	mov	r3, r0
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
 80042e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80042e2:	2300      	movs	r3, #0
 80042e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80042e6:	f7ff ff61 	bl	80041ac <__NVIC_GetPriorityGrouping>
 80042ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	68b9      	ldr	r1, [r7, #8]
 80042f0:	6978      	ldr	r0, [r7, #20]
 80042f2:	f7ff ffb1 	bl	8004258 <NVIC_EncodePriority>
 80042f6:	4602      	mov	r2, r0
 80042f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042fc:	4611      	mov	r1, r2
 80042fe:	4618      	mov	r0, r3
 8004300:	f7ff ff80 	bl	8004204 <__NVIC_SetPriority>
}
 8004304:	bf00      	nop
 8004306:	3718      	adds	r7, #24
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	4603      	mov	r3, r0
 8004314:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800431a:	4618      	mov	r0, r3
 800431c:	f7ff ff54 	bl	80041c8 <__NVIC_EnableIRQ>
}
 8004320:	bf00      	nop
 8004322:	3708      	adds	r7, #8
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004334:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004336:	f7ff fee5 	bl	8004104 <HAL_GetTick>
 800433a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b02      	cmp	r3, #2
 8004346:	d008      	beq.n	800435a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2280      	movs	r2, #128	; 0x80
 800434c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e052      	b.n	8004400 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f022 0216 	bic.w	r2, r2, #22
 8004368:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	695a      	ldr	r2, [r3, #20]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004378:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	2b00      	cmp	r3, #0
 8004380:	d103      	bne.n	800438a <HAL_DMA_Abort+0x62>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004386:	2b00      	cmp	r3, #0
 8004388:	d007      	beq.n	800439a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 0208 	bic.w	r2, r2, #8
 8004398:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f022 0201 	bic.w	r2, r2, #1
 80043a8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043aa:	e013      	b.n	80043d4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80043ac:	f7ff feaa 	bl	8004104 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b05      	cmp	r3, #5
 80043b8:	d90c      	bls.n	80043d4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2220      	movs	r2, #32
 80043be:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2203      	movs	r2, #3
 80043c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e015      	b.n	8004400 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1e4      	bne.n	80043ac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043e6:	223f      	movs	r2, #63	; 0x3f
 80043e8:	409a      	lsls	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d004      	beq.n	8004426 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2280      	movs	r2, #128	; 0x80
 8004420:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e00c      	b.n	8004440 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2205      	movs	r2, #5
 800442a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 0201 	bic.w	r2, r2, #1
 800443c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800444c:	b480      	push	{r7}
 800444e:	b089      	sub	sp, #36	; 0x24
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004456:	2300      	movs	r3, #0
 8004458:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800445a:	2300      	movs	r3, #0
 800445c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800445e:	2300      	movs	r3, #0
 8004460:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004462:	2300      	movs	r3, #0
 8004464:	61fb      	str	r3, [r7, #28]
 8004466:	e16b      	b.n	8004740 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004468:	2201      	movs	r2, #1
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	fa02 f303 	lsl.w	r3, r2, r3
 8004470:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	4013      	ands	r3, r2
 800447a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800447c:	693a      	ldr	r2, [r7, #16]
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	429a      	cmp	r2, r3
 8004482:	f040 815a 	bne.w	800473a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f003 0303 	and.w	r3, r3, #3
 800448e:	2b01      	cmp	r3, #1
 8004490:	d005      	beq.n	800449e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800449a:	2b02      	cmp	r3, #2
 800449c:	d130      	bne.n	8004500 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	005b      	lsls	r3, r3, #1
 80044a8:	2203      	movs	r2, #3
 80044aa:	fa02 f303 	lsl.w	r3, r2, r3
 80044ae:	43db      	mvns	r3, r3
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	4013      	ands	r3, r2
 80044b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	68da      	ldr	r2, [r3, #12]
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	fa02 f303 	lsl.w	r3, r2, r3
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	69ba      	ldr	r2, [r7, #24]
 80044cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044d4:	2201      	movs	r2, #1
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	fa02 f303 	lsl.w	r3, r2, r3
 80044dc:	43db      	mvns	r3, r3
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	4013      	ands	r3, r2
 80044e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	091b      	lsrs	r3, r3, #4
 80044ea:	f003 0201 	and.w	r2, r3, #1
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	fa02 f303 	lsl.w	r3, r2, r3
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	69ba      	ldr	r2, [r7, #24]
 80044fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f003 0303 	and.w	r3, r3, #3
 8004508:	2b03      	cmp	r3, #3
 800450a:	d017      	beq.n	800453c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	005b      	lsls	r3, r3, #1
 8004516:	2203      	movs	r2, #3
 8004518:	fa02 f303 	lsl.w	r3, r2, r3
 800451c:	43db      	mvns	r3, r3
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	4013      	ands	r3, r2
 8004522:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	689a      	ldr	r2, [r3, #8]
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	005b      	lsls	r3, r3, #1
 800452c:	fa02 f303 	lsl.w	r3, r2, r3
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	4313      	orrs	r3, r2
 8004534:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	69ba      	ldr	r2, [r7, #24]
 800453a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f003 0303 	and.w	r3, r3, #3
 8004544:	2b02      	cmp	r3, #2
 8004546:	d123      	bne.n	8004590 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	08da      	lsrs	r2, r3, #3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	3208      	adds	r2, #8
 8004550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004554:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	f003 0307 	and.w	r3, r3, #7
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	220f      	movs	r2, #15
 8004560:	fa02 f303 	lsl.w	r3, r2, r3
 8004564:	43db      	mvns	r3, r3
 8004566:	69ba      	ldr	r2, [r7, #24]
 8004568:	4013      	ands	r3, r2
 800456a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	691a      	ldr	r2, [r3, #16]
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	f003 0307 	and.w	r3, r3, #7
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	fa02 f303 	lsl.w	r3, r2, r3
 800457c:	69ba      	ldr	r2, [r7, #24]
 800457e:	4313      	orrs	r3, r2
 8004580:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	08da      	lsrs	r2, r3, #3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	3208      	adds	r2, #8
 800458a:	69b9      	ldr	r1, [r7, #24]
 800458c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	005b      	lsls	r3, r3, #1
 800459a:	2203      	movs	r2, #3
 800459c:	fa02 f303 	lsl.w	r3, r2, r3
 80045a0:	43db      	mvns	r3, r3
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	4013      	ands	r3, r2
 80045a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f003 0203 	and.w	r2, r3, #3
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	005b      	lsls	r3, r3, #1
 80045b4:	fa02 f303 	lsl.w	r3, r2, r3
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f000 80b4 	beq.w	800473a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045d2:	2300      	movs	r3, #0
 80045d4:	60fb      	str	r3, [r7, #12]
 80045d6:	4b60      	ldr	r3, [pc, #384]	; (8004758 <HAL_GPIO_Init+0x30c>)
 80045d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045da:	4a5f      	ldr	r2, [pc, #380]	; (8004758 <HAL_GPIO_Init+0x30c>)
 80045dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045e0:	6453      	str	r3, [r2, #68]	; 0x44
 80045e2:	4b5d      	ldr	r3, [pc, #372]	; (8004758 <HAL_GPIO_Init+0x30c>)
 80045e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045ea:	60fb      	str	r3, [r7, #12]
 80045ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045ee:	4a5b      	ldr	r2, [pc, #364]	; (800475c <HAL_GPIO_Init+0x310>)
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	089b      	lsrs	r3, r3, #2
 80045f4:	3302      	adds	r3, #2
 80045f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	f003 0303 	and.w	r3, r3, #3
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	220f      	movs	r2, #15
 8004606:	fa02 f303 	lsl.w	r3, r2, r3
 800460a:	43db      	mvns	r3, r3
 800460c:	69ba      	ldr	r2, [r7, #24]
 800460e:	4013      	ands	r3, r2
 8004610:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a52      	ldr	r2, [pc, #328]	; (8004760 <HAL_GPIO_Init+0x314>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d02b      	beq.n	8004672 <HAL_GPIO_Init+0x226>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a51      	ldr	r2, [pc, #324]	; (8004764 <HAL_GPIO_Init+0x318>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d025      	beq.n	800466e <HAL_GPIO_Init+0x222>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a50      	ldr	r2, [pc, #320]	; (8004768 <HAL_GPIO_Init+0x31c>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d01f      	beq.n	800466a <HAL_GPIO_Init+0x21e>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a4f      	ldr	r2, [pc, #316]	; (800476c <HAL_GPIO_Init+0x320>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d019      	beq.n	8004666 <HAL_GPIO_Init+0x21a>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a4e      	ldr	r2, [pc, #312]	; (8004770 <HAL_GPIO_Init+0x324>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d013      	beq.n	8004662 <HAL_GPIO_Init+0x216>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a4d      	ldr	r2, [pc, #308]	; (8004774 <HAL_GPIO_Init+0x328>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d00d      	beq.n	800465e <HAL_GPIO_Init+0x212>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a4c      	ldr	r2, [pc, #304]	; (8004778 <HAL_GPIO_Init+0x32c>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d007      	beq.n	800465a <HAL_GPIO_Init+0x20e>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a4b      	ldr	r2, [pc, #300]	; (800477c <HAL_GPIO_Init+0x330>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d101      	bne.n	8004656 <HAL_GPIO_Init+0x20a>
 8004652:	2307      	movs	r3, #7
 8004654:	e00e      	b.n	8004674 <HAL_GPIO_Init+0x228>
 8004656:	2308      	movs	r3, #8
 8004658:	e00c      	b.n	8004674 <HAL_GPIO_Init+0x228>
 800465a:	2306      	movs	r3, #6
 800465c:	e00a      	b.n	8004674 <HAL_GPIO_Init+0x228>
 800465e:	2305      	movs	r3, #5
 8004660:	e008      	b.n	8004674 <HAL_GPIO_Init+0x228>
 8004662:	2304      	movs	r3, #4
 8004664:	e006      	b.n	8004674 <HAL_GPIO_Init+0x228>
 8004666:	2303      	movs	r3, #3
 8004668:	e004      	b.n	8004674 <HAL_GPIO_Init+0x228>
 800466a:	2302      	movs	r3, #2
 800466c:	e002      	b.n	8004674 <HAL_GPIO_Init+0x228>
 800466e:	2301      	movs	r3, #1
 8004670:	e000      	b.n	8004674 <HAL_GPIO_Init+0x228>
 8004672:	2300      	movs	r3, #0
 8004674:	69fa      	ldr	r2, [r7, #28]
 8004676:	f002 0203 	and.w	r2, r2, #3
 800467a:	0092      	lsls	r2, r2, #2
 800467c:	4093      	lsls	r3, r2
 800467e:	69ba      	ldr	r2, [r7, #24]
 8004680:	4313      	orrs	r3, r2
 8004682:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004684:	4935      	ldr	r1, [pc, #212]	; (800475c <HAL_GPIO_Init+0x310>)
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	089b      	lsrs	r3, r3, #2
 800468a:	3302      	adds	r3, #2
 800468c:	69ba      	ldr	r2, [r7, #24]
 800468e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004692:	4b3b      	ldr	r3, [pc, #236]	; (8004780 <HAL_GPIO_Init+0x334>)
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	43db      	mvns	r3, r3
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	4013      	ands	r3, r2
 80046a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d003      	beq.n	80046b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80046ae:	69ba      	ldr	r2, [r7, #24]
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80046b6:	4a32      	ldr	r2, [pc, #200]	; (8004780 <HAL_GPIO_Init+0x334>)
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046bc:	4b30      	ldr	r3, [pc, #192]	; (8004780 <HAL_GPIO_Init+0x334>)
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	43db      	mvns	r3, r3
 80046c6:	69ba      	ldr	r2, [r7, #24]
 80046c8:	4013      	ands	r3, r2
 80046ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d003      	beq.n	80046e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	4313      	orrs	r3, r2
 80046de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80046e0:	4a27      	ldr	r2, [pc, #156]	; (8004780 <HAL_GPIO_Init+0x334>)
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80046e6:	4b26      	ldr	r3, [pc, #152]	; (8004780 <HAL_GPIO_Init+0x334>)
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	43db      	mvns	r3, r3
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	4013      	ands	r3, r2
 80046f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d003      	beq.n	800470a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	4313      	orrs	r3, r2
 8004708:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800470a:	4a1d      	ldr	r2, [pc, #116]	; (8004780 <HAL_GPIO_Init+0x334>)
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004710:	4b1b      	ldr	r3, [pc, #108]	; (8004780 <HAL_GPIO_Init+0x334>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	43db      	mvns	r3, r3
 800471a:	69ba      	ldr	r2, [r7, #24]
 800471c:	4013      	ands	r3, r2
 800471e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d003      	beq.n	8004734 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	4313      	orrs	r3, r2
 8004732:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004734:	4a12      	ldr	r2, [pc, #72]	; (8004780 <HAL_GPIO_Init+0x334>)
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	3301      	adds	r3, #1
 800473e:	61fb      	str	r3, [r7, #28]
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	2b0f      	cmp	r3, #15
 8004744:	f67f ae90 	bls.w	8004468 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004748:	bf00      	nop
 800474a:	bf00      	nop
 800474c:	3724      	adds	r7, #36	; 0x24
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	40023800 	.word	0x40023800
 800475c:	40013800 	.word	0x40013800
 8004760:	40020000 	.word	0x40020000
 8004764:	40020400 	.word	0x40020400
 8004768:	40020800 	.word	0x40020800
 800476c:	40020c00 	.word	0x40020c00
 8004770:	40021000 	.word	0x40021000
 8004774:	40021400 	.word	0x40021400
 8004778:	40021800 	.word	0x40021800
 800477c:	40021c00 	.word	0x40021c00
 8004780:	40013c00 	.word	0x40013c00

08004784 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	460b      	mov	r3, r1
 800478e:	807b      	strh	r3, [r7, #2]
 8004790:	4613      	mov	r3, r2
 8004792:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004794:	787b      	ldrb	r3, [r7, #1]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d003      	beq.n	80047a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800479a:	887a      	ldrh	r2, [r7, #2]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80047a0:	e003      	b.n	80047aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80047a2:	887b      	ldrh	r3, [r7, #2]
 80047a4:	041a      	lsls	r2, r3, #16
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	619a      	str	r2, [r3, #24]
}
 80047aa:	bf00      	nop
 80047ac:	370c      	adds	r7, #12
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
	...

080047b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e12b      	b.n	8004a22 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d106      	bne.n	80047e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f7ff fa1a 	bl	8003c18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2224      	movs	r2, #36	; 0x24
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f022 0201 	bic.w	r2, r2, #1
 80047fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800480a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800481a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800481c:	f001 fbfc 	bl	8006018 <HAL_RCC_GetPCLK1Freq>
 8004820:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	4a81      	ldr	r2, [pc, #516]	; (8004a2c <HAL_I2C_Init+0x274>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d807      	bhi.n	800483c <HAL_I2C_Init+0x84>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	4a80      	ldr	r2, [pc, #512]	; (8004a30 <HAL_I2C_Init+0x278>)
 8004830:	4293      	cmp	r3, r2
 8004832:	bf94      	ite	ls
 8004834:	2301      	movls	r3, #1
 8004836:	2300      	movhi	r3, #0
 8004838:	b2db      	uxtb	r3, r3
 800483a:	e006      	b.n	800484a <HAL_I2C_Init+0x92>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	4a7d      	ldr	r2, [pc, #500]	; (8004a34 <HAL_I2C_Init+0x27c>)
 8004840:	4293      	cmp	r3, r2
 8004842:	bf94      	ite	ls
 8004844:	2301      	movls	r3, #1
 8004846:	2300      	movhi	r3, #0
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d001      	beq.n	8004852 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e0e7      	b.n	8004a22 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	4a78      	ldr	r2, [pc, #480]	; (8004a38 <HAL_I2C_Init+0x280>)
 8004856:	fba2 2303 	umull	r2, r3, r2, r3
 800485a:	0c9b      	lsrs	r3, r3, #18
 800485c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	430a      	orrs	r2, r1
 8004870:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	6a1b      	ldr	r3, [r3, #32]
 8004878:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	4a6a      	ldr	r2, [pc, #424]	; (8004a2c <HAL_I2C_Init+0x274>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d802      	bhi.n	800488c <HAL_I2C_Init+0xd4>
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	3301      	adds	r3, #1
 800488a:	e009      	b.n	80048a0 <HAL_I2C_Init+0xe8>
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004892:	fb02 f303 	mul.w	r3, r2, r3
 8004896:	4a69      	ldr	r2, [pc, #420]	; (8004a3c <HAL_I2C_Init+0x284>)
 8004898:	fba2 2303 	umull	r2, r3, r2, r3
 800489c:	099b      	lsrs	r3, r3, #6
 800489e:	3301      	adds	r3, #1
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	6812      	ldr	r2, [r2, #0]
 80048a4:	430b      	orrs	r3, r1
 80048a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	69db      	ldr	r3, [r3, #28]
 80048ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80048b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	495c      	ldr	r1, [pc, #368]	; (8004a2c <HAL_I2C_Init+0x274>)
 80048bc:	428b      	cmp	r3, r1
 80048be:	d819      	bhi.n	80048f4 <HAL_I2C_Init+0x13c>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	1e59      	subs	r1, r3, #1
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	005b      	lsls	r3, r3, #1
 80048ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80048ce:	1c59      	adds	r1, r3, #1
 80048d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80048d4:	400b      	ands	r3, r1
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00a      	beq.n	80048f0 <HAL_I2C_Init+0x138>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	1e59      	subs	r1, r3, #1
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	005b      	lsls	r3, r3, #1
 80048e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80048e8:	3301      	adds	r3, #1
 80048ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048ee:	e051      	b.n	8004994 <HAL_I2C_Init+0x1dc>
 80048f0:	2304      	movs	r3, #4
 80048f2:	e04f      	b.n	8004994 <HAL_I2C_Init+0x1dc>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d111      	bne.n	8004920 <HAL_I2C_Init+0x168>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	1e58      	subs	r0, r3, #1
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6859      	ldr	r1, [r3, #4]
 8004904:	460b      	mov	r3, r1
 8004906:	005b      	lsls	r3, r3, #1
 8004908:	440b      	add	r3, r1
 800490a:	fbb0 f3f3 	udiv	r3, r0, r3
 800490e:	3301      	adds	r3, #1
 8004910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004914:	2b00      	cmp	r3, #0
 8004916:	bf0c      	ite	eq
 8004918:	2301      	moveq	r3, #1
 800491a:	2300      	movne	r3, #0
 800491c:	b2db      	uxtb	r3, r3
 800491e:	e012      	b.n	8004946 <HAL_I2C_Init+0x18e>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	1e58      	subs	r0, r3, #1
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6859      	ldr	r1, [r3, #4]
 8004928:	460b      	mov	r3, r1
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	440b      	add	r3, r1
 800492e:	0099      	lsls	r1, r3, #2
 8004930:	440b      	add	r3, r1
 8004932:	fbb0 f3f3 	udiv	r3, r0, r3
 8004936:	3301      	adds	r3, #1
 8004938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800493c:	2b00      	cmp	r3, #0
 800493e:	bf0c      	ite	eq
 8004940:	2301      	moveq	r3, #1
 8004942:	2300      	movne	r3, #0
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <HAL_I2C_Init+0x196>
 800494a:	2301      	movs	r3, #1
 800494c:	e022      	b.n	8004994 <HAL_I2C_Init+0x1dc>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10e      	bne.n	8004974 <HAL_I2C_Init+0x1bc>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	1e58      	subs	r0, r3, #1
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6859      	ldr	r1, [r3, #4]
 800495e:	460b      	mov	r3, r1
 8004960:	005b      	lsls	r3, r3, #1
 8004962:	440b      	add	r3, r1
 8004964:	fbb0 f3f3 	udiv	r3, r0, r3
 8004968:	3301      	adds	r3, #1
 800496a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800496e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004972:	e00f      	b.n	8004994 <HAL_I2C_Init+0x1dc>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	1e58      	subs	r0, r3, #1
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6859      	ldr	r1, [r3, #4]
 800497c:	460b      	mov	r3, r1
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	440b      	add	r3, r1
 8004982:	0099      	lsls	r1, r3, #2
 8004984:	440b      	add	r3, r1
 8004986:	fbb0 f3f3 	udiv	r3, r0, r3
 800498a:	3301      	adds	r3, #1
 800498c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004990:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004994:	6879      	ldr	r1, [r7, #4]
 8004996:	6809      	ldr	r1, [r1, #0]
 8004998:	4313      	orrs	r3, r2
 800499a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	69da      	ldr	r2, [r3, #28]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	431a      	orrs	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	430a      	orrs	r2, r1
 80049b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80049c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	6911      	ldr	r1, [r2, #16]
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	68d2      	ldr	r2, [r2, #12]
 80049ce:	4311      	orrs	r1, r2
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	6812      	ldr	r2, [r2, #0]
 80049d4:	430b      	orrs	r3, r1
 80049d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	695a      	ldr	r2, [r3, #20]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	431a      	orrs	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	430a      	orrs	r2, r1
 80049f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f042 0201 	orr.w	r2, r2, #1
 8004a02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3710      	adds	r7, #16
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	000186a0 	.word	0x000186a0
 8004a30:	001e847f 	.word	0x001e847f
 8004a34:	003d08ff 	.word	0x003d08ff
 8004a38:	431bde83 	.word	0x431bde83
 8004a3c:	10624dd3 	.word	0x10624dd3

08004a40 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b088      	sub	sp, #32
 8004a44:	af02      	add	r7, sp, #8
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	4608      	mov	r0, r1
 8004a4a:	4611      	mov	r1, r2
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	4603      	mov	r3, r0
 8004a50:	817b      	strh	r3, [r7, #10]
 8004a52:	460b      	mov	r3, r1
 8004a54:	813b      	strh	r3, [r7, #8]
 8004a56:	4613      	mov	r3, r2
 8004a58:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a5a:	f7ff fb53 	bl	8004104 <HAL_GetTick>
 8004a5e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	2b20      	cmp	r3, #32
 8004a6a:	f040 80d9 	bne.w	8004c20 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	2319      	movs	r3, #25
 8004a74:	2201      	movs	r2, #1
 8004a76:	496d      	ldr	r1, [pc, #436]	; (8004c2c <HAL_I2C_Mem_Write+0x1ec>)
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f000 fc7f 	bl	800537c <I2C_WaitOnFlagUntilTimeout>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d001      	beq.n	8004a88 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004a84:	2302      	movs	r3, #2
 8004a86:	e0cc      	b.n	8004c22 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d101      	bne.n	8004a96 <HAL_I2C_Mem_Write+0x56>
 8004a92:	2302      	movs	r3, #2
 8004a94:	e0c5      	b.n	8004c22 <HAL_I2C_Mem_Write+0x1e2>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0301 	and.w	r3, r3, #1
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d007      	beq.n	8004abc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f042 0201 	orr.w	r2, r2, #1
 8004aba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004aca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2221      	movs	r2, #33	; 0x21
 8004ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2240      	movs	r2, #64	; 0x40
 8004ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6a3a      	ldr	r2, [r7, #32]
 8004ae6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004aec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	4a4d      	ldr	r2, [pc, #308]	; (8004c30 <HAL_I2C_Mem_Write+0x1f0>)
 8004afc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004afe:	88f8      	ldrh	r0, [r7, #6]
 8004b00:	893a      	ldrh	r2, [r7, #8]
 8004b02:	8979      	ldrh	r1, [r7, #10]
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	9301      	str	r3, [sp, #4]
 8004b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0a:	9300      	str	r3, [sp, #0]
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f000 fab6 	bl	8005080 <I2C_RequestMemoryWrite>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d052      	beq.n	8004bc0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e081      	b.n	8004c22 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f000 fd00 	bl	8005528 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00d      	beq.n	8004b4a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b32:	2b04      	cmp	r3, #4
 8004b34:	d107      	bne.n	8004b46 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b44:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e06b      	b.n	8004c22 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4e:	781a      	ldrb	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5a:	1c5a      	adds	r2, r3, #1
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b64:	3b01      	subs	r3, #1
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	3b01      	subs	r3, #1
 8004b74:	b29a      	uxth	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	695b      	ldr	r3, [r3, #20]
 8004b80:	f003 0304 	and.w	r3, r3, #4
 8004b84:	2b04      	cmp	r3, #4
 8004b86:	d11b      	bne.n	8004bc0 <HAL_I2C_Mem_Write+0x180>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d017      	beq.n	8004bc0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b94:	781a      	ldrb	r2, [r3, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba0:	1c5a      	adds	r2, r3, #1
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004baa:	3b01      	subs	r3, #1
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	b29a      	uxth	r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1aa      	bne.n	8004b1e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bc8:	697a      	ldr	r2, [r7, #20]
 8004bca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bcc:	68f8      	ldr	r0, [r7, #12]
 8004bce:	f000 fcec 	bl	80055aa <I2C_WaitOnBTFFlagUntilTimeout>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00d      	beq.n	8004bf4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bdc:	2b04      	cmp	r3, #4
 8004bde:	d107      	bne.n	8004bf0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e016      	b.n	8004c22 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2220      	movs	r2, #32
 8004c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	e000      	b.n	8004c22 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004c20:	2302      	movs	r3, #2
  }
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3718      	adds	r7, #24
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	00100002 	.word	0x00100002
 8004c30:	ffff0000 	.word	0xffff0000

08004c34 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b08c      	sub	sp, #48	; 0x30
 8004c38:	af02      	add	r7, sp, #8
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	4608      	mov	r0, r1
 8004c3e:	4611      	mov	r1, r2
 8004c40:	461a      	mov	r2, r3
 8004c42:	4603      	mov	r3, r0
 8004c44:	817b      	strh	r3, [r7, #10]
 8004c46:	460b      	mov	r3, r1
 8004c48:	813b      	strh	r3, [r7, #8]
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c4e:	f7ff fa59 	bl	8004104 <HAL_GetTick>
 8004c52:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2b20      	cmp	r3, #32
 8004c5e:	f040 8208 	bne.w	8005072 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c64:	9300      	str	r3, [sp, #0]
 8004c66:	2319      	movs	r3, #25
 8004c68:	2201      	movs	r2, #1
 8004c6a:	497b      	ldr	r1, [pc, #492]	; (8004e58 <HAL_I2C_Mem_Read+0x224>)
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f000 fb85 	bl	800537c <I2C_WaitOnFlagUntilTimeout>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d001      	beq.n	8004c7c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004c78:	2302      	movs	r3, #2
 8004c7a:	e1fb      	b.n	8005074 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d101      	bne.n	8004c8a <HAL_I2C_Mem_Read+0x56>
 8004c86:	2302      	movs	r3, #2
 8004c88:	e1f4      	b.n	8005074 <HAL_I2C_Mem_Read+0x440>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0301 	and.w	r3, r3, #1
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d007      	beq.n	8004cb0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f042 0201 	orr.w	r2, r2, #1
 8004cae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cbe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2222      	movs	r2, #34	; 0x22
 8004cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2240      	movs	r2, #64	; 0x40
 8004ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004ce0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	4a5b      	ldr	r2, [pc, #364]	; (8004e5c <HAL_I2C_Mem_Read+0x228>)
 8004cf0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004cf2:	88f8      	ldrh	r0, [r7, #6]
 8004cf4:	893a      	ldrh	r2, [r7, #8]
 8004cf6:	8979      	ldrh	r1, [r7, #10]
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfa:	9301      	str	r3, [sp, #4]
 8004cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cfe:	9300      	str	r3, [sp, #0]
 8004d00:	4603      	mov	r3, r0
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f000 fa52 	bl	80051ac <I2C_RequestMemoryRead>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d001      	beq.n	8004d12 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e1b0      	b.n	8005074 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d113      	bne.n	8004d42 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	623b      	str	r3, [r7, #32]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	695b      	ldr	r3, [r3, #20]
 8004d24:	623b      	str	r3, [r7, #32]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	623b      	str	r3, [r7, #32]
 8004d2e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d3e:	601a      	str	r2, [r3, #0]
 8004d40:	e184      	b.n	800504c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d11b      	bne.n	8004d82 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	61fb      	str	r3, [r7, #28]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	695b      	ldr	r3, [r3, #20]
 8004d64:	61fb      	str	r3, [r7, #28]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	61fb      	str	r3, [r7, #28]
 8004d6e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d7e:	601a      	str	r2, [r3, #0]
 8004d80:	e164      	b.n	800504c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d11b      	bne.n	8004dc2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d98:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004da8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004daa:	2300      	movs	r3, #0
 8004dac:	61bb      	str	r3, [r7, #24]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	695b      	ldr	r3, [r3, #20]
 8004db4:	61bb      	str	r3, [r7, #24]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	699b      	ldr	r3, [r3, #24]
 8004dbc:	61bb      	str	r3, [r7, #24]
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	e144      	b.n	800504c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	617b      	str	r3, [r7, #20]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	695b      	ldr	r3, [r3, #20]
 8004dcc:	617b      	str	r3, [r7, #20]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	699b      	ldr	r3, [r3, #24]
 8004dd4:	617b      	str	r3, [r7, #20]
 8004dd6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004dd8:	e138      	b.n	800504c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dde:	2b03      	cmp	r3, #3
 8004de0:	f200 80f1 	bhi.w	8004fc6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d123      	bne.n	8004e34 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	f000 fc1b 	bl	800562c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d001      	beq.n	8004e00 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e139      	b.n	8005074 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	691a      	ldr	r2, [r3, #16]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0a:	b2d2      	uxtb	r2, r2
 8004e0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e12:	1c5a      	adds	r2, r3, #1
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	b29a      	uxth	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e32:	e10b      	b.n	800504c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d14e      	bne.n	8004eda <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	9300      	str	r3, [sp, #0]
 8004e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e42:	2200      	movs	r2, #0
 8004e44:	4906      	ldr	r1, [pc, #24]	; (8004e60 <HAL_I2C_Mem_Read+0x22c>)
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f000 fa98 	bl	800537c <I2C_WaitOnFlagUntilTimeout>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d008      	beq.n	8004e64 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e10e      	b.n	8005074 <HAL_I2C_Mem_Read+0x440>
 8004e56:	bf00      	nop
 8004e58:	00100002 	.word	0x00100002
 8004e5c:	ffff0000 	.word	0xffff0000
 8004e60:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	691a      	ldr	r2, [r3, #16]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7e:	b2d2      	uxtb	r2, r2
 8004e80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e86:	1c5a      	adds	r2, r3, #1
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e90:	3b01      	subs	r3, #1
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	691a      	ldr	r2, [r3, #16]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb0:	b2d2      	uxtb	r2, r2
 8004eb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb8:	1c5a      	adds	r2, r3, #1
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ed8:	e0b8      	b.n	800504c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004edc:	9300      	str	r3, [sp, #0]
 8004ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	4966      	ldr	r1, [pc, #408]	; (800507c <HAL_I2C_Mem_Read+0x448>)
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f000 fa49 	bl	800537c <I2C_WaitOnFlagUntilTimeout>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d001      	beq.n	8004ef4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e0bf      	b.n	8005074 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	691a      	ldr	r2, [r3, #16]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	b2d2      	uxtb	r2, r2
 8004f10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f16:	1c5a      	adds	r2, r3, #1
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f20:	3b01      	subs	r3, #1
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f38:	9300      	str	r3, [sp, #0]
 8004f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	494f      	ldr	r1, [pc, #316]	; (800507c <HAL_I2C_Mem_Read+0x448>)
 8004f40:	68f8      	ldr	r0, [r7, #12]
 8004f42:	f000 fa1b 	bl	800537c <I2C_WaitOnFlagUntilTimeout>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d001      	beq.n	8004f50 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e091      	b.n	8005074 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	691a      	ldr	r2, [r3, #16]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6a:	b2d2      	uxtb	r2, r2
 8004f6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f72:	1c5a      	adds	r2, r3, #1
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	691a      	ldr	r2, [r3, #16]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9c:	b2d2      	uxtb	r2, r2
 8004f9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa4:	1c5a      	adds	r2, r3, #1
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004fc4:	e042      	b.n	800504c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fc8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	f000 fb2e 	bl	800562c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d001      	beq.n	8004fda <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e04c      	b.n	8005074 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	691a      	ldr	r2, [r3, #16]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe4:	b2d2      	uxtb	r2, r2
 8004fe6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fec:	1c5a      	adds	r2, r3, #1
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	b29a      	uxth	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005002:	b29b      	uxth	r3, r3
 8005004:	3b01      	subs	r3, #1
 8005006:	b29a      	uxth	r2, r3
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	f003 0304 	and.w	r3, r3, #4
 8005016:	2b04      	cmp	r3, #4
 8005018:	d118      	bne.n	800504c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	691a      	ldr	r2, [r3, #16]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005024:	b2d2      	uxtb	r2, r2
 8005026:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502c:	1c5a      	adds	r2, r3, #1
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005036:	3b01      	subs	r3, #1
 8005038:	b29a      	uxth	r2, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005042:	b29b      	uxth	r3, r3
 8005044:	3b01      	subs	r3, #1
 8005046:	b29a      	uxth	r2, r3
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005050:	2b00      	cmp	r3, #0
 8005052:	f47f aec2 	bne.w	8004dda <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2220      	movs	r2, #32
 800505a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800506e:	2300      	movs	r3, #0
 8005070:	e000      	b.n	8005074 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005072:	2302      	movs	r3, #2
  }
}
 8005074:	4618      	mov	r0, r3
 8005076:	3728      	adds	r7, #40	; 0x28
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	00010004 	.word	0x00010004

08005080 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b088      	sub	sp, #32
 8005084:	af02      	add	r7, sp, #8
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	4608      	mov	r0, r1
 800508a:	4611      	mov	r1, r2
 800508c:	461a      	mov	r2, r3
 800508e:	4603      	mov	r3, r0
 8005090:	817b      	strh	r3, [r7, #10]
 8005092:	460b      	mov	r3, r1
 8005094:	813b      	strh	r3, [r7, #8]
 8005096:	4613      	mov	r3, r2
 8005098:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ac:	9300      	str	r3, [sp, #0]
 80050ae:	6a3b      	ldr	r3, [r7, #32]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050b6:	68f8      	ldr	r0, [r7, #12]
 80050b8:	f000 f960 	bl	800537c <I2C_WaitOnFlagUntilTimeout>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00d      	beq.n	80050de <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050d0:	d103      	bne.n	80050da <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e05f      	b.n	800519e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050de:	897b      	ldrh	r3, [r7, #10]
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	461a      	mov	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80050ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f0:	6a3a      	ldr	r2, [r7, #32]
 80050f2:	492d      	ldr	r1, [pc, #180]	; (80051a8 <I2C_RequestMemoryWrite+0x128>)
 80050f4:	68f8      	ldr	r0, [r7, #12]
 80050f6:	f000 f998 	bl	800542a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d001      	beq.n	8005104 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e04c      	b.n	800519e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005104:	2300      	movs	r3, #0
 8005106:	617b      	str	r3, [r7, #20]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	617b      	str	r3, [r7, #20]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	617b      	str	r3, [r7, #20]
 8005118:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800511a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800511c:	6a39      	ldr	r1, [r7, #32]
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f000 fa02 	bl	8005528 <I2C_WaitOnTXEFlagUntilTimeout>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00d      	beq.n	8005146 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512e:	2b04      	cmp	r3, #4
 8005130:	d107      	bne.n	8005142 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005140:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e02b      	b.n	800519e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005146:	88fb      	ldrh	r3, [r7, #6]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d105      	bne.n	8005158 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800514c:	893b      	ldrh	r3, [r7, #8]
 800514e:	b2da      	uxtb	r2, r3
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	611a      	str	r2, [r3, #16]
 8005156:	e021      	b.n	800519c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005158:	893b      	ldrh	r3, [r7, #8]
 800515a:	0a1b      	lsrs	r3, r3, #8
 800515c:	b29b      	uxth	r3, r3
 800515e:	b2da      	uxtb	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005168:	6a39      	ldr	r1, [r7, #32]
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f000 f9dc 	bl	8005528 <I2C_WaitOnTXEFlagUntilTimeout>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00d      	beq.n	8005192 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517a:	2b04      	cmp	r3, #4
 800517c:	d107      	bne.n	800518e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800518c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e005      	b.n	800519e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005192:	893b      	ldrh	r3, [r7, #8]
 8005194:	b2da      	uxtb	r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3718      	adds	r7, #24
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	00010002 	.word	0x00010002

080051ac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b088      	sub	sp, #32
 80051b0:	af02      	add	r7, sp, #8
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	4608      	mov	r0, r1
 80051b6:	4611      	mov	r1, r2
 80051b8:	461a      	mov	r2, r3
 80051ba:	4603      	mov	r3, r0
 80051bc:	817b      	strh	r3, [r7, #10]
 80051be:	460b      	mov	r3, r1
 80051c0:	813b      	strh	r3, [r7, #8]
 80051c2:	4613      	mov	r3, r2
 80051c4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051d4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e8:	9300      	str	r3, [sp, #0]
 80051ea:	6a3b      	ldr	r3, [r7, #32]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051f2:	68f8      	ldr	r0, [r7, #12]
 80051f4:	f000 f8c2 	bl	800537c <I2C_WaitOnFlagUntilTimeout>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00d      	beq.n	800521a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005208:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800520c:	d103      	bne.n	8005216 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005214:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e0aa      	b.n	8005370 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800521a:	897b      	ldrh	r3, [r7, #10]
 800521c:	b2db      	uxtb	r3, r3
 800521e:	461a      	mov	r2, r3
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005228:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522c:	6a3a      	ldr	r2, [r7, #32]
 800522e:	4952      	ldr	r1, [pc, #328]	; (8005378 <I2C_RequestMemoryRead+0x1cc>)
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f000 f8fa 	bl	800542a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d001      	beq.n	8005240 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e097      	b.n	8005370 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005240:	2300      	movs	r3, #0
 8005242:	617b      	str	r3, [r7, #20]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	617b      	str	r3, [r7, #20]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	617b      	str	r3, [r7, #20]
 8005254:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005258:	6a39      	ldr	r1, [r7, #32]
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f000 f964 	bl	8005528 <I2C_WaitOnTXEFlagUntilTimeout>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00d      	beq.n	8005282 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526a:	2b04      	cmp	r3, #4
 800526c:	d107      	bne.n	800527e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800527c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e076      	b.n	8005370 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005282:	88fb      	ldrh	r3, [r7, #6]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d105      	bne.n	8005294 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005288:	893b      	ldrh	r3, [r7, #8]
 800528a:	b2da      	uxtb	r2, r3
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	611a      	str	r2, [r3, #16]
 8005292:	e021      	b.n	80052d8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005294:	893b      	ldrh	r3, [r7, #8]
 8005296:	0a1b      	lsrs	r3, r3, #8
 8005298:	b29b      	uxth	r3, r3
 800529a:	b2da      	uxtb	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052a4:	6a39      	ldr	r1, [r7, #32]
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f000 f93e 	bl	8005528 <I2C_WaitOnTXEFlagUntilTimeout>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00d      	beq.n	80052ce <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b6:	2b04      	cmp	r3, #4
 80052b8:	d107      	bne.n	80052ca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e050      	b.n	8005370 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052ce:	893b      	ldrh	r3, [r7, #8]
 80052d0:	b2da      	uxtb	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052da:	6a39      	ldr	r1, [r7, #32]
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f000 f923 	bl	8005528 <I2C_WaitOnTXEFlagUntilTimeout>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00d      	beq.n	8005304 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ec:	2b04      	cmp	r3, #4
 80052ee:	d107      	bne.n	8005300 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052fe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e035      	b.n	8005370 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005312:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	6a3b      	ldr	r3, [r7, #32]
 800531a:	2200      	movs	r2, #0
 800531c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f000 f82b 	bl	800537c <I2C_WaitOnFlagUntilTimeout>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00d      	beq.n	8005348 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005336:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800533a:	d103      	bne.n	8005344 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005342:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e013      	b.n	8005370 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005348:	897b      	ldrh	r3, [r7, #10]
 800534a:	b2db      	uxtb	r3, r3
 800534c:	f043 0301 	orr.w	r3, r3, #1
 8005350:	b2da      	uxtb	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535a:	6a3a      	ldr	r2, [r7, #32]
 800535c:	4906      	ldr	r1, [pc, #24]	; (8005378 <I2C_RequestMemoryRead+0x1cc>)
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f000 f863 	bl	800542a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d001      	beq.n	800536e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e000      	b.n	8005370 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3718      	adds	r7, #24
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	00010002 	.word	0x00010002

0800537c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	603b      	str	r3, [r7, #0]
 8005388:	4613      	mov	r3, r2
 800538a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800538c:	e025      	b.n	80053da <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005394:	d021      	beq.n	80053da <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005396:	f7fe feb5 	bl	8004104 <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	683a      	ldr	r2, [r7, #0]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d302      	bcc.n	80053ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d116      	bne.n	80053da <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2220      	movs	r2, #32
 80053b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c6:	f043 0220 	orr.w	r2, r3, #32
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e023      	b.n	8005422 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	0c1b      	lsrs	r3, r3, #16
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d10d      	bne.n	8005400 <I2C_WaitOnFlagUntilTimeout+0x84>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	43da      	mvns	r2, r3
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	4013      	ands	r3, r2
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	bf0c      	ite	eq
 80053f6:	2301      	moveq	r3, #1
 80053f8:	2300      	movne	r3, #0
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	461a      	mov	r2, r3
 80053fe:	e00c      	b.n	800541a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	43da      	mvns	r2, r3
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	4013      	ands	r3, r2
 800540c:	b29b      	uxth	r3, r3
 800540e:	2b00      	cmp	r3, #0
 8005410:	bf0c      	ite	eq
 8005412:	2301      	moveq	r3, #1
 8005414:	2300      	movne	r3, #0
 8005416:	b2db      	uxtb	r3, r3
 8005418:	461a      	mov	r2, r3
 800541a:	79fb      	ldrb	r3, [r7, #7]
 800541c:	429a      	cmp	r2, r3
 800541e:	d0b6      	beq.n	800538e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800542a:	b580      	push	{r7, lr}
 800542c:	b084      	sub	sp, #16
 800542e:	af00      	add	r7, sp, #0
 8005430:	60f8      	str	r0, [r7, #12]
 8005432:	60b9      	str	r1, [r7, #8]
 8005434:	607a      	str	r2, [r7, #4]
 8005436:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005438:	e051      	b.n	80054de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	695b      	ldr	r3, [r3, #20]
 8005440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005444:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005448:	d123      	bne.n	8005492 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005458:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005462:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2220      	movs	r2, #32
 800546e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547e:	f043 0204 	orr.w	r2, r3, #4
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e046      	b.n	8005520 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005498:	d021      	beq.n	80054de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800549a:	f7fe fe33 	bl	8004104 <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d302      	bcc.n	80054b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d116      	bne.n	80054de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2200      	movs	r2, #0
 80054b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2220      	movs	r2, #32
 80054ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ca:	f043 0220 	orr.w	r2, r3, #32
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e020      	b.n	8005520 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	0c1b      	lsrs	r3, r3, #16
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d10c      	bne.n	8005502 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	43da      	mvns	r2, r3
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	4013      	ands	r3, r2
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	bf14      	ite	ne
 80054fa:	2301      	movne	r3, #1
 80054fc:	2300      	moveq	r3, #0
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	e00b      	b.n	800551a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	699b      	ldr	r3, [r3, #24]
 8005508:	43da      	mvns	r2, r3
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	4013      	ands	r3, r2
 800550e:	b29b      	uxth	r3, r3
 8005510:	2b00      	cmp	r3, #0
 8005512:	bf14      	ite	ne
 8005514:	2301      	movne	r3, #1
 8005516:	2300      	moveq	r3, #0
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b00      	cmp	r3, #0
 800551c:	d18d      	bne.n	800543a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005534:	e02d      	b.n	8005592 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f000 f8ce 	bl	80056d8 <I2C_IsAcknowledgeFailed>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d001      	beq.n	8005546 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e02d      	b.n	80055a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800554c:	d021      	beq.n	8005592 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800554e:	f7fe fdd9 	bl	8004104 <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	429a      	cmp	r2, r3
 800555c:	d302      	bcc.n	8005564 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d116      	bne.n	8005592 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2220      	movs	r2, #32
 800556e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557e:	f043 0220 	orr.w	r2, r3, #32
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e007      	b.n	80055a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	695b      	ldr	r3, [r3, #20]
 8005598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800559c:	2b80      	cmp	r3, #128	; 0x80
 800559e:	d1ca      	bne.n	8005536 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3710      	adds	r7, #16
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}

080055aa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b084      	sub	sp, #16
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	60f8      	str	r0, [r7, #12]
 80055b2:	60b9      	str	r1, [r7, #8]
 80055b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80055b6:	e02d      	b.n	8005614 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80055b8:	68f8      	ldr	r0, [r7, #12]
 80055ba:	f000 f88d 	bl	80056d8 <I2C_IsAcknowledgeFailed>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d001      	beq.n	80055c8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e02d      	b.n	8005624 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ce:	d021      	beq.n	8005614 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055d0:	f7fe fd98 	bl	8004104 <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	68ba      	ldr	r2, [r7, #8]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d302      	bcc.n	80055e6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d116      	bne.n	8005614 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2220      	movs	r2, #32
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005600:	f043 0220 	orr.w	r2, r3, #32
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e007      	b.n	8005624 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	f003 0304 	and.w	r3, r3, #4
 800561e:	2b04      	cmp	r3, #4
 8005620:	d1ca      	bne.n	80055b8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005638:	e042      	b.n	80056c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	f003 0310 	and.w	r3, r3, #16
 8005644:	2b10      	cmp	r3, #16
 8005646:	d119      	bne.n	800567c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f06f 0210 	mvn.w	r2, #16
 8005650:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2220      	movs	r2, #32
 800565c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e029      	b.n	80056d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800567c:	f7fe fd42 	bl	8004104 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	68ba      	ldr	r2, [r7, #8]
 8005688:	429a      	cmp	r2, r3
 800568a:	d302      	bcc.n	8005692 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d116      	bne.n	80056c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2220      	movs	r2, #32
 800569c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ac:	f043 0220 	orr.w	r2, r3, #32
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e007      	b.n	80056d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ca:	2b40      	cmp	r3, #64	; 0x40
 80056cc:	d1b5      	bne.n	800563a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3710      	adds	r7, #16
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	695b      	ldr	r3, [r3, #20]
 80056e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056ee:	d11b      	bne.n	8005728 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2220      	movs	r2, #32
 8005704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005714:	f043 0204 	orr.w	r2, r3, #4
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e000      	b.n	800572a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	370c      	adds	r7, #12
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
	...

08005738 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b086      	sub	sp, #24
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d101      	bne.n	800574a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e267      	b.n	8005c1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	2b00      	cmp	r3, #0
 8005754:	d075      	beq.n	8005842 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005756:	4b88      	ldr	r3, [pc, #544]	; (8005978 <HAL_RCC_OscConfig+0x240>)
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f003 030c 	and.w	r3, r3, #12
 800575e:	2b04      	cmp	r3, #4
 8005760:	d00c      	beq.n	800577c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005762:	4b85      	ldr	r3, [pc, #532]	; (8005978 <HAL_RCC_OscConfig+0x240>)
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800576a:	2b08      	cmp	r3, #8
 800576c:	d112      	bne.n	8005794 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800576e:	4b82      	ldr	r3, [pc, #520]	; (8005978 <HAL_RCC_OscConfig+0x240>)
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005776:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800577a:	d10b      	bne.n	8005794 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800577c:	4b7e      	ldr	r3, [pc, #504]	; (8005978 <HAL_RCC_OscConfig+0x240>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d05b      	beq.n	8005840 <HAL_RCC_OscConfig+0x108>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d157      	bne.n	8005840 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e242      	b.n	8005c1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800579c:	d106      	bne.n	80057ac <HAL_RCC_OscConfig+0x74>
 800579e:	4b76      	ldr	r3, [pc, #472]	; (8005978 <HAL_RCC_OscConfig+0x240>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a75      	ldr	r2, [pc, #468]	; (8005978 <HAL_RCC_OscConfig+0x240>)
 80057a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057a8:	6013      	str	r3, [r2, #0]
 80057aa:	e01d      	b.n	80057e8 <HAL_RCC_OscConfig+0xb0>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057b4:	d10c      	bne.n	80057d0 <HAL_RCC_OscConfig+0x98>
 80057b6:	4b70      	ldr	r3, [pc, #448]	; (8005978 <HAL_RCC_OscConfig+0x240>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a6f      	ldr	r2, [pc, #444]	; (8005978 <HAL_RCC_OscConfig+0x240>)
 80057bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057c0:	6013      	str	r3, [r2, #0]
 80057c2:	4b6d      	ldr	r3, [pc, #436]	; (8005978 <HAL_RCC_OscConfig+0x240>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a6c      	ldr	r2, [pc, #432]	; (8005978 <HAL_RCC_OscConfig+0x240>)
 80057c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057cc:	6013      	str	r3, [r2, #0]
 80057ce:	e00b      	b.n	80057e8 <HAL_RCC_OscConfig+0xb0>
 80057d0:	4b69      	ldr	r3, [pc, #420]	; (8005978 <HAL_RCC_OscConfig+0x240>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a68      	ldr	r2, [pc, #416]	; (8005978 <HAL_RCC_OscConfig+0x240>)
 80057d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057da:	6013      	str	r3, [r2, #0]
 80057dc:	4b66      	ldr	r3, [pc, #408]	; (8005978 <HAL_RCC_OscConfig+0x240>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a65      	ldr	r2, [pc, #404]	; (8005978 <HAL_RCC_OscConfig+0x240>)
 80057e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d013      	beq.n	8005818 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057f0:	f7fe fc88 	bl	8004104 <HAL_GetTick>
 80057f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057f6:	e008      	b.n	800580a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057f8:	f7fe fc84 	bl	8004104 <HAL_GetTick>
 80057fc:	4602      	mov	r2, r0
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	2b64      	cmp	r3, #100	; 0x64
 8005804:	d901      	bls.n	800580a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e207      	b.n	8005c1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800580a:	4b5b      	ldr	r3, [pc, #364]	; (8005978 <HAL_RCC_OscConfig+0x240>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d0f0      	beq.n	80057f8 <HAL_RCC_OscConfig+0xc0>
 8005816:	e014      	b.n	8005842 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005818:	f7fe fc74 	bl	8004104 <HAL_GetTick>
 800581c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800581e:	e008      	b.n	8005832 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005820:	f7fe fc70 	bl	8004104 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	2b64      	cmp	r3, #100	; 0x64
 800582c:	d901      	bls.n	8005832 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e1f3      	b.n	8005c1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005832:	4b51      	ldr	r3, [pc, #324]	; (8005978 <HAL_RCC_OscConfig+0x240>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1f0      	bne.n	8005820 <HAL_RCC_OscConfig+0xe8>
 800583e:	e000      	b.n	8005842 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005840:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0302 	and.w	r3, r3, #2
 800584a:	2b00      	cmp	r3, #0
 800584c:	d063      	beq.n	8005916 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800584e:	4b4a      	ldr	r3, [pc, #296]	; (8005978 <HAL_RCC_OscConfig+0x240>)
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f003 030c 	and.w	r3, r3, #12
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00b      	beq.n	8005872 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800585a:	4b47      	ldr	r3, [pc, #284]	; (8005978 <HAL_RCC_OscConfig+0x240>)
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005862:	2b08      	cmp	r3, #8
 8005864:	d11c      	bne.n	80058a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005866:	4b44      	ldr	r3, [pc, #272]	; (8005978 <HAL_RCC_OscConfig+0x240>)
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d116      	bne.n	80058a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005872:	4b41      	ldr	r3, [pc, #260]	; (8005978 <HAL_RCC_OscConfig+0x240>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 0302 	and.w	r3, r3, #2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d005      	beq.n	800588a <HAL_RCC_OscConfig+0x152>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	2b01      	cmp	r3, #1
 8005884:	d001      	beq.n	800588a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e1c7      	b.n	8005c1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800588a:	4b3b      	ldr	r3, [pc, #236]	; (8005978 <HAL_RCC_OscConfig+0x240>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	00db      	lsls	r3, r3, #3
 8005898:	4937      	ldr	r1, [pc, #220]	; (8005978 <HAL_RCC_OscConfig+0x240>)
 800589a:	4313      	orrs	r3, r2
 800589c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800589e:	e03a      	b.n	8005916 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d020      	beq.n	80058ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058a8:	4b34      	ldr	r3, [pc, #208]	; (800597c <HAL_RCC_OscConfig+0x244>)
 80058aa:	2201      	movs	r2, #1
 80058ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ae:	f7fe fc29 	bl	8004104 <HAL_GetTick>
 80058b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058b4:	e008      	b.n	80058c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058b6:	f7fe fc25 	bl	8004104 <HAL_GetTick>
 80058ba:	4602      	mov	r2, r0
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d901      	bls.n	80058c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e1a8      	b.n	8005c1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058c8:	4b2b      	ldr	r3, [pc, #172]	; (8005978 <HAL_RCC_OscConfig+0x240>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0302 	and.w	r3, r3, #2
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d0f0      	beq.n	80058b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058d4:	4b28      	ldr	r3, [pc, #160]	; (8005978 <HAL_RCC_OscConfig+0x240>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	00db      	lsls	r3, r3, #3
 80058e2:	4925      	ldr	r1, [pc, #148]	; (8005978 <HAL_RCC_OscConfig+0x240>)
 80058e4:	4313      	orrs	r3, r2
 80058e6:	600b      	str	r3, [r1, #0]
 80058e8:	e015      	b.n	8005916 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058ea:	4b24      	ldr	r3, [pc, #144]	; (800597c <HAL_RCC_OscConfig+0x244>)
 80058ec:	2200      	movs	r2, #0
 80058ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f0:	f7fe fc08 	bl	8004104 <HAL_GetTick>
 80058f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058f6:	e008      	b.n	800590a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058f8:	f7fe fc04 	bl	8004104 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	2b02      	cmp	r3, #2
 8005904:	d901      	bls.n	800590a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e187      	b.n	8005c1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800590a:	4b1b      	ldr	r3, [pc, #108]	; (8005978 <HAL_RCC_OscConfig+0x240>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0302 	and.w	r3, r3, #2
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1f0      	bne.n	80058f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0308 	and.w	r3, r3, #8
 800591e:	2b00      	cmp	r3, #0
 8005920:	d036      	beq.n	8005990 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d016      	beq.n	8005958 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800592a:	4b15      	ldr	r3, [pc, #84]	; (8005980 <HAL_RCC_OscConfig+0x248>)
 800592c:	2201      	movs	r2, #1
 800592e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005930:	f7fe fbe8 	bl	8004104 <HAL_GetTick>
 8005934:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005936:	e008      	b.n	800594a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005938:	f7fe fbe4 	bl	8004104 <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	2b02      	cmp	r3, #2
 8005944:	d901      	bls.n	800594a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e167      	b.n	8005c1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800594a:	4b0b      	ldr	r3, [pc, #44]	; (8005978 <HAL_RCC_OscConfig+0x240>)
 800594c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800594e:	f003 0302 	and.w	r3, r3, #2
 8005952:	2b00      	cmp	r3, #0
 8005954:	d0f0      	beq.n	8005938 <HAL_RCC_OscConfig+0x200>
 8005956:	e01b      	b.n	8005990 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005958:	4b09      	ldr	r3, [pc, #36]	; (8005980 <HAL_RCC_OscConfig+0x248>)
 800595a:	2200      	movs	r2, #0
 800595c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800595e:	f7fe fbd1 	bl	8004104 <HAL_GetTick>
 8005962:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005964:	e00e      	b.n	8005984 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005966:	f7fe fbcd 	bl	8004104 <HAL_GetTick>
 800596a:	4602      	mov	r2, r0
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	2b02      	cmp	r3, #2
 8005972:	d907      	bls.n	8005984 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	e150      	b.n	8005c1a <HAL_RCC_OscConfig+0x4e2>
 8005978:	40023800 	.word	0x40023800
 800597c:	42470000 	.word	0x42470000
 8005980:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005984:	4b88      	ldr	r3, [pc, #544]	; (8005ba8 <HAL_RCC_OscConfig+0x470>)
 8005986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005988:	f003 0302 	and.w	r3, r3, #2
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1ea      	bne.n	8005966 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0304 	and.w	r3, r3, #4
 8005998:	2b00      	cmp	r3, #0
 800599a:	f000 8097 	beq.w	8005acc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800599e:	2300      	movs	r3, #0
 80059a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059a2:	4b81      	ldr	r3, [pc, #516]	; (8005ba8 <HAL_RCC_OscConfig+0x470>)
 80059a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d10f      	bne.n	80059ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059ae:	2300      	movs	r3, #0
 80059b0:	60bb      	str	r3, [r7, #8]
 80059b2:	4b7d      	ldr	r3, [pc, #500]	; (8005ba8 <HAL_RCC_OscConfig+0x470>)
 80059b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b6:	4a7c      	ldr	r2, [pc, #496]	; (8005ba8 <HAL_RCC_OscConfig+0x470>)
 80059b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059bc:	6413      	str	r3, [r2, #64]	; 0x40
 80059be:	4b7a      	ldr	r3, [pc, #488]	; (8005ba8 <HAL_RCC_OscConfig+0x470>)
 80059c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059c6:	60bb      	str	r3, [r7, #8]
 80059c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059ca:	2301      	movs	r3, #1
 80059cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059ce:	4b77      	ldr	r3, [pc, #476]	; (8005bac <HAL_RCC_OscConfig+0x474>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d118      	bne.n	8005a0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059da:	4b74      	ldr	r3, [pc, #464]	; (8005bac <HAL_RCC_OscConfig+0x474>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a73      	ldr	r2, [pc, #460]	; (8005bac <HAL_RCC_OscConfig+0x474>)
 80059e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059e6:	f7fe fb8d 	bl	8004104 <HAL_GetTick>
 80059ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059ec:	e008      	b.n	8005a00 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059ee:	f7fe fb89 	bl	8004104 <HAL_GetTick>
 80059f2:	4602      	mov	r2, r0
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d901      	bls.n	8005a00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e10c      	b.n	8005c1a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a00:	4b6a      	ldr	r3, [pc, #424]	; (8005bac <HAL_RCC_OscConfig+0x474>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d0f0      	beq.n	80059ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d106      	bne.n	8005a22 <HAL_RCC_OscConfig+0x2ea>
 8005a14:	4b64      	ldr	r3, [pc, #400]	; (8005ba8 <HAL_RCC_OscConfig+0x470>)
 8005a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a18:	4a63      	ldr	r2, [pc, #396]	; (8005ba8 <HAL_RCC_OscConfig+0x470>)
 8005a1a:	f043 0301 	orr.w	r3, r3, #1
 8005a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8005a20:	e01c      	b.n	8005a5c <HAL_RCC_OscConfig+0x324>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	2b05      	cmp	r3, #5
 8005a28:	d10c      	bne.n	8005a44 <HAL_RCC_OscConfig+0x30c>
 8005a2a:	4b5f      	ldr	r3, [pc, #380]	; (8005ba8 <HAL_RCC_OscConfig+0x470>)
 8005a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a2e:	4a5e      	ldr	r2, [pc, #376]	; (8005ba8 <HAL_RCC_OscConfig+0x470>)
 8005a30:	f043 0304 	orr.w	r3, r3, #4
 8005a34:	6713      	str	r3, [r2, #112]	; 0x70
 8005a36:	4b5c      	ldr	r3, [pc, #368]	; (8005ba8 <HAL_RCC_OscConfig+0x470>)
 8005a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a3a:	4a5b      	ldr	r2, [pc, #364]	; (8005ba8 <HAL_RCC_OscConfig+0x470>)
 8005a3c:	f043 0301 	orr.w	r3, r3, #1
 8005a40:	6713      	str	r3, [r2, #112]	; 0x70
 8005a42:	e00b      	b.n	8005a5c <HAL_RCC_OscConfig+0x324>
 8005a44:	4b58      	ldr	r3, [pc, #352]	; (8005ba8 <HAL_RCC_OscConfig+0x470>)
 8005a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a48:	4a57      	ldr	r2, [pc, #348]	; (8005ba8 <HAL_RCC_OscConfig+0x470>)
 8005a4a:	f023 0301 	bic.w	r3, r3, #1
 8005a4e:	6713      	str	r3, [r2, #112]	; 0x70
 8005a50:	4b55      	ldr	r3, [pc, #340]	; (8005ba8 <HAL_RCC_OscConfig+0x470>)
 8005a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a54:	4a54      	ldr	r2, [pc, #336]	; (8005ba8 <HAL_RCC_OscConfig+0x470>)
 8005a56:	f023 0304 	bic.w	r3, r3, #4
 8005a5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d015      	beq.n	8005a90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a64:	f7fe fb4e 	bl	8004104 <HAL_GetTick>
 8005a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a6a:	e00a      	b.n	8005a82 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a6c:	f7fe fb4a 	bl	8004104 <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d901      	bls.n	8005a82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e0cb      	b.n	8005c1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a82:	4b49      	ldr	r3, [pc, #292]	; (8005ba8 <HAL_RCC_OscConfig+0x470>)
 8005a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a86:	f003 0302 	and.w	r3, r3, #2
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d0ee      	beq.n	8005a6c <HAL_RCC_OscConfig+0x334>
 8005a8e:	e014      	b.n	8005aba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a90:	f7fe fb38 	bl	8004104 <HAL_GetTick>
 8005a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a96:	e00a      	b.n	8005aae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a98:	f7fe fb34 	bl	8004104 <HAL_GetTick>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d901      	bls.n	8005aae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e0b5      	b.n	8005c1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005aae:	4b3e      	ldr	r3, [pc, #248]	; (8005ba8 <HAL_RCC_OscConfig+0x470>)
 8005ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab2:	f003 0302 	and.w	r3, r3, #2
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1ee      	bne.n	8005a98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005aba:	7dfb      	ldrb	r3, [r7, #23]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d105      	bne.n	8005acc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ac0:	4b39      	ldr	r3, [pc, #228]	; (8005ba8 <HAL_RCC_OscConfig+0x470>)
 8005ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac4:	4a38      	ldr	r2, [pc, #224]	; (8005ba8 <HAL_RCC_OscConfig+0x470>)
 8005ac6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005aca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	699b      	ldr	r3, [r3, #24]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	f000 80a1 	beq.w	8005c18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ad6:	4b34      	ldr	r3, [pc, #208]	; (8005ba8 <HAL_RCC_OscConfig+0x470>)
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f003 030c 	and.w	r3, r3, #12
 8005ade:	2b08      	cmp	r3, #8
 8005ae0:	d05c      	beq.n	8005b9c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d141      	bne.n	8005b6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005aea:	4b31      	ldr	r3, [pc, #196]	; (8005bb0 <HAL_RCC_OscConfig+0x478>)
 8005aec:	2200      	movs	r2, #0
 8005aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005af0:	f7fe fb08 	bl	8004104 <HAL_GetTick>
 8005af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005af6:	e008      	b.n	8005b0a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005af8:	f7fe fb04 	bl	8004104 <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	d901      	bls.n	8005b0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e087      	b.n	8005c1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b0a:	4b27      	ldr	r3, [pc, #156]	; (8005ba8 <HAL_RCC_OscConfig+0x470>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1f0      	bne.n	8005af8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	69da      	ldr	r2, [r3, #28]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a1b      	ldr	r3, [r3, #32]
 8005b1e:	431a      	orrs	r2, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b24:	019b      	lsls	r3, r3, #6
 8005b26:	431a      	orrs	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b2c:	085b      	lsrs	r3, r3, #1
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	041b      	lsls	r3, r3, #16
 8005b32:	431a      	orrs	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b38:	061b      	lsls	r3, r3, #24
 8005b3a:	491b      	ldr	r1, [pc, #108]	; (8005ba8 <HAL_RCC_OscConfig+0x470>)
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b40:	4b1b      	ldr	r3, [pc, #108]	; (8005bb0 <HAL_RCC_OscConfig+0x478>)
 8005b42:	2201      	movs	r2, #1
 8005b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b46:	f7fe fadd 	bl	8004104 <HAL_GetTick>
 8005b4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b4c:	e008      	b.n	8005b60 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b4e:	f7fe fad9 	bl	8004104 <HAL_GetTick>
 8005b52:	4602      	mov	r2, r0
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d901      	bls.n	8005b60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e05c      	b.n	8005c1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b60:	4b11      	ldr	r3, [pc, #68]	; (8005ba8 <HAL_RCC_OscConfig+0x470>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d0f0      	beq.n	8005b4e <HAL_RCC_OscConfig+0x416>
 8005b6c:	e054      	b.n	8005c18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b6e:	4b10      	ldr	r3, [pc, #64]	; (8005bb0 <HAL_RCC_OscConfig+0x478>)
 8005b70:	2200      	movs	r2, #0
 8005b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b74:	f7fe fac6 	bl	8004104 <HAL_GetTick>
 8005b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b7a:	e008      	b.n	8005b8e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b7c:	f7fe fac2 	bl	8004104 <HAL_GetTick>
 8005b80:	4602      	mov	r2, r0
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d901      	bls.n	8005b8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	e045      	b.n	8005c1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b8e:	4b06      	ldr	r3, [pc, #24]	; (8005ba8 <HAL_RCC_OscConfig+0x470>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d1f0      	bne.n	8005b7c <HAL_RCC_OscConfig+0x444>
 8005b9a:	e03d      	b.n	8005c18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d107      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e038      	b.n	8005c1a <HAL_RCC_OscConfig+0x4e2>
 8005ba8:	40023800 	.word	0x40023800
 8005bac:	40007000 	.word	0x40007000
 8005bb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005bb4:	4b1b      	ldr	r3, [pc, #108]	; (8005c24 <HAL_RCC_OscConfig+0x4ec>)
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d028      	beq.n	8005c14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d121      	bne.n	8005c14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d11a      	bne.n	8005c14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005be4:	4013      	ands	r3, r2
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005bea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d111      	bne.n	8005c14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bfa:	085b      	lsrs	r3, r3, #1
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d107      	bne.n	8005c14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d001      	beq.n	8005c18 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e000      	b.n	8005c1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3718      	adds	r7, #24
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	40023800 	.word	0x40023800

08005c28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d101      	bne.n	8005c3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e0cc      	b.n	8005dd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c3c:	4b68      	ldr	r3, [pc, #416]	; (8005de0 <HAL_RCC_ClockConfig+0x1b8>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0307 	and.w	r3, r3, #7
 8005c44:	683a      	ldr	r2, [r7, #0]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d90c      	bls.n	8005c64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c4a:	4b65      	ldr	r3, [pc, #404]	; (8005de0 <HAL_RCC_ClockConfig+0x1b8>)
 8005c4c:	683a      	ldr	r2, [r7, #0]
 8005c4e:	b2d2      	uxtb	r2, r2
 8005c50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c52:	4b63      	ldr	r3, [pc, #396]	; (8005de0 <HAL_RCC_ClockConfig+0x1b8>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0307 	and.w	r3, r3, #7
 8005c5a:	683a      	ldr	r2, [r7, #0]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d001      	beq.n	8005c64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e0b8      	b.n	8005dd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0302 	and.w	r3, r3, #2
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d020      	beq.n	8005cb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0304 	and.w	r3, r3, #4
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d005      	beq.n	8005c88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c7c:	4b59      	ldr	r3, [pc, #356]	; (8005de4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	4a58      	ldr	r2, [pc, #352]	; (8005de4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005c86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0308 	and.w	r3, r3, #8
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d005      	beq.n	8005ca0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c94:	4b53      	ldr	r3, [pc, #332]	; (8005de4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	4a52      	ldr	r2, [pc, #328]	; (8005de4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005c9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ca0:	4b50      	ldr	r3, [pc, #320]	; (8005de4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	494d      	ldr	r1, [pc, #308]	; (8005de4 <HAL_RCC_ClockConfig+0x1bc>)
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d044      	beq.n	8005d48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d107      	bne.n	8005cd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cc6:	4b47      	ldr	r3, [pc, #284]	; (8005de4 <HAL_RCC_ClockConfig+0x1bc>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d119      	bne.n	8005d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e07f      	b.n	8005dd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d003      	beq.n	8005ce6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ce2:	2b03      	cmp	r3, #3
 8005ce4:	d107      	bne.n	8005cf6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ce6:	4b3f      	ldr	r3, [pc, #252]	; (8005de4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d109      	bne.n	8005d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e06f      	b.n	8005dd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cf6:	4b3b      	ldr	r3, [pc, #236]	; (8005de4 <HAL_RCC_ClockConfig+0x1bc>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0302 	and.w	r3, r3, #2
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d101      	bne.n	8005d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e067      	b.n	8005dd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d06:	4b37      	ldr	r3, [pc, #220]	; (8005de4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f023 0203 	bic.w	r2, r3, #3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	4934      	ldr	r1, [pc, #208]	; (8005de4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d14:	4313      	orrs	r3, r2
 8005d16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d18:	f7fe f9f4 	bl	8004104 <HAL_GetTick>
 8005d1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d1e:	e00a      	b.n	8005d36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d20:	f7fe f9f0 	bl	8004104 <HAL_GetTick>
 8005d24:	4602      	mov	r2, r0
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d901      	bls.n	8005d36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e04f      	b.n	8005dd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d36:	4b2b      	ldr	r3, [pc, #172]	; (8005de4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	f003 020c 	and.w	r2, r3, #12
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d1eb      	bne.n	8005d20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d48:	4b25      	ldr	r3, [pc, #148]	; (8005de0 <HAL_RCC_ClockConfig+0x1b8>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 0307 	and.w	r3, r3, #7
 8005d50:	683a      	ldr	r2, [r7, #0]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d20c      	bcs.n	8005d70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d56:	4b22      	ldr	r3, [pc, #136]	; (8005de0 <HAL_RCC_ClockConfig+0x1b8>)
 8005d58:	683a      	ldr	r2, [r7, #0]
 8005d5a:	b2d2      	uxtb	r2, r2
 8005d5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d5e:	4b20      	ldr	r3, [pc, #128]	; (8005de0 <HAL_RCC_ClockConfig+0x1b8>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 0307 	and.w	r3, r3, #7
 8005d66:	683a      	ldr	r2, [r7, #0]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d001      	beq.n	8005d70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e032      	b.n	8005dd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0304 	and.w	r3, r3, #4
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d008      	beq.n	8005d8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d7c:	4b19      	ldr	r3, [pc, #100]	; (8005de4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	4916      	ldr	r1, [pc, #88]	; (8005de4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 0308 	and.w	r3, r3, #8
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d009      	beq.n	8005dae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d9a:	4b12      	ldr	r3, [pc, #72]	; (8005de4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	00db      	lsls	r3, r3, #3
 8005da8:	490e      	ldr	r1, [pc, #56]	; (8005de4 <HAL_RCC_ClockConfig+0x1bc>)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005dae:	f000 f821 	bl	8005df4 <HAL_RCC_GetSysClockFreq>
 8005db2:	4602      	mov	r2, r0
 8005db4:	4b0b      	ldr	r3, [pc, #44]	; (8005de4 <HAL_RCC_ClockConfig+0x1bc>)
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	091b      	lsrs	r3, r3, #4
 8005dba:	f003 030f 	and.w	r3, r3, #15
 8005dbe:	490a      	ldr	r1, [pc, #40]	; (8005de8 <HAL_RCC_ClockConfig+0x1c0>)
 8005dc0:	5ccb      	ldrb	r3, [r1, r3]
 8005dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8005dc6:	4a09      	ldr	r2, [pc, #36]	; (8005dec <HAL_RCC_ClockConfig+0x1c4>)
 8005dc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005dca:	4b09      	ldr	r3, [pc, #36]	; (8005df0 <HAL_RCC_ClockConfig+0x1c8>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f7fd ffba 	bl	8003d48 <HAL_InitTick>

  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3710      	adds	r7, #16
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	40023c00 	.word	0x40023c00
 8005de4:	40023800 	.word	0x40023800
 8005de8:	0800d240 	.word	0x0800d240
 8005dec:	20000030 	.word	0x20000030
 8005df0:	20000034 	.word	0x20000034

08005df4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005df4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005df8:	b094      	sub	sp, #80	; 0x50
 8005dfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	647b      	str	r3, [r7, #68]	; 0x44
 8005e00:	2300      	movs	r3, #0
 8005e02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e04:	2300      	movs	r3, #0
 8005e06:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e0c:	4b79      	ldr	r3, [pc, #484]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f003 030c 	and.w	r3, r3, #12
 8005e14:	2b08      	cmp	r3, #8
 8005e16:	d00d      	beq.n	8005e34 <HAL_RCC_GetSysClockFreq+0x40>
 8005e18:	2b08      	cmp	r3, #8
 8005e1a:	f200 80e1 	bhi.w	8005fe0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d002      	beq.n	8005e28 <HAL_RCC_GetSysClockFreq+0x34>
 8005e22:	2b04      	cmp	r3, #4
 8005e24:	d003      	beq.n	8005e2e <HAL_RCC_GetSysClockFreq+0x3a>
 8005e26:	e0db      	b.n	8005fe0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e28:	4b73      	ldr	r3, [pc, #460]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005e2a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005e2c:	e0db      	b.n	8005fe6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e2e:	4b73      	ldr	r3, [pc, #460]	; (8005ffc <HAL_RCC_GetSysClockFreq+0x208>)
 8005e30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005e32:	e0d8      	b.n	8005fe6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e34:	4b6f      	ldr	r3, [pc, #444]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e3c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e3e:	4b6d      	ldr	r3, [pc, #436]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d063      	beq.n	8005f12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e4a:	4b6a      	ldr	r3, [pc, #424]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	099b      	lsrs	r3, r3, #6
 8005e50:	2200      	movs	r2, #0
 8005e52:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e54:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e5c:	633b      	str	r3, [r7, #48]	; 0x30
 8005e5e:	2300      	movs	r3, #0
 8005e60:	637b      	str	r3, [r7, #52]	; 0x34
 8005e62:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005e66:	4622      	mov	r2, r4
 8005e68:	462b      	mov	r3, r5
 8005e6a:	f04f 0000 	mov.w	r0, #0
 8005e6e:	f04f 0100 	mov.w	r1, #0
 8005e72:	0159      	lsls	r1, r3, #5
 8005e74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e78:	0150      	lsls	r0, r2, #5
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	4621      	mov	r1, r4
 8005e80:	1a51      	subs	r1, r2, r1
 8005e82:	6139      	str	r1, [r7, #16]
 8005e84:	4629      	mov	r1, r5
 8005e86:	eb63 0301 	sbc.w	r3, r3, r1
 8005e8a:	617b      	str	r3, [r7, #20]
 8005e8c:	f04f 0200 	mov.w	r2, #0
 8005e90:	f04f 0300 	mov.w	r3, #0
 8005e94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e98:	4659      	mov	r1, fp
 8005e9a:	018b      	lsls	r3, r1, #6
 8005e9c:	4651      	mov	r1, sl
 8005e9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005ea2:	4651      	mov	r1, sl
 8005ea4:	018a      	lsls	r2, r1, #6
 8005ea6:	4651      	mov	r1, sl
 8005ea8:	ebb2 0801 	subs.w	r8, r2, r1
 8005eac:	4659      	mov	r1, fp
 8005eae:	eb63 0901 	sbc.w	r9, r3, r1
 8005eb2:	f04f 0200 	mov.w	r2, #0
 8005eb6:	f04f 0300 	mov.w	r3, #0
 8005eba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ebe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ec2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ec6:	4690      	mov	r8, r2
 8005ec8:	4699      	mov	r9, r3
 8005eca:	4623      	mov	r3, r4
 8005ecc:	eb18 0303 	adds.w	r3, r8, r3
 8005ed0:	60bb      	str	r3, [r7, #8]
 8005ed2:	462b      	mov	r3, r5
 8005ed4:	eb49 0303 	adc.w	r3, r9, r3
 8005ed8:	60fb      	str	r3, [r7, #12]
 8005eda:	f04f 0200 	mov.w	r2, #0
 8005ede:	f04f 0300 	mov.w	r3, #0
 8005ee2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005ee6:	4629      	mov	r1, r5
 8005ee8:	024b      	lsls	r3, r1, #9
 8005eea:	4621      	mov	r1, r4
 8005eec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005ef0:	4621      	mov	r1, r4
 8005ef2:	024a      	lsls	r2, r1, #9
 8005ef4:	4610      	mov	r0, r2
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005efa:	2200      	movs	r2, #0
 8005efc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005efe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f04:	f7fa fe50 	bl	8000ba8 <__aeabi_uldivmod>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f10:	e058      	b.n	8005fc4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f12:	4b38      	ldr	r3, [pc, #224]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	099b      	lsrs	r3, r3, #6
 8005f18:	2200      	movs	r2, #0
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	4611      	mov	r1, r2
 8005f1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005f22:	623b      	str	r3, [r7, #32]
 8005f24:	2300      	movs	r3, #0
 8005f26:	627b      	str	r3, [r7, #36]	; 0x24
 8005f28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005f2c:	4642      	mov	r2, r8
 8005f2e:	464b      	mov	r3, r9
 8005f30:	f04f 0000 	mov.w	r0, #0
 8005f34:	f04f 0100 	mov.w	r1, #0
 8005f38:	0159      	lsls	r1, r3, #5
 8005f3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f3e:	0150      	lsls	r0, r2, #5
 8005f40:	4602      	mov	r2, r0
 8005f42:	460b      	mov	r3, r1
 8005f44:	4641      	mov	r1, r8
 8005f46:	ebb2 0a01 	subs.w	sl, r2, r1
 8005f4a:	4649      	mov	r1, r9
 8005f4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005f50:	f04f 0200 	mov.w	r2, #0
 8005f54:	f04f 0300 	mov.w	r3, #0
 8005f58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005f5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005f60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005f64:	ebb2 040a 	subs.w	r4, r2, sl
 8005f68:	eb63 050b 	sbc.w	r5, r3, fp
 8005f6c:	f04f 0200 	mov.w	r2, #0
 8005f70:	f04f 0300 	mov.w	r3, #0
 8005f74:	00eb      	lsls	r3, r5, #3
 8005f76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f7a:	00e2      	lsls	r2, r4, #3
 8005f7c:	4614      	mov	r4, r2
 8005f7e:	461d      	mov	r5, r3
 8005f80:	4643      	mov	r3, r8
 8005f82:	18e3      	adds	r3, r4, r3
 8005f84:	603b      	str	r3, [r7, #0]
 8005f86:	464b      	mov	r3, r9
 8005f88:	eb45 0303 	adc.w	r3, r5, r3
 8005f8c:	607b      	str	r3, [r7, #4]
 8005f8e:	f04f 0200 	mov.w	r2, #0
 8005f92:	f04f 0300 	mov.w	r3, #0
 8005f96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005f9a:	4629      	mov	r1, r5
 8005f9c:	028b      	lsls	r3, r1, #10
 8005f9e:	4621      	mov	r1, r4
 8005fa0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005fa4:	4621      	mov	r1, r4
 8005fa6:	028a      	lsls	r2, r1, #10
 8005fa8:	4610      	mov	r0, r2
 8005faa:	4619      	mov	r1, r3
 8005fac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fae:	2200      	movs	r2, #0
 8005fb0:	61bb      	str	r3, [r7, #24]
 8005fb2:	61fa      	str	r2, [r7, #28]
 8005fb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fb8:	f7fa fdf6 	bl	8000ba8 <__aeabi_uldivmod>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005fc4:	4b0b      	ldr	r3, [pc, #44]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	0c1b      	lsrs	r3, r3, #16
 8005fca:	f003 0303 	and.w	r3, r3, #3
 8005fce:	3301      	adds	r3, #1
 8005fd0:	005b      	lsls	r3, r3, #1
 8005fd2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005fd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005fd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fdc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005fde:	e002      	b.n	8005fe6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005fe0:	4b05      	ldr	r3, [pc, #20]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005fe2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005fe4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005fe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3750      	adds	r7, #80	; 0x50
 8005fec:	46bd      	mov	sp, r7
 8005fee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ff2:	bf00      	nop
 8005ff4:	40023800 	.word	0x40023800
 8005ff8:	00f42400 	.word	0x00f42400
 8005ffc:	007a1200 	.word	0x007a1200

08006000 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006000:	b480      	push	{r7}
 8006002:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006004:	4b03      	ldr	r3, [pc, #12]	; (8006014 <HAL_RCC_GetHCLKFreq+0x14>)
 8006006:	681b      	ldr	r3, [r3, #0]
}
 8006008:	4618      	mov	r0, r3
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	20000030 	.word	0x20000030

08006018 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800601c:	f7ff fff0 	bl	8006000 <HAL_RCC_GetHCLKFreq>
 8006020:	4602      	mov	r2, r0
 8006022:	4b05      	ldr	r3, [pc, #20]	; (8006038 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	0a9b      	lsrs	r3, r3, #10
 8006028:	f003 0307 	and.w	r3, r3, #7
 800602c:	4903      	ldr	r1, [pc, #12]	; (800603c <HAL_RCC_GetPCLK1Freq+0x24>)
 800602e:	5ccb      	ldrb	r3, [r1, r3]
 8006030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006034:	4618      	mov	r0, r3
 8006036:	bd80      	pop	{r7, pc}
 8006038:	40023800 	.word	0x40023800
 800603c:	0800d250 	.word	0x0800d250

08006040 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006044:	f7ff ffdc 	bl	8006000 <HAL_RCC_GetHCLKFreq>
 8006048:	4602      	mov	r2, r0
 800604a:	4b05      	ldr	r3, [pc, #20]	; (8006060 <HAL_RCC_GetPCLK2Freq+0x20>)
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	0b5b      	lsrs	r3, r3, #13
 8006050:	f003 0307 	and.w	r3, r3, #7
 8006054:	4903      	ldr	r1, [pc, #12]	; (8006064 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006056:	5ccb      	ldrb	r3, [r1, r3]
 8006058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800605c:	4618      	mov	r0, r3
 800605e:	bd80      	pop	{r7, pc}
 8006060:	40023800 	.word	0x40023800
 8006064:	0800d250 	.word	0x0800d250

08006068 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	220f      	movs	r2, #15
 8006076:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006078:	4b12      	ldr	r3, [pc, #72]	; (80060c4 <HAL_RCC_GetClockConfig+0x5c>)
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	f003 0203 	and.w	r2, r3, #3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006084:	4b0f      	ldr	r3, [pc, #60]	; (80060c4 <HAL_RCC_GetClockConfig+0x5c>)
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006090:	4b0c      	ldr	r3, [pc, #48]	; (80060c4 <HAL_RCC_GetClockConfig+0x5c>)
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800609c:	4b09      	ldr	r3, [pc, #36]	; (80060c4 <HAL_RCC_GetClockConfig+0x5c>)
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	08db      	lsrs	r3, r3, #3
 80060a2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80060aa:	4b07      	ldr	r3, [pc, #28]	; (80060c8 <HAL_RCC_GetClockConfig+0x60>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 0207 	and.w	r2, r3, #7
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	601a      	str	r2, [r3, #0]
}
 80060b6:	bf00      	nop
 80060b8:	370c      	adds	r7, #12
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	40023800 	.word	0x40023800
 80060c8:	40023c00 	.word	0x40023c00

080060cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d101      	bne.n	80060de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e041      	b.n	8006162 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d106      	bne.n	80060f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 f839 	bl	800616a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2202      	movs	r2, #2
 80060fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	3304      	adds	r3, #4
 8006108:	4619      	mov	r1, r3
 800610a:	4610      	mov	r0, r2
 800610c:	f000 f9d8 	bl	80064c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3708      	adds	r7, #8
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800616a:	b480      	push	{r7}
 800616c:	b083      	sub	sp, #12
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006172:	bf00      	nop
 8006174:	370c      	adds	r7, #12
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
	...

08006180 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006180:	b480      	push	{r7}
 8006182:	b085      	sub	sp, #20
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800618e:	b2db      	uxtb	r3, r3
 8006190:	2b01      	cmp	r3, #1
 8006192:	d001      	beq.n	8006198 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e04e      	b.n	8006236 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2202      	movs	r2, #2
 800619c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68da      	ldr	r2, [r3, #12]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f042 0201 	orr.w	r2, r2, #1
 80061ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a23      	ldr	r2, [pc, #140]	; (8006244 <HAL_TIM_Base_Start_IT+0xc4>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d022      	beq.n	8006200 <HAL_TIM_Base_Start_IT+0x80>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061c2:	d01d      	beq.n	8006200 <HAL_TIM_Base_Start_IT+0x80>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a1f      	ldr	r2, [pc, #124]	; (8006248 <HAL_TIM_Base_Start_IT+0xc8>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d018      	beq.n	8006200 <HAL_TIM_Base_Start_IT+0x80>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a1e      	ldr	r2, [pc, #120]	; (800624c <HAL_TIM_Base_Start_IT+0xcc>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d013      	beq.n	8006200 <HAL_TIM_Base_Start_IT+0x80>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a1c      	ldr	r2, [pc, #112]	; (8006250 <HAL_TIM_Base_Start_IT+0xd0>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d00e      	beq.n	8006200 <HAL_TIM_Base_Start_IT+0x80>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a1b      	ldr	r2, [pc, #108]	; (8006254 <HAL_TIM_Base_Start_IT+0xd4>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d009      	beq.n	8006200 <HAL_TIM_Base_Start_IT+0x80>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a19      	ldr	r2, [pc, #100]	; (8006258 <HAL_TIM_Base_Start_IT+0xd8>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d004      	beq.n	8006200 <HAL_TIM_Base_Start_IT+0x80>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a18      	ldr	r2, [pc, #96]	; (800625c <HAL_TIM_Base_Start_IT+0xdc>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d111      	bne.n	8006224 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	f003 0307 	and.w	r3, r3, #7
 800620a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2b06      	cmp	r3, #6
 8006210:	d010      	beq.n	8006234 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f042 0201 	orr.w	r2, r2, #1
 8006220:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006222:	e007      	b.n	8006234 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f042 0201 	orr.w	r2, r2, #1
 8006232:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3714      	adds	r7, #20
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	40010000 	.word	0x40010000
 8006248:	40000400 	.word	0x40000400
 800624c:	40000800 	.word	0x40000800
 8006250:	40000c00 	.word	0x40000c00
 8006254:	40010400 	.word	0x40010400
 8006258:	40014000 	.word	0x40014000
 800625c:	40001800 	.word	0x40001800

08006260 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	f003 0302 	and.w	r3, r3, #2
 8006272:	2b02      	cmp	r3, #2
 8006274:	d122      	bne.n	80062bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	f003 0302 	and.w	r3, r3, #2
 8006280:	2b02      	cmp	r3, #2
 8006282:	d11b      	bne.n	80062bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f06f 0202 	mvn.w	r2, #2
 800628c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2201      	movs	r2, #1
 8006292:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	f003 0303 	and.w	r3, r3, #3
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d003      	beq.n	80062aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 f8ee 	bl	8006484 <HAL_TIM_IC_CaptureCallback>
 80062a8:	e005      	b.n	80062b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f8e0 	bl	8006470 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 f8f1 	bl	8006498 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	f003 0304 	and.w	r3, r3, #4
 80062c6:	2b04      	cmp	r3, #4
 80062c8:	d122      	bne.n	8006310 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	f003 0304 	and.w	r3, r3, #4
 80062d4:	2b04      	cmp	r3, #4
 80062d6:	d11b      	bne.n	8006310 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f06f 0204 	mvn.w	r2, #4
 80062e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2202      	movs	r2, #2
 80062e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d003      	beq.n	80062fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 f8c4 	bl	8006484 <HAL_TIM_IC_CaptureCallback>
 80062fc:	e005      	b.n	800630a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 f8b6 	bl	8006470 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 f8c7 	bl	8006498 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	f003 0308 	and.w	r3, r3, #8
 800631a:	2b08      	cmp	r3, #8
 800631c:	d122      	bne.n	8006364 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	f003 0308 	and.w	r3, r3, #8
 8006328:	2b08      	cmp	r3, #8
 800632a:	d11b      	bne.n	8006364 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f06f 0208 	mvn.w	r2, #8
 8006334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2204      	movs	r2, #4
 800633a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	69db      	ldr	r3, [r3, #28]
 8006342:	f003 0303 	and.w	r3, r3, #3
 8006346:	2b00      	cmp	r3, #0
 8006348:	d003      	beq.n	8006352 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 f89a 	bl	8006484 <HAL_TIM_IC_CaptureCallback>
 8006350:	e005      	b.n	800635e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 f88c 	bl	8006470 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 f89d 	bl	8006498 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	f003 0310 	and.w	r3, r3, #16
 800636e:	2b10      	cmp	r3, #16
 8006370:	d122      	bne.n	80063b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	f003 0310 	and.w	r3, r3, #16
 800637c:	2b10      	cmp	r3, #16
 800637e:	d11b      	bne.n	80063b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f06f 0210 	mvn.w	r2, #16
 8006388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2208      	movs	r2, #8
 800638e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	69db      	ldr	r3, [r3, #28]
 8006396:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800639a:	2b00      	cmp	r3, #0
 800639c:	d003      	beq.n	80063a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 f870 	bl	8006484 <HAL_TIM_IC_CaptureCallback>
 80063a4:	e005      	b.n	80063b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f862 	bl	8006470 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 f873 	bl	8006498 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	f003 0301 	and.w	r3, r3, #1
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d10e      	bne.n	80063e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	f003 0301 	and.w	r3, r3, #1
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d107      	bne.n	80063e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f06f 0201 	mvn.w	r2, #1
 80063dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f7fd fbda 	bl	8003b98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063ee:	2b80      	cmp	r3, #128	; 0x80
 80063f0:	d10e      	bne.n	8006410 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063fc:	2b80      	cmp	r3, #128	; 0x80
 80063fe:	d107      	bne.n	8006410 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 f902 	bl	8006614 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800641a:	2b40      	cmp	r3, #64	; 0x40
 800641c:	d10e      	bne.n	800643c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006428:	2b40      	cmp	r3, #64	; 0x40
 800642a:	d107      	bne.n	800643c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 f838 	bl	80064ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	f003 0320 	and.w	r3, r3, #32
 8006446:	2b20      	cmp	r3, #32
 8006448:	d10e      	bne.n	8006468 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	f003 0320 	and.w	r3, r3, #32
 8006454:	2b20      	cmp	r3, #32
 8006456:	d107      	bne.n	8006468 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f06f 0220 	mvn.w	r2, #32
 8006460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 f8cc 	bl	8006600 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006468:	bf00      	nop
 800646a:	3708      	adds	r7, #8
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006478:	bf00      	nop
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800648c:	bf00      	nop
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064a0:	bf00      	nop
 80064a2:	370c      	adds	r7, #12
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064b4:	bf00      	nop
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b085      	sub	sp, #20
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4a40      	ldr	r2, [pc, #256]	; (80065d4 <TIM_Base_SetConfig+0x114>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d013      	beq.n	8006500 <TIM_Base_SetConfig+0x40>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064de:	d00f      	beq.n	8006500 <TIM_Base_SetConfig+0x40>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a3d      	ldr	r2, [pc, #244]	; (80065d8 <TIM_Base_SetConfig+0x118>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d00b      	beq.n	8006500 <TIM_Base_SetConfig+0x40>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a3c      	ldr	r2, [pc, #240]	; (80065dc <TIM_Base_SetConfig+0x11c>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d007      	beq.n	8006500 <TIM_Base_SetConfig+0x40>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a3b      	ldr	r2, [pc, #236]	; (80065e0 <TIM_Base_SetConfig+0x120>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d003      	beq.n	8006500 <TIM_Base_SetConfig+0x40>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a3a      	ldr	r2, [pc, #232]	; (80065e4 <TIM_Base_SetConfig+0x124>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d108      	bne.n	8006512 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006506:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	4313      	orrs	r3, r2
 8006510:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a2f      	ldr	r2, [pc, #188]	; (80065d4 <TIM_Base_SetConfig+0x114>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d02b      	beq.n	8006572 <TIM_Base_SetConfig+0xb2>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006520:	d027      	beq.n	8006572 <TIM_Base_SetConfig+0xb2>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a2c      	ldr	r2, [pc, #176]	; (80065d8 <TIM_Base_SetConfig+0x118>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d023      	beq.n	8006572 <TIM_Base_SetConfig+0xb2>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a2b      	ldr	r2, [pc, #172]	; (80065dc <TIM_Base_SetConfig+0x11c>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d01f      	beq.n	8006572 <TIM_Base_SetConfig+0xb2>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a2a      	ldr	r2, [pc, #168]	; (80065e0 <TIM_Base_SetConfig+0x120>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d01b      	beq.n	8006572 <TIM_Base_SetConfig+0xb2>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a29      	ldr	r2, [pc, #164]	; (80065e4 <TIM_Base_SetConfig+0x124>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d017      	beq.n	8006572 <TIM_Base_SetConfig+0xb2>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a28      	ldr	r2, [pc, #160]	; (80065e8 <TIM_Base_SetConfig+0x128>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d013      	beq.n	8006572 <TIM_Base_SetConfig+0xb2>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a27      	ldr	r2, [pc, #156]	; (80065ec <TIM_Base_SetConfig+0x12c>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d00f      	beq.n	8006572 <TIM_Base_SetConfig+0xb2>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a26      	ldr	r2, [pc, #152]	; (80065f0 <TIM_Base_SetConfig+0x130>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d00b      	beq.n	8006572 <TIM_Base_SetConfig+0xb2>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a25      	ldr	r2, [pc, #148]	; (80065f4 <TIM_Base_SetConfig+0x134>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d007      	beq.n	8006572 <TIM_Base_SetConfig+0xb2>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a24      	ldr	r2, [pc, #144]	; (80065f8 <TIM_Base_SetConfig+0x138>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d003      	beq.n	8006572 <TIM_Base_SetConfig+0xb2>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a23      	ldr	r2, [pc, #140]	; (80065fc <TIM_Base_SetConfig+0x13c>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d108      	bne.n	8006584 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006578:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	4313      	orrs	r3, r2
 8006582:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	695b      	ldr	r3, [r3, #20]
 800658e:	4313      	orrs	r3, r2
 8006590:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	689a      	ldr	r2, [r3, #8]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4a0a      	ldr	r2, [pc, #40]	; (80065d4 <TIM_Base_SetConfig+0x114>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d003      	beq.n	80065b8 <TIM_Base_SetConfig+0xf8>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a0c      	ldr	r2, [pc, #48]	; (80065e4 <TIM_Base_SetConfig+0x124>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d103      	bne.n	80065c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	691a      	ldr	r2, [r3, #16]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	615a      	str	r2, [r3, #20]
}
 80065c6:	bf00      	nop
 80065c8:	3714      	adds	r7, #20
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop
 80065d4:	40010000 	.word	0x40010000
 80065d8:	40000400 	.word	0x40000400
 80065dc:	40000800 	.word	0x40000800
 80065e0:	40000c00 	.word	0x40000c00
 80065e4:	40010400 	.word	0x40010400
 80065e8:	40014000 	.word	0x40014000
 80065ec:	40014400 	.word	0x40014400
 80065f0:	40014800 	.word	0x40014800
 80065f4:	40001800 	.word	0x40001800
 80065f8:	40001c00 	.word	0x40001c00
 80065fc:	40002000 	.word	0x40002000

08006600 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006608:	bf00      	nop
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800661c:	bf00      	nop
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d101      	bne.n	800663a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e03f      	b.n	80066ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2b00      	cmp	r3, #0
 8006644:	d106      	bne.n	8006654 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f7fd fb2a 	bl	8003ca8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2224      	movs	r2, #36	; 0x24
 8006658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68da      	ldr	r2, [r3, #12]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800666a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 fd7b 	bl	8007168 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	691a      	ldr	r2, [r3, #16]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006680:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	695a      	ldr	r2, [r3, #20]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006690:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68da      	ldr	r2, [r3, #12]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2220      	movs	r2, #32
 80066ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2220      	movs	r2, #32
 80066b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3708      	adds	r7, #8
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}

080066c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066c2:	b580      	push	{r7, lr}
 80066c4:	b08a      	sub	sp, #40	; 0x28
 80066c6:	af02      	add	r7, sp, #8
 80066c8:	60f8      	str	r0, [r7, #12]
 80066ca:	60b9      	str	r1, [r7, #8]
 80066cc:	603b      	str	r3, [r7, #0]
 80066ce:	4613      	mov	r3, r2
 80066d0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80066d2:	2300      	movs	r3, #0
 80066d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	2b20      	cmp	r3, #32
 80066e0:	d17c      	bne.n	80067dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d002      	beq.n	80066ee <HAL_UART_Transmit+0x2c>
 80066e8:	88fb      	ldrh	r3, [r7, #6]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d101      	bne.n	80066f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e075      	b.n	80067de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d101      	bne.n	8006700 <HAL_UART_Transmit+0x3e>
 80066fc:	2302      	movs	r3, #2
 80066fe:	e06e      	b.n	80067de <HAL_UART_Transmit+0x11c>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2200      	movs	r2, #0
 800670c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2221      	movs	r2, #33	; 0x21
 8006712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006716:	f7fd fcf5 	bl	8004104 <HAL_GetTick>
 800671a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	88fa      	ldrh	r2, [r7, #6]
 8006720:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	88fa      	ldrh	r2, [r7, #6]
 8006726:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006730:	d108      	bne.n	8006744 <HAL_UART_Transmit+0x82>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d104      	bne.n	8006744 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800673a:	2300      	movs	r3, #0
 800673c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	61bb      	str	r3, [r7, #24]
 8006742:	e003      	b.n	800674c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006748:	2300      	movs	r3, #0
 800674a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006754:	e02a      	b.n	80067ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	9300      	str	r3, [sp, #0]
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	2200      	movs	r2, #0
 800675e:	2180      	movs	r1, #128	; 0x80
 8006760:	68f8      	ldr	r0, [r7, #12]
 8006762:	f000 faf9 	bl	8006d58 <UART_WaitOnFlagUntilTimeout>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d001      	beq.n	8006770 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800676c:	2303      	movs	r3, #3
 800676e:	e036      	b.n	80067de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d10b      	bne.n	800678e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	881b      	ldrh	r3, [r3, #0]
 800677a:	461a      	mov	r2, r3
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006784:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	3302      	adds	r3, #2
 800678a:	61bb      	str	r3, [r7, #24]
 800678c:	e007      	b.n	800679e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	781a      	ldrb	r2, [r3, #0]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	3301      	adds	r3, #1
 800679c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	3b01      	subs	r3, #1
 80067a6:	b29a      	uxth	r2, r3
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d1cf      	bne.n	8006756 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	9300      	str	r3, [sp, #0]
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	2200      	movs	r2, #0
 80067be:	2140      	movs	r1, #64	; 0x40
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f000 fac9 	bl	8006d58 <UART_WaitOnFlagUntilTimeout>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d001      	beq.n	80067d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e006      	b.n	80067de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2220      	movs	r2, #32
 80067d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80067d8:	2300      	movs	r3, #0
 80067da:	e000      	b.n	80067de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80067dc:	2302      	movs	r3, #2
  }
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3720      	adds	r7, #32
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
	...

080067e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b0ba      	sub	sp, #232	; 0xe8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800680e:	2300      	movs	r3, #0
 8006810:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006814:	2300      	movs	r3, #0
 8006816:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800681a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800681e:	f003 030f 	and.w	r3, r3, #15
 8006822:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006826:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800682a:	2b00      	cmp	r3, #0
 800682c:	d10f      	bne.n	800684e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800682e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006832:	f003 0320 	and.w	r3, r3, #32
 8006836:	2b00      	cmp	r3, #0
 8006838:	d009      	beq.n	800684e <HAL_UART_IRQHandler+0x66>
 800683a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800683e:	f003 0320 	and.w	r3, r3, #32
 8006842:	2b00      	cmp	r3, #0
 8006844:	d003      	beq.n	800684e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 fbd3 	bl	8006ff2 <UART_Receive_IT>
      return;
 800684c:	e256      	b.n	8006cfc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800684e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006852:	2b00      	cmp	r3, #0
 8006854:	f000 80de 	beq.w	8006a14 <HAL_UART_IRQHandler+0x22c>
 8006858:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800685c:	f003 0301 	and.w	r3, r3, #1
 8006860:	2b00      	cmp	r3, #0
 8006862:	d106      	bne.n	8006872 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006868:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800686c:	2b00      	cmp	r3, #0
 800686e:	f000 80d1 	beq.w	8006a14 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006876:	f003 0301 	and.w	r3, r3, #1
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00b      	beq.n	8006896 <HAL_UART_IRQHandler+0xae>
 800687e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006886:	2b00      	cmp	r3, #0
 8006888:	d005      	beq.n	8006896 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688e:	f043 0201 	orr.w	r2, r3, #1
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800689a:	f003 0304 	and.w	r3, r3, #4
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00b      	beq.n	80068ba <HAL_UART_IRQHandler+0xd2>
 80068a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d005      	beq.n	80068ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b2:	f043 0202 	orr.w	r2, r3, #2
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068be:	f003 0302 	and.w	r3, r3, #2
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d00b      	beq.n	80068de <HAL_UART_IRQHandler+0xf6>
 80068c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068ca:	f003 0301 	and.w	r3, r3, #1
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d005      	beq.n	80068de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d6:	f043 0204 	orr.w	r2, r3, #4
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80068de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068e2:	f003 0308 	and.w	r3, r3, #8
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d011      	beq.n	800690e <HAL_UART_IRQHandler+0x126>
 80068ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068ee:	f003 0320 	and.w	r3, r3, #32
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d105      	bne.n	8006902 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80068f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068fa:	f003 0301 	and.w	r3, r3, #1
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d005      	beq.n	800690e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006906:	f043 0208 	orr.w	r2, r3, #8
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006912:	2b00      	cmp	r3, #0
 8006914:	f000 81ed 	beq.w	8006cf2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800691c:	f003 0320 	and.w	r3, r3, #32
 8006920:	2b00      	cmp	r3, #0
 8006922:	d008      	beq.n	8006936 <HAL_UART_IRQHandler+0x14e>
 8006924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006928:	f003 0320 	and.w	r3, r3, #32
 800692c:	2b00      	cmp	r3, #0
 800692e:	d002      	beq.n	8006936 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 fb5e 	bl	8006ff2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	695b      	ldr	r3, [r3, #20]
 800693c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006940:	2b40      	cmp	r3, #64	; 0x40
 8006942:	bf0c      	ite	eq
 8006944:	2301      	moveq	r3, #1
 8006946:	2300      	movne	r3, #0
 8006948:	b2db      	uxtb	r3, r3
 800694a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006952:	f003 0308 	and.w	r3, r3, #8
 8006956:	2b00      	cmp	r3, #0
 8006958:	d103      	bne.n	8006962 <HAL_UART_IRQHandler+0x17a>
 800695a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800695e:	2b00      	cmp	r3, #0
 8006960:	d04f      	beq.n	8006a02 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 fa66 	bl	8006e34 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	695b      	ldr	r3, [r3, #20]
 800696e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006972:	2b40      	cmp	r3, #64	; 0x40
 8006974:	d141      	bne.n	80069fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	3314      	adds	r3, #20
 800697c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006980:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006984:	e853 3f00 	ldrex	r3, [r3]
 8006988:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800698c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006990:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006994:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	3314      	adds	r3, #20
 800699e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80069a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80069a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80069ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80069b2:	e841 2300 	strex	r3, r2, [r1]
 80069b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80069ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1d9      	bne.n	8006976 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d013      	beq.n	80069f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ce:	4a7d      	ldr	r2, [pc, #500]	; (8006bc4 <HAL_UART_IRQHandler+0x3dc>)
 80069d0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d6:	4618      	mov	r0, r3
 80069d8:	f7fd fd16 	bl	8004408 <HAL_DMA_Abort_IT>
 80069dc:	4603      	mov	r3, r0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d016      	beq.n	8006a10 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80069ec:	4610      	mov	r0, r2
 80069ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069f0:	e00e      	b.n	8006a10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 f99a 	bl	8006d2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069f8:	e00a      	b.n	8006a10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 f996 	bl	8006d2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a00:	e006      	b.n	8006a10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 f992 	bl	8006d2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006a0e:	e170      	b.n	8006cf2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a10:	bf00      	nop
    return;
 8006a12:	e16e      	b.n	8006cf2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	f040 814a 	bne.w	8006cb2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a22:	f003 0310 	and.w	r3, r3, #16
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	f000 8143 	beq.w	8006cb2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a30:	f003 0310 	and.w	r3, r3, #16
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	f000 813c 	beq.w	8006cb2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	60bb      	str	r3, [r7, #8]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	60bb      	str	r3, [r7, #8]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	60bb      	str	r3, [r7, #8]
 8006a4e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	695b      	ldr	r3, [r3, #20]
 8006a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a5a:	2b40      	cmp	r3, #64	; 0x40
 8006a5c:	f040 80b4 	bne.w	8006bc8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a6c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f000 8140 	beq.w	8006cf6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	f080 8139 	bcs.w	8006cf6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a8a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a90:	69db      	ldr	r3, [r3, #28]
 8006a92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a96:	f000 8088 	beq.w	8006baa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	330c      	adds	r3, #12
 8006aa0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006aa8:	e853 3f00 	ldrex	r3, [r3]
 8006aac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006ab0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ab4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ab8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	330c      	adds	r3, #12
 8006ac2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006ac6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006aca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ace:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006ad2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006ad6:	e841 2300 	strex	r3, r2, [r1]
 8006ada:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006ade:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d1d9      	bne.n	8006a9a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	3314      	adds	r3, #20
 8006aec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006af0:	e853 3f00 	ldrex	r3, [r3]
 8006af4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006af6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006af8:	f023 0301 	bic.w	r3, r3, #1
 8006afc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	3314      	adds	r3, #20
 8006b06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006b0a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006b0e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b10:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006b12:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006b16:	e841 2300 	strex	r3, r2, [r1]
 8006b1a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006b1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1e1      	bne.n	8006ae6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	3314      	adds	r3, #20
 8006b28:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b2c:	e853 3f00 	ldrex	r3, [r3]
 8006b30:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006b32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	3314      	adds	r3, #20
 8006b42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006b46:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006b48:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006b4c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006b4e:	e841 2300 	strex	r3, r2, [r1]
 8006b52:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006b54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1e3      	bne.n	8006b22 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2220      	movs	r2, #32
 8006b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	330c      	adds	r3, #12
 8006b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b72:	e853 3f00 	ldrex	r3, [r3]
 8006b76:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b7a:	f023 0310 	bic.w	r3, r3, #16
 8006b7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	330c      	adds	r3, #12
 8006b88:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006b8c:	65ba      	str	r2, [r7, #88]	; 0x58
 8006b8e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b94:	e841 2300 	strex	r3, r2, [r1]
 8006b98:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006b9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d1e3      	bne.n	8006b68 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f7fd fbbf 	bl	8004328 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	4619      	mov	r1, r3
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 f8c0 	bl	8006d40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006bc0:	e099      	b.n	8006cf6 <HAL_UART_IRQHandler+0x50e>
 8006bc2:	bf00      	nop
 8006bc4:	08006efb 	.word	0x08006efb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	f000 808b 	beq.w	8006cfa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006be4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	f000 8086 	beq.w	8006cfa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	330c      	adds	r3, #12
 8006bf4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf8:	e853 3f00 	ldrex	r3, [r3]
 8006bfc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	330c      	adds	r3, #12
 8006c0e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006c12:	647a      	str	r2, [r7, #68]	; 0x44
 8006c14:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c1a:	e841 2300 	strex	r3, r2, [r1]
 8006c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d1e3      	bne.n	8006bee <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	3314      	adds	r3, #20
 8006c2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c30:	e853 3f00 	ldrex	r3, [r3]
 8006c34:	623b      	str	r3, [r7, #32]
   return(result);
 8006c36:	6a3b      	ldr	r3, [r7, #32]
 8006c38:	f023 0301 	bic.w	r3, r3, #1
 8006c3c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	3314      	adds	r3, #20
 8006c46:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006c4a:	633a      	str	r2, [r7, #48]	; 0x30
 8006c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c52:	e841 2300 	strex	r3, r2, [r1]
 8006c56:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d1e3      	bne.n	8006c26 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2220      	movs	r2, #32
 8006c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	330c      	adds	r3, #12
 8006c72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	e853 3f00 	ldrex	r3, [r3]
 8006c7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f023 0310 	bic.w	r3, r3, #16
 8006c82:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	330c      	adds	r3, #12
 8006c8c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006c90:	61fa      	str	r2, [r7, #28]
 8006c92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c94:	69b9      	ldr	r1, [r7, #24]
 8006c96:	69fa      	ldr	r2, [r7, #28]
 8006c98:	e841 2300 	strex	r3, r2, [r1]
 8006c9c:	617b      	str	r3, [r7, #20]
   return(result);
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d1e3      	bne.n	8006c6c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ca4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ca8:	4619      	mov	r1, r3
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 f848 	bl	8006d40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006cb0:	e023      	b.n	8006cfa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d009      	beq.n	8006cd2 <HAL_UART_IRQHandler+0x4ea>
 8006cbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d003      	beq.n	8006cd2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 f929 	bl	8006f22 <UART_Transmit_IT>
    return;
 8006cd0:	e014      	b.n	8006cfc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d00e      	beq.n	8006cfc <HAL_UART_IRQHandler+0x514>
 8006cde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d008      	beq.n	8006cfc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 f969 	bl	8006fc2 <UART_EndTransmit_IT>
    return;
 8006cf0:	e004      	b.n	8006cfc <HAL_UART_IRQHandler+0x514>
    return;
 8006cf2:	bf00      	nop
 8006cf4:	e002      	b.n	8006cfc <HAL_UART_IRQHandler+0x514>
      return;
 8006cf6:	bf00      	nop
 8006cf8:	e000      	b.n	8006cfc <HAL_UART_IRQHandler+0x514>
      return;
 8006cfa:	bf00      	nop
  }
}
 8006cfc:	37e8      	adds	r7, #232	; 0xe8
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop

08006d04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006d0c:	bf00      	nop
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006d20:	bf00      	nop
 8006d22:	370c      	adds	r7, #12
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d34:	bf00      	nop
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	460b      	mov	r3, r1
 8006d4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d4c:	bf00      	nop
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b090      	sub	sp, #64	; 0x40
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	603b      	str	r3, [r7, #0]
 8006d64:	4613      	mov	r3, r2
 8006d66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d68:	e050      	b.n	8006e0c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d70:	d04c      	beq.n	8006e0c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006d72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d007      	beq.n	8006d88 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d78:	f7fd f9c4 	bl	8004104 <HAL_GetTick>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d241      	bcs.n	8006e0c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	330c      	adds	r3, #12
 8006d8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d92:	e853 3f00 	ldrex	r3, [r3]
 8006d96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	330c      	adds	r3, #12
 8006da6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006da8:	637a      	str	r2, [r7, #52]	; 0x34
 8006daa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006dae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006db0:	e841 2300 	strex	r3, r2, [r1]
 8006db4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d1e5      	bne.n	8006d88 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	3314      	adds	r3, #20
 8006dc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	e853 3f00 	ldrex	r3, [r3]
 8006dca:	613b      	str	r3, [r7, #16]
   return(result);
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	f023 0301 	bic.w	r3, r3, #1
 8006dd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	3314      	adds	r3, #20
 8006dda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ddc:	623a      	str	r2, [r7, #32]
 8006dde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de0:	69f9      	ldr	r1, [r7, #28]
 8006de2:	6a3a      	ldr	r2, [r7, #32]
 8006de4:	e841 2300 	strex	r3, r2, [r1]
 8006de8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d1e5      	bne.n	8006dbc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2220      	movs	r2, #32
 8006df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2220      	movs	r2, #32
 8006dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006e08:	2303      	movs	r3, #3
 8006e0a:	e00f      	b.n	8006e2c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	4013      	ands	r3, r2
 8006e16:	68ba      	ldr	r2, [r7, #8]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	bf0c      	ite	eq
 8006e1c:	2301      	moveq	r3, #1
 8006e1e:	2300      	movne	r3, #0
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	461a      	mov	r2, r3
 8006e24:	79fb      	ldrb	r3, [r7, #7]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d09f      	beq.n	8006d6a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3740      	adds	r7, #64	; 0x40
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b095      	sub	sp, #84	; 0x54
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	330c      	adds	r3, #12
 8006e42:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e46:	e853 3f00 	ldrex	r3, [r3]
 8006e4a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	330c      	adds	r3, #12
 8006e5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e5c:	643a      	str	r2, [r7, #64]	; 0x40
 8006e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e64:	e841 2300 	strex	r3, r2, [r1]
 8006e68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d1e5      	bne.n	8006e3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	3314      	adds	r3, #20
 8006e76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e78:	6a3b      	ldr	r3, [r7, #32]
 8006e7a:	e853 3f00 	ldrex	r3, [r3]
 8006e7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	f023 0301 	bic.w	r3, r3, #1
 8006e86:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	3314      	adds	r3, #20
 8006e8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e98:	e841 2300 	strex	r3, r2, [r1]
 8006e9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d1e5      	bne.n	8006e70 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d119      	bne.n	8006ee0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	330c      	adds	r3, #12
 8006eb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	e853 3f00 	ldrex	r3, [r3]
 8006eba:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	f023 0310 	bic.w	r3, r3, #16
 8006ec2:	647b      	str	r3, [r7, #68]	; 0x44
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	330c      	adds	r3, #12
 8006eca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ecc:	61ba      	str	r2, [r7, #24]
 8006ece:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed0:	6979      	ldr	r1, [r7, #20]
 8006ed2:	69ba      	ldr	r2, [r7, #24]
 8006ed4:	e841 2300 	strex	r3, r2, [r1]
 8006ed8:	613b      	str	r3, [r7, #16]
   return(result);
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d1e5      	bne.n	8006eac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2220      	movs	r2, #32
 8006ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006eee:	bf00      	nop
 8006ef0:	3754      	adds	r7, #84	; 0x54
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr

08006efa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006efa:	b580      	push	{r7, lr}
 8006efc:	b084      	sub	sp, #16
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f06:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2200      	movs	r2, #0
 8006f12:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f7ff ff09 	bl	8006d2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f1a:	bf00      	nop
 8006f1c:	3710      	adds	r7, #16
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}

08006f22 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006f22:	b480      	push	{r7}
 8006f24:	b085      	sub	sp, #20
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	2b21      	cmp	r3, #33	; 0x21
 8006f34:	d13e      	bne.n	8006fb4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f3e:	d114      	bne.n	8006f6a <UART_Transmit_IT+0x48>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	691b      	ldr	r3, [r3, #16]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d110      	bne.n	8006f6a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6a1b      	ldr	r3, [r3, #32]
 8006f4c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	881b      	ldrh	r3, [r3, #0]
 8006f52:	461a      	mov	r2, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f5c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a1b      	ldr	r3, [r3, #32]
 8006f62:	1c9a      	adds	r2, r3, #2
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	621a      	str	r2, [r3, #32]
 8006f68:	e008      	b.n	8006f7c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6a1b      	ldr	r3, [r3, #32]
 8006f6e:	1c59      	adds	r1, r3, #1
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	6211      	str	r1, [r2, #32]
 8006f74:	781a      	ldrb	r2, [r3, #0]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	3b01      	subs	r3, #1
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	4619      	mov	r1, r3
 8006f8a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d10f      	bne.n	8006fb0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	68da      	ldr	r2, [r3, #12]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f9e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	68da      	ldr	r2, [r3, #12]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	e000      	b.n	8006fb6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006fb4:	2302      	movs	r3, #2
  }
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3714      	adds	r7, #20
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr

08006fc2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b082      	sub	sp, #8
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	68da      	ldr	r2, [r3, #12]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fd8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2220      	movs	r2, #32
 8006fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f7ff fe8e 	bl	8006d04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3708      	adds	r7, #8
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b08c      	sub	sp, #48	; 0x30
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007000:	b2db      	uxtb	r3, r3
 8007002:	2b22      	cmp	r3, #34	; 0x22
 8007004:	f040 80ab 	bne.w	800715e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007010:	d117      	bne.n	8007042 <UART_Receive_IT+0x50>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d113      	bne.n	8007042 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800701a:	2300      	movs	r3, #0
 800701c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007022:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	b29b      	uxth	r3, r3
 800702c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007030:	b29a      	uxth	r2, r3
 8007032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007034:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800703a:	1c9a      	adds	r2, r3, #2
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	629a      	str	r2, [r3, #40]	; 0x28
 8007040:	e026      	b.n	8007090 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007046:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007048:	2300      	movs	r3, #0
 800704a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007054:	d007      	beq.n	8007066 <UART_Receive_IT+0x74>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d10a      	bne.n	8007074 <UART_Receive_IT+0x82>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d106      	bne.n	8007074 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	b2da      	uxtb	r2, r3
 800706e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007070:	701a      	strb	r2, [r3, #0]
 8007072:	e008      	b.n	8007086 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	b2db      	uxtb	r3, r3
 800707c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007080:	b2da      	uxtb	r2, r3
 8007082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007084:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800708a:	1c5a      	adds	r2, r3, #1
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007094:	b29b      	uxth	r3, r3
 8007096:	3b01      	subs	r3, #1
 8007098:	b29b      	uxth	r3, r3
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	4619      	mov	r1, r3
 800709e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d15a      	bne.n	800715a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68da      	ldr	r2, [r3, #12]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f022 0220 	bic.w	r2, r2, #32
 80070b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68da      	ldr	r2, [r3, #12]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80070c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	695a      	ldr	r2, [r3, #20]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f022 0201 	bic.w	r2, r2, #1
 80070d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2220      	movs	r2, #32
 80070d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d135      	bne.n	8007150 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	330c      	adds	r3, #12
 80070f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	e853 3f00 	ldrex	r3, [r3]
 80070f8:	613b      	str	r3, [r7, #16]
   return(result);
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	f023 0310 	bic.w	r3, r3, #16
 8007100:	627b      	str	r3, [r7, #36]	; 0x24
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	330c      	adds	r3, #12
 8007108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800710a:	623a      	str	r2, [r7, #32]
 800710c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800710e:	69f9      	ldr	r1, [r7, #28]
 8007110:	6a3a      	ldr	r2, [r7, #32]
 8007112:	e841 2300 	strex	r3, r2, [r1]
 8007116:	61bb      	str	r3, [r7, #24]
   return(result);
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d1e5      	bne.n	80070ea <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f003 0310 	and.w	r3, r3, #16
 8007128:	2b10      	cmp	r3, #16
 800712a:	d10a      	bne.n	8007142 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800712c:	2300      	movs	r3, #0
 800712e:	60fb      	str	r3, [r7, #12]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	60fb      	str	r3, [r7, #12]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	60fb      	str	r3, [r7, #12]
 8007140:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007146:	4619      	mov	r1, r3
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f7ff fdf9 	bl	8006d40 <HAL_UARTEx_RxEventCallback>
 800714e:	e002      	b.n	8007156 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f7ff fde1 	bl	8006d18 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007156:	2300      	movs	r3, #0
 8007158:	e002      	b.n	8007160 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800715a:	2300      	movs	r3, #0
 800715c:	e000      	b.n	8007160 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800715e:	2302      	movs	r3, #2
  }
}
 8007160:	4618      	mov	r0, r3
 8007162:	3730      	adds	r7, #48	; 0x30
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007168:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800716c:	b0c0      	sub	sp, #256	; 0x100
 800716e:	af00      	add	r7, sp, #0
 8007170:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	691b      	ldr	r3, [r3, #16]
 800717c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007184:	68d9      	ldr	r1, [r3, #12]
 8007186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	ea40 0301 	orr.w	r3, r0, r1
 8007190:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007196:	689a      	ldr	r2, [r3, #8]
 8007198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	431a      	orrs	r2, r3
 80071a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071a4:	695b      	ldr	r3, [r3, #20]
 80071a6:	431a      	orrs	r2, r3
 80071a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071ac:	69db      	ldr	r3, [r3, #28]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80071b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80071c0:	f021 010c 	bic.w	r1, r1, #12
 80071c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80071ce:	430b      	orrs	r3, r1
 80071d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80071d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	695b      	ldr	r3, [r3, #20]
 80071da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80071de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071e2:	6999      	ldr	r1, [r3, #24]
 80071e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	ea40 0301 	orr.w	r3, r0, r1
 80071ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80071f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	4b8f      	ldr	r3, [pc, #572]	; (8007434 <UART_SetConfig+0x2cc>)
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d005      	beq.n	8007208 <UART_SetConfig+0xa0>
 80071fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	4b8d      	ldr	r3, [pc, #564]	; (8007438 <UART_SetConfig+0x2d0>)
 8007204:	429a      	cmp	r2, r3
 8007206:	d104      	bne.n	8007212 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007208:	f7fe ff1a 	bl	8006040 <HAL_RCC_GetPCLK2Freq>
 800720c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007210:	e003      	b.n	800721a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007212:	f7fe ff01 	bl	8006018 <HAL_RCC_GetPCLK1Freq>
 8007216:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800721a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800721e:	69db      	ldr	r3, [r3, #28]
 8007220:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007224:	f040 810c 	bne.w	8007440 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007228:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800722c:	2200      	movs	r2, #0
 800722e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007232:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007236:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800723a:	4622      	mov	r2, r4
 800723c:	462b      	mov	r3, r5
 800723e:	1891      	adds	r1, r2, r2
 8007240:	65b9      	str	r1, [r7, #88]	; 0x58
 8007242:	415b      	adcs	r3, r3
 8007244:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007246:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800724a:	4621      	mov	r1, r4
 800724c:	eb12 0801 	adds.w	r8, r2, r1
 8007250:	4629      	mov	r1, r5
 8007252:	eb43 0901 	adc.w	r9, r3, r1
 8007256:	f04f 0200 	mov.w	r2, #0
 800725a:	f04f 0300 	mov.w	r3, #0
 800725e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007262:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007266:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800726a:	4690      	mov	r8, r2
 800726c:	4699      	mov	r9, r3
 800726e:	4623      	mov	r3, r4
 8007270:	eb18 0303 	adds.w	r3, r8, r3
 8007274:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007278:	462b      	mov	r3, r5
 800727a:	eb49 0303 	adc.w	r3, r9, r3
 800727e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800728e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007292:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007296:	460b      	mov	r3, r1
 8007298:	18db      	adds	r3, r3, r3
 800729a:	653b      	str	r3, [r7, #80]	; 0x50
 800729c:	4613      	mov	r3, r2
 800729e:	eb42 0303 	adc.w	r3, r2, r3
 80072a2:	657b      	str	r3, [r7, #84]	; 0x54
 80072a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80072a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80072ac:	f7f9 fc7c 	bl	8000ba8 <__aeabi_uldivmod>
 80072b0:	4602      	mov	r2, r0
 80072b2:	460b      	mov	r3, r1
 80072b4:	4b61      	ldr	r3, [pc, #388]	; (800743c <UART_SetConfig+0x2d4>)
 80072b6:	fba3 2302 	umull	r2, r3, r3, r2
 80072ba:	095b      	lsrs	r3, r3, #5
 80072bc:	011c      	lsls	r4, r3, #4
 80072be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072c2:	2200      	movs	r2, #0
 80072c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80072c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80072cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80072d0:	4642      	mov	r2, r8
 80072d2:	464b      	mov	r3, r9
 80072d4:	1891      	adds	r1, r2, r2
 80072d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80072d8:	415b      	adcs	r3, r3
 80072da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80072e0:	4641      	mov	r1, r8
 80072e2:	eb12 0a01 	adds.w	sl, r2, r1
 80072e6:	4649      	mov	r1, r9
 80072e8:	eb43 0b01 	adc.w	fp, r3, r1
 80072ec:	f04f 0200 	mov.w	r2, #0
 80072f0:	f04f 0300 	mov.w	r3, #0
 80072f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80072f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80072fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007300:	4692      	mov	sl, r2
 8007302:	469b      	mov	fp, r3
 8007304:	4643      	mov	r3, r8
 8007306:	eb1a 0303 	adds.w	r3, sl, r3
 800730a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800730e:	464b      	mov	r3, r9
 8007310:	eb4b 0303 	adc.w	r3, fp, r3
 8007314:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007324:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007328:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800732c:	460b      	mov	r3, r1
 800732e:	18db      	adds	r3, r3, r3
 8007330:	643b      	str	r3, [r7, #64]	; 0x40
 8007332:	4613      	mov	r3, r2
 8007334:	eb42 0303 	adc.w	r3, r2, r3
 8007338:	647b      	str	r3, [r7, #68]	; 0x44
 800733a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800733e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007342:	f7f9 fc31 	bl	8000ba8 <__aeabi_uldivmod>
 8007346:	4602      	mov	r2, r0
 8007348:	460b      	mov	r3, r1
 800734a:	4611      	mov	r1, r2
 800734c:	4b3b      	ldr	r3, [pc, #236]	; (800743c <UART_SetConfig+0x2d4>)
 800734e:	fba3 2301 	umull	r2, r3, r3, r1
 8007352:	095b      	lsrs	r3, r3, #5
 8007354:	2264      	movs	r2, #100	; 0x64
 8007356:	fb02 f303 	mul.w	r3, r2, r3
 800735a:	1acb      	subs	r3, r1, r3
 800735c:	00db      	lsls	r3, r3, #3
 800735e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007362:	4b36      	ldr	r3, [pc, #216]	; (800743c <UART_SetConfig+0x2d4>)
 8007364:	fba3 2302 	umull	r2, r3, r3, r2
 8007368:	095b      	lsrs	r3, r3, #5
 800736a:	005b      	lsls	r3, r3, #1
 800736c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007370:	441c      	add	r4, r3
 8007372:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007376:	2200      	movs	r2, #0
 8007378:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800737c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007380:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007384:	4642      	mov	r2, r8
 8007386:	464b      	mov	r3, r9
 8007388:	1891      	adds	r1, r2, r2
 800738a:	63b9      	str	r1, [r7, #56]	; 0x38
 800738c:	415b      	adcs	r3, r3
 800738e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007390:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007394:	4641      	mov	r1, r8
 8007396:	1851      	adds	r1, r2, r1
 8007398:	6339      	str	r1, [r7, #48]	; 0x30
 800739a:	4649      	mov	r1, r9
 800739c:	414b      	adcs	r3, r1
 800739e:	637b      	str	r3, [r7, #52]	; 0x34
 80073a0:	f04f 0200 	mov.w	r2, #0
 80073a4:	f04f 0300 	mov.w	r3, #0
 80073a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80073ac:	4659      	mov	r1, fp
 80073ae:	00cb      	lsls	r3, r1, #3
 80073b0:	4651      	mov	r1, sl
 80073b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073b6:	4651      	mov	r1, sl
 80073b8:	00ca      	lsls	r2, r1, #3
 80073ba:	4610      	mov	r0, r2
 80073bc:	4619      	mov	r1, r3
 80073be:	4603      	mov	r3, r0
 80073c0:	4642      	mov	r2, r8
 80073c2:	189b      	adds	r3, r3, r2
 80073c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80073c8:	464b      	mov	r3, r9
 80073ca:	460a      	mov	r2, r1
 80073cc:	eb42 0303 	adc.w	r3, r2, r3
 80073d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80073d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80073e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80073e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80073e8:	460b      	mov	r3, r1
 80073ea:	18db      	adds	r3, r3, r3
 80073ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80073ee:	4613      	mov	r3, r2
 80073f0:	eb42 0303 	adc.w	r3, r2, r3
 80073f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80073fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80073fe:	f7f9 fbd3 	bl	8000ba8 <__aeabi_uldivmod>
 8007402:	4602      	mov	r2, r0
 8007404:	460b      	mov	r3, r1
 8007406:	4b0d      	ldr	r3, [pc, #52]	; (800743c <UART_SetConfig+0x2d4>)
 8007408:	fba3 1302 	umull	r1, r3, r3, r2
 800740c:	095b      	lsrs	r3, r3, #5
 800740e:	2164      	movs	r1, #100	; 0x64
 8007410:	fb01 f303 	mul.w	r3, r1, r3
 8007414:	1ad3      	subs	r3, r2, r3
 8007416:	00db      	lsls	r3, r3, #3
 8007418:	3332      	adds	r3, #50	; 0x32
 800741a:	4a08      	ldr	r2, [pc, #32]	; (800743c <UART_SetConfig+0x2d4>)
 800741c:	fba2 2303 	umull	r2, r3, r2, r3
 8007420:	095b      	lsrs	r3, r3, #5
 8007422:	f003 0207 	and.w	r2, r3, #7
 8007426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4422      	add	r2, r4
 800742e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007430:	e105      	b.n	800763e <UART_SetConfig+0x4d6>
 8007432:	bf00      	nop
 8007434:	40011000 	.word	0x40011000
 8007438:	40011400 	.word	0x40011400
 800743c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007440:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007444:	2200      	movs	r2, #0
 8007446:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800744a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800744e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007452:	4642      	mov	r2, r8
 8007454:	464b      	mov	r3, r9
 8007456:	1891      	adds	r1, r2, r2
 8007458:	6239      	str	r1, [r7, #32]
 800745a:	415b      	adcs	r3, r3
 800745c:	627b      	str	r3, [r7, #36]	; 0x24
 800745e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007462:	4641      	mov	r1, r8
 8007464:	1854      	adds	r4, r2, r1
 8007466:	4649      	mov	r1, r9
 8007468:	eb43 0501 	adc.w	r5, r3, r1
 800746c:	f04f 0200 	mov.w	r2, #0
 8007470:	f04f 0300 	mov.w	r3, #0
 8007474:	00eb      	lsls	r3, r5, #3
 8007476:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800747a:	00e2      	lsls	r2, r4, #3
 800747c:	4614      	mov	r4, r2
 800747e:	461d      	mov	r5, r3
 8007480:	4643      	mov	r3, r8
 8007482:	18e3      	adds	r3, r4, r3
 8007484:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007488:	464b      	mov	r3, r9
 800748a:	eb45 0303 	adc.w	r3, r5, r3
 800748e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800749e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80074a2:	f04f 0200 	mov.w	r2, #0
 80074a6:	f04f 0300 	mov.w	r3, #0
 80074aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80074ae:	4629      	mov	r1, r5
 80074b0:	008b      	lsls	r3, r1, #2
 80074b2:	4621      	mov	r1, r4
 80074b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074b8:	4621      	mov	r1, r4
 80074ba:	008a      	lsls	r2, r1, #2
 80074bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80074c0:	f7f9 fb72 	bl	8000ba8 <__aeabi_uldivmod>
 80074c4:	4602      	mov	r2, r0
 80074c6:	460b      	mov	r3, r1
 80074c8:	4b60      	ldr	r3, [pc, #384]	; (800764c <UART_SetConfig+0x4e4>)
 80074ca:	fba3 2302 	umull	r2, r3, r3, r2
 80074ce:	095b      	lsrs	r3, r3, #5
 80074d0:	011c      	lsls	r4, r3, #4
 80074d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074d6:	2200      	movs	r2, #0
 80074d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80074dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80074e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80074e4:	4642      	mov	r2, r8
 80074e6:	464b      	mov	r3, r9
 80074e8:	1891      	adds	r1, r2, r2
 80074ea:	61b9      	str	r1, [r7, #24]
 80074ec:	415b      	adcs	r3, r3
 80074ee:	61fb      	str	r3, [r7, #28]
 80074f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074f4:	4641      	mov	r1, r8
 80074f6:	1851      	adds	r1, r2, r1
 80074f8:	6139      	str	r1, [r7, #16]
 80074fa:	4649      	mov	r1, r9
 80074fc:	414b      	adcs	r3, r1
 80074fe:	617b      	str	r3, [r7, #20]
 8007500:	f04f 0200 	mov.w	r2, #0
 8007504:	f04f 0300 	mov.w	r3, #0
 8007508:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800750c:	4659      	mov	r1, fp
 800750e:	00cb      	lsls	r3, r1, #3
 8007510:	4651      	mov	r1, sl
 8007512:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007516:	4651      	mov	r1, sl
 8007518:	00ca      	lsls	r2, r1, #3
 800751a:	4610      	mov	r0, r2
 800751c:	4619      	mov	r1, r3
 800751e:	4603      	mov	r3, r0
 8007520:	4642      	mov	r2, r8
 8007522:	189b      	adds	r3, r3, r2
 8007524:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007528:	464b      	mov	r3, r9
 800752a:	460a      	mov	r2, r1
 800752c:	eb42 0303 	adc.w	r3, r2, r3
 8007530:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	67bb      	str	r3, [r7, #120]	; 0x78
 800753e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007540:	f04f 0200 	mov.w	r2, #0
 8007544:	f04f 0300 	mov.w	r3, #0
 8007548:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800754c:	4649      	mov	r1, r9
 800754e:	008b      	lsls	r3, r1, #2
 8007550:	4641      	mov	r1, r8
 8007552:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007556:	4641      	mov	r1, r8
 8007558:	008a      	lsls	r2, r1, #2
 800755a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800755e:	f7f9 fb23 	bl	8000ba8 <__aeabi_uldivmod>
 8007562:	4602      	mov	r2, r0
 8007564:	460b      	mov	r3, r1
 8007566:	4b39      	ldr	r3, [pc, #228]	; (800764c <UART_SetConfig+0x4e4>)
 8007568:	fba3 1302 	umull	r1, r3, r3, r2
 800756c:	095b      	lsrs	r3, r3, #5
 800756e:	2164      	movs	r1, #100	; 0x64
 8007570:	fb01 f303 	mul.w	r3, r1, r3
 8007574:	1ad3      	subs	r3, r2, r3
 8007576:	011b      	lsls	r3, r3, #4
 8007578:	3332      	adds	r3, #50	; 0x32
 800757a:	4a34      	ldr	r2, [pc, #208]	; (800764c <UART_SetConfig+0x4e4>)
 800757c:	fba2 2303 	umull	r2, r3, r2, r3
 8007580:	095b      	lsrs	r3, r3, #5
 8007582:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007586:	441c      	add	r4, r3
 8007588:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800758c:	2200      	movs	r2, #0
 800758e:	673b      	str	r3, [r7, #112]	; 0x70
 8007590:	677a      	str	r2, [r7, #116]	; 0x74
 8007592:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007596:	4642      	mov	r2, r8
 8007598:	464b      	mov	r3, r9
 800759a:	1891      	adds	r1, r2, r2
 800759c:	60b9      	str	r1, [r7, #8]
 800759e:	415b      	adcs	r3, r3
 80075a0:	60fb      	str	r3, [r7, #12]
 80075a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80075a6:	4641      	mov	r1, r8
 80075a8:	1851      	adds	r1, r2, r1
 80075aa:	6039      	str	r1, [r7, #0]
 80075ac:	4649      	mov	r1, r9
 80075ae:	414b      	adcs	r3, r1
 80075b0:	607b      	str	r3, [r7, #4]
 80075b2:	f04f 0200 	mov.w	r2, #0
 80075b6:	f04f 0300 	mov.w	r3, #0
 80075ba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80075be:	4659      	mov	r1, fp
 80075c0:	00cb      	lsls	r3, r1, #3
 80075c2:	4651      	mov	r1, sl
 80075c4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075c8:	4651      	mov	r1, sl
 80075ca:	00ca      	lsls	r2, r1, #3
 80075cc:	4610      	mov	r0, r2
 80075ce:	4619      	mov	r1, r3
 80075d0:	4603      	mov	r3, r0
 80075d2:	4642      	mov	r2, r8
 80075d4:	189b      	adds	r3, r3, r2
 80075d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80075d8:	464b      	mov	r3, r9
 80075da:	460a      	mov	r2, r1
 80075dc:	eb42 0303 	adc.w	r3, r2, r3
 80075e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	663b      	str	r3, [r7, #96]	; 0x60
 80075ec:	667a      	str	r2, [r7, #100]	; 0x64
 80075ee:	f04f 0200 	mov.w	r2, #0
 80075f2:	f04f 0300 	mov.w	r3, #0
 80075f6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80075fa:	4649      	mov	r1, r9
 80075fc:	008b      	lsls	r3, r1, #2
 80075fe:	4641      	mov	r1, r8
 8007600:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007604:	4641      	mov	r1, r8
 8007606:	008a      	lsls	r2, r1, #2
 8007608:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800760c:	f7f9 facc 	bl	8000ba8 <__aeabi_uldivmod>
 8007610:	4602      	mov	r2, r0
 8007612:	460b      	mov	r3, r1
 8007614:	4b0d      	ldr	r3, [pc, #52]	; (800764c <UART_SetConfig+0x4e4>)
 8007616:	fba3 1302 	umull	r1, r3, r3, r2
 800761a:	095b      	lsrs	r3, r3, #5
 800761c:	2164      	movs	r1, #100	; 0x64
 800761e:	fb01 f303 	mul.w	r3, r1, r3
 8007622:	1ad3      	subs	r3, r2, r3
 8007624:	011b      	lsls	r3, r3, #4
 8007626:	3332      	adds	r3, #50	; 0x32
 8007628:	4a08      	ldr	r2, [pc, #32]	; (800764c <UART_SetConfig+0x4e4>)
 800762a:	fba2 2303 	umull	r2, r3, r2, r3
 800762e:	095b      	lsrs	r3, r3, #5
 8007630:	f003 020f 	and.w	r2, r3, #15
 8007634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4422      	add	r2, r4
 800763c:	609a      	str	r2, [r3, #8]
}
 800763e:	bf00      	nop
 8007640:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007644:	46bd      	mov	sp, r7
 8007646:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800764a:	bf00      	nop
 800764c:	51eb851f 	.word	0x51eb851f

08007650 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f103 0208 	add.w	r2, r3, #8
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f04f 32ff 	mov.w	r2, #4294967295
 8007668:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f103 0208 	add.w	r2, r3, #8
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f103 0208 	add.w	r2, r3, #8
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007684:	bf00      	nop
 8007686:	370c      	adds	r7, #12
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr

08007690 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800769e:	bf00      	nop
 80076a0:	370c      	adds	r7, #12
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr

080076aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80076aa:	b480      	push	{r7}
 80076ac:	b085      	sub	sp, #20
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
 80076b2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	68fa      	ldr	r2, [r7, #12]
 80076be:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	689a      	ldr	r2, [r3, #8]
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	683a      	ldr	r2, [r7, #0]
 80076ce:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	683a      	ldr	r2, [r7, #0]
 80076d4:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	1c5a      	adds	r2, r3, #1
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	601a      	str	r2, [r3, #0]
}
 80076e6:	bf00      	nop
 80076e8:	3714      	adds	r7, #20
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr

080076f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80076f2:	b480      	push	{r7}
 80076f4:	b085      	sub	sp, #20
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
 80076fa:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007708:	d103      	bne.n	8007712 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	60fb      	str	r3, [r7, #12]
 8007710:	e00c      	b.n	800772c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	3308      	adds	r3, #8
 8007716:	60fb      	str	r3, [r7, #12]
 8007718:	e002      	b.n	8007720 <vListInsert+0x2e>
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	60fb      	str	r3, [r7, #12]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	68ba      	ldr	r2, [r7, #8]
 8007728:	429a      	cmp	r2, r3
 800772a:	d2f6      	bcs.n	800771a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	685a      	ldr	r2, [r3, #4]
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	683a      	ldr	r2, [r7, #0]
 800773a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	683a      	ldr	r2, [r7, #0]
 8007746:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	687a      	ldr	r2, [r7, #4]
 800774c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	1c5a      	adds	r2, r3, #1
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	601a      	str	r2, [r3, #0]
}
 8007758:	bf00      	nop
 800775a:	3714      	adds	r7, #20
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007764:	b480      	push	{r7}
 8007766:	b085      	sub	sp, #20
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	691b      	ldr	r3, [r3, #16]
 8007770:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	6892      	ldr	r2, [r2, #8]
 800777a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	6852      	ldr	r2, [r2, #4]
 8007784:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	429a      	cmp	r2, r3
 800778e:	d103      	bne.n	8007798 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	689a      	ldr	r2, [r3, #8]
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	1e5a      	subs	r2, r3, #1
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3714      	adds	r7, #20
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr

080077b8 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d10a      	bne.n	80077e2 <xQueueGenericReset+0x2a>
        __asm volatile
 80077cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d0:	f383 8811 	msr	BASEPRI, r3
 80077d4:	f3bf 8f6f 	isb	sy
 80077d8:	f3bf 8f4f 	dsb	sy
 80077dc:	60bb      	str	r3, [r7, #8]
    }
 80077de:	bf00      	nop
 80077e0:	e7fe      	b.n	80077e0 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80077e2:	f002 f8b9 	bl	8009958 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077ee:	68f9      	ldr	r1, [r7, #12]
 80077f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80077f2:	fb01 f303 	mul.w	r3, r1, r3
 80077f6:	441a      	add	r2, r3
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2200      	movs	r2, #0
 8007800:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007812:	3b01      	subs	r3, #1
 8007814:	68f9      	ldr	r1, [r7, #12]
 8007816:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007818:	fb01 f303 	mul.w	r3, r1, r3
 800781c:	441a      	add	r2, r3
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	22ff      	movs	r2, #255	; 0xff
 8007826:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	22ff      	movs	r2, #255	; 0xff
 800782e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d114      	bne.n	8007862 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	691b      	ldr	r3, [r3, #16]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d01a      	beq.n	8007876 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	3310      	adds	r3, #16
 8007844:	4618      	mov	r0, r3
 8007846:	f001 f84d 	bl	80088e4 <xTaskRemoveFromEventList>
 800784a:	4603      	mov	r3, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	d012      	beq.n	8007876 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8007850:	4b0c      	ldr	r3, [pc, #48]	; (8007884 <xQueueGenericReset+0xcc>)
 8007852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007856:	601a      	str	r2, [r3, #0]
 8007858:	f3bf 8f4f 	dsb	sy
 800785c:	f3bf 8f6f 	isb	sy
 8007860:	e009      	b.n	8007876 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	3310      	adds	r3, #16
 8007866:	4618      	mov	r0, r3
 8007868:	f7ff fef2 	bl	8007650 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	3324      	adds	r3, #36	; 0x24
 8007870:	4618      	mov	r0, r3
 8007872:	f7ff feed 	bl	8007650 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8007876:	f002 f89f 	bl	80099b8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800787a:	2301      	movs	r3, #1
}
 800787c:	4618      	mov	r0, r3
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	e000ed04 	.word	0xe000ed04

08007888 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8007888:	b580      	push	{r7, lr}
 800788a:	b08c      	sub	sp, #48	; 0x30
 800788c:	af02      	add	r7, sp, #8
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	60b9      	str	r1, [r7, #8]
 8007892:	4613      	mov	r3, r2
 8007894:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d10a      	bne.n	80078b2 <xQueueGenericCreate+0x2a>
        __asm volatile
 800789c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a0:	f383 8811 	msr	BASEPRI, r3
 80078a4:	f3bf 8f6f 	isb	sy
 80078a8:	f3bf 8f4f 	dsb	sy
 80078ac:	61bb      	str	r3, [r7, #24]
    }
 80078ae:	bf00      	nop
 80078b0:	e7fe      	b.n	80078b0 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	68ba      	ldr	r2, [r7, #8]
 80078b6:	fb02 f303 	mul.w	r3, r2, r3
 80078ba:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d006      	beq.n	80078d0 <xQueueGenericCreate+0x48>
 80078c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ca:	68fa      	ldr	r2, [r7, #12]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d101      	bne.n	80078d4 <xQueueGenericCreate+0x4c>
 80078d0:	2301      	movs	r3, #1
 80078d2:	e000      	b.n	80078d6 <xQueueGenericCreate+0x4e>
 80078d4:	2300      	movs	r3, #0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d10a      	bne.n	80078f0 <xQueueGenericCreate+0x68>
        __asm volatile
 80078da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078de:	f383 8811 	msr	BASEPRI, r3
 80078e2:	f3bf 8f6f 	isb	sy
 80078e6:	f3bf 8f4f 	dsb	sy
 80078ea:	617b      	str	r3, [r7, #20]
    }
 80078ec:	bf00      	nop
 80078ee:	e7fe      	b.n	80078ee <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80078f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f2:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80078f6:	d90a      	bls.n	800790e <xQueueGenericCreate+0x86>
        __asm volatile
 80078f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078fc:	f383 8811 	msr	BASEPRI, r3
 8007900:	f3bf 8f6f 	isb	sy
 8007904:	f3bf 8f4f 	dsb	sy
 8007908:	613b      	str	r3, [r7, #16]
    }
 800790a:	bf00      	nop
 800790c:	e7fe      	b.n	800790c <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800790e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007910:	3350      	adds	r3, #80	; 0x50
 8007912:	4618      	mov	r0, r3
 8007914:	f002 f942 	bl	8009b9c <pvPortMalloc>
 8007918:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800791a:	6a3b      	ldr	r3, [r7, #32]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d00d      	beq.n	800793c <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007920:	6a3b      	ldr	r3, [r7, #32]
 8007922:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	3350      	adds	r3, #80	; 0x50
 8007928:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800792a:	79fa      	ldrb	r2, [r7, #7]
 800792c:	6a3b      	ldr	r3, [r7, #32]
 800792e:	9300      	str	r3, [sp, #0]
 8007930:	4613      	mov	r3, r2
 8007932:	69fa      	ldr	r2, [r7, #28]
 8007934:	68b9      	ldr	r1, [r7, #8]
 8007936:	68f8      	ldr	r0, [r7, #12]
 8007938:	f000 f805 	bl	8007946 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800793c:	6a3b      	ldr	r3, [r7, #32]
    }
 800793e:	4618      	mov	r0, r3
 8007940:	3728      	adds	r7, #40	; 0x28
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}

08007946 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8007946:	b580      	push	{r7, lr}
 8007948:	b084      	sub	sp, #16
 800794a:	af00      	add	r7, sp, #0
 800794c:	60f8      	str	r0, [r7, #12]
 800794e:	60b9      	str	r1, [r7, #8]
 8007950:	607a      	str	r2, [r7, #4]
 8007952:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d103      	bne.n	8007962 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	69ba      	ldr	r2, [r7, #24]
 800795e:	601a      	str	r2, [r3, #0]
 8007960:	e002      	b.n	8007968 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007962:	69bb      	ldr	r3, [r7, #24]
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	68fa      	ldr	r2, [r7, #12]
 800796c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800796e:	69bb      	ldr	r3, [r7, #24]
 8007970:	68ba      	ldr	r2, [r7, #8]
 8007972:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007974:	2101      	movs	r1, #1
 8007976:	69b8      	ldr	r0, [r7, #24]
 8007978:	f7ff ff1e 	bl	80077b8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	78fa      	ldrb	r2, [r7, #3]
 8007980:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8007984:	bf00      	nop
 8007986:	3710      	adds	r7, #16
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b08e      	sub	sp, #56	; 0x38
 8007990:	af00      	add	r7, sp, #0
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	607a      	str	r2, [r7, #4]
 8007998:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800799a:	2300      	movs	r3, #0
 800799c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80079a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d10a      	bne.n	80079be <xQueueGenericSend+0x32>
        __asm volatile
 80079a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ac:	f383 8811 	msr	BASEPRI, r3
 80079b0:	f3bf 8f6f 	isb	sy
 80079b4:	f3bf 8f4f 	dsb	sy
 80079b8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80079ba:	bf00      	nop
 80079bc:	e7fe      	b.n	80079bc <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d103      	bne.n	80079cc <xQueueGenericSend+0x40>
 80079c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d101      	bne.n	80079d0 <xQueueGenericSend+0x44>
 80079cc:	2301      	movs	r3, #1
 80079ce:	e000      	b.n	80079d2 <xQueueGenericSend+0x46>
 80079d0:	2300      	movs	r3, #0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d10a      	bne.n	80079ec <xQueueGenericSend+0x60>
        __asm volatile
 80079d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079da:	f383 8811 	msr	BASEPRI, r3
 80079de:	f3bf 8f6f 	isb	sy
 80079e2:	f3bf 8f4f 	dsb	sy
 80079e6:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80079e8:	bf00      	nop
 80079ea:	e7fe      	b.n	80079ea <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	2b02      	cmp	r3, #2
 80079f0:	d103      	bne.n	80079fa <xQueueGenericSend+0x6e>
 80079f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d101      	bne.n	80079fe <xQueueGenericSend+0x72>
 80079fa:	2301      	movs	r3, #1
 80079fc:	e000      	b.n	8007a00 <xQueueGenericSend+0x74>
 80079fe:	2300      	movs	r3, #0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d10a      	bne.n	8007a1a <xQueueGenericSend+0x8e>
        __asm volatile
 8007a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a08:	f383 8811 	msr	BASEPRI, r3
 8007a0c:	f3bf 8f6f 	isb	sy
 8007a10:	f3bf 8f4f 	dsb	sy
 8007a14:	623b      	str	r3, [r7, #32]
    }
 8007a16:	bf00      	nop
 8007a18:	e7fe      	b.n	8007a18 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a1a:	f001 f8ff 	bl	8008c1c <xTaskGetSchedulerState>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d102      	bne.n	8007a2a <xQueueGenericSend+0x9e>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d101      	bne.n	8007a2e <xQueueGenericSend+0xa2>
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e000      	b.n	8007a30 <xQueueGenericSend+0xa4>
 8007a2e:	2300      	movs	r3, #0
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d10a      	bne.n	8007a4a <xQueueGenericSend+0xbe>
        __asm volatile
 8007a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a38:	f383 8811 	msr	BASEPRI, r3
 8007a3c:	f3bf 8f6f 	isb	sy
 8007a40:	f3bf 8f4f 	dsb	sy
 8007a44:	61fb      	str	r3, [r7, #28]
    }
 8007a46:	bf00      	nop
 8007a48:	e7fe      	b.n	8007a48 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8007a4a:	f001 ff85 	bl	8009958 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d302      	bcc.n	8007a60 <xQueueGenericSend+0xd4>
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	2b02      	cmp	r3, #2
 8007a5e:	d129      	bne.n	8007ab4 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a60:	683a      	ldr	r2, [r7, #0]
 8007a62:	68b9      	ldr	r1, [r7, #8]
 8007a64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a66:	f000 fa19 	bl	8007e9c <prvCopyDataToQueue>
 8007a6a:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d010      	beq.n	8007a96 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a76:	3324      	adds	r3, #36	; 0x24
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f000 ff33 	bl	80088e4 <xTaskRemoveFromEventList>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d013      	beq.n	8007aac <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8007a84:	4b3f      	ldr	r3, [pc, #252]	; (8007b84 <xQueueGenericSend+0x1f8>)
 8007a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a8a:	601a      	str	r2, [r3, #0]
 8007a8c:	f3bf 8f4f 	dsb	sy
 8007a90:	f3bf 8f6f 	isb	sy
 8007a94:	e00a      	b.n	8007aac <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8007a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d007      	beq.n	8007aac <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8007a9c:	4b39      	ldr	r3, [pc, #228]	; (8007b84 <xQueueGenericSend+0x1f8>)
 8007a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aa2:	601a      	str	r2, [r3, #0]
 8007aa4:	f3bf 8f4f 	dsb	sy
 8007aa8:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8007aac:	f001 ff84 	bl	80099b8 <vPortExitCritical>
                return pdPASS;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	e063      	b.n	8007b7c <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d103      	bne.n	8007ac2 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8007aba:	f001 ff7d 	bl	80099b8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	e05c      	b.n	8007b7c <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8007ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d106      	bne.n	8007ad6 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8007ac8:	f107 0314 	add.w	r3, r7, #20
 8007acc:	4618      	mov	r0, r3
 8007ace:	f000 ff6b 	bl	80089a8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8007ad6:	f001 ff6f 	bl	80099b8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8007ada:	f000 fce5 	bl	80084a8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8007ade:	f001 ff3b 	bl	8009958 <vPortEnterCritical>
 8007ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ae8:	b25b      	sxtb	r3, r3
 8007aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aee:	d103      	bne.n	8007af8 <xQueueGenericSend+0x16c>
 8007af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af2:	2200      	movs	r2, #0
 8007af4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007afa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007afe:	b25b      	sxtb	r3, r3
 8007b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b04:	d103      	bne.n	8007b0e <xQueueGenericSend+0x182>
 8007b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b0e:	f001 ff53 	bl	80099b8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b12:	1d3a      	adds	r2, r7, #4
 8007b14:	f107 0314 	add.w	r3, r7, #20
 8007b18:	4611      	mov	r1, r2
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f000 ff5a 	bl	80089d4 <xTaskCheckForTimeOut>
 8007b20:	4603      	mov	r3, r0
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d124      	bne.n	8007b70 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007b26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b28:	f000 fab0 	bl	800808c <prvIsQueueFull>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d018      	beq.n	8007b64 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b34:	3310      	adds	r3, #16
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	4611      	mov	r1, r2
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f000 fe82 	bl	8008844 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8007b40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b42:	f000 fa3b 	bl	8007fbc <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8007b46:	f000 fcbd 	bl	80084c4 <xTaskResumeAll>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	f47f af7c 	bne.w	8007a4a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8007b52:	4b0c      	ldr	r3, [pc, #48]	; (8007b84 <xQueueGenericSend+0x1f8>)
 8007b54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b58:	601a      	str	r2, [r3, #0]
 8007b5a:	f3bf 8f4f 	dsb	sy
 8007b5e:	f3bf 8f6f 	isb	sy
 8007b62:	e772      	b.n	8007a4a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8007b64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b66:	f000 fa29 	bl	8007fbc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8007b6a:	f000 fcab 	bl	80084c4 <xTaskResumeAll>
 8007b6e:	e76c      	b.n	8007a4a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8007b70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b72:	f000 fa23 	bl	8007fbc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8007b76:	f000 fca5 	bl	80084c4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8007b7a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3738      	adds	r7, #56	; 0x38
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}
 8007b84:	e000ed04 	.word	0xe000ed04

08007b88 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b090      	sub	sp, #64	; 0x40
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	607a      	str	r2, [r7, #4]
 8007b94:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8007b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d10a      	bne.n	8007bb6 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8007ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba4:	f383 8811 	msr	BASEPRI, r3
 8007ba8:	f3bf 8f6f 	isb	sy
 8007bac:	f3bf 8f4f 	dsb	sy
 8007bb0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8007bb2:	bf00      	nop
 8007bb4:	e7fe      	b.n	8007bb4 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d103      	bne.n	8007bc4 <xQueueGenericSendFromISR+0x3c>
 8007bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d101      	bne.n	8007bc8 <xQueueGenericSendFromISR+0x40>
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e000      	b.n	8007bca <xQueueGenericSendFromISR+0x42>
 8007bc8:	2300      	movs	r3, #0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d10a      	bne.n	8007be4 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8007bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd2:	f383 8811 	msr	BASEPRI, r3
 8007bd6:	f3bf 8f6f 	isb	sy
 8007bda:	f3bf 8f4f 	dsb	sy
 8007bde:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8007be0:	bf00      	nop
 8007be2:	e7fe      	b.n	8007be2 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	2b02      	cmp	r3, #2
 8007be8:	d103      	bne.n	8007bf2 <xQueueGenericSendFromISR+0x6a>
 8007bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d101      	bne.n	8007bf6 <xQueueGenericSendFromISR+0x6e>
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e000      	b.n	8007bf8 <xQueueGenericSendFromISR+0x70>
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d10a      	bne.n	8007c12 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8007bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c00:	f383 8811 	msr	BASEPRI, r3
 8007c04:	f3bf 8f6f 	isb	sy
 8007c08:	f3bf 8f4f 	dsb	sy
 8007c0c:	623b      	str	r3, [r7, #32]
    }
 8007c0e:	bf00      	nop
 8007c10:	e7fe      	b.n	8007c10 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007c12:	f001 ff83 	bl	8009b1c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8007c16:	f3ef 8211 	mrs	r2, BASEPRI
 8007c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c1e:	f383 8811 	msr	BASEPRI, r3
 8007c22:	f3bf 8f6f 	isb	sy
 8007c26:	f3bf 8f4f 	dsb	sy
 8007c2a:	61fa      	str	r2, [r7, #28]
 8007c2c:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8007c2e:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007c30:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d302      	bcc.n	8007c44 <xQueueGenericSendFromISR+0xbc>
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	2b02      	cmp	r3, #2
 8007c42:	d13e      	bne.n	8007cc2 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8007c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c52:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007c54:	683a      	ldr	r2, [r7, #0]
 8007c56:	68b9      	ldr	r1, [r7, #8]
 8007c58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007c5a:	f000 f91f 	bl	8007e9c <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8007c5e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c66:	d112      	bne.n	8007c8e <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d025      	beq.n	8007cbc <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c72:	3324      	adds	r3, #36	; 0x24
 8007c74:	4618      	mov	r0, r3
 8007c76:	f000 fe35 	bl	80088e4 <xTaskRemoveFromEventList>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d01d      	beq.n	8007cbc <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d01a      	beq.n	8007cbc <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2201      	movs	r2, #1
 8007c8a:	601a      	str	r2, [r3, #0]
 8007c8c:	e016      	b.n	8007cbc <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8007c8e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007c92:	2b7f      	cmp	r3, #127	; 0x7f
 8007c94:	d10a      	bne.n	8007cac <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8007c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9a:	f383 8811 	msr	BASEPRI, r3
 8007c9e:	f3bf 8f6f 	isb	sy
 8007ca2:	f3bf 8f4f 	dsb	sy
 8007ca6:	617b      	str	r3, [r7, #20]
    }
 8007ca8:	bf00      	nop
 8007caa:	e7fe      	b.n	8007caa <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007cac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	b25a      	sxtb	r2, r3
 8007cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8007cc0:	e001      	b.n	8007cc6 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cc8:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8007cd0:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8007cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3740      	adds	r7, #64	; 0x40
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b08c      	sub	sp, #48	; 0x30
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8007cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d10a      	bne.n	8007d0c <xQueueReceive+0x30>
        __asm volatile
 8007cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cfa:	f383 8811 	msr	BASEPRI, r3
 8007cfe:	f3bf 8f6f 	isb	sy
 8007d02:	f3bf 8f4f 	dsb	sy
 8007d06:	623b      	str	r3, [r7, #32]
    }
 8007d08:	bf00      	nop
 8007d0a:	e7fe      	b.n	8007d0a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d103      	bne.n	8007d1a <xQueueReceive+0x3e>
 8007d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d101      	bne.n	8007d1e <xQueueReceive+0x42>
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e000      	b.n	8007d20 <xQueueReceive+0x44>
 8007d1e:	2300      	movs	r3, #0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d10a      	bne.n	8007d3a <xQueueReceive+0x5e>
        __asm volatile
 8007d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d28:	f383 8811 	msr	BASEPRI, r3
 8007d2c:	f3bf 8f6f 	isb	sy
 8007d30:	f3bf 8f4f 	dsb	sy
 8007d34:	61fb      	str	r3, [r7, #28]
    }
 8007d36:	bf00      	nop
 8007d38:	e7fe      	b.n	8007d38 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d3a:	f000 ff6f 	bl	8008c1c <xTaskGetSchedulerState>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d102      	bne.n	8007d4a <xQueueReceive+0x6e>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d101      	bne.n	8007d4e <xQueueReceive+0x72>
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e000      	b.n	8007d50 <xQueueReceive+0x74>
 8007d4e:	2300      	movs	r3, #0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d10a      	bne.n	8007d6a <xQueueReceive+0x8e>
        __asm volatile
 8007d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d58:	f383 8811 	msr	BASEPRI, r3
 8007d5c:	f3bf 8f6f 	isb	sy
 8007d60:	f3bf 8f4f 	dsb	sy
 8007d64:	61bb      	str	r3, [r7, #24]
    }
 8007d66:	bf00      	nop
 8007d68:	e7fe      	b.n	8007d68 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8007d6a:	f001 fdf5 	bl	8009958 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d72:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d01f      	beq.n	8007dba <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007d7a:	68b9      	ldr	r1, [r7, #8]
 8007d7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d7e:	f000 f8f7 	bl	8007f70 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d84:	1e5a      	subs	r2, r3, #1
 8007d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d88:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d8c:	691b      	ldr	r3, [r3, #16]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d00f      	beq.n	8007db2 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d94:	3310      	adds	r3, #16
 8007d96:	4618      	mov	r0, r3
 8007d98:	f000 fda4 	bl	80088e4 <xTaskRemoveFromEventList>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d007      	beq.n	8007db2 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8007da2:	4b3d      	ldr	r3, [pc, #244]	; (8007e98 <xQueueReceive+0x1bc>)
 8007da4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007da8:	601a      	str	r2, [r3, #0]
 8007daa:	f3bf 8f4f 	dsb	sy
 8007dae:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8007db2:	f001 fe01 	bl	80099b8 <vPortExitCritical>
                return pdPASS;
 8007db6:	2301      	movs	r3, #1
 8007db8:	e069      	b.n	8007e8e <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d103      	bne.n	8007dc8 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8007dc0:	f001 fdfa 	bl	80099b8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	e062      	b.n	8007e8e <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8007dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d106      	bne.n	8007ddc <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8007dce:	f107 0310 	add.w	r3, r7, #16
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f000 fde8 	bl	80089a8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8007ddc:	f001 fdec 	bl	80099b8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8007de0:	f000 fb62 	bl	80084a8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8007de4:	f001 fdb8 	bl	8009958 <vPortEnterCritical>
 8007de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007dee:	b25b      	sxtb	r3, r3
 8007df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007df4:	d103      	bne.n	8007dfe <xQueueReceive+0x122>
 8007df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df8:	2200      	movs	r2, #0
 8007dfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e04:	b25b      	sxtb	r3, r3
 8007e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e0a:	d103      	bne.n	8007e14 <xQueueReceive+0x138>
 8007e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e14:	f001 fdd0 	bl	80099b8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e18:	1d3a      	adds	r2, r7, #4
 8007e1a:	f107 0310 	add.w	r3, r7, #16
 8007e1e:	4611      	mov	r1, r2
 8007e20:	4618      	mov	r0, r3
 8007e22:	f000 fdd7 	bl	80089d4 <xTaskCheckForTimeOut>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d123      	bne.n	8007e74 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e2e:	f000 f917 	bl	8008060 <prvIsQueueEmpty>
 8007e32:	4603      	mov	r3, r0
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d017      	beq.n	8007e68 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e3a:	3324      	adds	r3, #36	; 0x24
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	4611      	mov	r1, r2
 8007e40:	4618      	mov	r0, r3
 8007e42:	f000 fcff 	bl	8008844 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8007e46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e48:	f000 f8b8 	bl	8007fbc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8007e4c:	f000 fb3a 	bl	80084c4 <xTaskResumeAll>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d189      	bne.n	8007d6a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8007e56:	4b10      	ldr	r3, [pc, #64]	; (8007e98 <xQueueReceive+0x1bc>)
 8007e58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e5c:	601a      	str	r2, [r3, #0]
 8007e5e:	f3bf 8f4f 	dsb	sy
 8007e62:	f3bf 8f6f 	isb	sy
 8007e66:	e780      	b.n	8007d6a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8007e68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e6a:	f000 f8a7 	bl	8007fbc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8007e6e:	f000 fb29 	bl	80084c4 <xTaskResumeAll>
 8007e72:	e77a      	b.n	8007d6a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8007e74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e76:	f000 f8a1 	bl	8007fbc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8007e7a:	f000 fb23 	bl	80084c4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e80:	f000 f8ee 	bl	8008060 <prvIsQueueEmpty>
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	f43f af6f 	beq.w	8007d6a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8007e8c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3730      	adds	r7, #48	; 0x30
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
 8007e96:	bf00      	nop
 8007e98:	e000ed04 	.word	0xe000ed04

08007e9c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b086      	sub	sp, #24
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d10d      	bne.n	8007ed6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d14d      	bne.n	8007f5e <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f000 fec6 	bl	8008c58 <xTaskPriorityDisinherit>
 8007ecc:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	609a      	str	r2, [r3, #8]
 8007ed4:	e043      	b.n	8007f5e <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d119      	bne.n	8007f10 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6858      	ldr	r0, [r3, #4]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	68b9      	ldr	r1, [r7, #8]
 8007ee8:	f002 f880 	bl	8009fec <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	685a      	ldr	r2, [r3, #4]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef4:	441a      	add	r2, r3
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	685a      	ldr	r2, [r3, #4]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d32b      	bcc.n	8007f5e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	605a      	str	r2, [r3, #4]
 8007f0e:	e026      	b.n	8007f5e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	68d8      	ldr	r0, [r3, #12]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f18:	461a      	mov	r2, r3
 8007f1a:	68b9      	ldr	r1, [r7, #8]
 8007f1c:	f002 f866 	bl	8009fec <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	68da      	ldr	r2, [r3, #12]
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f28:	425b      	negs	r3, r3
 8007f2a:	441a      	add	r2, r3
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	68da      	ldr	r2, [r3, #12]
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d207      	bcs.n	8007f4c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	689a      	ldr	r2, [r3, #8]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f44:	425b      	negs	r3, r3
 8007f46:	441a      	add	r2, r3
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2b02      	cmp	r3, #2
 8007f50:	d105      	bne.n	8007f5e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d002      	beq.n	8007f5e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	3b01      	subs	r3, #1
 8007f5c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	1c5a      	adds	r2, r3, #1
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8007f66:	697b      	ldr	r3, [r7, #20]
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3718      	adds	r7, #24
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b082      	sub	sp, #8
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d018      	beq.n	8007fb4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	68da      	ldr	r2, [r3, #12]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f8a:	441a      	add	r2, r3
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	68da      	ldr	r2, [r3, #12]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	689b      	ldr	r3, [r3, #8]
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d303      	bcc.n	8007fa4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	68d9      	ldr	r1, [r3, #12]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fac:	461a      	mov	r2, r3
 8007fae:	6838      	ldr	r0, [r7, #0]
 8007fb0:	f002 f81c 	bl	8009fec <memcpy>
    }
}
 8007fb4:	bf00      	nop
 8007fb6:	3708      	adds	r7, #8
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8007fc4:	f001 fcc8 	bl	8009958 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fce:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007fd0:	e011      	b.n	8007ff6 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d012      	beq.n	8008000 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	3324      	adds	r3, #36	; 0x24
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f000 fc80 	bl	80088e4 <xTaskRemoveFromEventList>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d001      	beq.n	8007fee <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8007fea:	f000 fd59 	bl	8008aa0 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8007fee:	7bfb      	ldrb	r3, [r7, #15]
 8007ff0:	3b01      	subs	r3, #1
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	dce9      	bgt.n	8007fd2 <prvUnlockQueue+0x16>
 8007ffe:	e000      	b.n	8008002 <prvUnlockQueue+0x46>
                        break;
 8008000:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	22ff      	movs	r2, #255	; 0xff
 8008006:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800800a:	f001 fcd5 	bl	80099b8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800800e:	f001 fca3 	bl	8009958 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008018:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800801a:	e011      	b.n	8008040 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	691b      	ldr	r3, [r3, #16]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d012      	beq.n	800804a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	3310      	adds	r3, #16
 8008028:	4618      	mov	r0, r3
 800802a:	f000 fc5b 	bl	80088e4 <xTaskRemoveFromEventList>
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d001      	beq.n	8008038 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8008034:	f000 fd34 	bl	8008aa0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8008038:	7bbb      	ldrb	r3, [r7, #14]
 800803a:	3b01      	subs	r3, #1
 800803c:	b2db      	uxtb	r3, r3
 800803e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8008040:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008044:	2b00      	cmp	r3, #0
 8008046:	dce9      	bgt.n	800801c <prvUnlockQueue+0x60>
 8008048:	e000      	b.n	800804c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800804a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	22ff      	movs	r2, #255	; 0xff
 8008050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8008054:	f001 fcb0 	bl	80099b8 <vPortExitCritical>
}
 8008058:	bf00      	nop
 800805a:	3710      	adds	r7, #16
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8008068:	f001 fc76 	bl	8009958 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008070:	2b00      	cmp	r3, #0
 8008072:	d102      	bne.n	800807a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8008074:	2301      	movs	r3, #1
 8008076:	60fb      	str	r3, [r7, #12]
 8008078:	e001      	b.n	800807e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800807a:	2300      	movs	r3, #0
 800807c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800807e:	f001 fc9b 	bl	80099b8 <vPortExitCritical>

    return xReturn;
 8008082:	68fb      	ldr	r3, [r7, #12]
}
 8008084:	4618      	mov	r0, r3
 8008086:	3710      	adds	r7, #16
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8008094:	f001 fc60 	bl	8009958 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d102      	bne.n	80080aa <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80080a4:	2301      	movs	r3, #1
 80080a6:	60fb      	str	r3, [r7, #12]
 80080a8:	e001      	b.n	80080ae <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80080aa:	2300      	movs	r3, #0
 80080ac:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80080ae:	f001 fc83 	bl	80099b8 <vPortExitCritical>

    return xReturn;
 80080b2:	68fb      	ldr	r3, [r7, #12]
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3710      	adds	r7, #16
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80080bc:	b480      	push	{r7}
 80080be:	b085      	sub	sp, #20
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80080c6:	2300      	movs	r3, #0
 80080c8:	60fb      	str	r3, [r7, #12]
 80080ca:	e014      	b.n	80080f6 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80080cc:	4a0f      	ldr	r2, [pc, #60]	; (800810c <vQueueAddToRegistry+0x50>)
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d10b      	bne.n	80080f0 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80080d8:	490c      	ldr	r1, [pc, #48]	; (800810c <vQueueAddToRegistry+0x50>)
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	683a      	ldr	r2, [r7, #0]
 80080de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80080e2:	4a0a      	ldr	r2, [pc, #40]	; (800810c <vQueueAddToRegistry+0x50>)
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	00db      	lsls	r3, r3, #3
 80080e8:	4413      	add	r3, r2
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80080ee:	e006      	b.n	80080fe <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	3301      	adds	r3, #1
 80080f4:	60fb      	str	r3, [r7, #12]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2b07      	cmp	r3, #7
 80080fa:	d9e7      	bls.n	80080cc <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80080fc:	bf00      	nop
 80080fe:	bf00      	nop
 8008100:	3714      	adds	r7, #20
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr
 800810a:	bf00      	nop
 800810c:	2000039c 	.word	0x2000039c

08008110 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8008110:	b580      	push	{r7, lr}
 8008112:	b086      	sub	sp, #24
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8008120:	f001 fc1a 	bl	8009958 <vPortEnterCritical>
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800812a:	b25b      	sxtb	r3, r3
 800812c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008130:	d103      	bne.n	800813a <vQueueWaitForMessageRestricted+0x2a>
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	2200      	movs	r2, #0
 8008136:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008140:	b25b      	sxtb	r3, r3
 8008142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008146:	d103      	bne.n	8008150 <vQueueWaitForMessageRestricted+0x40>
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	2200      	movs	r2, #0
 800814c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008150:	f001 fc32 	bl	80099b8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008158:	2b00      	cmp	r3, #0
 800815a:	d106      	bne.n	800816a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	3324      	adds	r3, #36	; 0x24
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	68b9      	ldr	r1, [r7, #8]
 8008164:	4618      	mov	r0, r3
 8008166:	f000 fb91 	bl	800888c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800816a:	6978      	ldr	r0, [r7, #20]
 800816c:	f7ff ff26 	bl	8007fbc <prvUnlockQueue>
    }
 8008170:	bf00      	nop
 8008172:	3718      	adds	r7, #24
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8008178:	b580      	push	{r7, lr}
 800817a:	b08c      	sub	sp, #48	; 0x30
 800817c:	af04      	add	r7, sp, #16
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	603b      	str	r3, [r7, #0]
 8008184:	4613      	mov	r3, r2
 8008186:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008188:	88fb      	ldrh	r3, [r7, #6]
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	4618      	mov	r0, r3
 800818e:	f001 fd05 	bl	8009b9c <pvPortMalloc>
 8008192:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d00e      	beq.n	80081b8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800819a:	2058      	movs	r0, #88	; 0x58
 800819c:	f001 fcfe 	bl	8009b9c <pvPortMalloc>
 80081a0:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80081a2:	69fb      	ldr	r3, [r7, #28]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d003      	beq.n	80081b0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80081a8:	69fb      	ldr	r3, [r7, #28]
 80081aa:	697a      	ldr	r2, [r7, #20]
 80081ac:	631a      	str	r2, [r3, #48]	; 0x30
 80081ae:	e005      	b.n	80081bc <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80081b0:	6978      	ldr	r0, [r7, #20]
 80081b2:	f001 fdd3 	bl	8009d5c <vPortFree>
 80081b6:	e001      	b.n	80081bc <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80081b8:	2300      	movs	r3, #0
 80081ba:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d013      	beq.n	80081ea <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80081c2:	88fa      	ldrh	r2, [r7, #6]
 80081c4:	2300      	movs	r3, #0
 80081c6:	9303      	str	r3, [sp, #12]
 80081c8:	69fb      	ldr	r3, [r7, #28]
 80081ca:	9302      	str	r3, [sp, #8]
 80081cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ce:	9301      	str	r3, [sp, #4]
 80081d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d2:	9300      	str	r3, [sp, #0]
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	68b9      	ldr	r1, [r7, #8]
 80081d8:	68f8      	ldr	r0, [r7, #12]
 80081da:	f000 f80e 	bl	80081fa <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80081de:	69f8      	ldr	r0, [r7, #28]
 80081e0:	f000 f8a2 	bl	8008328 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80081e4:	2301      	movs	r3, #1
 80081e6:	61bb      	str	r3, [r7, #24]
 80081e8:	e002      	b.n	80081f0 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80081ea:	f04f 33ff 	mov.w	r3, #4294967295
 80081ee:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80081f0:	69bb      	ldr	r3, [r7, #24]
    }
 80081f2:	4618      	mov	r0, r3
 80081f4:	3720      	adds	r7, #32
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}

080081fa <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80081fa:	b580      	push	{r7, lr}
 80081fc:	b088      	sub	sp, #32
 80081fe:	af00      	add	r7, sp, #0
 8008200:	60f8      	str	r0, [r7, #12]
 8008202:	60b9      	str	r1, [r7, #8]
 8008204:	607a      	str	r2, [r7, #4]
 8008206:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	461a      	mov	r2, r3
 8008212:	21a5      	movs	r1, #165	; 0xa5
 8008214:	f001 fef8 	bl	800a008 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800821a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008222:	3b01      	subs	r3, #1
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	4413      	add	r3, r2
 8008228:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800822a:	69bb      	ldr	r3, [r7, #24]
 800822c:	f023 0307 	bic.w	r3, r3, #7
 8008230:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	f003 0307 	and.w	r3, r3, #7
 8008238:	2b00      	cmp	r3, #0
 800823a:	d00a      	beq.n	8008252 <prvInitialiseNewTask+0x58>
        __asm volatile
 800823c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008240:	f383 8811 	msr	BASEPRI, r3
 8008244:	f3bf 8f6f 	isb	sy
 8008248:	f3bf 8f4f 	dsb	sy
 800824c:	617b      	str	r3, [r7, #20]
    }
 800824e:	bf00      	nop
 8008250:	e7fe      	b.n	8008250 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d01f      	beq.n	8008298 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008258:	2300      	movs	r3, #0
 800825a:	61fb      	str	r3, [r7, #28]
 800825c:	e012      	b.n	8008284 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800825e:	68ba      	ldr	r2, [r7, #8]
 8008260:	69fb      	ldr	r3, [r7, #28]
 8008262:	4413      	add	r3, r2
 8008264:	7819      	ldrb	r1, [r3, #0]
 8008266:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	4413      	add	r3, r2
 800826c:	3334      	adds	r3, #52	; 0x34
 800826e:	460a      	mov	r2, r1
 8008270:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8008272:	68ba      	ldr	r2, [r7, #8]
 8008274:	69fb      	ldr	r3, [r7, #28]
 8008276:	4413      	add	r3, r2
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d006      	beq.n	800828c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	3301      	adds	r3, #1
 8008282:	61fb      	str	r3, [r7, #28]
 8008284:	69fb      	ldr	r3, [r7, #28]
 8008286:	2b09      	cmp	r3, #9
 8008288:	d9e9      	bls.n	800825e <prvInitialiseNewTask+0x64>
 800828a:	e000      	b.n	800828e <prvInitialiseNewTask+0x94>
            {
                break;
 800828c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800828e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008290:	2200      	movs	r2, #0
 8008292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008296:	e003      	b.n	80082a0 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800829a:	2200      	movs	r2, #0
 800829c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80082a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a2:	2b04      	cmp	r3, #4
 80082a4:	d901      	bls.n	80082aa <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80082a6:	2304      	movs	r3, #4
 80082a8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80082aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082ae:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80082b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082b4:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80082b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b8:	2200      	movs	r2, #0
 80082ba:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80082bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082be:	3304      	adds	r3, #4
 80082c0:	4618      	mov	r0, r3
 80082c2:	f7ff f9e5 	bl	8007690 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80082c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c8:	3318      	adds	r3, #24
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7ff f9e0 	bl	8007690 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80082d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082d4:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d8:	f1c3 0205 	rsb	r2, r3, #5
 80082dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082de:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80082e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082e4:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80082e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e8:	3350      	adds	r3, #80	; 0x50
 80082ea:	2204      	movs	r2, #4
 80082ec:	2100      	movs	r1, #0
 80082ee:	4618      	mov	r0, r3
 80082f0:	f001 fe8a 	bl	800a008 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80082f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f6:	3354      	adds	r3, #84	; 0x54
 80082f8:	2201      	movs	r2, #1
 80082fa:	2100      	movs	r1, #0
 80082fc:	4618      	mov	r0, r3
 80082fe:	f001 fe83 	bl	800a008 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008302:	683a      	ldr	r2, [r7, #0]
 8008304:	68f9      	ldr	r1, [r7, #12]
 8008306:	69b8      	ldr	r0, [r7, #24]
 8008308:	f001 f9f8 	bl	80096fc <pxPortInitialiseStack>
 800830c:	4602      	mov	r2, r0
 800830e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008310:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8008312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008314:	2b00      	cmp	r3, #0
 8008316:	d002      	beq.n	800831e <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800831a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800831c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800831e:	bf00      	nop
 8008320:	3720      	adds	r7, #32
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
	...

08008328 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8008330:	f001 fb12 	bl	8009958 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8008334:	4b2c      	ldr	r3, [pc, #176]	; (80083e8 <prvAddNewTaskToReadyList+0xc0>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	3301      	adds	r3, #1
 800833a:	4a2b      	ldr	r2, [pc, #172]	; (80083e8 <prvAddNewTaskToReadyList+0xc0>)
 800833c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800833e:	4b2b      	ldr	r3, [pc, #172]	; (80083ec <prvAddNewTaskToReadyList+0xc4>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d109      	bne.n	800835a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8008346:	4a29      	ldr	r2, [pc, #164]	; (80083ec <prvAddNewTaskToReadyList+0xc4>)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800834c:	4b26      	ldr	r3, [pc, #152]	; (80083e8 <prvAddNewTaskToReadyList+0xc0>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2b01      	cmp	r3, #1
 8008352:	d110      	bne.n	8008376 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8008354:	f000 fbc8 	bl	8008ae8 <prvInitialiseTaskLists>
 8008358:	e00d      	b.n	8008376 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800835a:	4b25      	ldr	r3, [pc, #148]	; (80083f0 <prvAddNewTaskToReadyList+0xc8>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d109      	bne.n	8008376 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008362:	4b22      	ldr	r3, [pc, #136]	; (80083ec <prvAddNewTaskToReadyList+0xc4>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800836c:	429a      	cmp	r2, r3
 800836e:	d802      	bhi.n	8008376 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8008370:	4a1e      	ldr	r2, [pc, #120]	; (80083ec <prvAddNewTaskToReadyList+0xc4>)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8008376:	4b1f      	ldr	r3, [pc, #124]	; (80083f4 <prvAddNewTaskToReadyList+0xcc>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	3301      	adds	r3, #1
 800837c:	4a1d      	ldr	r2, [pc, #116]	; (80083f4 <prvAddNewTaskToReadyList+0xcc>)
 800837e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008380:	4b1c      	ldr	r3, [pc, #112]	; (80083f4 <prvAddNewTaskToReadyList+0xcc>)
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800838c:	2201      	movs	r2, #1
 800838e:	409a      	lsls	r2, r3
 8008390:	4b19      	ldr	r3, [pc, #100]	; (80083f8 <prvAddNewTaskToReadyList+0xd0>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4313      	orrs	r3, r2
 8008396:	4a18      	ldr	r2, [pc, #96]	; (80083f8 <prvAddNewTaskToReadyList+0xd0>)
 8008398:	6013      	str	r3, [r2, #0]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800839e:	4613      	mov	r3, r2
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	4413      	add	r3, r2
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	4a15      	ldr	r2, [pc, #84]	; (80083fc <prvAddNewTaskToReadyList+0xd4>)
 80083a8:	441a      	add	r2, r3
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	3304      	adds	r3, #4
 80083ae:	4619      	mov	r1, r3
 80083b0:	4610      	mov	r0, r2
 80083b2:	f7ff f97a 	bl	80076aa <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80083b6:	f001 faff 	bl	80099b8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80083ba:	4b0d      	ldr	r3, [pc, #52]	; (80083f0 <prvAddNewTaskToReadyList+0xc8>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d00e      	beq.n	80083e0 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80083c2:	4b0a      	ldr	r3, [pc, #40]	; (80083ec <prvAddNewTaskToReadyList+0xc4>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d207      	bcs.n	80083e0 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80083d0:	4b0b      	ldr	r3, [pc, #44]	; (8008400 <prvAddNewTaskToReadyList+0xd8>)
 80083d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083d6:	601a      	str	r2, [r3, #0]
 80083d8:	f3bf 8f4f 	dsb	sy
 80083dc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80083e0:	bf00      	nop
 80083e2:	3708      	adds	r7, #8
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	200004b4 	.word	0x200004b4
 80083ec:	200003dc 	.word	0x200003dc
 80083f0:	200004c0 	.word	0x200004c0
 80083f4:	200004d0 	.word	0x200004d0
 80083f8:	200004bc 	.word	0x200004bc
 80083fc:	200003e0 	.word	0x200003e0
 8008400:	e000ed04 	.word	0xe000ed04

08008404 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b086      	sub	sp, #24
 8008408:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800840a:	4b20      	ldr	r3, [pc, #128]	; (800848c <vTaskStartScheduler+0x88>)
 800840c:	9301      	str	r3, [sp, #4]
 800840e:	2300      	movs	r3, #0
 8008410:	9300      	str	r3, [sp, #0]
 8008412:	2300      	movs	r3, #0
 8008414:	2282      	movs	r2, #130	; 0x82
 8008416:	491e      	ldr	r1, [pc, #120]	; (8008490 <vTaskStartScheduler+0x8c>)
 8008418:	481e      	ldr	r0, [pc, #120]	; (8008494 <vTaskStartScheduler+0x90>)
 800841a:	f7ff fead 	bl	8008178 <xTaskCreate>
 800841e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2b01      	cmp	r3, #1
 8008424:	d102      	bne.n	800842c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8008426:	f000 fe57 	bl	80090d8 <xTimerCreateTimerTask>
 800842a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2b01      	cmp	r3, #1
 8008430:	d116      	bne.n	8008460 <vTaskStartScheduler+0x5c>
        __asm volatile
 8008432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008436:	f383 8811 	msr	BASEPRI, r3
 800843a:	f3bf 8f6f 	isb	sy
 800843e:	f3bf 8f4f 	dsb	sy
 8008442:	60bb      	str	r3, [r7, #8]
    }
 8008444:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8008446:	4b14      	ldr	r3, [pc, #80]	; (8008498 <vTaskStartScheduler+0x94>)
 8008448:	f04f 32ff 	mov.w	r2, #4294967295
 800844c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800844e:	4b13      	ldr	r3, [pc, #76]	; (800849c <vTaskStartScheduler+0x98>)
 8008450:	2201      	movs	r2, #1
 8008452:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008454:	4b12      	ldr	r3, [pc, #72]	; (80084a0 <vTaskStartScheduler+0x9c>)
 8008456:	2200      	movs	r2, #0
 8008458:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800845a:	f001 f9db 	bl	8009814 <xPortStartScheduler>
 800845e:	e00e      	b.n	800847e <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008466:	d10a      	bne.n	800847e <vTaskStartScheduler+0x7a>
        __asm volatile
 8008468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800846c:	f383 8811 	msr	BASEPRI, r3
 8008470:	f3bf 8f6f 	isb	sy
 8008474:	f3bf 8f4f 	dsb	sy
 8008478:	607b      	str	r3, [r7, #4]
    }
 800847a:	bf00      	nop
 800847c:	e7fe      	b.n	800847c <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800847e:	4b09      	ldr	r3, [pc, #36]	; (80084a4 <vTaskStartScheduler+0xa0>)
 8008480:	681b      	ldr	r3, [r3, #0]
}
 8008482:	bf00      	nop
 8008484:	3710      	adds	r7, #16
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop
 800848c:	200004d8 	.word	0x200004d8
 8008490:	0800d228 	.word	0x0800d228
 8008494:	08008ab9 	.word	0x08008ab9
 8008498:	200004d4 	.word	0x200004d4
 800849c:	200004c0 	.word	0x200004c0
 80084a0:	200004b8 	.word	0x200004b8
 80084a4:	2000003c 	.word	0x2000003c

080084a8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80084a8:	b480      	push	{r7}
 80084aa:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80084ac:	4b04      	ldr	r3, [pc, #16]	; (80084c0 <vTaskSuspendAll+0x18>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	3301      	adds	r3, #1
 80084b2:	4a03      	ldr	r2, [pc, #12]	; (80084c0 <vTaskSuspendAll+0x18>)
 80084b4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80084b6:	bf00      	nop
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr
 80084c0:	200004dc 	.word	0x200004dc

080084c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b084      	sub	sp, #16
 80084c8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80084ca:	2300      	movs	r3, #0
 80084cc:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80084ce:	2300      	movs	r3, #0
 80084d0:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80084d2:	4b41      	ldr	r3, [pc, #260]	; (80085d8 <xTaskResumeAll+0x114>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d10a      	bne.n	80084f0 <xTaskResumeAll+0x2c>
        __asm volatile
 80084da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084de:	f383 8811 	msr	BASEPRI, r3
 80084e2:	f3bf 8f6f 	isb	sy
 80084e6:	f3bf 8f4f 	dsb	sy
 80084ea:	603b      	str	r3, [r7, #0]
    }
 80084ec:	bf00      	nop
 80084ee:	e7fe      	b.n	80084ee <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80084f0:	f001 fa32 	bl	8009958 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80084f4:	4b38      	ldr	r3, [pc, #224]	; (80085d8 <xTaskResumeAll+0x114>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	3b01      	subs	r3, #1
 80084fa:	4a37      	ldr	r2, [pc, #220]	; (80085d8 <xTaskResumeAll+0x114>)
 80084fc:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084fe:	4b36      	ldr	r3, [pc, #216]	; (80085d8 <xTaskResumeAll+0x114>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d161      	bne.n	80085ca <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008506:	4b35      	ldr	r3, [pc, #212]	; (80085dc <xTaskResumeAll+0x118>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d05d      	beq.n	80085ca <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800850e:	e02e      	b.n	800856e <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008510:	4b33      	ldr	r3, [pc, #204]	; (80085e0 <xTaskResumeAll+0x11c>)
 8008512:	68db      	ldr	r3, [r3, #12]
 8008514:	68db      	ldr	r3, [r3, #12]
 8008516:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	3318      	adds	r3, #24
 800851c:	4618      	mov	r0, r3
 800851e:	f7ff f921 	bl	8007764 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	3304      	adds	r3, #4
 8008526:	4618      	mov	r0, r3
 8008528:	f7ff f91c 	bl	8007764 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008530:	2201      	movs	r2, #1
 8008532:	409a      	lsls	r2, r3
 8008534:	4b2b      	ldr	r3, [pc, #172]	; (80085e4 <xTaskResumeAll+0x120>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4313      	orrs	r3, r2
 800853a:	4a2a      	ldr	r2, [pc, #168]	; (80085e4 <xTaskResumeAll+0x120>)
 800853c:	6013      	str	r3, [r2, #0]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008542:	4613      	mov	r3, r2
 8008544:	009b      	lsls	r3, r3, #2
 8008546:	4413      	add	r3, r2
 8008548:	009b      	lsls	r3, r3, #2
 800854a:	4a27      	ldr	r2, [pc, #156]	; (80085e8 <xTaskResumeAll+0x124>)
 800854c:	441a      	add	r2, r3
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	3304      	adds	r3, #4
 8008552:	4619      	mov	r1, r3
 8008554:	4610      	mov	r0, r2
 8008556:	f7ff f8a8 	bl	80076aa <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800855e:	4b23      	ldr	r3, [pc, #140]	; (80085ec <xTaskResumeAll+0x128>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008564:	429a      	cmp	r2, r3
 8008566:	d302      	bcc.n	800856e <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8008568:	4b21      	ldr	r3, [pc, #132]	; (80085f0 <xTaskResumeAll+0x12c>)
 800856a:	2201      	movs	r2, #1
 800856c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800856e:	4b1c      	ldr	r3, [pc, #112]	; (80085e0 <xTaskResumeAll+0x11c>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d1cc      	bne.n	8008510 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d001      	beq.n	8008580 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800857c:	f000 fb32 	bl	8008be4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008580:	4b1c      	ldr	r3, [pc, #112]	; (80085f4 <xTaskResumeAll+0x130>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d010      	beq.n	80085ae <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800858c:	f000 f846 	bl	800861c <xTaskIncrementTick>
 8008590:	4603      	mov	r3, r0
 8008592:	2b00      	cmp	r3, #0
 8008594:	d002      	beq.n	800859c <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8008596:	4b16      	ldr	r3, [pc, #88]	; (80085f0 <xTaskResumeAll+0x12c>)
 8008598:	2201      	movs	r2, #1
 800859a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	3b01      	subs	r3, #1
 80085a0:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d1f1      	bne.n	800858c <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 80085a8:	4b12      	ldr	r3, [pc, #72]	; (80085f4 <xTaskResumeAll+0x130>)
 80085aa:	2200      	movs	r2, #0
 80085ac:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80085ae:	4b10      	ldr	r3, [pc, #64]	; (80085f0 <xTaskResumeAll+0x12c>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d009      	beq.n	80085ca <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80085b6:	2301      	movs	r3, #1
 80085b8:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80085ba:	4b0f      	ldr	r3, [pc, #60]	; (80085f8 <xTaskResumeAll+0x134>)
 80085bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085c0:	601a      	str	r2, [r3, #0]
 80085c2:	f3bf 8f4f 	dsb	sy
 80085c6:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80085ca:	f001 f9f5 	bl	80099b8 <vPortExitCritical>

    return xAlreadyYielded;
 80085ce:	68bb      	ldr	r3, [r7, #8]
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3710      	adds	r7, #16
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}
 80085d8:	200004dc 	.word	0x200004dc
 80085dc:	200004b4 	.word	0x200004b4
 80085e0:	20000474 	.word	0x20000474
 80085e4:	200004bc 	.word	0x200004bc
 80085e8:	200003e0 	.word	0x200003e0
 80085ec:	200003dc 	.word	0x200003dc
 80085f0:	200004c8 	.word	0x200004c8
 80085f4:	200004c4 	.word	0x200004c4
 80085f8:	e000ed04 	.word	0xe000ed04

080085fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80085fc:	b480      	push	{r7}
 80085fe:	b083      	sub	sp, #12
 8008600:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8008602:	4b05      	ldr	r3, [pc, #20]	; (8008618 <xTaskGetTickCount+0x1c>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8008608:	687b      	ldr	r3, [r7, #4]
}
 800860a:	4618      	mov	r0, r3
 800860c:	370c      	adds	r7, #12
 800860e:	46bd      	mov	sp, r7
 8008610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008614:	4770      	bx	lr
 8008616:	bf00      	nop
 8008618:	200004b8 	.word	0x200004b8

0800861c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b086      	sub	sp, #24
 8008620:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8008622:	2300      	movs	r3, #0
 8008624:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008626:	4b4e      	ldr	r3, [pc, #312]	; (8008760 <xTaskIncrementTick+0x144>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	2b00      	cmp	r3, #0
 800862c:	f040 808e 	bne.w	800874c <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008630:	4b4c      	ldr	r3, [pc, #304]	; (8008764 <xTaskIncrementTick+0x148>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	3301      	adds	r3, #1
 8008636:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8008638:	4a4a      	ldr	r2, [pc, #296]	; (8008764 <xTaskIncrementTick+0x148>)
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d120      	bne.n	8008686 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8008644:	4b48      	ldr	r3, [pc, #288]	; (8008768 <xTaskIncrementTick+0x14c>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d00a      	beq.n	8008664 <xTaskIncrementTick+0x48>
        __asm volatile
 800864e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008652:	f383 8811 	msr	BASEPRI, r3
 8008656:	f3bf 8f6f 	isb	sy
 800865a:	f3bf 8f4f 	dsb	sy
 800865e:	603b      	str	r3, [r7, #0]
    }
 8008660:	bf00      	nop
 8008662:	e7fe      	b.n	8008662 <xTaskIncrementTick+0x46>
 8008664:	4b40      	ldr	r3, [pc, #256]	; (8008768 <xTaskIncrementTick+0x14c>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	60fb      	str	r3, [r7, #12]
 800866a:	4b40      	ldr	r3, [pc, #256]	; (800876c <xTaskIncrementTick+0x150>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a3e      	ldr	r2, [pc, #248]	; (8008768 <xTaskIncrementTick+0x14c>)
 8008670:	6013      	str	r3, [r2, #0]
 8008672:	4a3e      	ldr	r2, [pc, #248]	; (800876c <xTaskIncrementTick+0x150>)
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	6013      	str	r3, [r2, #0]
 8008678:	4b3d      	ldr	r3, [pc, #244]	; (8008770 <xTaskIncrementTick+0x154>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	3301      	adds	r3, #1
 800867e:	4a3c      	ldr	r2, [pc, #240]	; (8008770 <xTaskIncrementTick+0x154>)
 8008680:	6013      	str	r3, [r2, #0]
 8008682:	f000 faaf 	bl	8008be4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8008686:	4b3b      	ldr	r3, [pc, #236]	; (8008774 <xTaskIncrementTick+0x158>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	693a      	ldr	r2, [r7, #16]
 800868c:	429a      	cmp	r2, r3
 800868e:	d348      	bcc.n	8008722 <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008690:	4b35      	ldr	r3, [pc, #212]	; (8008768 <xTaskIncrementTick+0x14c>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d104      	bne.n	80086a4 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800869a:	4b36      	ldr	r3, [pc, #216]	; (8008774 <xTaskIncrementTick+0x158>)
 800869c:	f04f 32ff 	mov.w	r2, #4294967295
 80086a0:	601a      	str	r2, [r3, #0]
                    break;
 80086a2:	e03e      	b.n	8008722 <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086a4:	4b30      	ldr	r3, [pc, #192]	; (8008768 <xTaskIncrementTick+0x14c>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	68db      	ldr	r3, [r3, #12]
 80086aa:	68db      	ldr	r3, [r3, #12]
 80086ac:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80086b4:	693a      	ldr	r2, [r7, #16]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d203      	bcs.n	80086c4 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80086bc:	4a2d      	ldr	r2, [pc, #180]	; (8008774 <xTaskIncrementTick+0x158>)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80086c2:	e02e      	b.n	8008722 <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	3304      	adds	r3, #4
 80086c8:	4618      	mov	r0, r3
 80086ca:	f7ff f84b 	bl	8007764 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d004      	beq.n	80086e0 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	3318      	adds	r3, #24
 80086da:	4618      	mov	r0, r3
 80086dc:	f7ff f842 	bl	8007764 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e4:	2201      	movs	r2, #1
 80086e6:	409a      	lsls	r2, r3
 80086e8:	4b23      	ldr	r3, [pc, #140]	; (8008778 <xTaskIncrementTick+0x15c>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4313      	orrs	r3, r2
 80086ee:	4a22      	ldr	r2, [pc, #136]	; (8008778 <xTaskIncrementTick+0x15c>)
 80086f0:	6013      	str	r3, [r2, #0]
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086f6:	4613      	mov	r3, r2
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	4413      	add	r3, r2
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	4a1f      	ldr	r2, [pc, #124]	; (800877c <xTaskIncrementTick+0x160>)
 8008700:	441a      	add	r2, r3
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	3304      	adds	r3, #4
 8008706:	4619      	mov	r1, r3
 8008708:	4610      	mov	r0, r2
 800870a:	f7fe ffce 	bl	80076aa <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008712:	4b1b      	ldr	r3, [pc, #108]	; (8008780 <xTaskIncrementTick+0x164>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008718:	429a      	cmp	r2, r3
 800871a:	d3b9      	bcc.n	8008690 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 800871c:	2301      	movs	r3, #1
 800871e:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008720:	e7b6      	b.n	8008690 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008722:	4b17      	ldr	r3, [pc, #92]	; (8008780 <xTaskIncrementTick+0x164>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008728:	4914      	ldr	r1, [pc, #80]	; (800877c <xTaskIncrementTick+0x160>)
 800872a:	4613      	mov	r3, r2
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	4413      	add	r3, r2
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	440b      	add	r3, r1
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	2b01      	cmp	r3, #1
 8008738:	d901      	bls.n	800873e <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 800873a:	2301      	movs	r3, #1
 800873c:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800873e:	4b11      	ldr	r3, [pc, #68]	; (8008784 <xTaskIncrementTick+0x168>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d007      	beq.n	8008756 <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8008746:	2301      	movs	r3, #1
 8008748:	617b      	str	r3, [r7, #20]
 800874a:	e004      	b.n	8008756 <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800874c:	4b0e      	ldr	r3, [pc, #56]	; (8008788 <xTaskIncrementTick+0x16c>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	3301      	adds	r3, #1
 8008752:	4a0d      	ldr	r2, [pc, #52]	; (8008788 <xTaskIncrementTick+0x16c>)
 8008754:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8008756:	697b      	ldr	r3, [r7, #20]
}
 8008758:	4618      	mov	r0, r3
 800875a:	3718      	adds	r7, #24
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}
 8008760:	200004dc 	.word	0x200004dc
 8008764:	200004b8 	.word	0x200004b8
 8008768:	2000046c 	.word	0x2000046c
 800876c:	20000470 	.word	0x20000470
 8008770:	200004cc 	.word	0x200004cc
 8008774:	200004d4 	.word	0x200004d4
 8008778:	200004bc 	.word	0x200004bc
 800877c:	200003e0 	.word	0x200003e0
 8008780:	200003dc 	.word	0x200003dc
 8008784:	200004c8 	.word	0x200004c8
 8008788:	200004c4 	.word	0x200004c4

0800878c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800878c:	b480      	push	{r7}
 800878e:	b087      	sub	sp, #28
 8008790:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008792:	4b27      	ldr	r3, [pc, #156]	; (8008830 <vTaskSwitchContext+0xa4>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d003      	beq.n	80087a2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800879a:	4b26      	ldr	r3, [pc, #152]	; (8008834 <vTaskSwitchContext+0xa8>)
 800879c:	2201      	movs	r2, #1
 800879e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80087a0:	e03f      	b.n	8008822 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80087a2:	4b24      	ldr	r3, [pc, #144]	; (8008834 <vTaskSwitchContext+0xa8>)
 80087a4:	2200      	movs	r2, #0
 80087a6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087a8:	4b23      	ldr	r3, [pc, #140]	; (8008838 <vTaskSwitchContext+0xac>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	fab3 f383 	clz	r3, r3
 80087b4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80087b6:	7afb      	ldrb	r3, [r7, #11]
 80087b8:	f1c3 031f 	rsb	r3, r3, #31
 80087bc:	617b      	str	r3, [r7, #20]
 80087be:	491f      	ldr	r1, [pc, #124]	; (800883c <vTaskSwitchContext+0xb0>)
 80087c0:	697a      	ldr	r2, [r7, #20]
 80087c2:	4613      	mov	r3, r2
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	4413      	add	r3, r2
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	440b      	add	r3, r1
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d10a      	bne.n	80087e8 <vTaskSwitchContext+0x5c>
        __asm volatile
 80087d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d6:	f383 8811 	msr	BASEPRI, r3
 80087da:	f3bf 8f6f 	isb	sy
 80087de:	f3bf 8f4f 	dsb	sy
 80087e2:	607b      	str	r3, [r7, #4]
    }
 80087e4:	bf00      	nop
 80087e6:	e7fe      	b.n	80087e6 <vTaskSwitchContext+0x5a>
 80087e8:	697a      	ldr	r2, [r7, #20]
 80087ea:	4613      	mov	r3, r2
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	4413      	add	r3, r2
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	4a12      	ldr	r2, [pc, #72]	; (800883c <vTaskSwitchContext+0xb0>)
 80087f4:	4413      	add	r3, r2
 80087f6:	613b      	str	r3, [r7, #16]
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	685a      	ldr	r2, [r3, #4]
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	605a      	str	r2, [r3, #4]
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	685a      	ldr	r2, [r3, #4]
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	3308      	adds	r3, #8
 800880a:	429a      	cmp	r2, r3
 800880c:	d104      	bne.n	8008818 <vTaskSwitchContext+0x8c>
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	685a      	ldr	r2, [r3, #4]
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	605a      	str	r2, [r3, #4]
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	68db      	ldr	r3, [r3, #12]
 800881e:	4a08      	ldr	r2, [pc, #32]	; (8008840 <vTaskSwitchContext+0xb4>)
 8008820:	6013      	str	r3, [r2, #0]
}
 8008822:	bf00      	nop
 8008824:	371c      	adds	r7, #28
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr
 800882e:	bf00      	nop
 8008830:	200004dc 	.word	0x200004dc
 8008834:	200004c8 	.word	0x200004c8
 8008838:	200004bc 	.word	0x200004bc
 800883c:	200003e0 	.word	0x200003e0
 8008840:	200003dc 	.word	0x200003dc

08008844 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b084      	sub	sp, #16
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d10a      	bne.n	800886a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8008854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008858:	f383 8811 	msr	BASEPRI, r3
 800885c:	f3bf 8f6f 	isb	sy
 8008860:	f3bf 8f4f 	dsb	sy
 8008864:	60fb      	str	r3, [r7, #12]
    }
 8008866:	bf00      	nop
 8008868:	e7fe      	b.n	8008868 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800886a:	4b07      	ldr	r3, [pc, #28]	; (8008888 <vTaskPlaceOnEventList+0x44>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	3318      	adds	r3, #24
 8008870:	4619      	mov	r1, r3
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f7fe ff3d 	bl	80076f2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008878:	2101      	movs	r1, #1
 800887a:	6838      	ldr	r0, [r7, #0]
 800887c:	f000 fbc6 	bl	800900c <prvAddCurrentTaskToDelayedList>
}
 8008880:	bf00      	nop
 8008882:	3710      	adds	r7, #16
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}
 8008888:	200003dc 	.word	0x200003dc

0800888c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800888c:	b580      	push	{r7, lr}
 800888e:	b086      	sub	sp, #24
 8008890:	af00      	add	r7, sp, #0
 8008892:	60f8      	str	r0, [r7, #12]
 8008894:	60b9      	str	r1, [r7, #8]
 8008896:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d10a      	bne.n	80088b4 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800889e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a2:	f383 8811 	msr	BASEPRI, r3
 80088a6:	f3bf 8f6f 	isb	sy
 80088aa:	f3bf 8f4f 	dsb	sy
 80088ae:	617b      	str	r3, [r7, #20]
    }
 80088b0:	bf00      	nop
 80088b2:	e7fe      	b.n	80088b2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80088b4:	4b0a      	ldr	r3, [pc, #40]	; (80088e0 <vTaskPlaceOnEventListRestricted+0x54>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	3318      	adds	r3, #24
 80088ba:	4619      	mov	r1, r3
 80088bc:	68f8      	ldr	r0, [r7, #12]
 80088be:	f7fe fef4 	bl	80076aa <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d002      	beq.n	80088ce <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80088c8:	f04f 33ff 	mov.w	r3, #4294967295
 80088cc:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80088ce:	6879      	ldr	r1, [r7, #4]
 80088d0:	68b8      	ldr	r0, [r7, #8]
 80088d2:	f000 fb9b 	bl	800900c <prvAddCurrentTaskToDelayedList>
    }
 80088d6:	bf00      	nop
 80088d8:	3718      	adds	r7, #24
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	bf00      	nop
 80088e0:	200003dc 	.word	0x200003dc

080088e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b086      	sub	sp, #24
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	68db      	ldr	r3, [r3, #12]
 80088f0:	68db      	ldr	r3, [r3, #12]
 80088f2:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d10a      	bne.n	8008910 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80088fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088fe:	f383 8811 	msr	BASEPRI, r3
 8008902:	f3bf 8f6f 	isb	sy
 8008906:	f3bf 8f4f 	dsb	sy
 800890a:	60fb      	str	r3, [r7, #12]
    }
 800890c:	bf00      	nop
 800890e:	e7fe      	b.n	800890e <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	3318      	adds	r3, #24
 8008914:	4618      	mov	r0, r3
 8008916:	f7fe ff25 	bl	8007764 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800891a:	4b1d      	ldr	r3, [pc, #116]	; (8008990 <xTaskRemoveFromEventList+0xac>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d11c      	bne.n	800895c <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	3304      	adds	r3, #4
 8008926:	4618      	mov	r0, r3
 8008928:	f7fe ff1c 	bl	8007764 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008930:	2201      	movs	r2, #1
 8008932:	409a      	lsls	r2, r3
 8008934:	4b17      	ldr	r3, [pc, #92]	; (8008994 <xTaskRemoveFromEventList+0xb0>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4313      	orrs	r3, r2
 800893a:	4a16      	ldr	r2, [pc, #88]	; (8008994 <xTaskRemoveFromEventList+0xb0>)
 800893c:	6013      	str	r3, [r2, #0]
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008942:	4613      	mov	r3, r2
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	4413      	add	r3, r2
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	4a13      	ldr	r2, [pc, #76]	; (8008998 <xTaskRemoveFromEventList+0xb4>)
 800894c:	441a      	add	r2, r3
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	3304      	adds	r3, #4
 8008952:	4619      	mov	r1, r3
 8008954:	4610      	mov	r0, r2
 8008956:	f7fe fea8 	bl	80076aa <vListInsertEnd>
 800895a:	e005      	b.n	8008968 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	3318      	adds	r3, #24
 8008960:	4619      	mov	r1, r3
 8008962:	480e      	ldr	r0, [pc, #56]	; (800899c <xTaskRemoveFromEventList+0xb8>)
 8008964:	f7fe fea1 	bl	80076aa <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800896c:	4b0c      	ldr	r3, [pc, #48]	; (80089a0 <xTaskRemoveFromEventList+0xbc>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008972:	429a      	cmp	r2, r3
 8008974:	d905      	bls.n	8008982 <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8008976:	2301      	movs	r3, #1
 8008978:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800897a:	4b0a      	ldr	r3, [pc, #40]	; (80089a4 <xTaskRemoveFromEventList+0xc0>)
 800897c:	2201      	movs	r2, #1
 800897e:	601a      	str	r2, [r3, #0]
 8008980:	e001      	b.n	8008986 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8008982:	2300      	movs	r3, #0
 8008984:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8008986:	697b      	ldr	r3, [r7, #20]
}
 8008988:	4618      	mov	r0, r3
 800898a:	3718      	adds	r7, #24
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}
 8008990:	200004dc 	.word	0x200004dc
 8008994:	200004bc 	.word	0x200004bc
 8008998:	200003e0 	.word	0x200003e0
 800899c:	20000474 	.word	0x20000474
 80089a0:	200003dc 	.word	0x200003dc
 80089a4:	200004c8 	.word	0x200004c8

080089a8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80089a8:	b480      	push	{r7}
 80089aa:	b083      	sub	sp, #12
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80089b0:	4b06      	ldr	r3, [pc, #24]	; (80089cc <vTaskInternalSetTimeOutState+0x24>)
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80089b8:	4b05      	ldr	r3, [pc, #20]	; (80089d0 <vTaskInternalSetTimeOutState+0x28>)
 80089ba:	681a      	ldr	r2, [r3, #0]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	605a      	str	r2, [r3, #4]
}
 80089c0:	bf00      	nop
 80089c2:	370c      	adds	r7, #12
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr
 80089cc:	200004cc 	.word	0x200004cc
 80089d0:	200004b8 	.word	0x200004b8

080089d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b088      	sub	sp, #32
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d10a      	bne.n	80089fa <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80089e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e8:	f383 8811 	msr	BASEPRI, r3
 80089ec:	f3bf 8f6f 	isb	sy
 80089f0:	f3bf 8f4f 	dsb	sy
 80089f4:	613b      	str	r3, [r7, #16]
    }
 80089f6:	bf00      	nop
 80089f8:	e7fe      	b.n	80089f8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d10a      	bne.n	8008a16 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8008a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a04:	f383 8811 	msr	BASEPRI, r3
 8008a08:	f3bf 8f6f 	isb	sy
 8008a0c:	f3bf 8f4f 	dsb	sy
 8008a10:	60fb      	str	r3, [r7, #12]
    }
 8008a12:	bf00      	nop
 8008a14:	e7fe      	b.n	8008a14 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8008a16:	f000 ff9f 	bl	8009958 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8008a1a:	4b1f      	ldr	r3, [pc, #124]	; (8008a98 <xTaskCheckForTimeOut+0xc4>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	69ba      	ldr	r2, [r7, #24]
 8008a26:	1ad3      	subs	r3, r2, r3
 8008a28:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a32:	d102      	bne.n	8008a3a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8008a34:	2300      	movs	r3, #0
 8008a36:	61fb      	str	r3, [r7, #28]
 8008a38:	e026      	b.n	8008a88 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	4b17      	ldr	r3, [pc, #92]	; (8008a9c <xTaskCheckForTimeOut+0xc8>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d00a      	beq.n	8008a5c <xTaskCheckForTimeOut+0x88>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	69ba      	ldr	r2, [r7, #24]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d305      	bcc.n	8008a5c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8008a50:	2301      	movs	r3, #1
 8008a52:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	2200      	movs	r2, #0
 8008a58:	601a      	str	r2, [r3, #0]
 8008a5a:	e015      	b.n	8008a88 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	697a      	ldr	r2, [r7, #20]
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d20b      	bcs.n	8008a7e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	1ad2      	subs	r2, r2, r3
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f7ff ff98 	bl	80089a8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	61fb      	str	r3, [r7, #28]
 8008a7c:	e004      	b.n	8008a88 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	2200      	movs	r2, #0
 8008a82:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8008a84:	2301      	movs	r3, #1
 8008a86:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8008a88:	f000 ff96 	bl	80099b8 <vPortExitCritical>

    return xReturn;
 8008a8c:	69fb      	ldr	r3, [r7, #28]
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3720      	adds	r7, #32
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}
 8008a96:	bf00      	nop
 8008a98:	200004b8 	.word	0x200004b8
 8008a9c:	200004cc 	.word	0x200004cc

08008aa0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8008aa4:	4b03      	ldr	r3, [pc, #12]	; (8008ab4 <vTaskMissedYield+0x14>)
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	601a      	str	r2, [r3, #0]
}
 8008aaa:	bf00      	nop
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr
 8008ab4:	200004c8 	.word	0x200004c8

08008ab8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b082      	sub	sp, #8
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8008ac0:	f000 f852 	bl	8008b68 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008ac4:	4b06      	ldr	r3, [pc, #24]	; (8008ae0 <prvIdleTask+0x28>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d9f9      	bls.n	8008ac0 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8008acc:	4b05      	ldr	r3, [pc, #20]	; (8008ae4 <prvIdleTask+0x2c>)
 8008ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ad2:	601a      	str	r2, [r3, #0]
 8008ad4:	f3bf 8f4f 	dsb	sy
 8008ad8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8008adc:	e7f0      	b.n	8008ac0 <prvIdleTask+0x8>
 8008ade:	bf00      	nop
 8008ae0:	200003e0 	.word	0x200003e0
 8008ae4:	e000ed04 	.word	0xe000ed04

08008ae8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008aee:	2300      	movs	r3, #0
 8008af0:	607b      	str	r3, [r7, #4]
 8008af2:	e00c      	b.n	8008b0e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	4613      	mov	r3, r2
 8008af8:	009b      	lsls	r3, r3, #2
 8008afa:	4413      	add	r3, r2
 8008afc:	009b      	lsls	r3, r3, #2
 8008afe:	4a12      	ldr	r2, [pc, #72]	; (8008b48 <prvInitialiseTaskLists+0x60>)
 8008b00:	4413      	add	r3, r2
 8008b02:	4618      	mov	r0, r3
 8008b04:	f7fe fda4 	bl	8007650 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	607b      	str	r3, [r7, #4]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2b04      	cmp	r3, #4
 8008b12:	d9ef      	bls.n	8008af4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8008b14:	480d      	ldr	r0, [pc, #52]	; (8008b4c <prvInitialiseTaskLists+0x64>)
 8008b16:	f7fe fd9b 	bl	8007650 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8008b1a:	480d      	ldr	r0, [pc, #52]	; (8008b50 <prvInitialiseTaskLists+0x68>)
 8008b1c:	f7fe fd98 	bl	8007650 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8008b20:	480c      	ldr	r0, [pc, #48]	; (8008b54 <prvInitialiseTaskLists+0x6c>)
 8008b22:	f7fe fd95 	bl	8007650 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8008b26:	480c      	ldr	r0, [pc, #48]	; (8008b58 <prvInitialiseTaskLists+0x70>)
 8008b28:	f7fe fd92 	bl	8007650 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8008b2c:	480b      	ldr	r0, [pc, #44]	; (8008b5c <prvInitialiseTaskLists+0x74>)
 8008b2e:	f7fe fd8f 	bl	8007650 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8008b32:	4b0b      	ldr	r3, [pc, #44]	; (8008b60 <prvInitialiseTaskLists+0x78>)
 8008b34:	4a05      	ldr	r2, [pc, #20]	; (8008b4c <prvInitialiseTaskLists+0x64>)
 8008b36:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008b38:	4b0a      	ldr	r3, [pc, #40]	; (8008b64 <prvInitialiseTaskLists+0x7c>)
 8008b3a:	4a05      	ldr	r2, [pc, #20]	; (8008b50 <prvInitialiseTaskLists+0x68>)
 8008b3c:	601a      	str	r2, [r3, #0]
}
 8008b3e:	bf00      	nop
 8008b40:	3708      	adds	r7, #8
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	200003e0 	.word	0x200003e0
 8008b4c:	20000444 	.word	0x20000444
 8008b50:	20000458 	.word	0x20000458
 8008b54:	20000474 	.word	0x20000474
 8008b58:	20000488 	.word	0x20000488
 8008b5c:	200004a0 	.word	0x200004a0
 8008b60:	2000046c 	.word	0x2000046c
 8008b64:	20000470 	.word	0x20000470

08008b68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b082      	sub	sp, #8
 8008b6c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b6e:	e019      	b.n	8008ba4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8008b70:	f000 fef2 	bl	8009958 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b74:	4b10      	ldr	r3, [pc, #64]	; (8008bb8 <prvCheckTasksWaitingTermination+0x50>)
 8008b76:	68db      	ldr	r3, [r3, #12]
 8008b78:	68db      	ldr	r3, [r3, #12]
 8008b7a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	3304      	adds	r3, #4
 8008b80:	4618      	mov	r0, r3
 8008b82:	f7fe fdef 	bl	8007764 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8008b86:	4b0d      	ldr	r3, [pc, #52]	; (8008bbc <prvCheckTasksWaitingTermination+0x54>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	3b01      	subs	r3, #1
 8008b8c:	4a0b      	ldr	r2, [pc, #44]	; (8008bbc <prvCheckTasksWaitingTermination+0x54>)
 8008b8e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8008b90:	4b0b      	ldr	r3, [pc, #44]	; (8008bc0 <prvCheckTasksWaitingTermination+0x58>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	3b01      	subs	r3, #1
 8008b96:	4a0a      	ldr	r2, [pc, #40]	; (8008bc0 <prvCheckTasksWaitingTermination+0x58>)
 8008b98:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8008b9a:	f000 ff0d 	bl	80099b8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 f810 	bl	8008bc4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ba4:	4b06      	ldr	r3, [pc, #24]	; (8008bc0 <prvCheckTasksWaitingTermination+0x58>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d1e1      	bne.n	8008b70 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8008bac:	bf00      	nop
 8008bae:	bf00      	nop
 8008bb0:	3708      	adds	r7, #8
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	20000488 	.word	0x20000488
 8008bbc:	200004b4 	.word	0x200004b4
 8008bc0:	2000049c 	.word	0x2000049c

08008bc4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b082      	sub	sp, #8
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f001 f8c3 	bl	8009d5c <vPortFree>
                vPortFree( pxTCB );
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f001 f8c0 	bl	8009d5c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8008bdc:	bf00      	nop
 8008bde:	3708      	adds	r7, #8
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008be4:	b480      	push	{r7}
 8008be6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008be8:	4b0a      	ldr	r3, [pc, #40]	; (8008c14 <prvResetNextTaskUnblockTime+0x30>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d104      	bne.n	8008bfc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8008bf2:	4b09      	ldr	r3, [pc, #36]	; (8008c18 <prvResetNextTaskUnblockTime+0x34>)
 8008bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8008bf8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8008bfa:	e005      	b.n	8008c08 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008bfc:	4b05      	ldr	r3, [pc, #20]	; (8008c14 <prvResetNextTaskUnblockTime+0x30>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	68db      	ldr	r3, [r3, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4a04      	ldr	r2, [pc, #16]	; (8008c18 <prvResetNextTaskUnblockTime+0x34>)
 8008c06:	6013      	str	r3, [r2, #0]
}
 8008c08:	bf00      	nop
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr
 8008c12:	bf00      	nop
 8008c14:	2000046c 	.word	0x2000046c
 8008c18:	200004d4 	.word	0x200004d4

08008c1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8008c22:	4b0b      	ldr	r3, [pc, #44]	; (8008c50 <xTaskGetSchedulerState+0x34>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d102      	bne.n	8008c30 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	607b      	str	r3, [r7, #4]
 8008c2e:	e008      	b.n	8008c42 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c30:	4b08      	ldr	r3, [pc, #32]	; (8008c54 <xTaskGetSchedulerState+0x38>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d102      	bne.n	8008c3e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8008c38:	2302      	movs	r3, #2
 8008c3a:	607b      	str	r3, [r7, #4]
 8008c3c:	e001      	b.n	8008c42 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8008c42:	687b      	ldr	r3, [r7, #4]
    }
 8008c44:	4618      	mov	r0, r3
 8008c46:	370c      	adds	r7, #12
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr
 8008c50:	200004c0 	.word	0x200004c0
 8008c54:	200004dc 	.word	0x200004dc

08008c58 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b086      	sub	sp, #24
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8008c64:	2300      	movs	r3, #0
 8008c66:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d063      	beq.n	8008d36 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8008c6e:	4b34      	ldr	r3, [pc, #208]	; (8008d40 <xTaskPriorityDisinherit+0xe8>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	693a      	ldr	r2, [r7, #16]
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d00a      	beq.n	8008c8e <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8008c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c7c:	f383 8811 	msr	BASEPRI, r3
 8008c80:	f3bf 8f6f 	isb	sy
 8008c84:	f3bf 8f4f 	dsb	sy
 8008c88:	60fb      	str	r3, [r7, #12]
    }
 8008c8a:	bf00      	nop
 8008c8c:	e7fe      	b.n	8008c8c <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d10a      	bne.n	8008cac <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8008c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c9a:	f383 8811 	msr	BASEPRI, r3
 8008c9e:	f3bf 8f6f 	isb	sy
 8008ca2:	f3bf 8f4f 	dsb	sy
 8008ca6:	60bb      	str	r3, [r7, #8]
    }
 8008ca8:	bf00      	nop
 8008caa:	e7fe      	b.n	8008caa <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cb0:	1e5a      	subs	r2, r3, #1
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d039      	beq.n	8008d36 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d135      	bne.n	8008d36 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	3304      	adds	r3, #4
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f7fe fd48 	bl	8007764 <uxListRemove>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d10a      	bne.n	8008cf0 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cde:	2201      	movs	r2, #1
 8008ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ce4:	43da      	mvns	r2, r3
 8008ce6:	4b17      	ldr	r3, [pc, #92]	; (8008d44 <xTaskPriorityDisinherit+0xec>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4013      	ands	r3, r2
 8008cec:	4a15      	ldr	r2, [pc, #84]	; (8008d44 <xTaskPriorityDisinherit+0xec>)
 8008cee:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cfc:	f1c3 0205 	rsb	r2, r3, #5
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d08:	2201      	movs	r2, #1
 8008d0a:	409a      	lsls	r2, r3
 8008d0c:	4b0d      	ldr	r3, [pc, #52]	; (8008d44 <xTaskPriorityDisinherit+0xec>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4313      	orrs	r3, r2
 8008d12:	4a0c      	ldr	r2, [pc, #48]	; (8008d44 <xTaskPriorityDisinherit+0xec>)
 8008d14:	6013      	str	r3, [r2, #0]
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d1a:	4613      	mov	r3, r2
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	4413      	add	r3, r2
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	4a09      	ldr	r2, [pc, #36]	; (8008d48 <xTaskPriorityDisinherit+0xf0>)
 8008d24:	441a      	add	r2, r3
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	3304      	adds	r3, #4
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	4610      	mov	r0, r2
 8008d2e:	f7fe fcbc 	bl	80076aa <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8008d32:	2301      	movs	r3, #1
 8008d34:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8008d36:	697b      	ldr	r3, [r7, #20]
    }
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3718      	adds	r7, #24
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}
 8008d40:	200003dc 	.word	0x200003dc
 8008d44:	200004bc 	.word	0x200004bc
 8008d48:	200003e0 	.word	0x200003e0

08008d4c <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b086      	sub	sp, #24
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	60b9      	str	r1, [r7, #8]
 8008d56:	607a      	str	r2, [r7, #4]
 8008d58:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d00a      	beq.n	8008d76 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8008d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d64:	f383 8811 	msr	BASEPRI, r3
 8008d68:	f3bf 8f6f 	isb	sy
 8008d6c:	f3bf 8f4f 	dsb	sy
 8008d70:	613b      	str	r3, [r7, #16]
    }
 8008d72:	bf00      	nop
 8008d74:	e7fe      	b.n	8008d74 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8008d76:	f000 fdef 	bl	8009958 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8008d7a:	4b32      	ldr	r3, [pc, #200]	; (8008e44 <xTaskGenericNotifyWait+0xf8>)
 8008d7c:	681a      	ldr	r2, [r3, #0]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	4413      	add	r3, r2
 8008d82:	3354      	adds	r3, #84	; 0x54
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	2b02      	cmp	r3, #2
 8008d8a:	d022      	beq.n	8008dd2 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8008d8c:	4b2d      	ldr	r3, [pc, #180]	; (8008e44 <xTaskGenericNotifyWait+0xf8>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	68fa      	ldr	r2, [r7, #12]
 8008d92:	3214      	adds	r2, #20
 8008d94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d98:	68ba      	ldr	r2, [r7, #8]
 8008d9a:	43d2      	mvns	r2, r2
 8008d9c:	4011      	ands	r1, r2
 8008d9e:	68fa      	ldr	r2, [r7, #12]
 8008da0:	3214      	adds	r2, #20
 8008da2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8008da6:	4b27      	ldr	r3, [pc, #156]	; (8008e44 <xTaskGenericNotifyWait+0xf8>)
 8008da8:	681a      	ldr	r2, [r3, #0]
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	4413      	add	r3, r2
 8008dae:	3354      	adds	r3, #84	; 0x54
 8008db0:	2201      	movs	r2, #1
 8008db2:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8008db4:	6a3b      	ldr	r3, [r7, #32]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d00b      	beq.n	8008dd2 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008dba:	2101      	movs	r1, #1
 8008dbc:	6a38      	ldr	r0, [r7, #32]
 8008dbe:	f000 f925 	bl	800900c <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8008dc2:	4b21      	ldr	r3, [pc, #132]	; (8008e48 <xTaskGenericNotifyWait+0xfc>)
 8008dc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dc8:	601a      	str	r2, [r3, #0]
 8008dca:	f3bf 8f4f 	dsb	sy
 8008dce:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8008dd2:	f000 fdf1 	bl	80099b8 <vPortExitCritical>

        taskENTER_CRITICAL();
 8008dd6:	f000 fdbf 	bl	8009958 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d007      	beq.n	8008df0 <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8008de0:	4b18      	ldr	r3, [pc, #96]	; (8008e44 <xTaskGenericNotifyWait+0xf8>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	68fa      	ldr	r2, [r7, #12]
 8008de6:	3214      	adds	r2, #20
 8008de8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8008df0:	4b14      	ldr	r3, [pc, #80]	; (8008e44 <xTaskGenericNotifyWait+0xf8>)
 8008df2:	681a      	ldr	r2, [r3, #0]
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	4413      	add	r3, r2
 8008df8:	3354      	adds	r3, #84	; 0x54
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	d002      	beq.n	8008e08 <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8008e02:	2300      	movs	r3, #0
 8008e04:	617b      	str	r3, [r7, #20]
 8008e06:	e00e      	b.n	8008e26 <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8008e08:	4b0e      	ldr	r3, [pc, #56]	; (8008e44 <xTaskGenericNotifyWait+0xf8>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	68fa      	ldr	r2, [r7, #12]
 8008e0e:	3214      	adds	r2, #20
 8008e10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	43d2      	mvns	r2, r2
 8008e18:	4011      	ands	r1, r2
 8008e1a:	68fa      	ldr	r2, [r7, #12]
 8008e1c:	3214      	adds	r2, #20
 8008e1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8008e22:	2301      	movs	r3, #1
 8008e24:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8008e26:	4b07      	ldr	r3, [pc, #28]	; (8008e44 <xTaskGenericNotifyWait+0xf8>)
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	4413      	add	r3, r2
 8008e2e:	3354      	adds	r3, #84	; 0x54
 8008e30:	2200      	movs	r2, #0
 8008e32:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8008e34:	f000 fdc0 	bl	80099b8 <vPortExitCritical>

        return xReturn;
 8008e38:	697b      	ldr	r3, [r7, #20]
    }
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3718      	adds	r7, #24
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}
 8008e42:	bf00      	nop
 8008e44:	200003dc 	.word	0x200003dc
 8008e48:	e000ed04 	.word	0xe000ed04

08008e4c <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b08c      	sub	sp, #48	; 0x30
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	60f8      	str	r0, [r7, #12]
 8008e54:	60b9      	str	r1, [r7, #8]
 8008e56:	607a      	str	r2, [r7, #4]
 8008e58:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d00a      	beq.n	8008e7a <xTaskGenericNotify+0x2e>
        __asm volatile
 8008e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e68:	f383 8811 	msr	BASEPRI, r3
 8008e6c:	f3bf 8f6f 	isb	sy
 8008e70:	f3bf 8f4f 	dsb	sy
 8008e74:	623b      	str	r3, [r7, #32]
    }
 8008e76:	bf00      	nop
 8008e78:	e7fe      	b.n	8008e78 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d10a      	bne.n	8008e96 <xTaskGenericNotify+0x4a>
        __asm volatile
 8008e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e84:	f383 8811 	msr	BASEPRI, r3
 8008e88:	f3bf 8f6f 	isb	sy
 8008e8c:	f3bf 8f4f 	dsb	sy
 8008e90:	61fb      	str	r3, [r7, #28]
    }
 8008e92:	bf00      	nop
 8008e94:	e7fe      	b.n	8008e94 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8008e9a:	f000 fd5d 	bl	8009958 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8008e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d006      	beq.n	8008eb2 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8008ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea6:	68ba      	ldr	r2, [r7, #8]
 8008ea8:	3214      	adds	r2, #20
 8008eaa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eb0:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8008eb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	4413      	add	r3, r2
 8008eb8:	3354      	adds	r3, #84	; 0x54
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8008ec0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	4413      	add	r3, r2
 8008ec6:	3354      	adds	r3, #84	; 0x54
 8008ec8:	2202      	movs	r2, #2
 8008eca:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8008ecc:	78fb      	ldrb	r3, [r7, #3]
 8008ece:	2b04      	cmp	r3, #4
 8008ed0:	d83b      	bhi.n	8008f4a <xTaskGenericNotify+0xfe>
 8008ed2:	a201      	add	r2, pc, #4	; (adr r2, 8008ed8 <xTaskGenericNotify+0x8c>)
 8008ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ed8:	08008f69 	.word	0x08008f69
 8008edc:	08008eed 	.word	0x08008eed
 8008ee0:	08008f09 	.word	0x08008f09
 8008ee4:	08008f21 	.word	0x08008f21
 8008ee8:	08008f2f 	.word	0x08008f2f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8008eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eee:	68ba      	ldr	r2, [r7, #8]
 8008ef0:	3214      	adds	r2, #20
 8008ef2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	ea42 0103 	orr.w	r1, r2, r3
 8008efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008efe:	68ba      	ldr	r2, [r7, #8]
 8008f00:	3214      	adds	r2, #20
 8008f02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8008f06:	e032      	b.n	8008f6e <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8008f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f0a:	68ba      	ldr	r2, [r7, #8]
 8008f0c:	3214      	adds	r2, #20
 8008f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f12:	1c59      	adds	r1, r3, #1
 8008f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f16:	68ba      	ldr	r2, [r7, #8]
 8008f18:	3214      	adds	r2, #20
 8008f1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8008f1e:	e026      	b.n	8008f6e <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8008f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f22:	68ba      	ldr	r2, [r7, #8]
 8008f24:	3214      	adds	r2, #20
 8008f26:	6879      	ldr	r1, [r7, #4]
 8008f28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8008f2c:	e01f      	b.n	8008f6e <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008f2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f32:	2b02      	cmp	r3, #2
 8008f34:	d006      	beq.n	8008f44 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8008f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f38:	68ba      	ldr	r2, [r7, #8]
 8008f3a:	3214      	adds	r2, #20
 8008f3c:	6879      	ldr	r1, [r7, #4]
 8008f3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8008f42:	e014      	b.n	8008f6e <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8008f44:	2300      	movs	r3, #0
 8008f46:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8008f48:	e011      	b.n	8008f6e <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8008f4a:	4b2b      	ldr	r3, [pc, #172]	; (8008ff8 <xTaskGenericNotify+0x1ac>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d00c      	beq.n	8008f6c <xTaskGenericNotify+0x120>
        __asm volatile
 8008f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f56:	f383 8811 	msr	BASEPRI, r3
 8008f5a:	f3bf 8f6f 	isb	sy
 8008f5e:	f3bf 8f4f 	dsb	sy
 8008f62:	61bb      	str	r3, [r7, #24]
    }
 8008f64:	bf00      	nop
 8008f66:	e7fe      	b.n	8008f66 <xTaskGenericNotify+0x11a>
                    break;
 8008f68:	bf00      	nop
 8008f6a:	e000      	b.n	8008f6e <xTaskGenericNotify+0x122>

                    break;
 8008f6c:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008f6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d139      	bne.n	8008fea <xTaskGenericNotify+0x19e>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f78:	3304      	adds	r3, #4
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f7fe fbf2 	bl	8007764 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8008f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f84:	2201      	movs	r2, #1
 8008f86:	409a      	lsls	r2, r3
 8008f88:	4b1c      	ldr	r3, [pc, #112]	; (8008ffc <xTaskGenericNotify+0x1b0>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	4a1b      	ldr	r2, [pc, #108]	; (8008ffc <xTaskGenericNotify+0x1b0>)
 8008f90:	6013      	str	r3, [r2, #0]
 8008f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f96:	4613      	mov	r3, r2
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	4413      	add	r3, r2
 8008f9c:	009b      	lsls	r3, r3, #2
 8008f9e:	4a18      	ldr	r2, [pc, #96]	; (8009000 <xTaskGenericNotify+0x1b4>)
 8008fa0:	441a      	add	r2, r3
 8008fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa4:	3304      	adds	r3, #4
 8008fa6:	4619      	mov	r1, r3
 8008fa8:	4610      	mov	r0, r2
 8008faa:	f7fe fb7e 	bl	80076aa <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d00a      	beq.n	8008fcc <xTaskGenericNotify+0x180>
        __asm volatile
 8008fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fba:	f383 8811 	msr	BASEPRI, r3
 8008fbe:	f3bf 8f6f 	isb	sy
 8008fc2:	f3bf 8f4f 	dsb	sy
 8008fc6:	617b      	str	r3, [r7, #20]
    }
 8008fc8:	bf00      	nop
 8008fca:	e7fe      	b.n	8008fca <xTaskGenericNotify+0x17e>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fd0:	4b0c      	ldr	r3, [pc, #48]	; (8009004 <xTaskGenericNotify+0x1b8>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d907      	bls.n	8008fea <xTaskGenericNotify+0x19e>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8008fda:	4b0b      	ldr	r3, [pc, #44]	; (8009008 <xTaskGenericNotify+0x1bc>)
 8008fdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fe0:	601a      	str	r2, [r3, #0]
 8008fe2:	f3bf 8f4f 	dsb	sy
 8008fe6:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8008fea:	f000 fce5 	bl	80099b8 <vPortExitCritical>

        return xReturn;
 8008fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3730      	adds	r7, #48	; 0x30
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}
 8008ff8:	200004b8 	.word	0x200004b8
 8008ffc:	200004bc 	.word	0x200004bc
 8009000:	200003e0 	.word	0x200003e0
 8009004:	200003dc 	.word	0x200003dc
 8009008:	e000ed04 	.word	0xe000ed04

0800900c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b084      	sub	sp, #16
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8009016:	4b29      	ldr	r3, [pc, #164]	; (80090bc <prvAddCurrentTaskToDelayedList+0xb0>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800901c:	4b28      	ldr	r3, [pc, #160]	; (80090c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	3304      	adds	r3, #4
 8009022:	4618      	mov	r0, r3
 8009024:	f7fe fb9e 	bl	8007764 <uxListRemove>
 8009028:	4603      	mov	r3, r0
 800902a:	2b00      	cmp	r3, #0
 800902c:	d10b      	bne.n	8009046 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800902e:	4b24      	ldr	r3, [pc, #144]	; (80090c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009034:	2201      	movs	r2, #1
 8009036:	fa02 f303 	lsl.w	r3, r2, r3
 800903a:	43da      	mvns	r2, r3
 800903c:	4b21      	ldr	r3, [pc, #132]	; (80090c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4013      	ands	r3, r2
 8009042:	4a20      	ldr	r2, [pc, #128]	; (80090c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009044:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800904c:	d10a      	bne.n	8009064 <prvAddCurrentTaskToDelayedList+0x58>
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d007      	beq.n	8009064 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009054:	4b1a      	ldr	r3, [pc, #104]	; (80090c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	3304      	adds	r3, #4
 800905a:	4619      	mov	r1, r3
 800905c:	481a      	ldr	r0, [pc, #104]	; (80090c8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800905e:	f7fe fb24 	bl	80076aa <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8009062:	e026      	b.n	80090b2 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8009064:	68fa      	ldr	r2, [r7, #12]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	4413      	add	r3, r2
 800906a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800906c:	4b14      	ldr	r3, [pc, #80]	; (80090c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	68ba      	ldr	r2, [r7, #8]
 8009072:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8009074:	68ba      	ldr	r2, [r7, #8]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	429a      	cmp	r2, r3
 800907a:	d209      	bcs.n	8009090 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800907c:	4b13      	ldr	r3, [pc, #76]	; (80090cc <prvAddCurrentTaskToDelayedList+0xc0>)
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	4b0f      	ldr	r3, [pc, #60]	; (80090c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	3304      	adds	r3, #4
 8009086:	4619      	mov	r1, r3
 8009088:	4610      	mov	r0, r2
 800908a:	f7fe fb32 	bl	80076f2 <vListInsert>
}
 800908e:	e010      	b.n	80090b2 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009090:	4b0f      	ldr	r3, [pc, #60]	; (80090d0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	4b0a      	ldr	r3, [pc, #40]	; (80090c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	3304      	adds	r3, #4
 800909a:	4619      	mov	r1, r3
 800909c:	4610      	mov	r0, r2
 800909e:	f7fe fb28 	bl	80076f2 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80090a2:	4b0c      	ldr	r3, [pc, #48]	; (80090d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	68ba      	ldr	r2, [r7, #8]
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d202      	bcs.n	80090b2 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 80090ac:	4a09      	ldr	r2, [pc, #36]	; (80090d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	6013      	str	r3, [r2, #0]
}
 80090b2:	bf00      	nop
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	200004b8 	.word	0x200004b8
 80090c0:	200003dc 	.word	0x200003dc
 80090c4:	200004bc 	.word	0x200004bc
 80090c8:	200004a0 	.word	0x200004a0
 80090cc:	20000470 	.word	0x20000470
 80090d0:	2000046c 	.word	0x2000046c
 80090d4:	200004d4 	.word	0x200004d4

080090d8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80090d8:	b580      	push	{r7, lr}
 80090da:	b084      	sub	sp, #16
 80090dc:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80090de:	2300      	movs	r3, #0
 80090e0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80090e2:	f000 fad5 	bl	8009690 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80090e6:	4b11      	ldr	r3, [pc, #68]	; (800912c <xTimerCreateTimerTask+0x54>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d00b      	beq.n	8009106 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80090ee:	4b10      	ldr	r3, [pc, #64]	; (8009130 <xTimerCreateTimerTask+0x58>)
 80090f0:	9301      	str	r3, [sp, #4]
 80090f2:	2302      	movs	r3, #2
 80090f4:	9300      	str	r3, [sp, #0]
 80090f6:	2300      	movs	r3, #0
 80090f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80090fc:	490d      	ldr	r1, [pc, #52]	; (8009134 <xTimerCreateTimerTask+0x5c>)
 80090fe:	480e      	ldr	r0, [pc, #56]	; (8009138 <xTimerCreateTimerTask+0x60>)
 8009100:	f7ff f83a 	bl	8008178 <xTaskCreate>
 8009104:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d10a      	bne.n	8009122 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 800910c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009110:	f383 8811 	msr	BASEPRI, r3
 8009114:	f3bf 8f6f 	isb	sy
 8009118:	f3bf 8f4f 	dsb	sy
 800911c:	603b      	str	r3, [r7, #0]
    }
 800911e:	bf00      	nop
 8009120:	e7fe      	b.n	8009120 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8009122:	687b      	ldr	r3, [r7, #4]
    }
 8009124:	4618      	mov	r0, r3
 8009126:	3708      	adds	r7, #8
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}
 800912c:	20000510 	.word	0x20000510
 8009130:	20000514 	.word	0x20000514
 8009134:	0800d230 	.word	0x0800d230
 8009138:	08009271 	.word	0x08009271

0800913c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 800913c:	b580      	push	{r7, lr}
 800913e:	b08a      	sub	sp, #40	; 0x28
 8009140:	af00      	add	r7, sp, #0
 8009142:	60f8      	str	r0, [r7, #12]
 8009144:	60b9      	str	r1, [r7, #8]
 8009146:	607a      	str	r2, [r7, #4]
 8009148:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800914a:	2300      	movs	r3, #0
 800914c:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d10a      	bne.n	800916a <xTimerGenericCommand+0x2e>
        __asm volatile
 8009154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009158:	f383 8811 	msr	BASEPRI, r3
 800915c:	f3bf 8f6f 	isb	sy
 8009160:	f3bf 8f4f 	dsb	sy
 8009164:	623b      	str	r3, [r7, #32]
    }
 8009166:	bf00      	nop
 8009168:	e7fe      	b.n	8009168 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800916a:	4b1a      	ldr	r3, [pc, #104]	; (80091d4 <xTimerGenericCommand+0x98>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d02a      	beq.n	80091c8 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	2b05      	cmp	r3, #5
 8009182:	dc18      	bgt.n	80091b6 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009184:	f7ff fd4a 	bl	8008c1c <xTaskGetSchedulerState>
 8009188:	4603      	mov	r3, r0
 800918a:	2b02      	cmp	r3, #2
 800918c:	d109      	bne.n	80091a2 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800918e:	4b11      	ldr	r3, [pc, #68]	; (80091d4 <xTimerGenericCommand+0x98>)
 8009190:	6818      	ldr	r0, [r3, #0]
 8009192:	f107 0114 	add.w	r1, r7, #20
 8009196:	2300      	movs	r3, #0
 8009198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800919a:	f7fe fbf7 	bl	800798c <xQueueGenericSend>
 800919e:	6278      	str	r0, [r7, #36]	; 0x24
 80091a0:	e012      	b.n	80091c8 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80091a2:	4b0c      	ldr	r3, [pc, #48]	; (80091d4 <xTimerGenericCommand+0x98>)
 80091a4:	6818      	ldr	r0, [r3, #0]
 80091a6:	f107 0114 	add.w	r1, r7, #20
 80091aa:	2300      	movs	r3, #0
 80091ac:	2200      	movs	r2, #0
 80091ae:	f7fe fbed 	bl	800798c <xQueueGenericSend>
 80091b2:	6278      	str	r0, [r7, #36]	; 0x24
 80091b4:	e008      	b.n	80091c8 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80091b6:	4b07      	ldr	r3, [pc, #28]	; (80091d4 <xTimerGenericCommand+0x98>)
 80091b8:	6818      	ldr	r0, [r3, #0]
 80091ba:	f107 0114 	add.w	r1, r7, #20
 80091be:	2300      	movs	r3, #0
 80091c0:	683a      	ldr	r2, [r7, #0]
 80091c2:	f7fe fce1 	bl	8007b88 <xQueueGenericSendFromISR>
 80091c6:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80091c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80091ca:	4618      	mov	r0, r3
 80091cc:	3728      	adds	r7, #40	; 0x28
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
 80091d2:	bf00      	nop
 80091d4:	20000510 	.word	0x20000510

080091d8 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80091d8:	b580      	push	{r7, lr}
 80091da:	b088      	sub	sp, #32
 80091dc:	af02      	add	r7, sp, #8
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091e2:	4b22      	ldr	r3, [pc, #136]	; (800926c <prvProcessExpiredTimer+0x94>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	68db      	ldr	r3, [r3, #12]
 80091e8:	68db      	ldr	r3, [r3, #12]
 80091ea:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	3304      	adds	r3, #4
 80091f0:	4618      	mov	r0, r3
 80091f2:	f7fe fab7 	bl	8007764 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091fc:	f003 0304 	and.w	r3, r3, #4
 8009200:	2b00      	cmp	r3, #0
 8009202:	d022      	beq.n	800924a <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	699a      	ldr	r2, [r3, #24]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	18d1      	adds	r1, r2, r3
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	683a      	ldr	r2, [r7, #0]
 8009210:	6978      	ldr	r0, [r7, #20]
 8009212:	f000 f8d1 	bl	80093b8 <prvInsertTimerInActiveList>
 8009216:	4603      	mov	r3, r0
 8009218:	2b00      	cmp	r3, #0
 800921a:	d01f      	beq.n	800925c <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800921c:	2300      	movs	r3, #0
 800921e:	9300      	str	r3, [sp, #0]
 8009220:	2300      	movs	r3, #0
 8009222:	687a      	ldr	r2, [r7, #4]
 8009224:	2100      	movs	r1, #0
 8009226:	6978      	ldr	r0, [r7, #20]
 8009228:	f7ff ff88 	bl	800913c <xTimerGenericCommand>
 800922c:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d113      	bne.n	800925c <prvProcessExpiredTimer+0x84>
        __asm volatile
 8009234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009238:	f383 8811 	msr	BASEPRI, r3
 800923c:	f3bf 8f6f 	isb	sy
 8009240:	f3bf 8f4f 	dsb	sy
 8009244:	60fb      	str	r3, [r7, #12]
    }
 8009246:	bf00      	nop
 8009248:	e7fe      	b.n	8009248 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009250:	f023 0301 	bic.w	r3, r3, #1
 8009254:	b2da      	uxtb	r2, r3
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	6a1b      	ldr	r3, [r3, #32]
 8009260:	6978      	ldr	r0, [r7, #20]
 8009262:	4798      	blx	r3
    }
 8009264:	bf00      	nop
 8009266:	3718      	adds	r7, #24
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}
 800926c:	20000508 	.word	0x20000508

08009270 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009278:	f107 0308 	add.w	r3, r7, #8
 800927c:	4618      	mov	r0, r3
 800927e:	f000 f857 	bl	8009330 <prvGetNextExpireTime>
 8009282:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	4619      	mov	r1, r3
 8009288:	68f8      	ldr	r0, [r7, #12]
 800928a:	f000 f803 	bl	8009294 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800928e:	f000 f8d5 	bl	800943c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009292:	e7f1      	b.n	8009278 <prvTimerTask+0x8>

08009294 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800929e:	f7ff f903 	bl	80084a8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80092a2:	f107 0308 	add.w	r3, r7, #8
 80092a6:	4618      	mov	r0, r3
 80092a8:	f000 f866 	bl	8009378 <prvSampleTimeNow>
 80092ac:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d130      	bne.n	8009316 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d10a      	bne.n	80092d0 <prvProcessTimerOrBlockTask+0x3c>
 80092ba:	687a      	ldr	r2, [r7, #4]
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	429a      	cmp	r2, r3
 80092c0:	d806      	bhi.n	80092d0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80092c2:	f7ff f8ff 	bl	80084c4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80092c6:	68f9      	ldr	r1, [r7, #12]
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f7ff ff85 	bl	80091d8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80092ce:	e024      	b.n	800931a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d008      	beq.n	80092e8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80092d6:	4b13      	ldr	r3, [pc, #76]	; (8009324 <prvProcessTimerOrBlockTask+0x90>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d101      	bne.n	80092e4 <prvProcessTimerOrBlockTask+0x50>
 80092e0:	2301      	movs	r3, #1
 80092e2:	e000      	b.n	80092e6 <prvProcessTimerOrBlockTask+0x52>
 80092e4:	2300      	movs	r3, #0
 80092e6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80092e8:	4b0f      	ldr	r3, [pc, #60]	; (8009328 <prvProcessTimerOrBlockTask+0x94>)
 80092ea:	6818      	ldr	r0, [r3, #0]
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	1ad3      	subs	r3, r2, r3
 80092f2:	683a      	ldr	r2, [r7, #0]
 80092f4:	4619      	mov	r1, r3
 80092f6:	f7fe ff0b 	bl	8008110 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80092fa:	f7ff f8e3 	bl	80084c4 <xTaskResumeAll>
 80092fe:	4603      	mov	r3, r0
 8009300:	2b00      	cmp	r3, #0
 8009302:	d10a      	bne.n	800931a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8009304:	4b09      	ldr	r3, [pc, #36]	; (800932c <prvProcessTimerOrBlockTask+0x98>)
 8009306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800930a:	601a      	str	r2, [r3, #0]
 800930c:	f3bf 8f4f 	dsb	sy
 8009310:	f3bf 8f6f 	isb	sy
    }
 8009314:	e001      	b.n	800931a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8009316:	f7ff f8d5 	bl	80084c4 <xTaskResumeAll>
    }
 800931a:	bf00      	nop
 800931c:	3710      	adds	r7, #16
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
 8009322:	bf00      	nop
 8009324:	2000050c 	.word	0x2000050c
 8009328:	20000510 	.word	0x20000510
 800932c:	e000ed04 	.word	0xe000ed04

08009330 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8009330:	b480      	push	{r7}
 8009332:	b085      	sub	sp, #20
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009338:	4b0e      	ldr	r3, [pc, #56]	; (8009374 <prvGetNextExpireTime+0x44>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d101      	bne.n	8009346 <prvGetNextExpireTime+0x16>
 8009342:	2201      	movs	r2, #1
 8009344:	e000      	b.n	8009348 <prvGetNextExpireTime+0x18>
 8009346:	2200      	movs	r2, #0
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d105      	bne.n	8009360 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009354:	4b07      	ldr	r3, [pc, #28]	; (8009374 <prvGetNextExpireTime+0x44>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	68db      	ldr	r3, [r3, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	60fb      	str	r3, [r7, #12]
 800935e:	e001      	b.n	8009364 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8009360:	2300      	movs	r3, #0
 8009362:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8009364:	68fb      	ldr	r3, [r7, #12]
    }
 8009366:	4618      	mov	r0, r3
 8009368:	3714      	adds	r7, #20
 800936a:	46bd      	mov	sp, r7
 800936c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009370:	4770      	bx	lr
 8009372:	bf00      	nop
 8009374:	20000508 	.word	0x20000508

08009378 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8009380:	f7ff f93c 	bl	80085fc <xTaskGetTickCount>
 8009384:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8009386:	4b0b      	ldr	r3, [pc, #44]	; (80093b4 <prvSampleTimeNow+0x3c>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	68fa      	ldr	r2, [r7, #12]
 800938c:	429a      	cmp	r2, r3
 800938e:	d205      	bcs.n	800939c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8009390:	f000 f91a 	bl	80095c8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2201      	movs	r2, #1
 8009398:	601a      	str	r2, [r3, #0]
 800939a:	e002      	b.n	80093a2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2200      	movs	r2, #0
 80093a0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80093a2:	4a04      	ldr	r2, [pc, #16]	; (80093b4 <prvSampleTimeNow+0x3c>)
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80093a8:	68fb      	ldr	r3, [r7, #12]
    }
 80093aa:	4618      	mov	r0, r3
 80093ac:	3710      	adds	r7, #16
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	bf00      	nop
 80093b4:	20000518 	.word	0x20000518

080093b8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b086      	sub	sp, #24
 80093bc:	af00      	add	r7, sp, #0
 80093be:	60f8      	str	r0, [r7, #12]
 80093c0:	60b9      	str	r1, [r7, #8]
 80093c2:	607a      	str	r2, [r7, #4]
 80093c4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80093c6:	2300      	movs	r3, #0
 80093c8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	68ba      	ldr	r2, [r7, #8]
 80093ce:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	68fa      	ldr	r2, [r7, #12]
 80093d4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80093d6:	68ba      	ldr	r2, [r7, #8]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	429a      	cmp	r2, r3
 80093dc:	d812      	bhi.n	8009404 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093de:	687a      	ldr	r2, [r7, #4]
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	1ad2      	subs	r2, r2, r3
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	699b      	ldr	r3, [r3, #24]
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d302      	bcc.n	80093f2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80093ec:	2301      	movs	r3, #1
 80093ee:	617b      	str	r3, [r7, #20]
 80093f0:	e01b      	b.n	800942a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80093f2:	4b10      	ldr	r3, [pc, #64]	; (8009434 <prvInsertTimerInActiveList+0x7c>)
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	3304      	adds	r3, #4
 80093fa:	4619      	mov	r1, r3
 80093fc:	4610      	mov	r0, r2
 80093fe:	f7fe f978 	bl	80076f2 <vListInsert>
 8009402:	e012      	b.n	800942a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009404:	687a      	ldr	r2, [r7, #4]
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	429a      	cmp	r2, r3
 800940a:	d206      	bcs.n	800941a <prvInsertTimerInActiveList+0x62>
 800940c:	68ba      	ldr	r2, [r7, #8]
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	429a      	cmp	r2, r3
 8009412:	d302      	bcc.n	800941a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8009414:	2301      	movs	r3, #1
 8009416:	617b      	str	r3, [r7, #20]
 8009418:	e007      	b.n	800942a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800941a:	4b07      	ldr	r3, [pc, #28]	; (8009438 <prvInsertTimerInActiveList+0x80>)
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	3304      	adds	r3, #4
 8009422:	4619      	mov	r1, r3
 8009424:	4610      	mov	r0, r2
 8009426:	f7fe f964 	bl	80076f2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800942a:	697b      	ldr	r3, [r7, #20]
    }
 800942c:	4618      	mov	r0, r3
 800942e:	3718      	adds	r7, #24
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}
 8009434:	2000050c 	.word	0x2000050c
 8009438:	20000508 	.word	0x20000508

0800943c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800943c:	b580      	push	{r7, lr}
 800943e:	b08c      	sub	sp, #48	; 0x30
 8009440:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009442:	e0ae      	b.n	80095a2 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	2b00      	cmp	r3, #0
 8009448:	f2c0 80aa 	blt.w	80095a0 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009452:	695b      	ldr	r3, [r3, #20]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d004      	beq.n	8009462 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945a:	3304      	adds	r3, #4
 800945c:	4618      	mov	r0, r3
 800945e:	f7fe f981 	bl	8007764 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009462:	1d3b      	adds	r3, r7, #4
 8009464:	4618      	mov	r0, r3
 8009466:	f7ff ff87 	bl	8009378 <prvSampleTimeNow>
 800946a:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	2b09      	cmp	r3, #9
 8009470:	f200 8097 	bhi.w	80095a2 <prvProcessReceivedCommands+0x166>
 8009474:	a201      	add	r2, pc, #4	; (adr r2, 800947c <prvProcessReceivedCommands+0x40>)
 8009476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800947a:	bf00      	nop
 800947c:	080094a5 	.word	0x080094a5
 8009480:	080094a5 	.word	0x080094a5
 8009484:	080094a5 	.word	0x080094a5
 8009488:	08009519 	.word	0x08009519
 800948c:	0800952d 	.word	0x0800952d
 8009490:	08009577 	.word	0x08009577
 8009494:	080094a5 	.word	0x080094a5
 8009498:	080094a5 	.word	0x080094a5
 800949c:	08009519 	.word	0x08009519
 80094a0:	0800952d 	.word	0x0800952d
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80094a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094aa:	f043 0301 	orr.w	r3, r3, #1
 80094ae:	b2da      	uxtb	r2, r3
 80094b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80094b6:	68fa      	ldr	r2, [r7, #12]
 80094b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ba:	699b      	ldr	r3, [r3, #24]
 80094bc:	18d1      	adds	r1, r2, r3
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	6a3a      	ldr	r2, [r7, #32]
 80094c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80094c4:	f7ff ff78 	bl	80093b8 <prvInsertTimerInActiveList>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d069      	beq.n	80095a2 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d0:	6a1b      	ldr	r3, [r3, #32]
 80094d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80094d4:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80094d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094dc:	f003 0304 	and.w	r3, r3, #4
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d05e      	beq.n	80095a2 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80094e4:	68fa      	ldr	r2, [r7, #12]
 80094e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e8:	699b      	ldr	r3, [r3, #24]
 80094ea:	441a      	add	r2, r3
 80094ec:	2300      	movs	r3, #0
 80094ee:	9300      	str	r3, [sp, #0]
 80094f0:	2300      	movs	r3, #0
 80094f2:	2100      	movs	r1, #0
 80094f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80094f6:	f7ff fe21 	bl	800913c <xTimerGenericCommand>
 80094fa:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80094fc:	69fb      	ldr	r3, [r7, #28]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d14f      	bne.n	80095a2 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8009502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009506:	f383 8811 	msr	BASEPRI, r3
 800950a:	f3bf 8f6f 	isb	sy
 800950e:	f3bf 8f4f 	dsb	sy
 8009512:	61bb      	str	r3, [r7, #24]
    }
 8009514:	bf00      	nop
 8009516:	e7fe      	b.n	8009516 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800951a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800951e:	f023 0301 	bic.w	r3, r3, #1
 8009522:	b2da      	uxtb	r2, r3
 8009524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009526:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800952a:	e03a      	b.n	80095a2 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800952c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009532:	f043 0301 	orr.w	r3, r3, #1
 8009536:	b2da      	uxtb	r2, r3
 8009538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800953a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800953e:	68fa      	ldr	r2, [r7, #12]
 8009540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009542:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009546:	699b      	ldr	r3, [r3, #24]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d10a      	bne.n	8009562 <prvProcessReceivedCommands+0x126>
        __asm volatile
 800954c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009550:	f383 8811 	msr	BASEPRI, r3
 8009554:	f3bf 8f6f 	isb	sy
 8009558:	f3bf 8f4f 	dsb	sy
 800955c:	617b      	str	r3, [r7, #20]
    }
 800955e:	bf00      	nop
 8009560:	e7fe      	b.n	8009560 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009564:	699a      	ldr	r2, [r3, #24]
 8009566:	6a3b      	ldr	r3, [r7, #32]
 8009568:	18d1      	adds	r1, r2, r3
 800956a:	6a3b      	ldr	r3, [r7, #32]
 800956c:	6a3a      	ldr	r2, [r7, #32]
 800956e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009570:	f7ff ff22 	bl	80093b8 <prvInsertTimerInActiveList>
                        break;
 8009574:	e015      	b.n	80095a2 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009578:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800957c:	f003 0302 	and.w	r3, r3, #2
 8009580:	2b00      	cmp	r3, #0
 8009582:	d103      	bne.n	800958c <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8009584:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009586:	f000 fbe9 	bl	8009d5c <vPortFree>
 800958a:	e00a      	b.n	80095a2 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800958c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800958e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009592:	f023 0301 	bic.w	r3, r3, #1
 8009596:	b2da      	uxtb	r2, r3
 8009598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800959a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800959e:	e000      	b.n	80095a2 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80095a0:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80095a2:	4b08      	ldr	r3, [pc, #32]	; (80095c4 <prvProcessReceivedCommands+0x188>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f107 0108 	add.w	r1, r7, #8
 80095aa:	2200      	movs	r2, #0
 80095ac:	4618      	mov	r0, r3
 80095ae:	f7fe fb95 	bl	8007cdc <xQueueReceive>
 80095b2:	4603      	mov	r3, r0
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	f47f af45 	bne.w	8009444 <prvProcessReceivedCommands+0x8>
        }
    }
 80095ba:	bf00      	nop
 80095bc:	bf00      	nop
 80095be:	3728      	adds	r7, #40	; 0x28
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}
 80095c4:	20000510 	.word	0x20000510

080095c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b088      	sub	sp, #32
 80095cc:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80095ce:	e048      	b.n	8009662 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80095d0:	4b2d      	ldr	r3, [pc, #180]	; (8009688 <prvSwitchTimerLists+0xc0>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	68db      	ldr	r3, [r3, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095da:	4b2b      	ldr	r3, [pc, #172]	; (8009688 <prvSwitchTimerLists+0xc0>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	68db      	ldr	r3, [r3, #12]
 80095e0:	68db      	ldr	r3, [r3, #12]
 80095e2:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	3304      	adds	r3, #4
 80095e8:	4618      	mov	r0, r3
 80095ea:	f7fe f8bb 	bl	8007764 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	6a1b      	ldr	r3, [r3, #32]
 80095f2:	68f8      	ldr	r0, [r7, #12]
 80095f4:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095fc:	f003 0304 	and.w	r3, r3, #4
 8009600:	2b00      	cmp	r3, #0
 8009602:	d02e      	beq.n	8009662 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	699b      	ldr	r3, [r3, #24]
 8009608:	693a      	ldr	r2, [r7, #16]
 800960a:	4413      	add	r3, r2
 800960c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800960e:	68ba      	ldr	r2, [r7, #8]
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	429a      	cmp	r2, r3
 8009614:	d90e      	bls.n	8009634 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	68ba      	ldr	r2, [r7, #8]
 800961a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	68fa      	ldr	r2, [r7, #12]
 8009620:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009622:	4b19      	ldr	r3, [pc, #100]	; (8009688 <prvSwitchTimerLists+0xc0>)
 8009624:	681a      	ldr	r2, [r3, #0]
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	3304      	adds	r3, #4
 800962a:	4619      	mov	r1, r3
 800962c:	4610      	mov	r0, r2
 800962e:	f7fe f860 	bl	80076f2 <vListInsert>
 8009632:	e016      	b.n	8009662 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009634:	2300      	movs	r3, #0
 8009636:	9300      	str	r3, [sp, #0]
 8009638:	2300      	movs	r3, #0
 800963a:	693a      	ldr	r2, [r7, #16]
 800963c:	2100      	movs	r1, #0
 800963e:	68f8      	ldr	r0, [r7, #12]
 8009640:	f7ff fd7c 	bl	800913c <xTimerGenericCommand>
 8009644:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d10a      	bne.n	8009662 <prvSwitchTimerLists+0x9a>
        __asm volatile
 800964c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009650:	f383 8811 	msr	BASEPRI, r3
 8009654:	f3bf 8f6f 	isb	sy
 8009658:	f3bf 8f4f 	dsb	sy
 800965c:	603b      	str	r3, [r7, #0]
    }
 800965e:	bf00      	nop
 8009660:	e7fe      	b.n	8009660 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009662:	4b09      	ldr	r3, [pc, #36]	; (8009688 <prvSwitchTimerLists+0xc0>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d1b1      	bne.n	80095d0 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800966c:	4b06      	ldr	r3, [pc, #24]	; (8009688 <prvSwitchTimerLists+0xc0>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8009672:	4b06      	ldr	r3, [pc, #24]	; (800968c <prvSwitchTimerLists+0xc4>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a04      	ldr	r2, [pc, #16]	; (8009688 <prvSwitchTimerLists+0xc0>)
 8009678:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800967a:	4a04      	ldr	r2, [pc, #16]	; (800968c <prvSwitchTimerLists+0xc4>)
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	6013      	str	r3, [r2, #0]
    }
 8009680:	bf00      	nop
 8009682:	3718      	adds	r7, #24
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}
 8009688:	20000508 	.word	0x20000508
 800968c:	2000050c 	.word	0x2000050c

08009690 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8009690:	b580      	push	{r7, lr}
 8009692:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8009694:	f000 f960 	bl	8009958 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8009698:	4b12      	ldr	r3, [pc, #72]	; (80096e4 <prvCheckForValidListAndQueue+0x54>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d11d      	bne.n	80096dc <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80096a0:	4811      	ldr	r0, [pc, #68]	; (80096e8 <prvCheckForValidListAndQueue+0x58>)
 80096a2:	f7fd ffd5 	bl	8007650 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80096a6:	4811      	ldr	r0, [pc, #68]	; (80096ec <prvCheckForValidListAndQueue+0x5c>)
 80096a8:	f7fd ffd2 	bl	8007650 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80096ac:	4b10      	ldr	r3, [pc, #64]	; (80096f0 <prvCheckForValidListAndQueue+0x60>)
 80096ae:	4a0e      	ldr	r2, [pc, #56]	; (80096e8 <prvCheckForValidListAndQueue+0x58>)
 80096b0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80096b2:	4b10      	ldr	r3, [pc, #64]	; (80096f4 <prvCheckForValidListAndQueue+0x64>)
 80096b4:	4a0d      	ldr	r2, [pc, #52]	; (80096ec <prvCheckForValidListAndQueue+0x5c>)
 80096b6:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80096b8:	2200      	movs	r2, #0
 80096ba:	210c      	movs	r1, #12
 80096bc:	200a      	movs	r0, #10
 80096be:	f7fe f8e3 	bl	8007888 <xQueueGenericCreate>
 80096c2:	4603      	mov	r3, r0
 80096c4:	4a07      	ldr	r2, [pc, #28]	; (80096e4 <prvCheckForValidListAndQueue+0x54>)
 80096c6:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80096c8:	4b06      	ldr	r3, [pc, #24]	; (80096e4 <prvCheckForValidListAndQueue+0x54>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d005      	beq.n	80096dc <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80096d0:	4b04      	ldr	r3, [pc, #16]	; (80096e4 <prvCheckForValidListAndQueue+0x54>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4908      	ldr	r1, [pc, #32]	; (80096f8 <prvCheckForValidListAndQueue+0x68>)
 80096d6:	4618      	mov	r0, r3
 80096d8:	f7fe fcf0 	bl	80080bc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80096dc:	f000 f96c 	bl	80099b8 <vPortExitCritical>
    }
 80096e0:	bf00      	nop
 80096e2:	bd80      	pop	{r7, pc}
 80096e4:	20000510 	.word	0x20000510
 80096e8:	200004e0 	.word	0x200004e0
 80096ec:	200004f4 	.word	0x200004f4
 80096f0:	20000508 	.word	0x20000508
 80096f4:	2000050c 	.word	0x2000050c
 80096f8:	0800d238 	.word	0x0800d238

080096fc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80096fc:	b480      	push	{r7}
 80096fe:	b085      	sub	sp, #20
 8009700:	af00      	add	r7, sp, #0
 8009702:	60f8      	str	r0, [r7, #12]
 8009704:	60b9      	str	r1, [r7, #8]
 8009706:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	3b04      	subs	r3, #4
 800970c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009714:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	3b04      	subs	r3, #4
 800971a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	f023 0201 	bic.w	r2, r3, #1
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	3b04      	subs	r3, #4
 800972a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800972c:	4a0c      	ldr	r2, [pc, #48]	; (8009760 <pxPortInitialiseStack+0x64>)
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	3b14      	subs	r3, #20
 8009736:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8009738:	687a      	ldr	r2, [r7, #4]
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	3b04      	subs	r3, #4
 8009742:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f06f 0202 	mvn.w	r2, #2
 800974a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	3b20      	subs	r3, #32
 8009750:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8009752:	68fb      	ldr	r3, [r7, #12]
}
 8009754:	4618      	mov	r0, r3
 8009756:	3714      	adds	r7, #20
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr
 8009760:	08009765 	.word	0x08009765

08009764 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009764:	b480      	push	{r7}
 8009766:	b085      	sub	sp, #20
 8009768:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800976a:	2300      	movs	r3, #0
 800976c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800976e:	4b12      	ldr	r3, [pc, #72]	; (80097b8 <prvTaskExitError+0x54>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009776:	d00a      	beq.n	800978e <prvTaskExitError+0x2a>
        __asm volatile
 8009778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800977c:	f383 8811 	msr	BASEPRI, r3
 8009780:	f3bf 8f6f 	isb	sy
 8009784:	f3bf 8f4f 	dsb	sy
 8009788:	60fb      	str	r3, [r7, #12]
    }
 800978a:	bf00      	nop
 800978c:	e7fe      	b.n	800978c <prvTaskExitError+0x28>
        __asm volatile
 800978e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009792:	f383 8811 	msr	BASEPRI, r3
 8009796:	f3bf 8f6f 	isb	sy
 800979a:	f3bf 8f4f 	dsb	sy
 800979e:	60bb      	str	r3, [r7, #8]
    }
 80097a0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80097a2:	bf00      	nop
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d0fc      	beq.n	80097a4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80097aa:	bf00      	nop
 80097ac:	bf00      	nop
 80097ae:	3714      	adds	r7, #20
 80097b0:	46bd      	mov	sp, r7
 80097b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b6:	4770      	bx	lr
 80097b8:	20000040 	.word	0x20000040
 80097bc:	00000000 	.word	0x00000000

080097c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80097c0:	4b07      	ldr	r3, [pc, #28]	; (80097e0 <pxCurrentTCBConst2>)
 80097c2:	6819      	ldr	r1, [r3, #0]
 80097c4:	6808      	ldr	r0, [r1, #0]
 80097c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ca:	f380 8809 	msr	PSP, r0
 80097ce:	f3bf 8f6f 	isb	sy
 80097d2:	f04f 0000 	mov.w	r0, #0
 80097d6:	f380 8811 	msr	BASEPRI, r0
 80097da:	4770      	bx	lr
 80097dc:	f3af 8000 	nop.w

080097e0 <pxCurrentTCBConst2>:
 80097e0:	200003dc 	.word	0x200003dc
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80097e4:	bf00      	nop
 80097e6:	bf00      	nop

080097e8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80097e8:	4808      	ldr	r0, [pc, #32]	; (800980c <prvPortStartFirstTask+0x24>)
 80097ea:	6800      	ldr	r0, [r0, #0]
 80097ec:	6800      	ldr	r0, [r0, #0]
 80097ee:	f380 8808 	msr	MSP, r0
 80097f2:	f04f 0000 	mov.w	r0, #0
 80097f6:	f380 8814 	msr	CONTROL, r0
 80097fa:	b662      	cpsie	i
 80097fc:	b661      	cpsie	f
 80097fe:	f3bf 8f4f 	dsb	sy
 8009802:	f3bf 8f6f 	isb	sy
 8009806:	df00      	svc	0
 8009808:	bf00      	nop
 800980a:	0000      	.short	0x0000
 800980c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8009810:	bf00      	nop
 8009812:	bf00      	nop

08009814 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b086      	sub	sp, #24
 8009818:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800981a:	4b46      	ldr	r3, [pc, #280]	; (8009934 <xPortStartScheduler+0x120>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	4a46      	ldr	r2, [pc, #280]	; (8009938 <xPortStartScheduler+0x124>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d10a      	bne.n	800983a <xPortStartScheduler+0x26>
        __asm volatile
 8009824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009828:	f383 8811 	msr	BASEPRI, r3
 800982c:	f3bf 8f6f 	isb	sy
 8009830:	f3bf 8f4f 	dsb	sy
 8009834:	613b      	str	r3, [r7, #16]
    }
 8009836:	bf00      	nop
 8009838:	e7fe      	b.n	8009838 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800983a:	4b3e      	ldr	r3, [pc, #248]	; (8009934 <xPortStartScheduler+0x120>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4a3f      	ldr	r2, [pc, #252]	; (800993c <xPortStartScheduler+0x128>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d10a      	bne.n	800985a <xPortStartScheduler+0x46>
        __asm volatile
 8009844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009848:	f383 8811 	msr	BASEPRI, r3
 800984c:	f3bf 8f6f 	isb	sy
 8009850:	f3bf 8f4f 	dsb	sy
 8009854:	60fb      	str	r3, [r7, #12]
    }
 8009856:	bf00      	nop
 8009858:	e7fe      	b.n	8009858 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800985a:	4b39      	ldr	r3, [pc, #228]	; (8009940 <xPortStartScheduler+0x12c>)
 800985c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	781b      	ldrb	r3, [r3, #0]
 8009862:	b2db      	uxtb	r3, r3
 8009864:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	22ff      	movs	r2, #255	; 0xff
 800986a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	781b      	ldrb	r3, [r3, #0]
 8009870:	b2db      	uxtb	r3, r3
 8009872:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009874:	78fb      	ldrb	r3, [r7, #3]
 8009876:	b2db      	uxtb	r3, r3
 8009878:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800987c:	b2da      	uxtb	r2, r3
 800987e:	4b31      	ldr	r3, [pc, #196]	; (8009944 <xPortStartScheduler+0x130>)
 8009880:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009882:	4b31      	ldr	r3, [pc, #196]	; (8009948 <xPortStartScheduler+0x134>)
 8009884:	2207      	movs	r2, #7
 8009886:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009888:	e009      	b.n	800989e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800988a:	4b2f      	ldr	r3, [pc, #188]	; (8009948 <xPortStartScheduler+0x134>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	3b01      	subs	r3, #1
 8009890:	4a2d      	ldr	r2, [pc, #180]	; (8009948 <xPortStartScheduler+0x134>)
 8009892:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009894:	78fb      	ldrb	r3, [r7, #3]
 8009896:	b2db      	uxtb	r3, r3
 8009898:	005b      	lsls	r3, r3, #1
 800989a:	b2db      	uxtb	r3, r3
 800989c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800989e:	78fb      	ldrb	r3, [r7, #3]
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098a6:	2b80      	cmp	r3, #128	; 0x80
 80098a8:	d0ef      	beq.n	800988a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80098aa:	4b27      	ldr	r3, [pc, #156]	; (8009948 <xPortStartScheduler+0x134>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f1c3 0307 	rsb	r3, r3, #7
 80098b2:	2b04      	cmp	r3, #4
 80098b4:	d00a      	beq.n	80098cc <xPortStartScheduler+0xb8>
        __asm volatile
 80098b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ba:	f383 8811 	msr	BASEPRI, r3
 80098be:	f3bf 8f6f 	isb	sy
 80098c2:	f3bf 8f4f 	dsb	sy
 80098c6:	60bb      	str	r3, [r7, #8]
    }
 80098c8:	bf00      	nop
 80098ca:	e7fe      	b.n	80098ca <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80098cc:	4b1e      	ldr	r3, [pc, #120]	; (8009948 <xPortStartScheduler+0x134>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	021b      	lsls	r3, r3, #8
 80098d2:	4a1d      	ldr	r2, [pc, #116]	; (8009948 <xPortStartScheduler+0x134>)
 80098d4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80098d6:	4b1c      	ldr	r3, [pc, #112]	; (8009948 <xPortStartScheduler+0x134>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80098de:	4a1a      	ldr	r2, [pc, #104]	; (8009948 <xPortStartScheduler+0x134>)
 80098e0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	b2da      	uxtb	r2, r3
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80098ea:	4b18      	ldr	r3, [pc, #96]	; (800994c <xPortStartScheduler+0x138>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	4a17      	ldr	r2, [pc, #92]	; (800994c <xPortStartScheduler+0x138>)
 80098f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80098f4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80098f6:	4b15      	ldr	r3, [pc, #84]	; (800994c <xPortStartScheduler+0x138>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4a14      	ldr	r2, [pc, #80]	; (800994c <xPortStartScheduler+0x138>)
 80098fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009900:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8009902:	f000 f8db 	bl	8009abc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8009906:	4b12      	ldr	r3, [pc, #72]	; (8009950 <xPortStartScheduler+0x13c>)
 8009908:	2200      	movs	r2, #0
 800990a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800990c:	f000 f8fa 	bl	8009b04 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009910:	4b10      	ldr	r3, [pc, #64]	; (8009954 <xPortStartScheduler+0x140>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4a0f      	ldr	r2, [pc, #60]	; (8009954 <xPortStartScheduler+0x140>)
 8009916:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800991a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800991c:	f7ff ff64 	bl	80097e8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8009920:	f7fe ff34 	bl	800878c <vTaskSwitchContext>
    prvTaskExitError();
 8009924:	f7ff ff1e 	bl	8009764 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8009928:	2300      	movs	r3, #0
}
 800992a:	4618      	mov	r0, r3
 800992c:	3718      	adds	r7, #24
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
 8009932:	bf00      	nop
 8009934:	e000ed00 	.word	0xe000ed00
 8009938:	410fc271 	.word	0x410fc271
 800993c:	410fc270 	.word	0x410fc270
 8009940:	e000e400 	.word	0xe000e400
 8009944:	2000051c 	.word	0x2000051c
 8009948:	20000520 	.word	0x20000520
 800994c:	e000ed20 	.word	0xe000ed20
 8009950:	20000040 	.word	0x20000040
 8009954:	e000ef34 	.word	0xe000ef34

08009958 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009958:	b480      	push	{r7}
 800995a:	b083      	sub	sp, #12
 800995c:	af00      	add	r7, sp, #0
        __asm volatile
 800995e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009962:	f383 8811 	msr	BASEPRI, r3
 8009966:	f3bf 8f6f 	isb	sy
 800996a:	f3bf 8f4f 	dsb	sy
 800996e:	607b      	str	r3, [r7, #4]
    }
 8009970:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8009972:	4b0f      	ldr	r3, [pc, #60]	; (80099b0 <vPortEnterCritical+0x58>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	3301      	adds	r3, #1
 8009978:	4a0d      	ldr	r2, [pc, #52]	; (80099b0 <vPortEnterCritical+0x58>)
 800997a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800997c:	4b0c      	ldr	r3, [pc, #48]	; (80099b0 <vPortEnterCritical+0x58>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	2b01      	cmp	r3, #1
 8009982:	d10f      	bne.n	80099a4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009984:	4b0b      	ldr	r3, [pc, #44]	; (80099b4 <vPortEnterCritical+0x5c>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	b2db      	uxtb	r3, r3
 800998a:	2b00      	cmp	r3, #0
 800998c:	d00a      	beq.n	80099a4 <vPortEnterCritical+0x4c>
        __asm volatile
 800998e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009992:	f383 8811 	msr	BASEPRI, r3
 8009996:	f3bf 8f6f 	isb	sy
 800999a:	f3bf 8f4f 	dsb	sy
 800999e:	603b      	str	r3, [r7, #0]
    }
 80099a0:	bf00      	nop
 80099a2:	e7fe      	b.n	80099a2 <vPortEnterCritical+0x4a>
    }
}
 80099a4:	bf00      	nop
 80099a6:	370c      	adds	r7, #12
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr
 80099b0:	20000040 	.word	0x20000040
 80099b4:	e000ed04 	.word	0xe000ed04

080099b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80099b8:	b480      	push	{r7}
 80099ba:	b083      	sub	sp, #12
 80099bc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80099be:	4b12      	ldr	r3, [pc, #72]	; (8009a08 <vPortExitCritical+0x50>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d10a      	bne.n	80099dc <vPortExitCritical+0x24>
        __asm volatile
 80099c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ca:	f383 8811 	msr	BASEPRI, r3
 80099ce:	f3bf 8f6f 	isb	sy
 80099d2:	f3bf 8f4f 	dsb	sy
 80099d6:	607b      	str	r3, [r7, #4]
    }
 80099d8:	bf00      	nop
 80099da:	e7fe      	b.n	80099da <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80099dc:	4b0a      	ldr	r3, [pc, #40]	; (8009a08 <vPortExitCritical+0x50>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	3b01      	subs	r3, #1
 80099e2:	4a09      	ldr	r2, [pc, #36]	; (8009a08 <vPortExitCritical+0x50>)
 80099e4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80099e6:	4b08      	ldr	r3, [pc, #32]	; (8009a08 <vPortExitCritical+0x50>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d105      	bne.n	80099fa <vPortExitCritical+0x42>
 80099ee:	2300      	movs	r3, #0
 80099f0:	603b      	str	r3, [r7, #0]
        __asm volatile
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	f383 8811 	msr	BASEPRI, r3
    }
 80099f8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80099fa:	bf00      	nop
 80099fc:	370c      	adds	r7, #12
 80099fe:	46bd      	mov	sp, r7
 8009a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a04:	4770      	bx	lr
 8009a06:	bf00      	nop
 8009a08:	20000040 	.word	0x20000040
 8009a0c:	00000000 	.word	0x00000000

08009a10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8009a10:	f3ef 8009 	mrs	r0, PSP
 8009a14:	f3bf 8f6f 	isb	sy
 8009a18:	4b15      	ldr	r3, [pc, #84]	; (8009a70 <pxCurrentTCBConst>)
 8009a1a:	681a      	ldr	r2, [r3, #0]
 8009a1c:	f01e 0f10 	tst.w	lr, #16
 8009a20:	bf08      	it	eq
 8009a22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009a26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a2a:	6010      	str	r0, [r2, #0]
 8009a2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009a30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009a34:	f380 8811 	msr	BASEPRI, r0
 8009a38:	f3bf 8f4f 	dsb	sy
 8009a3c:	f3bf 8f6f 	isb	sy
 8009a40:	f7fe fea4 	bl	800878c <vTaskSwitchContext>
 8009a44:	f04f 0000 	mov.w	r0, #0
 8009a48:	f380 8811 	msr	BASEPRI, r0
 8009a4c:	bc09      	pop	{r0, r3}
 8009a4e:	6819      	ldr	r1, [r3, #0]
 8009a50:	6808      	ldr	r0, [r1, #0]
 8009a52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a56:	f01e 0f10 	tst.w	lr, #16
 8009a5a:	bf08      	it	eq
 8009a5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009a60:	f380 8809 	msr	PSP, r0
 8009a64:	f3bf 8f6f 	isb	sy
 8009a68:	4770      	bx	lr
 8009a6a:	bf00      	nop
 8009a6c:	f3af 8000 	nop.w

08009a70 <pxCurrentTCBConst>:
 8009a70:	200003dc 	.word	0x200003dc
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8009a74:	bf00      	nop
 8009a76:	bf00      	nop

08009a78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b082      	sub	sp, #8
 8009a7c:	af00      	add	r7, sp, #0
        __asm volatile
 8009a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a82:	f383 8811 	msr	BASEPRI, r3
 8009a86:	f3bf 8f6f 	isb	sy
 8009a8a:	f3bf 8f4f 	dsb	sy
 8009a8e:	607b      	str	r3, [r7, #4]
    }
 8009a90:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8009a92:	f7fe fdc3 	bl	800861c <xTaskIncrementTick>
 8009a96:	4603      	mov	r3, r0
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d003      	beq.n	8009aa4 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009a9c:	4b06      	ldr	r3, [pc, #24]	; (8009ab8 <SysTick_Handler+0x40>)
 8009a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009aa2:	601a      	str	r2, [r3, #0]
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	f383 8811 	msr	BASEPRI, r3
    }
 8009aae:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8009ab0:	bf00      	nop
 8009ab2:	3708      	adds	r7, #8
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}
 8009ab8:	e000ed04 	.word	0xe000ed04

08009abc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8009abc:	b480      	push	{r7}
 8009abe:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009ac0:	4b0b      	ldr	r3, [pc, #44]	; (8009af0 <vPortSetupTimerInterrupt+0x34>)
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009ac6:	4b0b      	ldr	r3, [pc, #44]	; (8009af4 <vPortSetupTimerInterrupt+0x38>)
 8009ac8:	2200      	movs	r2, #0
 8009aca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009acc:	4b0a      	ldr	r3, [pc, #40]	; (8009af8 <vPortSetupTimerInterrupt+0x3c>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	4a0a      	ldr	r2, [pc, #40]	; (8009afc <vPortSetupTimerInterrupt+0x40>)
 8009ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ad6:	099b      	lsrs	r3, r3, #6
 8009ad8:	4a09      	ldr	r2, [pc, #36]	; (8009b00 <vPortSetupTimerInterrupt+0x44>)
 8009ada:	3b01      	subs	r3, #1
 8009adc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009ade:	4b04      	ldr	r3, [pc, #16]	; (8009af0 <vPortSetupTimerInterrupt+0x34>)
 8009ae0:	2207      	movs	r2, #7
 8009ae2:	601a      	str	r2, [r3, #0]
}
 8009ae4:	bf00      	nop
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aec:	4770      	bx	lr
 8009aee:	bf00      	nop
 8009af0:	e000e010 	.word	0xe000e010
 8009af4:	e000e018 	.word	0xe000e018
 8009af8:	20000030 	.word	0x20000030
 8009afc:	10624dd3 	.word	0x10624dd3
 8009b00:	e000e014 	.word	0xe000e014

08009b04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8009b04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009b14 <vPortEnableVFP+0x10>
 8009b08:	6801      	ldr	r1, [r0, #0]
 8009b0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009b0e:	6001      	str	r1, [r0, #0]
 8009b10:	4770      	bx	lr
 8009b12:	0000      	.short	0x0000
 8009b14:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8009b18:	bf00      	nop
 8009b1a:	bf00      	nop

08009b1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8009b1c:	b480      	push	{r7}
 8009b1e:	b085      	sub	sp, #20
 8009b20:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8009b22:	f3ef 8305 	mrs	r3, IPSR
 8009b26:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2b0f      	cmp	r3, #15
 8009b2c:	d914      	bls.n	8009b58 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009b2e:	4a17      	ldr	r2, [pc, #92]	; (8009b8c <vPortValidateInterruptPriority+0x70>)
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	4413      	add	r3, r2
 8009b34:	781b      	ldrb	r3, [r3, #0]
 8009b36:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009b38:	4b15      	ldr	r3, [pc, #84]	; (8009b90 <vPortValidateInterruptPriority+0x74>)
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	7afa      	ldrb	r2, [r7, #11]
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	d20a      	bcs.n	8009b58 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8009b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b46:	f383 8811 	msr	BASEPRI, r3
 8009b4a:	f3bf 8f6f 	isb	sy
 8009b4e:	f3bf 8f4f 	dsb	sy
 8009b52:	607b      	str	r3, [r7, #4]
    }
 8009b54:	bf00      	nop
 8009b56:	e7fe      	b.n	8009b56 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009b58:	4b0e      	ldr	r3, [pc, #56]	; (8009b94 <vPortValidateInterruptPriority+0x78>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009b60:	4b0d      	ldr	r3, [pc, #52]	; (8009b98 <vPortValidateInterruptPriority+0x7c>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d90a      	bls.n	8009b7e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8009b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b6c:	f383 8811 	msr	BASEPRI, r3
 8009b70:	f3bf 8f6f 	isb	sy
 8009b74:	f3bf 8f4f 	dsb	sy
 8009b78:	603b      	str	r3, [r7, #0]
    }
 8009b7a:	bf00      	nop
 8009b7c:	e7fe      	b.n	8009b7c <vPortValidateInterruptPriority+0x60>
    }
 8009b7e:	bf00      	nop
 8009b80:	3714      	adds	r7, #20
 8009b82:	46bd      	mov	sp, r7
 8009b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b88:	4770      	bx	lr
 8009b8a:	bf00      	nop
 8009b8c:	e000e3f0 	.word	0xe000e3f0
 8009b90:	2000051c 	.word	0x2000051c
 8009b94:	e000ed0c 	.word	0xe000ed0c
 8009b98:	20000520 	.word	0x20000520

08009b9c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b08a      	sub	sp, #40	; 0x28
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8009ba8:	f7fe fc7e 	bl	80084a8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8009bac:	4b65      	ldr	r3, [pc, #404]	; (8009d44 <pvPortMalloc+0x1a8>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d101      	bne.n	8009bb8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8009bb4:	f000 f934 	bl	8009e20 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009bb8:	4b63      	ldr	r3, [pc, #396]	; (8009d48 <pvPortMalloc+0x1ac>)
 8009bba:	681a      	ldr	r2, [r3, #0]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	4013      	ands	r3, r2
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	f040 80a7 	bne.w	8009d14 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d02d      	beq.n	8009c28 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8009bcc:	2208      	movs	r2, #8
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8009bd2:	687a      	ldr	r2, [r7, #4]
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d227      	bcs.n	8009c28 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8009bd8:	2208      	movs	r2, #8
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	4413      	add	r3, r2
 8009bde:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f003 0307 	and.w	r3, r3, #7
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d021      	beq.n	8009c2e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f023 0307 	bic.w	r3, r3, #7
 8009bf0:	3308      	adds	r3, #8
 8009bf2:	687a      	ldr	r2, [r7, #4]
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d214      	bcs.n	8009c22 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f023 0307 	bic.w	r3, r3, #7
 8009bfe:	3308      	adds	r3, #8
 8009c00:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f003 0307 	and.w	r3, r3, #7
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d010      	beq.n	8009c2e <pvPortMalloc+0x92>
        __asm volatile
 8009c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c10:	f383 8811 	msr	BASEPRI, r3
 8009c14:	f3bf 8f6f 	isb	sy
 8009c18:	f3bf 8f4f 	dsb	sy
 8009c1c:	617b      	str	r3, [r7, #20]
    }
 8009c1e:	bf00      	nop
 8009c20:	e7fe      	b.n	8009c20 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8009c22:	2300      	movs	r3, #0
 8009c24:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009c26:	e002      	b.n	8009c2e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	607b      	str	r3, [r7, #4]
 8009c2c:	e000      	b.n	8009c30 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009c2e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d06e      	beq.n	8009d14 <pvPortMalloc+0x178>
 8009c36:	4b45      	ldr	r3, [pc, #276]	; (8009d4c <pvPortMalloc+0x1b0>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	687a      	ldr	r2, [r7, #4]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d869      	bhi.n	8009d14 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8009c40:	4b43      	ldr	r3, [pc, #268]	; (8009d50 <pvPortMalloc+0x1b4>)
 8009c42:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8009c44:	4b42      	ldr	r3, [pc, #264]	; (8009d50 <pvPortMalloc+0x1b4>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c4a:	e004      	b.n	8009c56 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8009c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8009c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c58:	685b      	ldr	r3, [r3, #4]
 8009c5a:	687a      	ldr	r2, [r7, #4]
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d903      	bls.n	8009c68 <pvPortMalloc+0xcc>
 8009c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d1f1      	bne.n	8009c4c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8009c68:	4b36      	ldr	r3, [pc, #216]	; (8009d44 <pvPortMalloc+0x1a8>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	d050      	beq.n	8009d14 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009c72:	6a3b      	ldr	r3, [r7, #32]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	2208      	movs	r2, #8
 8009c78:	4413      	add	r3, r2
 8009c7a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c7e:	681a      	ldr	r2, [r3, #0]
 8009c80:	6a3b      	ldr	r3, [r7, #32]
 8009c82:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c86:	685a      	ldr	r2, [r3, #4]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	1ad2      	subs	r2, r2, r3
 8009c8c:	2308      	movs	r3, #8
 8009c8e:	005b      	lsls	r3, r3, #1
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d91f      	bls.n	8009cd4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	4413      	add	r3, r2
 8009c9a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c9c:	69bb      	ldr	r3, [r7, #24]
 8009c9e:	f003 0307 	and.w	r3, r3, #7
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d00a      	beq.n	8009cbc <pvPortMalloc+0x120>
        __asm volatile
 8009ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009caa:	f383 8811 	msr	BASEPRI, r3
 8009cae:	f3bf 8f6f 	isb	sy
 8009cb2:	f3bf 8f4f 	dsb	sy
 8009cb6:	613b      	str	r3, [r7, #16]
    }
 8009cb8:	bf00      	nop
 8009cba:	e7fe      	b.n	8009cba <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cbe:	685a      	ldr	r2, [r3, #4]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	1ad2      	subs	r2, r2, r3
 8009cc4:	69bb      	ldr	r3, [r7, #24]
 8009cc6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8009cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cca:	687a      	ldr	r2, [r7, #4]
 8009ccc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009cce:	69b8      	ldr	r0, [r7, #24]
 8009cd0:	f000 f908 	bl	8009ee4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009cd4:	4b1d      	ldr	r3, [pc, #116]	; (8009d4c <pvPortMalloc+0x1b0>)
 8009cd6:	681a      	ldr	r2, [r3, #0]
 8009cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	1ad3      	subs	r3, r2, r3
 8009cde:	4a1b      	ldr	r2, [pc, #108]	; (8009d4c <pvPortMalloc+0x1b0>)
 8009ce0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009ce2:	4b1a      	ldr	r3, [pc, #104]	; (8009d4c <pvPortMalloc+0x1b0>)
 8009ce4:	681a      	ldr	r2, [r3, #0]
 8009ce6:	4b1b      	ldr	r3, [pc, #108]	; (8009d54 <pvPortMalloc+0x1b8>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	429a      	cmp	r2, r3
 8009cec:	d203      	bcs.n	8009cf6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009cee:	4b17      	ldr	r3, [pc, #92]	; (8009d4c <pvPortMalloc+0x1b0>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4a18      	ldr	r2, [pc, #96]	; (8009d54 <pvPortMalloc+0x1b8>)
 8009cf4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf8:	685a      	ldr	r2, [r3, #4]
 8009cfa:	4b13      	ldr	r3, [pc, #76]	; (8009d48 <pvPortMalloc+0x1ac>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	431a      	orrs	r2, r3
 8009d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d02:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8009d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d06:	2200      	movs	r2, #0
 8009d08:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8009d0a:	4b13      	ldr	r3, [pc, #76]	; (8009d58 <pvPortMalloc+0x1bc>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	3301      	adds	r3, #1
 8009d10:	4a11      	ldr	r2, [pc, #68]	; (8009d58 <pvPortMalloc+0x1bc>)
 8009d12:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8009d14:	f7fe fbd6 	bl	80084c4 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d18:	69fb      	ldr	r3, [r7, #28]
 8009d1a:	f003 0307 	and.w	r3, r3, #7
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d00a      	beq.n	8009d38 <pvPortMalloc+0x19c>
        __asm volatile
 8009d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d26:	f383 8811 	msr	BASEPRI, r3
 8009d2a:	f3bf 8f6f 	isb	sy
 8009d2e:	f3bf 8f4f 	dsb	sy
 8009d32:	60fb      	str	r3, [r7, #12]
    }
 8009d34:	bf00      	nop
 8009d36:	e7fe      	b.n	8009d36 <pvPortMalloc+0x19a>
    return pvReturn;
 8009d38:	69fb      	ldr	r3, [r7, #28]
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3728      	adds	r7, #40	; 0x28
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}
 8009d42:	bf00      	nop
 8009d44:	2001312c 	.word	0x2001312c
 8009d48:	20013140 	.word	0x20013140
 8009d4c:	20013130 	.word	0x20013130
 8009d50:	20013124 	.word	0x20013124
 8009d54:	20013134 	.word	0x20013134
 8009d58:	20013138 	.word	0x20013138

08009d5c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b086      	sub	sp, #24
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d04d      	beq.n	8009e0a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8009d6e:	2308      	movs	r3, #8
 8009d70:	425b      	negs	r3, r3
 8009d72:	697a      	ldr	r2, [r7, #20]
 8009d74:	4413      	add	r3, r2
 8009d76:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	685a      	ldr	r2, [r3, #4]
 8009d80:	4b24      	ldr	r3, [pc, #144]	; (8009e14 <vPortFree+0xb8>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4013      	ands	r3, r2
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d10a      	bne.n	8009da0 <vPortFree+0x44>
        __asm volatile
 8009d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d8e:	f383 8811 	msr	BASEPRI, r3
 8009d92:	f3bf 8f6f 	isb	sy
 8009d96:	f3bf 8f4f 	dsb	sy
 8009d9a:	60fb      	str	r3, [r7, #12]
    }
 8009d9c:	bf00      	nop
 8009d9e:	e7fe      	b.n	8009d9e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d00a      	beq.n	8009dbe <vPortFree+0x62>
        __asm volatile
 8009da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dac:	f383 8811 	msr	BASEPRI, r3
 8009db0:	f3bf 8f6f 	isb	sy
 8009db4:	f3bf 8f4f 	dsb	sy
 8009db8:	60bb      	str	r3, [r7, #8]
    }
 8009dba:	bf00      	nop
 8009dbc:	e7fe      	b.n	8009dbc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	685a      	ldr	r2, [r3, #4]
 8009dc2:	4b14      	ldr	r3, [pc, #80]	; (8009e14 <vPortFree+0xb8>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	4013      	ands	r3, r2
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d01e      	beq.n	8009e0a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d11a      	bne.n	8009e0a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	685a      	ldr	r2, [r3, #4]
 8009dd8:	4b0e      	ldr	r3, [pc, #56]	; (8009e14 <vPortFree+0xb8>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	43db      	mvns	r3, r3
 8009dde:	401a      	ands	r2, r3
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8009de4:	f7fe fb60 	bl	80084a8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	685a      	ldr	r2, [r3, #4]
 8009dec:	4b0a      	ldr	r3, [pc, #40]	; (8009e18 <vPortFree+0xbc>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4413      	add	r3, r2
 8009df2:	4a09      	ldr	r2, [pc, #36]	; (8009e18 <vPortFree+0xbc>)
 8009df4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009df6:	6938      	ldr	r0, [r7, #16]
 8009df8:	f000 f874 	bl	8009ee4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8009dfc:	4b07      	ldr	r3, [pc, #28]	; (8009e1c <vPortFree+0xc0>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	3301      	adds	r3, #1
 8009e02:	4a06      	ldr	r2, [pc, #24]	; (8009e1c <vPortFree+0xc0>)
 8009e04:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8009e06:	f7fe fb5d 	bl	80084c4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8009e0a:	bf00      	nop
 8009e0c:	3718      	adds	r7, #24
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	20013140 	.word	0x20013140
 8009e18:	20013130 	.word	0x20013130
 8009e1c:	2001313c 	.word	0x2001313c

08009e20 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8009e20:	b480      	push	{r7}
 8009e22:	b085      	sub	sp, #20
 8009e24:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009e26:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8009e2a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8009e2c:	4b27      	ldr	r3, [pc, #156]	; (8009ecc <prvHeapInit+0xac>)
 8009e2e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f003 0307 	and.w	r3, r3, #7
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d00c      	beq.n	8009e54 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	3307      	adds	r3, #7
 8009e3e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	f023 0307 	bic.w	r3, r3, #7
 8009e46:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009e48:	68ba      	ldr	r2, [r7, #8]
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	1ad3      	subs	r3, r2, r3
 8009e4e:	4a1f      	ldr	r2, [pc, #124]	; (8009ecc <prvHeapInit+0xac>)
 8009e50:	4413      	add	r3, r2
 8009e52:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009e58:	4a1d      	ldr	r2, [pc, #116]	; (8009ed0 <prvHeapInit+0xb0>)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8009e5e:	4b1c      	ldr	r3, [pc, #112]	; (8009ed0 <prvHeapInit+0xb0>)
 8009e60:	2200      	movs	r2, #0
 8009e62:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	68ba      	ldr	r2, [r7, #8]
 8009e68:	4413      	add	r3, r2
 8009e6a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8009e6c:	2208      	movs	r2, #8
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	1a9b      	subs	r3, r3, r2
 8009e72:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f023 0307 	bic.w	r3, r3, #7
 8009e7a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	4a15      	ldr	r2, [pc, #84]	; (8009ed4 <prvHeapInit+0xb4>)
 8009e80:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8009e82:	4b14      	ldr	r3, [pc, #80]	; (8009ed4 <prvHeapInit+0xb4>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	2200      	movs	r2, #0
 8009e88:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8009e8a:	4b12      	ldr	r3, [pc, #72]	; (8009ed4 <prvHeapInit+0xb4>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	68fa      	ldr	r2, [r7, #12]
 8009e9a:	1ad2      	subs	r2, r2, r3
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009ea0:	4b0c      	ldr	r3, [pc, #48]	; (8009ed4 <prvHeapInit+0xb4>)
 8009ea2:	681a      	ldr	r2, [r3, #0]
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	4a0a      	ldr	r2, [pc, #40]	; (8009ed8 <prvHeapInit+0xb8>)
 8009eae:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	4a09      	ldr	r2, [pc, #36]	; (8009edc <prvHeapInit+0xbc>)
 8009eb6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009eb8:	4b09      	ldr	r3, [pc, #36]	; (8009ee0 <prvHeapInit+0xc0>)
 8009eba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009ebe:	601a      	str	r2, [r3, #0]
}
 8009ec0:	bf00      	nop
 8009ec2:	3714      	adds	r7, #20
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr
 8009ecc:	20000524 	.word	0x20000524
 8009ed0:	20013124 	.word	0x20013124
 8009ed4:	2001312c 	.word	0x2001312c
 8009ed8:	20013134 	.word	0x20013134
 8009edc:	20013130 	.word	0x20013130
 8009ee0:	20013140 	.word	0x20013140

08009ee4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b085      	sub	sp, #20
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009eec:	4b28      	ldr	r3, [pc, #160]	; (8009f90 <prvInsertBlockIntoFreeList+0xac>)
 8009eee:	60fb      	str	r3, [r7, #12]
 8009ef0:	e002      	b.n	8009ef8 <prvInsertBlockIntoFreeList+0x14>
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	60fb      	str	r3, [r7, #12]
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	687a      	ldr	r2, [r7, #4]
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d8f7      	bhi.n	8009ef2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	68ba      	ldr	r2, [r7, #8]
 8009f0c:	4413      	add	r3, r2
 8009f0e:	687a      	ldr	r2, [r7, #4]
 8009f10:	429a      	cmp	r2, r3
 8009f12:	d108      	bne.n	8009f26 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	685a      	ldr	r2, [r3, #4]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	441a      	add	r2, r3
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	685b      	ldr	r3, [r3, #4]
 8009f2e:	68ba      	ldr	r2, [r7, #8]
 8009f30:	441a      	add	r2, r3
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	429a      	cmp	r2, r3
 8009f38:	d118      	bne.n	8009f6c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681a      	ldr	r2, [r3, #0]
 8009f3e:	4b15      	ldr	r3, [pc, #84]	; (8009f94 <prvInsertBlockIntoFreeList+0xb0>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d00d      	beq.n	8009f62 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	685a      	ldr	r2, [r3, #4]
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	441a      	add	r2, r3
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	681a      	ldr	r2, [r3, #0]
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	601a      	str	r2, [r3, #0]
 8009f60:	e008      	b.n	8009f74 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009f62:	4b0c      	ldr	r3, [pc, #48]	; (8009f94 <prvInsertBlockIntoFreeList+0xb0>)
 8009f64:	681a      	ldr	r2, [r3, #0]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	601a      	str	r2, [r3, #0]
 8009f6a:	e003      	b.n	8009f74 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681a      	ldr	r2, [r3, #0]
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8009f74:	68fa      	ldr	r2, [r7, #12]
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	d002      	beq.n	8009f82 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	687a      	ldr	r2, [r7, #4]
 8009f80:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8009f82:	bf00      	nop
 8009f84:	3714      	adds	r7, #20
 8009f86:	46bd      	mov	sp, r7
 8009f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8c:	4770      	bx	lr
 8009f8e:	bf00      	nop
 8009f90:	20013124 	.word	0x20013124
 8009f94:	2001312c 	.word	0x2001312c

08009f98 <__errno>:
 8009f98:	4b01      	ldr	r3, [pc, #4]	; (8009fa0 <__errno+0x8>)
 8009f9a:	6818      	ldr	r0, [r3, #0]
 8009f9c:	4770      	bx	lr
 8009f9e:	bf00      	nop
 8009fa0:	20000044 	.word	0x20000044

08009fa4 <__libc_init_array>:
 8009fa4:	b570      	push	{r4, r5, r6, lr}
 8009fa6:	4d0d      	ldr	r5, [pc, #52]	; (8009fdc <__libc_init_array+0x38>)
 8009fa8:	4c0d      	ldr	r4, [pc, #52]	; (8009fe0 <__libc_init_array+0x3c>)
 8009faa:	1b64      	subs	r4, r4, r5
 8009fac:	10a4      	asrs	r4, r4, #2
 8009fae:	2600      	movs	r6, #0
 8009fb0:	42a6      	cmp	r6, r4
 8009fb2:	d109      	bne.n	8009fc8 <__libc_init_array+0x24>
 8009fb4:	4d0b      	ldr	r5, [pc, #44]	; (8009fe4 <__libc_init_array+0x40>)
 8009fb6:	4c0c      	ldr	r4, [pc, #48]	; (8009fe8 <__libc_init_array+0x44>)
 8009fb8:	f002 ff18 	bl	800cdec <_init>
 8009fbc:	1b64      	subs	r4, r4, r5
 8009fbe:	10a4      	asrs	r4, r4, #2
 8009fc0:	2600      	movs	r6, #0
 8009fc2:	42a6      	cmp	r6, r4
 8009fc4:	d105      	bne.n	8009fd2 <__libc_init_array+0x2e>
 8009fc6:	bd70      	pop	{r4, r5, r6, pc}
 8009fc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fcc:	4798      	blx	r3
 8009fce:	3601      	adds	r6, #1
 8009fd0:	e7ee      	b.n	8009fb0 <__libc_init_array+0xc>
 8009fd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fd6:	4798      	blx	r3
 8009fd8:	3601      	adds	r6, #1
 8009fda:	e7f2      	b.n	8009fc2 <__libc_init_array+0x1e>
 8009fdc:	0800d63c 	.word	0x0800d63c
 8009fe0:	0800d63c 	.word	0x0800d63c
 8009fe4:	0800d63c 	.word	0x0800d63c
 8009fe8:	0800d640 	.word	0x0800d640

08009fec <memcpy>:
 8009fec:	440a      	add	r2, r1
 8009fee:	4291      	cmp	r1, r2
 8009ff0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ff4:	d100      	bne.n	8009ff8 <memcpy+0xc>
 8009ff6:	4770      	bx	lr
 8009ff8:	b510      	push	{r4, lr}
 8009ffa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ffe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a002:	4291      	cmp	r1, r2
 800a004:	d1f9      	bne.n	8009ffa <memcpy+0xe>
 800a006:	bd10      	pop	{r4, pc}

0800a008 <memset>:
 800a008:	4402      	add	r2, r0
 800a00a:	4603      	mov	r3, r0
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d100      	bne.n	800a012 <memset+0xa>
 800a010:	4770      	bx	lr
 800a012:	f803 1b01 	strb.w	r1, [r3], #1
 800a016:	e7f9      	b.n	800a00c <memset+0x4>

0800a018 <__cvt>:
 800a018:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a01c:	ec55 4b10 	vmov	r4, r5, d0
 800a020:	2d00      	cmp	r5, #0
 800a022:	460e      	mov	r6, r1
 800a024:	4619      	mov	r1, r3
 800a026:	462b      	mov	r3, r5
 800a028:	bfbb      	ittet	lt
 800a02a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a02e:	461d      	movlt	r5, r3
 800a030:	2300      	movge	r3, #0
 800a032:	232d      	movlt	r3, #45	; 0x2d
 800a034:	700b      	strb	r3, [r1, #0]
 800a036:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a038:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a03c:	4691      	mov	r9, r2
 800a03e:	f023 0820 	bic.w	r8, r3, #32
 800a042:	bfbc      	itt	lt
 800a044:	4622      	movlt	r2, r4
 800a046:	4614      	movlt	r4, r2
 800a048:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a04c:	d005      	beq.n	800a05a <__cvt+0x42>
 800a04e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a052:	d100      	bne.n	800a056 <__cvt+0x3e>
 800a054:	3601      	adds	r6, #1
 800a056:	2102      	movs	r1, #2
 800a058:	e000      	b.n	800a05c <__cvt+0x44>
 800a05a:	2103      	movs	r1, #3
 800a05c:	ab03      	add	r3, sp, #12
 800a05e:	9301      	str	r3, [sp, #4]
 800a060:	ab02      	add	r3, sp, #8
 800a062:	9300      	str	r3, [sp, #0]
 800a064:	ec45 4b10 	vmov	d0, r4, r5
 800a068:	4653      	mov	r3, sl
 800a06a:	4632      	mov	r2, r6
 800a06c:	f000 fd00 	bl	800aa70 <_dtoa_r>
 800a070:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a074:	4607      	mov	r7, r0
 800a076:	d102      	bne.n	800a07e <__cvt+0x66>
 800a078:	f019 0f01 	tst.w	r9, #1
 800a07c:	d022      	beq.n	800a0c4 <__cvt+0xac>
 800a07e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a082:	eb07 0906 	add.w	r9, r7, r6
 800a086:	d110      	bne.n	800a0aa <__cvt+0x92>
 800a088:	783b      	ldrb	r3, [r7, #0]
 800a08a:	2b30      	cmp	r3, #48	; 0x30
 800a08c:	d10a      	bne.n	800a0a4 <__cvt+0x8c>
 800a08e:	2200      	movs	r2, #0
 800a090:	2300      	movs	r3, #0
 800a092:	4620      	mov	r0, r4
 800a094:	4629      	mov	r1, r5
 800a096:	f7f6 fd17 	bl	8000ac8 <__aeabi_dcmpeq>
 800a09a:	b918      	cbnz	r0, 800a0a4 <__cvt+0x8c>
 800a09c:	f1c6 0601 	rsb	r6, r6, #1
 800a0a0:	f8ca 6000 	str.w	r6, [sl]
 800a0a4:	f8da 3000 	ldr.w	r3, [sl]
 800a0a8:	4499      	add	r9, r3
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	4620      	mov	r0, r4
 800a0b0:	4629      	mov	r1, r5
 800a0b2:	f7f6 fd09 	bl	8000ac8 <__aeabi_dcmpeq>
 800a0b6:	b108      	cbz	r0, 800a0bc <__cvt+0xa4>
 800a0b8:	f8cd 900c 	str.w	r9, [sp, #12]
 800a0bc:	2230      	movs	r2, #48	; 0x30
 800a0be:	9b03      	ldr	r3, [sp, #12]
 800a0c0:	454b      	cmp	r3, r9
 800a0c2:	d307      	bcc.n	800a0d4 <__cvt+0xbc>
 800a0c4:	9b03      	ldr	r3, [sp, #12]
 800a0c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a0c8:	1bdb      	subs	r3, r3, r7
 800a0ca:	4638      	mov	r0, r7
 800a0cc:	6013      	str	r3, [r2, #0]
 800a0ce:	b004      	add	sp, #16
 800a0d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0d4:	1c59      	adds	r1, r3, #1
 800a0d6:	9103      	str	r1, [sp, #12]
 800a0d8:	701a      	strb	r2, [r3, #0]
 800a0da:	e7f0      	b.n	800a0be <__cvt+0xa6>

0800a0dc <__exponent>:
 800a0dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a0de:	4603      	mov	r3, r0
 800a0e0:	2900      	cmp	r1, #0
 800a0e2:	bfb8      	it	lt
 800a0e4:	4249      	neglt	r1, r1
 800a0e6:	f803 2b02 	strb.w	r2, [r3], #2
 800a0ea:	bfb4      	ite	lt
 800a0ec:	222d      	movlt	r2, #45	; 0x2d
 800a0ee:	222b      	movge	r2, #43	; 0x2b
 800a0f0:	2909      	cmp	r1, #9
 800a0f2:	7042      	strb	r2, [r0, #1]
 800a0f4:	dd2a      	ble.n	800a14c <__exponent+0x70>
 800a0f6:	f10d 0407 	add.w	r4, sp, #7
 800a0fa:	46a4      	mov	ip, r4
 800a0fc:	270a      	movs	r7, #10
 800a0fe:	46a6      	mov	lr, r4
 800a100:	460a      	mov	r2, r1
 800a102:	fb91 f6f7 	sdiv	r6, r1, r7
 800a106:	fb07 1516 	mls	r5, r7, r6, r1
 800a10a:	3530      	adds	r5, #48	; 0x30
 800a10c:	2a63      	cmp	r2, #99	; 0x63
 800a10e:	f104 34ff 	add.w	r4, r4, #4294967295
 800a112:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a116:	4631      	mov	r1, r6
 800a118:	dcf1      	bgt.n	800a0fe <__exponent+0x22>
 800a11a:	3130      	adds	r1, #48	; 0x30
 800a11c:	f1ae 0502 	sub.w	r5, lr, #2
 800a120:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a124:	1c44      	adds	r4, r0, #1
 800a126:	4629      	mov	r1, r5
 800a128:	4561      	cmp	r1, ip
 800a12a:	d30a      	bcc.n	800a142 <__exponent+0x66>
 800a12c:	f10d 0209 	add.w	r2, sp, #9
 800a130:	eba2 020e 	sub.w	r2, r2, lr
 800a134:	4565      	cmp	r5, ip
 800a136:	bf88      	it	hi
 800a138:	2200      	movhi	r2, #0
 800a13a:	4413      	add	r3, r2
 800a13c:	1a18      	subs	r0, r3, r0
 800a13e:	b003      	add	sp, #12
 800a140:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a142:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a146:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a14a:	e7ed      	b.n	800a128 <__exponent+0x4c>
 800a14c:	2330      	movs	r3, #48	; 0x30
 800a14e:	3130      	adds	r1, #48	; 0x30
 800a150:	7083      	strb	r3, [r0, #2]
 800a152:	70c1      	strb	r1, [r0, #3]
 800a154:	1d03      	adds	r3, r0, #4
 800a156:	e7f1      	b.n	800a13c <__exponent+0x60>

0800a158 <_printf_float>:
 800a158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a15c:	ed2d 8b02 	vpush	{d8}
 800a160:	b08d      	sub	sp, #52	; 0x34
 800a162:	460c      	mov	r4, r1
 800a164:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a168:	4616      	mov	r6, r2
 800a16a:	461f      	mov	r7, r3
 800a16c:	4605      	mov	r5, r0
 800a16e:	f001 fa6d 	bl	800b64c <_localeconv_r>
 800a172:	f8d0 a000 	ldr.w	sl, [r0]
 800a176:	4650      	mov	r0, sl
 800a178:	f7f6 f82a 	bl	80001d0 <strlen>
 800a17c:	2300      	movs	r3, #0
 800a17e:	930a      	str	r3, [sp, #40]	; 0x28
 800a180:	6823      	ldr	r3, [r4, #0]
 800a182:	9305      	str	r3, [sp, #20]
 800a184:	f8d8 3000 	ldr.w	r3, [r8]
 800a188:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a18c:	3307      	adds	r3, #7
 800a18e:	f023 0307 	bic.w	r3, r3, #7
 800a192:	f103 0208 	add.w	r2, r3, #8
 800a196:	f8c8 2000 	str.w	r2, [r8]
 800a19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a19e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a1a2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a1a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a1aa:	9307      	str	r3, [sp, #28]
 800a1ac:	f8cd 8018 	str.w	r8, [sp, #24]
 800a1b0:	ee08 0a10 	vmov	s16, r0
 800a1b4:	4b9f      	ldr	r3, [pc, #636]	; (800a434 <_printf_float+0x2dc>)
 800a1b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a1ba:	f04f 32ff 	mov.w	r2, #4294967295
 800a1be:	f7f6 fcb5 	bl	8000b2c <__aeabi_dcmpun>
 800a1c2:	bb88      	cbnz	r0, 800a228 <_printf_float+0xd0>
 800a1c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a1c8:	4b9a      	ldr	r3, [pc, #616]	; (800a434 <_printf_float+0x2dc>)
 800a1ca:	f04f 32ff 	mov.w	r2, #4294967295
 800a1ce:	f7f6 fc8f 	bl	8000af0 <__aeabi_dcmple>
 800a1d2:	bb48      	cbnz	r0, 800a228 <_printf_float+0xd0>
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	4640      	mov	r0, r8
 800a1da:	4649      	mov	r1, r9
 800a1dc:	f7f6 fc7e 	bl	8000adc <__aeabi_dcmplt>
 800a1e0:	b110      	cbz	r0, 800a1e8 <_printf_float+0x90>
 800a1e2:	232d      	movs	r3, #45	; 0x2d
 800a1e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1e8:	4b93      	ldr	r3, [pc, #588]	; (800a438 <_printf_float+0x2e0>)
 800a1ea:	4894      	ldr	r0, [pc, #592]	; (800a43c <_printf_float+0x2e4>)
 800a1ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a1f0:	bf94      	ite	ls
 800a1f2:	4698      	movls	r8, r3
 800a1f4:	4680      	movhi	r8, r0
 800a1f6:	2303      	movs	r3, #3
 800a1f8:	6123      	str	r3, [r4, #16]
 800a1fa:	9b05      	ldr	r3, [sp, #20]
 800a1fc:	f023 0204 	bic.w	r2, r3, #4
 800a200:	6022      	str	r2, [r4, #0]
 800a202:	f04f 0900 	mov.w	r9, #0
 800a206:	9700      	str	r7, [sp, #0]
 800a208:	4633      	mov	r3, r6
 800a20a:	aa0b      	add	r2, sp, #44	; 0x2c
 800a20c:	4621      	mov	r1, r4
 800a20e:	4628      	mov	r0, r5
 800a210:	f000 f9d8 	bl	800a5c4 <_printf_common>
 800a214:	3001      	adds	r0, #1
 800a216:	f040 8090 	bne.w	800a33a <_printf_float+0x1e2>
 800a21a:	f04f 30ff 	mov.w	r0, #4294967295
 800a21e:	b00d      	add	sp, #52	; 0x34
 800a220:	ecbd 8b02 	vpop	{d8}
 800a224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a228:	4642      	mov	r2, r8
 800a22a:	464b      	mov	r3, r9
 800a22c:	4640      	mov	r0, r8
 800a22e:	4649      	mov	r1, r9
 800a230:	f7f6 fc7c 	bl	8000b2c <__aeabi_dcmpun>
 800a234:	b140      	cbz	r0, 800a248 <_printf_float+0xf0>
 800a236:	464b      	mov	r3, r9
 800a238:	2b00      	cmp	r3, #0
 800a23a:	bfbc      	itt	lt
 800a23c:	232d      	movlt	r3, #45	; 0x2d
 800a23e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a242:	487f      	ldr	r0, [pc, #508]	; (800a440 <_printf_float+0x2e8>)
 800a244:	4b7f      	ldr	r3, [pc, #508]	; (800a444 <_printf_float+0x2ec>)
 800a246:	e7d1      	b.n	800a1ec <_printf_float+0x94>
 800a248:	6863      	ldr	r3, [r4, #4]
 800a24a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a24e:	9206      	str	r2, [sp, #24]
 800a250:	1c5a      	adds	r2, r3, #1
 800a252:	d13f      	bne.n	800a2d4 <_printf_float+0x17c>
 800a254:	2306      	movs	r3, #6
 800a256:	6063      	str	r3, [r4, #4]
 800a258:	9b05      	ldr	r3, [sp, #20]
 800a25a:	6861      	ldr	r1, [r4, #4]
 800a25c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a260:	2300      	movs	r3, #0
 800a262:	9303      	str	r3, [sp, #12]
 800a264:	ab0a      	add	r3, sp, #40	; 0x28
 800a266:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a26a:	ab09      	add	r3, sp, #36	; 0x24
 800a26c:	ec49 8b10 	vmov	d0, r8, r9
 800a270:	9300      	str	r3, [sp, #0]
 800a272:	6022      	str	r2, [r4, #0]
 800a274:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a278:	4628      	mov	r0, r5
 800a27a:	f7ff fecd 	bl	800a018 <__cvt>
 800a27e:	9b06      	ldr	r3, [sp, #24]
 800a280:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a282:	2b47      	cmp	r3, #71	; 0x47
 800a284:	4680      	mov	r8, r0
 800a286:	d108      	bne.n	800a29a <_printf_float+0x142>
 800a288:	1cc8      	adds	r0, r1, #3
 800a28a:	db02      	blt.n	800a292 <_printf_float+0x13a>
 800a28c:	6863      	ldr	r3, [r4, #4]
 800a28e:	4299      	cmp	r1, r3
 800a290:	dd41      	ble.n	800a316 <_printf_float+0x1be>
 800a292:	f1ab 0b02 	sub.w	fp, fp, #2
 800a296:	fa5f fb8b 	uxtb.w	fp, fp
 800a29a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a29e:	d820      	bhi.n	800a2e2 <_printf_float+0x18a>
 800a2a0:	3901      	subs	r1, #1
 800a2a2:	465a      	mov	r2, fp
 800a2a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a2a8:	9109      	str	r1, [sp, #36]	; 0x24
 800a2aa:	f7ff ff17 	bl	800a0dc <__exponent>
 800a2ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2b0:	1813      	adds	r3, r2, r0
 800a2b2:	2a01      	cmp	r2, #1
 800a2b4:	4681      	mov	r9, r0
 800a2b6:	6123      	str	r3, [r4, #16]
 800a2b8:	dc02      	bgt.n	800a2c0 <_printf_float+0x168>
 800a2ba:	6822      	ldr	r2, [r4, #0]
 800a2bc:	07d2      	lsls	r2, r2, #31
 800a2be:	d501      	bpl.n	800a2c4 <_printf_float+0x16c>
 800a2c0:	3301      	adds	r3, #1
 800a2c2:	6123      	str	r3, [r4, #16]
 800a2c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d09c      	beq.n	800a206 <_printf_float+0xae>
 800a2cc:	232d      	movs	r3, #45	; 0x2d
 800a2ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2d2:	e798      	b.n	800a206 <_printf_float+0xae>
 800a2d4:	9a06      	ldr	r2, [sp, #24]
 800a2d6:	2a47      	cmp	r2, #71	; 0x47
 800a2d8:	d1be      	bne.n	800a258 <_printf_float+0x100>
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d1bc      	bne.n	800a258 <_printf_float+0x100>
 800a2de:	2301      	movs	r3, #1
 800a2e0:	e7b9      	b.n	800a256 <_printf_float+0xfe>
 800a2e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a2e6:	d118      	bne.n	800a31a <_printf_float+0x1c2>
 800a2e8:	2900      	cmp	r1, #0
 800a2ea:	6863      	ldr	r3, [r4, #4]
 800a2ec:	dd0b      	ble.n	800a306 <_printf_float+0x1ae>
 800a2ee:	6121      	str	r1, [r4, #16]
 800a2f0:	b913      	cbnz	r3, 800a2f8 <_printf_float+0x1a0>
 800a2f2:	6822      	ldr	r2, [r4, #0]
 800a2f4:	07d0      	lsls	r0, r2, #31
 800a2f6:	d502      	bpl.n	800a2fe <_printf_float+0x1a6>
 800a2f8:	3301      	adds	r3, #1
 800a2fa:	440b      	add	r3, r1
 800a2fc:	6123      	str	r3, [r4, #16]
 800a2fe:	65a1      	str	r1, [r4, #88]	; 0x58
 800a300:	f04f 0900 	mov.w	r9, #0
 800a304:	e7de      	b.n	800a2c4 <_printf_float+0x16c>
 800a306:	b913      	cbnz	r3, 800a30e <_printf_float+0x1b6>
 800a308:	6822      	ldr	r2, [r4, #0]
 800a30a:	07d2      	lsls	r2, r2, #31
 800a30c:	d501      	bpl.n	800a312 <_printf_float+0x1ba>
 800a30e:	3302      	adds	r3, #2
 800a310:	e7f4      	b.n	800a2fc <_printf_float+0x1a4>
 800a312:	2301      	movs	r3, #1
 800a314:	e7f2      	b.n	800a2fc <_printf_float+0x1a4>
 800a316:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a31a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a31c:	4299      	cmp	r1, r3
 800a31e:	db05      	blt.n	800a32c <_printf_float+0x1d4>
 800a320:	6823      	ldr	r3, [r4, #0]
 800a322:	6121      	str	r1, [r4, #16]
 800a324:	07d8      	lsls	r0, r3, #31
 800a326:	d5ea      	bpl.n	800a2fe <_printf_float+0x1a6>
 800a328:	1c4b      	adds	r3, r1, #1
 800a32a:	e7e7      	b.n	800a2fc <_printf_float+0x1a4>
 800a32c:	2900      	cmp	r1, #0
 800a32e:	bfd4      	ite	le
 800a330:	f1c1 0202 	rsble	r2, r1, #2
 800a334:	2201      	movgt	r2, #1
 800a336:	4413      	add	r3, r2
 800a338:	e7e0      	b.n	800a2fc <_printf_float+0x1a4>
 800a33a:	6823      	ldr	r3, [r4, #0]
 800a33c:	055a      	lsls	r2, r3, #21
 800a33e:	d407      	bmi.n	800a350 <_printf_float+0x1f8>
 800a340:	6923      	ldr	r3, [r4, #16]
 800a342:	4642      	mov	r2, r8
 800a344:	4631      	mov	r1, r6
 800a346:	4628      	mov	r0, r5
 800a348:	47b8      	blx	r7
 800a34a:	3001      	adds	r0, #1
 800a34c:	d12c      	bne.n	800a3a8 <_printf_float+0x250>
 800a34e:	e764      	b.n	800a21a <_printf_float+0xc2>
 800a350:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a354:	f240 80e0 	bls.w	800a518 <_printf_float+0x3c0>
 800a358:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a35c:	2200      	movs	r2, #0
 800a35e:	2300      	movs	r3, #0
 800a360:	f7f6 fbb2 	bl	8000ac8 <__aeabi_dcmpeq>
 800a364:	2800      	cmp	r0, #0
 800a366:	d034      	beq.n	800a3d2 <_printf_float+0x27a>
 800a368:	4a37      	ldr	r2, [pc, #220]	; (800a448 <_printf_float+0x2f0>)
 800a36a:	2301      	movs	r3, #1
 800a36c:	4631      	mov	r1, r6
 800a36e:	4628      	mov	r0, r5
 800a370:	47b8      	blx	r7
 800a372:	3001      	adds	r0, #1
 800a374:	f43f af51 	beq.w	800a21a <_printf_float+0xc2>
 800a378:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a37c:	429a      	cmp	r2, r3
 800a37e:	db02      	blt.n	800a386 <_printf_float+0x22e>
 800a380:	6823      	ldr	r3, [r4, #0]
 800a382:	07d8      	lsls	r0, r3, #31
 800a384:	d510      	bpl.n	800a3a8 <_printf_float+0x250>
 800a386:	ee18 3a10 	vmov	r3, s16
 800a38a:	4652      	mov	r2, sl
 800a38c:	4631      	mov	r1, r6
 800a38e:	4628      	mov	r0, r5
 800a390:	47b8      	blx	r7
 800a392:	3001      	adds	r0, #1
 800a394:	f43f af41 	beq.w	800a21a <_printf_float+0xc2>
 800a398:	f04f 0800 	mov.w	r8, #0
 800a39c:	f104 091a 	add.w	r9, r4, #26
 800a3a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3a2:	3b01      	subs	r3, #1
 800a3a4:	4543      	cmp	r3, r8
 800a3a6:	dc09      	bgt.n	800a3bc <_printf_float+0x264>
 800a3a8:	6823      	ldr	r3, [r4, #0]
 800a3aa:	079b      	lsls	r3, r3, #30
 800a3ac:	f100 8105 	bmi.w	800a5ba <_printf_float+0x462>
 800a3b0:	68e0      	ldr	r0, [r4, #12]
 800a3b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3b4:	4298      	cmp	r0, r3
 800a3b6:	bfb8      	it	lt
 800a3b8:	4618      	movlt	r0, r3
 800a3ba:	e730      	b.n	800a21e <_printf_float+0xc6>
 800a3bc:	2301      	movs	r3, #1
 800a3be:	464a      	mov	r2, r9
 800a3c0:	4631      	mov	r1, r6
 800a3c2:	4628      	mov	r0, r5
 800a3c4:	47b8      	blx	r7
 800a3c6:	3001      	adds	r0, #1
 800a3c8:	f43f af27 	beq.w	800a21a <_printf_float+0xc2>
 800a3cc:	f108 0801 	add.w	r8, r8, #1
 800a3d0:	e7e6      	b.n	800a3a0 <_printf_float+0x248>
 800a3d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	dc39      	bgt.n	800a44c <_printf_float+0x2f4>
 800a3d8:	4a1b      	ldr	r2, [pc, #108]	; (800a448 <_printf_float+0x2f0>)
 800a3da:	2301      	movs	r3, #1
 800a3dc:	4631      	mov	r1, r6
 800a3de:	4628      	mov	r0, r5
 800a3e0:	47b8      	blx	r7
 800a3e2:	3001      	adds	r0, #1
 800a3e4:	f43f af19 	beq.w	800a21a <_printf_float+0xc2>
 800a3e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	d102      	bne.n	800a3f6 <_printf_float+0x29e>
 800a3f0:	6823      	ldr	r3, [r4, #0]
 800a3f2:	07d9      	lsls	r1, r3, #31
 800a3f4:	d5d8      	bpl.n	800a3a8 <_printf_float+0x250>
 800a3f6:	ee18 3a10 	vmov	r3, s16
 800a3fa:	4652      	mov	r2, sl
 800a3fc:	4631      	mov	r1, r6
 800a3fe:	4628      	mov	r0, r5
 800a400:	47b8      	blx	r7
 800a402:	3001      	adds	r0, #1
 800a404:	f43f af09 	beq.w	800a21a <_printf_float+0xc2>
 800a408:	f04f 0900 	mov.w	r9, #0
 800a40c:	f104 0a1a 	add.w	sl, r4, #26
 800a410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a412:	425b      	negs	r3, r3
 800a414:	454b      	cmp	r3, r9
 800a416:	dc01      	bgt.n	800a41c <_printf_float+0x2c4>
 800a418:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a41a:	e792      	b.n	800a342 <_printf_float+0x1ea>
 800a41c:	2301      	movs	r3, #1
 800a41e:	4652      	mov	r2, sl
 800a420:	4631      	mov	r1, r6
 800a422:	4628      	mov	r0, r5
 800a424:	47b8      	blx	r7
 800a426:	3001      	adds	r0, #1
 800a428:	f43f aef7 	beq.w	800a21a <_printf_float+0xc2>
 800a42c:	f109 0901 	add.w	r9, r9, #1
 800a430:	e7ee      	b.n	800a410 <_printf_float+0x2b8>
 800a432:	bf00      	nop
 800a434:	7fefffff 	.word	0x7fefffff
 800a438:	0800d25c 	.word	0x0800d25c
 800a43c:	0800d260 	.word	0x0800d260
 800a440:	0800d268 	.word	0x0800d268
 800a444:	0800d264 	.word	0x0800d264
 800a448:	0800d26c 	.word	0x0800d26c
 800a44c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a44e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a450:	429a      	cmp	r2, r3
 800a452:	bfa8      	it	ge
 800a454:	461a      	movge	r2, r3
 800a456:	2a00      	cmp	r2, #0
 800a458:	4691      	mov	r9, r2
 800a45a:	dc37      	bgt.n	800a4cc <_printf_float+0x374>
 800a45c:	f04f 0b00 	mov.w	fp, #0
 800a460:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a464:	f104 021a 	add.w	r2, r4, #26
 800a468:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a46a:	9305      	str	r3, [sp, #20]
 800a46c:	eba3 0309 	sub.w	r3, r3, r9
 800a470:	455b      	cmp	r3, fp
 800a472:	dc33      	bgt.n	800a4dc <_printf_float+0x384>
 800a474:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a478:	429a      	cmp	r2, r3
 800a47a:	db3b      	blt.n	800a4f4 <_printf_float+0x39c>
 800a47c:	6823      	ldr	r3, [r4, #0]
 800a47e:	07da      	lsls	r2, r3, #31
 800a480:	d438      	bmi.n	800a4f4 <_printf_float+0x39c>
 800a482:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a484:	9a05      	ldr	r2, [sp, #20]
 800a486:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a488:	1a9a      	subs	r2, r3, r2
 800a48a:	eba3 0901 	sub.w	r9, r3, r1
 800a48e:	4591      	cmp	r9, r2
 800a490:	bfa8      	it	ge
 800a492:	4691      	movge	r9, r2
 800a494:	f1b9 0f00 	cmp.w	r9, #0
 800a498:	dc35      	bgt.n	800a506 <_printf_float+0x3ae>
 800a49a:	f04f 0800 	mov.w	r8, #0
 800a49e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a4a2:	f104 0a1a 	add.w	sl, r4, #26
 800a4a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a4aa:	1a9b      	subs	r3, r3, r2
 800a4ac:	eba3 0309 	sub.w	r3, r3, r9
 800a4b0:	4543      	cmp	r3, r8
 800a4b2:	f77f af79 	ble.w	800a3a8 <_printf_float+0x250>
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	4652      	mov	r2, sl
 800a4ba:	4631      	mov	r1, r6
 800a4bc:	4628      	mov	r0, r5
 800a4be:	47b8      	blx	r7
 800a4c0:	3001      	adds	r0, #1
 800a4c2:	f43f aeaa 	beq.w	800a21a <_printf_float+0xc2>
 800a4c6:	f108 0801 	add.w	r8, r8, #1
 800a4ca:	e7ec      	b.n	800a4a6 <_printf_float+0x34e>
 800a4cc:	4613      	mov	r3, r2
 800a4ce:	4631      	mov	r1, r6
 800a4d0:	4642      	mov	r2, r8
 800a4d2:	4628      	mov	r0, r5
 800a4d4:	47b8      	blx	r7
 800a4d6:	3001      	adds	r0, #1
 800a4d8:	d1c0      	bne.n	800a45c <_printf_float+0x304>
 800a4da:	e69e      	b.n	800a21a <_printf_float+0xc2>
 800a4dc:	2301      	movs	r3, #1
 800a4de:	4631      	mov	r1, r6
 800a4e0:	4628      	mov	r0, r5
 800a4e2:	9205      	str	r2, [sp, #20]
 800a4e4:	47b8      	blx	r7
 800a4e6:	3001      	adds	r0, #1
 800a4e8:	f43f ae97 	beq.w	800a21a <_printf_float+0xc2>
 800a4ec:	9a05      	ldr	r2, [sp, #20]
 800a4ee:	f10b 0b01 	add.w	fp, fp, #1
 800a4f2:	e7b9      	b.n	800a468 <_printf_float+0x310>
 800a4f4:	ee18 3a10 	vmov	r3, s16
 800a4f8:	4652      	mov	r2, sl
 800a4fa:	4631      	mov	r1, r6
 800a4fc:	4628      	mov	r0, r5
 800a4fe:	47b8      	blx	r7
 800a500:	3001      	adds	r0, #1
 800a502:	d1be      	bne.n	800a482 <_printf_float+0x32a>
 800a504:	e689      	b.n	800a21a <_printf_float+0xc2>
 800a506:	9a05      	ldr	r2, [sp, #20]
 800a508:	464b      	mov	r3, r9
 800a50a:	4442      	add	r2, r8
 800a50c:	4631      	mov	r1, r6
 800a50e:	4628      	mov	r0, r5
 800a510:	47b8      	blx	r7
 800a512:	3001      	adds	r0, #1
 800a514:	d1c1      	bne.n	800a49a <_printf_float+0x342>
 800a516:	e680      	b.n	800a21a <_printf_float+0xc2>
 800a518:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a51a:	2a01      	cmp	r2, #1
 800a51c:	dc01      	bgt.n	800a522 <_printf_float+0x3ca>
 800a51e:	07db      	lsls	r3, r3, #31
 800a520:	d538      	bpl.n	800a594 <_printf_float+0x43c>
 800a522:	2301      	movs	r3, #1
 800a524:	4642      	mov	r2, r8
 800a526:	4631      	mov	r1, r6
 800a528:	4628      	mov	r0, r5
 800a52a:	47b8      	blx	r7
 800a52c:	3001      	adds	r0, #1
 800a52e:	f43f ae74 	beq.w	800a21a <_printf_float+0xc2>
 800a532:	ee18 3a10 	vmov	r3, s16
 800a536:	4652      	mov	r2, sl
 800a538:	4631      	mov	r1, r6
 800a53a:	4628      	mov	r0, r5
 800a53c:	47b8      	blx	r7
 800a53e:	3001      	adds	r0, #1
 800a540:	f43f ae6b 	beq.w	800a21a <_printf_float+0xc2>
 800a544:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a548:	2200      	movs	r2, #0
 800a54a:	2300      	movs	r3, #0
 800a54c:	f7f6 fabc 	bl	8000ac8 <__aeabi_dcmpeq>
 800a550:	b9d8      	cbnz	r0, 800a58a <_printf_float+0x432>
 800a552:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a554:	f108 0201 	add.w	r2, r8, #1
 800a558:	3b01      	subs	r3, #1
 800a55a:	4631      	mov	r1, r6
 800a55c:	4628      	mov	r0, r5
 800a55e:	47b8      	blx	r7
 800a560:	3001      	adds	r0, #1
 800a562:	d10e      	bne.n	800a582 <_printf_float+0x42a>
 800a564:	e659      	b.n	800a21a <_printf_float+0xc2>
 800a566:	2301      	movs	r3, #1
 800a568:	4652      	mov	r2, sl
 800a56a:	4631      	mov	r1, r6
 800a56c:	4628      	mov	r0, r5
 800a56e:	47b8      	blx	r7
 800a570:	3001      	adds	r0, #1
 800a572:	f43f ae52 	beq.w	800a21a <_printf_float+0xc2>
 800a576:	f108 0801 	add.w	r8, r8, #1
 800a57a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a57c:	3b01      	subs	r3, #1
 800a57e:	4543      	cmp	r3, r8
 800a580:	dcf1      	bgt.n	800a566 <_printf_float+0x40e>
 800a582:	464b      	mov	r3, r9
 800a584:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a588:	e6dc      	b.n	800a344 <_printf_float+0x1ec>
 800a58a:	f04f 0800 	mov.w	r8, #0
 800a58e:	f104 0a1a 	add.w	sl, r4, #26
 800a592:	e7f2      	b.n	800a57a <_printf_float+0x422>
 800a594:	2301      	movs	r3, #1
 800a596:	4642      	mov	r2, r8
 800a598:	e7df      	b.n	800a55a <_printf_float+0x402>
 800a59a:	2301      	movs	r3, #1
 800a59c:	464a      	mov	r2, r9
 800a59e:	4631      	mov	r1, r6
 800a5a0:	4628      	mov	r0, r5
 800a5a2:	47b8      	blx	r7
 800a5a4:	3001      	adds	r0, #1
 800a5a6:	f43f ae38 	beq.w	800a21a <_printf_float+0xc2>
 800a5aa:	f108 0801 	add.w	r8, r8, #1
 800a5ae:	68e3      	ldr	r3, [r4, #12]
 800a5b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a5b2:	1a5b      	subs	r3, r3, r1
 800a5b4:	4543      	cmp	r3, r8
 800a5b6:	dcf0      	bgt.n	800a59a <_printf_float+0x442>
 800a5b8:	e6fa      	b.n	800a3b0 <_printf_float+0x258>
 800a5ba:	f04f 0800 	mov.w	r8, #0
 800a5be:	f104 0919 	add.w	r9, r4, #25
 800a5c2:	e7f4      	b.n	800a5ae <_printf_float+0x456>

0800a5c4 <_printf_common>:
 800a5c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5c8:	4616      	mov	r6, r2
 800a5ca:	4699      	mov	r9, r3
 800a5cc:	688a      	ldr	r2, [r1, #8]
 800a5ce:	690b      	ldr	r3, [r1, #16]
 800a5d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	bfb8      	it	lt
 800a5d8:	4613      	movlt	r3, r2
 800a5da:	6033      	str	r3, [r6, #0]
 800a5dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a5e0:	4607      	mov	r7, r0
 800a5e2:	460c      	mov	r4, r1
 800a5e4:	b10a      	cbz	r2, 800a5ea <_printf_common+0x26>
 800a5e6:	3301      	adds	r3, #1
 800a5e8:	6033      	str	r3, [r6, #0]
 800a5ea:	6823      	ldr	r3, [r4, #0]
 800a5ec:	0699      	lsls	r1, r3, #26
 800a5ee:	bf42      	ittt	mi
 800a5f0:	6833      	ldrmi	r3, [r6, #0]
 800a5f2:	3302      	addmi	r3, #2
 800a5f4:	6033      	strmi	r3, [r6, #0]
 800a5f6:	6825      	ldr	r5, [r4, #0]
 800a5f8:	f015 0506 	ands.w	r5, r5, #6
 800a5fc:	d106      	bne.n	800a60c <_printf_common+0x48>
 800a5fe:	f104 0a19 	add.w	sl, r4, #25
 800a602:	68e3      	ldr	r3, [r4, #12]
 800a604:	6832      	ldr	r2, [r6, #0]
 800a606:	1a9b      	subs	r3, r3, r2
 800a608:	42ab      	cmp	r3, r5
 800a60a:	dc26      	bgt.n	800a65a <_printf_common+0x96>
 800a60c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a610:	1e13      	subs	r3, r2, #0
 800a612:	6822      	ldr	r2, [r4, #0]
 800a614:	bf18      	it	ne
 800a616:	2301      	movne	r3, #1
 800a618:	0692      	lsls	r2, r2, #26
 800a61a:	d42b      	bmi.n	800a674 <_printf_common+0xb0>
 800a61c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a620:	4649      	mov	r1, r9
 800a622:	4638      	mov	r0, r7
 800a624:	47c0      	blx	r8
 800a626:	3001      	adds	r0, #1
 800a628:	d01e      	beq.n	800a668 <_printf_common+0xa4>
 800a62a:	6823      	ldr	r3, [r4, #0]
 800a62c:	68e5      	ldr	r5, [r4, #12]
 800a62e:	6832      	ldr	r2, [r6, #0]
 800a630:	f003 0306 	and.w	r3, r3, #6
 800a634:	2b04      	cmp	r3, #4
 800a636:	bf08      	it	eq
 800a638:	1aad      	subeq	r5, r5, r2
 800a63a:	68a3      	ldr	r3, [r4, #8]
 800a63c:	6922      	ldr	r2, [r4, #16]
 800a63e:	bf0c      	ite	eq
 800a640:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a644:	2500      	movne	r5, #0
 800a646:	4293      	cmp	r3, r2
 800a648:	bfc4      	itt	gt
 800a64a:	1a9b      	subgt	r3, r3, r2
 800a64c:	18ed      	addgt	r5, r5, r3
 800a64e:	2600      	movs	r6, #0
 800a650:	341a      	adds	r4, #26
 800a652:	42b5      	cmp	r5, r6
 800a654:	d11a      	bne.n	800a68c <_printf_common+0xc8>
 800a656:	2000      	movs	r0, #0
 800a658:	e008      	b.n	800a66c <_printf_common+0xa8>
 800a65a:	2301      	movs	r3, #1
 800a65c:	4652      	mov	r2, sl
 800a65e:	4649      	mov	r1, r9
 800a660:	4638      	mov	r0, r7
 800a662:	47c0      	blx	r8
 800a664:	3001      	adds	r0, #1
 800a666:	d103      	bne.n	800a670 <_printf_common+0xac>
 800a668:	f04f 30ff 	mov.w	r0, #4294967295
 800a66c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a670:	3501      	adds	r5, #1
 800a672:	e7c6      	b.n	800a602 <_printf_common+0x3e>
 800a674:	18e1      	adds	r1, r4, r3
 800a676:	1c5a      	adds	r2, r3, #1
 800a678:	2030      	movs	r0, #48	; 0x30
 800a67a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a67e:	4422      	add	r2, r4
 800a680:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a684:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a688:	3302      	adds	r3, #2
 800a68a:	e7c7      	b.n	800a61c <_printf_common+0x58>
 800a68c:	2301      	movs	r3, #1
 800a68e:	4622      	mov	r2, r4
 800a690:	4649      	mov	r1, r9
 800a692:	4638      	mov	r0, r7
 800a694:	47c0      	blx	r8
 800a696:	3001      	adds	r0, #1
 800a698:	d0e6      	beq.n	800a668 <_printf_common+0xa4>
 800a69a:	3601      	adds	r6, #1
 800a69c:	e7d9      	b.n	800a652 <_printf_common+0x8e>
	...

0800a6a0 <_printf_i>:
 800a6a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a6a4:	7e0f      	ldrb	r7, [r1, #24]
 800a6a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a6a8:	2f78      	cmp	r7, #120	; 0x78
 800a6aa:	4691      	mov	r9, r2
 800a6ac:	4680      	mov	r8, r0
 800a6ae:	460c      	mov	r4, r1
 800a6b0:	469a      	mov	sl, r3
 800a6b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a6b6:	d807      	bhi.n	800a6c8 <_printf_i+0x28>
 800a6b8:	2f62      	cmp	r7, #98	; 0x62
 800a6ba:	d80a      	bhi.n	800a6d2 <_printf_i+0x32>
 800a6bc:	2f00      	cmp	r7, #0
 800a6be:	f000 80d8 	beq.w	800a872 <_printf_i+0x1d2>
 800a6c2:	2f58      	cmp	r7, #88	; 0x58
 800a6c4:	f000 80a3 	beq.w	800a80e <_printf_i+0x16e>
 800a6c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a6d0:	e03a      	b.n	800a748 <_printf_i+0xa8>
 800a6d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a6d6:	2b15      	cmp	r3, #21
 800a6d8:	d8f6      	bhi.n	800a6c8 <_printf_i+0x28>
 800a6da:	a101      	add	r1, pc, #4	; (adr r1, 800a6e0 <_printf_i+0x40>)
 800a6dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a6e0:	0800a739 	.word	0x0800a739
 800a6e4:	0800a74d 	.word	0x0800a74d
 800a6e8:	0800a6c9 	.word	0x0800a6c9
 800a6ec:	0800a6c9 	.word	0x0800a6c9
 800a6f0:	0800a6c9 	.word	0x0800a6c9
 800a6f4:	0800a6c9 	.word	0x0800a6c9
 800a6f8:	0800a74d 	.word	0x0800a74d
 800a6fc:	0800a6c9 	.word	0x0800a6c9
 800a700:	0800a6c9 	.word	0x0800a6c9
 800a704:	0800a6c9 	.word	0x0800a6c9
 800a708:	0800a6c9 	.word	0x0800a6c9
 800a70c:	0800a859 	.word	0x0800a859
 800a710:	0800a77d 	.word	0x0800a77d
 800a714:	0800a83b 	.word	0x0800a83b
 800a718:	0800a6c9 	.word	0x0800a6c9
 800a71c:	0800a6c9 	.word	0x0800a6c9
 800a720:	0800a87b 	.word	0x0800a87b
 800a724:	0800a6c9 	.word	0x0800a6c9
 800a728:	0800a77d 	.word	0x0800a77d
 800a72c:	0800a6c9 	.word	0x0800a6c9
 800a730:	0800a6c9 	.word	0x0800a6c9
 800a734:	0800a843 	.word	0x0800a843
 800a738:	682b      	ldr	r3, [r5, #0]
 800a73a:	1d1a      	adds	r2, r3, #4
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	602a      	str	r2, [r5, #0]
 800a740:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a744:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a748:	2301      	movs	r3, #1
 800a74a:	e0a3      	b.n	800a894 <_printf_i+0x1f4>
 800a74c:	6820      	ldr	r0, [r4, #0]
 800a74e:	6829      	ldr	r1, [r5, #0]
 800a750:	0606      	lsls	r6, r0, #24
 800a752:	f101 0304 	add.w	r3, r1, #4
 800a756:	d50a      	bpl.n	800a76e <_printf_i+0xce>
 800a758:	680e      	ldr	r6, [r1, #0]
 800a75a:	602b      	str	r3, [r5, #0]
 800a75c:	2e00      	cmp	r6, #0
 800a75e:	da03      	bge.n	800a768 <_printf_i+0xc8>
 800a760:	232d      	movs	r3, #45	; 0x2d
 800a762:	4276      	negs	r6, r6
 800a764:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a768:	485e      	ldr	r0, [pc, #376]	; (800a8e4 <_printf_i+0x244>)
 800a76a:	230a      	movs	r3, #10
 800a76c:	e019      	b.n	800a7a2 <_printf_i+0x102>
 800a76e:	680e      	ldr	r6, [r1, #0]
 800a770:	602b      	str	r3, [r5, #0]
 800a772:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a776:	bf18      	it	ne
 800a778:	b236      	sxthne	r6, r6
 800a77a:	e7ef      	b.n	800a75c <_printf_i+0xbc>
 800a77c:	682b      	ldr	r3, [r5, #0]
 800a77e:	6820      	ldr	r0, [r4, #0]
 800a780:	1d19      	adds	r1, r3, #4
 800a782:	6029      	str	r1, [r5, #0]
 800a784:	0601      	lsls	r1, r0, #24
 800a786:	d501      	bpl.n	800a78c <_printf_i+0xec>
 800a788:	681e      	ldr	r6, [r3, #0]
 800a78a:	e002      	b.n	800a792 <_printf_i+0xf2>
 800a78c:	0646      	lsls	r6, r0, #25
 800a78e:	d5fb      	bpl.n	800a788 <_printf_i+0xe8>
 800a790:	881e      	ldrh	r6, [r3, #0]
 800a792:	4854      	ldr	r0, [pc, #336]	; (800a8e4 <_printf_i+0x244>)
 800a794:	2f6f      	cmp	r7, #111	; 0x6f
 800a796:	bf0c      	ite	eq
 800a798:	2308      	moveq	r3, #8
 800a79a:	230a      	movne	r3, #10
 800a79c:	2100      	movs	r1, #0
 800a79e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a7a2:	6865      	ldr	r5, [r4, #4]
 800a7a4:	60a5      	str	r5, [r4, #8]
 800a7a6:	2d00      	cmp	r5, #0
 800a7a8:	bfa2      	ittt	ge
 800a7aa:	6821      	ldrge	r1, [r4, #0]
 800a7ac:	f021 0104 	bicge.w	r1, r1, #4
 800a7b0:	6021      	strge	r1, [r4, #0]
 800a7b2:	b90e      	cbnz	r6, 800a7b8 <_printf_i+0x118>
 800a7b4:	2d00      	cmp	r5, #0
 800a7b6:	d04d      	beq.n	800a854 <_printf_i+0x1b4>
 800a7b8:	4615      	mov	r5, r2
 800a7ba:	fbb6 f1f3 	udiv	r1, r6, r3
 800a7be:	fb03 6711 	mls	r7, r3, r1, r6
 800a7c2:	5dc7      	ldrb	r7, [r0, r7]
 800a7c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a7c8:	4637      	mov	r7, r6
 800a7ca:	42bb      	cmp	r3, r7
 800a7cc:	460e      	mov	r6, r1
 800a7ce:	d9f4      	bls.n	800a7ba <_printf_i+0x11a>
 800a7d0:	2b08      	cmp	r3, #8
 800a7d2:	d10b      	bne.n	800a7ec <_printf_i+0x14c>
 800a7d4:	6823      	ldr	r3, [r4, #0]
 800a7d6:	07de      	lsls	r6, r3, #31
 800a7d8:	d508      	bpl.n	800a7ec <_printf_i+0x14c>
 800a7da:	6923      	ldr	r3, [r4, #16]
 800a7dc:	6861      	ldr	r1, [r4, #4]
 800a7de:	4299      	cmp	r1, r3
 800a7e0:	bfde      	ittt	le
 800a7e2:	2330      	movle	r3, #48	; 0x30
 800a7e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a7e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a7ec:	1b52      	subs	r2, r2, r5
 800a7ee:	6122      	str	r2, [r4, #16]
 800a7f0:	f8cd a000 	str.w	sl, [sp]
 800a7f4:	464b      	mov	r3, r9
 800a7f6:	aa03      	add	r2, sp, #12
 800a7f8:	4621      	mov	r1, r4
 800a7fa:	4640      	mov	r0, r8
 800a7fc:	f7ff fee2 	bl	800a5c4 <_printf_common>
 800a800:	3001      	adds	r0, #1
 800a802:	d14c      	bne.n	800a89e <_printf_i+0x1fe>
 800a804:	f04f 30ff 	mov.w	r0, #4294967295
 800a808:	b004      	add	sp, #16
 800a80a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a80e:	4835      	ldr	r0, [pc, #212]	; (800a8e4 <_printf_i+0x244>)
 800a810:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a814:	6829      	ldr	r1, [r5, #0]
 800a816:	6823      	ldr	r3, [r4, #0]
 800a818:	f851 6b04 	ldr.w	r6, [r1], #4
 800a81c:	6029      	str	r1, [r5, #0]
 800a81e:	061d      	lsls	r5, r3, #24
 800a820:	d514      	bpl.n	800a84c <_printf_i+0x1ac>
 800a822:	07df      	lsls	r7, r3, #31
 800a824:	bf44      	itt	mi
 800a826:	f043 0320 	orrmi.w	r3, r3, #32
 800a82a:	6023      	strmi	r3, [r4, #0]
 800a82c:	b91e      	cbnz	r6, 800a836 <_printf_i+0x196>
 800a82e:	6823      	ldr	r3, [r4, #0]
 800a830:	f023 0320 	bic.w	r3, r3, #32
 800a834:	6023      	str	r3, [r4, #0]
 800a836:	2310      	movs	r3, #16
 800a838:	e7b0      	b.n	800a79c <_printf_i+0xfc>
 800a83a:	6823      	ldr	r3, [r4, #0]
 800a83c:	f043 0320 	orr.w	r3, r3, #32
 800a840:	6023      	str	r3, [r4, #0]
 800a842:	2378      	movs	r3, #120	; 0x78
 800a844:	4828      	ldr	r0, [pc, #160]	; (800a8e8 <_printf_i+0x248>)
 800a846:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a84a:	e7e3      	b.n	800a814 <_printf_i+0x174>
 800a84c:	0659      	lsls	r1, r3, #25
 800a84e:	bf48      	it	mi
 800a850:	b2b6      	uxthmi	r6, r6
 800a852:	e7e6      	b.n	800a822 <_printf_i+0x182>
 800a854:	4615      	mov	r5, r2
 800a856:	e7bb      	b.n	800a7d0 <_printf_i+0x130>
 800a858:	682b      	ldr	r3, [r5, #0]
 800a85a:	6826      	ldr	r6, [r4, #0]
 800a85c:	6961      	ldr	r1, [r4, #20]
 800a85e:	1d18      	adds	r0, r3, #4
 800a860:	6028      	str	r0, [r5, #0]
 800a862:	0635      	lsls	r5, r6, #24
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	d501      	bpl.n	800a86c <_printf_i+0x1cc>
 800a868:	6019      	str	r1, [r3, #0]
 800a86a:	e002      	b.n	800a872 <_printf_i+0x1d2>
 800a86c:	0670      	lsls	r0, r6, #25
 800a86e:	d5fb      	bpl.n	800a868 <_printf_i+0x1c8>
 800a870:	8019      	strh	r1, [r3, #0]
 800a872:	2300      	movs	r3, #0
 800a874:	6123      	str	r3, [r4, #16]
 800a876:	4615      	mov	r5, r2
 800a878:	e7ba      	b.n	800a7f0 <_printf_i+0x150>
 800a87a:	682b      	ldr	r3, [r5, #0]
 800a87c:	1d1a      	adds	r2, r3, #4
 800a87e:	602a      	str	r2, [r5, #0]
 800a880:	681d      	ldr	r5, [r3, #0]
 800a882:	6862      	ldr	r2, [r4, #4]
 800a884:	2100      	movs	r1, #0
 800a886:	4628      	mov	r0, r5
 800a888:	f7f5 fcaa 	bl	80001e0 <memchr>
 800a88c:	b108      	cbz	r0, 800a892 <_printf_i+0x1f2>
 800a88e:	1b40      	subs	r0, r0, r5
 800a890:	6060      	str	r0, [r4, #4]
 800a892:	6863      	ldr	r3, [r4, #4]
 800a894:	6123      	str	r3, [r4, #16]
 800a896:	2300      	movs	r3, #0
 800a898:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a89c:	e7a8      	b.n	800a7f0 <_printf_i+0x150>
 800a89e:	6923      	ldr	r3, [r4, #16]
 800a8a0:	462a      	mov	r2, r5
 800a8a2:	4649      	mov	r1, r9
 800a8a4:	4640      	mov	r0, r8
 800a8a6:	47d0      	blx	sl
 800a8a8:	3001      	adds	r0, #1
 800a8aa:	d0ab      	beq.n	800a804 <_printf_i+0x164>
 800a8ac:	6823      	ldr	r3, [r4, #0]
 800a8ae:	079b      	lsls	r3, r3, #30
 800a8b0:	d413      	bmi.n	800a8da <_printf_i+0x23a>
 800a8b2:	68e0      	ldr	r0, [r4, #12]
 800a8b4:	9b03      	ldr	r3, [sp, #12]
 800a8b6:	4298      	cmp	r0, r3
 800a8b8:	bfb8      	it	lt
 800a8ba:	4618      	movlt	r0, r3
 800a8bc:	e7a4      	b.n	800a808 <_printf_i+0x168>
 800a8be:	2301      	movs	r3, #1
 800a8c0:	4632      	mov	r2, r6
 800a8c2:	4649      	mov	r1, r9
 800a8c4:	4640      	mov	r0, r8
 800a8c6:	47d0      	blx	sl
 800a8c8:	3001      	adds	r0, #1
 800a8ca:	d09b      	beq.n	800a804 <_printf_i+0x164>
 800a8cc:	3501      	adds	r5, #1
 800a8ce:	68e3      	ldr	r3, [r4, #12]
 800a8d0:	9903      	ldr	r1, [sp, #12]
 800a8d2:	1a5b      	subs	r3, r3, r1
 800a8d4:	42ab      	cmp	r3, r5
 800a8d6:	dcf2      	bgt.n	800a8be <_printf_i+0x21e>
 800a8d8:	e7eb      	b.n	800a8b2 <_printf_i+0x212>
 800a8da:	2500      	movs	r5, #0
 800a8dc:	f104 0619 	add.w	r6, r4, #25
 800a8e0:	e7f5      	b.n	800a8ce <_printf_i+0x22e>
 800a8e2:	bf00      	nop
 800a8e4:	0800d26e 	.word	0x0800d26e
 800a8e8:	0800d27f 	.word	0x0800d27f

0800a8ec <sniprintf>:
 800a8ec:	b40c      	push	{r2, r3}
 800a8ee:	b530      	push	{r4, r5, lr}
 800a8f0:	4b17      	ldr	r3, [pc, #92]	; (800a950 <sniprintf+0x64>)
 800a8f2:	1e0c      	subs	r4, r1, #0
 800a8f4:	681d      	ldr	r5, [r3, #0]
 800a8f6:	b09d      	sub	sp, #116	; 0x74
 800a8f8:	da08      	bge.n	800a90c <sniprintf+0x20>
 800a8fa:	238b      	movs	r3, #139	; 0x8b
 800a8fc:	602b      	str	r3, [r5, #0]
 800a8fe:	f04f 30ff 	mov.w	r0, #4294967295
 800a902:	b01d      	add	sp, #116	; 0x74
 800a904:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a908:	b002      	add	sp, #8
 800a90a:	4770      	bx	lr
 800a90c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a910:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a914:	bf14      	ite	ne
 800a916:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a91a:	4623      	moveq	r3, r4
 800a91c:	9304      	str	r3, [sp, #16]
 800a91e:	9307      	str	r3, [sp, #28]
 800a920:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a924:	9002      	str	r0, [sp, #8]
 800a926:	9006      	str	r0, [sp, #24]
 800a928:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a92c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a92e:	ab21      	add	r3, sp, #132	; 0x84
 800a930:	a902      	add	r1, sp, #8
 800a932:	4628      	mov	r0, r5
 800a934:	9301      	str	r3, [sp, #4]
 800a936:	f001 fb6b 	bl	800c010 <_svfiprintf_r>
 800a93a:	1c43      	adds	r3, r0, #1
 800a93c:	bfbc      	itt	lt
 800a93e:	238b      	movlt	r3, #139	; 0x8b
 800a940:	602b      	strlt	r3, [r5, #0]
 800a942:	2c00      	cmp	r4, #0
 800a944:	d0dd      	beq.n	800a902 <sniprintf+0x16>
 800a946:	9b02      	ldr	r3, [sp, #8]
 800a948:	2200      	movs	r2, #0
 800a94a:	701a      	strb	r2, [r3, #0]
 800a94c:	e7d9      	b.n	800a902 <sniprintf+0x16>
 800a94e:	bf00      	nop
 800a950:	20000044 	.word	0x20000044

0800a954 <quorem>:
 800a954:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a958:	6903      	ldr	r3, [r0, #16]
 800a95a:	690c      	ldr	r4, [r1, #16]
 800a95c:	42a3      	cmp	r3, r4
 800a95e:	4607      	mov	r7, r0
 800a960:	f2c0 8081 	blt.w	800aa66 <quorem+0x112>
 800a964:	3c01      	subs	r4, #1
 800a966:	f101 0814 	add.w	r8, r1, #20
 800a96a:	f100 0514 	add.w	r5, r0, #20
 800a96e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a972:	9301      	str	r3, [sp, #4]
 800a974:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a978:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a97c:	3301      	adds	r3, #1
 800a97e:	429a      	cmp	r2, r3
 800a980:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a984:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a988:	fbb2 f6f3 	udiv	r6, r2, r3
 800a98c:	d331      	bcc.n	800a9f2 <quorem+0x9e>
 800a98e:	f04f 0e00 	mov.w	lr, #0
 800a992:	4640      	mov	r0, r8
 800a994:	46ac      	mov	ip, r5
 800a996:	46f2      	mov	sl, lr
 800a998:	f850 2b04 	ldr.w	r2, [r0], #4
 800a99c:	b293      	uxth	r3, r2
 800a99e:	fb06 e303 	mla	r3, r6, r3, lr
 800a9a2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a9a6:	b29b      	uxth	r3, r3
 800a9a8:	ebaa 0303 	sub.w	r3, sl, r3
 800a9ac:	f8dc a000 	ldr.w	sl, [ip]
 800a9b0:	0c12      	lsrs	r2, r2, #16
 800a9b2:	fa13 f38a 	uxtah	r3, r3, sl
 800a9b6:	fb06 e202 	mla	r2, r6, r2, lr
 800a9ba:	9300      	str	r3, [sp, #0]
 800a9bc:	9b00      	ldr	r3, [sp, #0]
 800a9be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a9c2:	b292      	uxth	r2, r2
 800a9c4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a9c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a9cc:	f8bd 3000 	ldrh.w	r3, [sp]
 800a9d0:	4581      	cmp	r9, r0
 800a9d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a9d6:	f84c 3b04 	str.w	r3, [ip], #4
 800a9da:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a9de:	d2db      	bcs.n	800a998 <quorem+0x44>
 800a9e0:	f855 300b 	ldr.w	r3, [r5, fp]
 800a9e4:	b92b      	cbnz	r3, 800a9f2 <quorem+0x9e>
 800a9e6:	9b01      	ldr	r3, [sp, #4]
 800a9e8:	3b04      	subs	r3, #4
 800a9ea:	429d      	cmp	r5, r3
 800a9ec:	461a      	mov	r2, r3
 800a9ee:	d32e      	bcc.n	800aa4e <quorem+0xfa>
 800a9f0:	613c      	str	r4, [r7, #16]
 800a9f2:	4638      	mov	r0, r7
 800a9f4:	f001 f8b8 	bl	800bb68 <__mcmp>
 800a9f8:	2800      	cmp	r0, #0
 800a9fa:	db24      	blt.n	800aa46 <quorem+0xf2>
 800a9fc:	3601      	adds	r6, #1
 800a9fe:	4628      	mov	r0, r5
 800aa00:	f04f 0c00 	mov.w	ip, #0
 800aa04:	f858 2b04 	ldr.w	r2, [r8], #4
 800aa08:	f8d0 e000 	ldr.w	lr, [r0]
 800aa0c:	b293      	uxth	r3, r2
 800aa0e:	ebac 0303 	sub.w	r3, ip, r3
 800aa12:	0c12      	lsrs	r2, r2, #16
 800aa14:	fa13 f38e 	uxtah	r3, r3, lr
 800aa18:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800aa1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aa20:	b29b      	uxth	r3, r3
 800aa22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aa26:	45c1      	cmp	r9, r8
 800aa28:	f840 3b04 	str.w	r3, [r0], #4
 800aa2c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800aa30:	d2e8      	bcs.n	800aa04 <quorem+0xb0>
 800aa32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aa36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aa3a:	b922      	cbnz	r2, 800aa46 <quorem+0xf2>
 800aa3c:	3b04      	subs	r3, #4
 800aa3e:	429d      	cmp	r5, r3
 800aa40:	461a      	mov	r2, r3
 800aa42:	d30a      	bcc.n	800aa5a <quorem+0x106>
 800aa44:	613c      	str	r4, [r7, #16]
 800aa46:	4630      	mov	r0, r6
 800aa48:	b003      	add	sp, #12
 800aa4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa4e:	6812      	ldr	r2, [r2, #0]
 800aa50:	3b04      	subs	r3, #4
 800aa52:	2a00      	cmp	r2, #0
 800aa54:	d1cc      	bne.n	800a9f0 <quorem+0x9c>
 800aa56:	3c01      	subs	r4, #1
 800aa58:	e7c7      	b.n	800a9ea <quorem+0x96>
 800aa5a:	6812      	ldr	r2, [r2, #0]
 800aa5c:	3b04      	subs	r3, #4
 800aa5e:	2a00      	cmp	r2, #0
 800aa60:	d1f0      	bne.n	800aa44 <quorem+0xf0>
 800aa62:	3c01      	subs	r4, #1
 800aa64:	e7eb      	b.n	800aa3e <quorem+0xea>
 800aa66:	2000      	movs	r0, #0
 800aa68:	e7ee      	b.n	800aa48 <quorem+0xf4>
 800aa6a:	0000      	movs	r0, r0
 800aa6c:	0000      	movs	r0, r0
	...

0800aa70 <_dtoa_r>:
 800aa70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa74:	ed2d 8b04 	vpush	{d8-d9}
 800aa78:	ec57 6b10 	vmov	r6, r7, d0
 800aa7c:	b093      	sub	sp, #76	; 0x4c
 800aa7e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800aa80:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800aa84:	9106      	str	r1, [sp, #24]
 800aa86:	ee10 aa10 	vmov	sl, s0
 800aa8a:	4604      	mov	r4, r0
 800aa8c:	9209      	str	r2, [sp, #36]	; 0x24
 800aa8e:	930c      	str	r3, [sp, #48]	; 0x30
 800aa90:	46bb      	mov	fp, r7
 800aa92:	b975      	cbnz	r5, 800aab2 <_dtoa_r+0x42>
 800aa94:	2010      	movs	r0, #16
 800aa96:	f000 fddd 	bl	800b654 <malloc>
 800aa9a:	4602      	mov	r2, r0
 800aa9c:	6260      	str	r0, [r4, #36]	; 0x24
 800aa9e:	b920      	cbnz	r0, 800aaaa <_dtoa_r+0x3a>
 800aaa0:	4ba7      	ldr	r3, [pc, #668]	; (800ad40 <_dtoa_r+0x2d0>)
 800aaa2:	21ea      	movs	r1, #234	; 0xea
 800aaa4:	48a7      	ldr	r0, [pc, #668]	; (800ad44 <_dtoa_r+0x2d4>)
 800aaa6:	f001 fbc3 	bl	800c230 <__assert_func>
 800aaaa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800aaae:	6005      	str	r5, [r0, #0]
 800aab0:	60c5      	str	r5, [r0, #12]
 800aab2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aab4:	6819      	ldr	r1, [r3, #0]
 800aab6:	b151      	cbz	r1, 800aace <_dtoa_r+0x5e>
 800aab8:	685a      	ldr	r2, [r3, #4]
 800aaba:	604a      	str	r2, [r1, #4]
 800aabc:	2301      	movs	r3, #1
 800aabe:	4093      	lsls	r3, r2
 800aac0:	608b      	str	r3, [r1, #8]
 800aac2:	4620      	mov	r0, r4
 800aac4:	f000 fe0e 	bl	800b6e4 <_Bfree>
 800aac8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aaca:	2200      	movs	r2, #0
 800aacc:	601a      	str	r2, [r3, #0]
 800aace:	1e3b      	subs	r3, r7, #0
 800aad0:	bfaa      	itet	ge
 800aad2:	2300      	movge	r3, #0
 800aad4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800aad8:	f8c8 3000 	strge.w	r3, [r8]
 800aadc:	4b9a      	ldr	r3, [pc, #616]	; (800ad48 <_dtoa_r+0x2d8>)
 800aade:	bfbc      	itt	lt
 800aae0:	2201      	movlt	r2, #1
 800aae2:	f8c8 2000 	strlt.w	r2, [r8]
 800aae6:	ea33 030b 	bics.w	r3, r3, fp
 800aaea:	d11b      	bne.n	800ab24 <_dtoa_r+0xb4>
 800aaec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aaee:	f242 730f 	movw	r3, #9999	; 0x270f
 800aaf2:	6013      	str	r3, [r2, #0]
 800aaf4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aaf8:	4333      	orrs	r3, r6
 800aafa:	f000 8592 	beq.w	800b622 <_dtoa_r+0xbb2>
 800aafe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab00:	b963      	cbnz	r3, 800ab1c <_dtoa_r+0xac>
 800ab02:	4b92      	ldr	r3, [pc, #584]	; (800ad4c <_dtoa_r+0x2dc>)
 800ab04:	e022      	b.n	800ab4c <_dtoa_r+0xdc>
 800ab06:	4b92      	ldr	r3, [pc, #584]	; (800ad50 <_dtoa_r+0x2e0>)
 800ab08:	9301      	str	r3, [sp, #4]
 800ab0a:	3308      	adds	r3, #8
 800ab0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ab0e:	6013      	str	r3, [r2, #0]
 800ab10:	9801      	ldr	r0, [sp, #4]
 800ab12:	b013      	add	sp, #76	; 0x4c
 800ab14:	ecbd 8b04 	vpop	{d8-d9}
 800ab18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab1c:	4b8b      	ldr	r3, [pc, #556]	; (800ad4c <_dtoa_r+0x2dc>)
 800ab1e:	9301      	str	r3, [sp, #4]
 800ab20:	3303      	adds	r3, #3
 800ab22:	e7f3      	b.n	800ab0c <_dtoa_r+0x9c>
 800ab24:	2200      	movs	r2, #0
 800ab26:	2300      	movs	r3, #0
 800ab28:	4650      	mov	r0, sl
 800ab2a:	4659      	mov	r1, fp
 800ab2c:	f7f5 ffcc 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab30:	ec4b ab19 	vmov	d9, sl, fp
 800ab34:	4680      	mov	r8, r0
 800ab36:	b158      	cbz	r0, 800ab50 <_dtoa_r+0xe0>
 800ab38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	6013      	str	r3, [r2, #0]
 800ab3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	f000 856b 	beq.w	800b61c <_dtoa_r+0xbac>
 800ab46:	4883      	ldr	r0, [pc, #524]	; (800ad54 <_dtoa_r+0x2e4>)
 800ab48:	6018      	str	r0, [r3, #0]
 800ab4a:	1e43      	subs	r3, r0, #1
 800ab4c:	9301      	str	r3, [sp, #4]
 800ab4e:	e7df      	b.n	800ab10 <_dtoa_r+0xa0>
 800ab50:	ec4b ab10 	vmov	d0, sl, fp
 800ab54:	aa10      	add	r2, sp, #64	; 0x40
 800ab56:	a911      	add	r1, sp, #68	; 0x44
 800ab58:	4620      	mov	r0, r4
 800ab5a:	f001 f8ab 	bl	800bcb4 <__d2b>
 800ab5e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ab62:	ee08 0a10 	vmov	s16, r0
 800ab66:	2d00      	cmp	r5, #0
 800ab68:	f000 8084 	beq.w	800ac74 <_dtoa_r+0x204>
 800ab6c:	ee19 3a90 	vmov	r3, s19
 800ab70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab74:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ab78:	4656      	mov	r6, sl
 800ab7a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ab7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ab82:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ab86:	4b74      	ldr	r3, [pc, #464]	; (800ad58 <_dtoa_r+0x2e8>)
 800ab88:	2200      	movs	r2, #0
 800ab8a:	4630      	mov	r0, r6
 800ab8c:	4639      	mov	r1, r7
 800ab8e:	f7f5 fb7b 	bl	8000288 <__aeabi_dsub>
 800ab92:	a365      	add	r3, pc, #404	; (adr r3, 800ad28 <_dtoa_r+0x2b8>)
 800ab94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab98:	f7f5 fd2e 	bl	80005f8 <__aeabi_dmul>
 800ab9c:	a364      	add	r3, pc, #400	; (adr r3, 800ad30 <_dtoa_r+0x2c0>)
 800ab9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba2:	f7f5 fb73 	bl	800028c <__adddf3>
 800aba6:	4606      	mov	r6, r0
 800aba8:	4628      	mov	r0, r5
 800abaa:	460f      	mov	r7, r1
 800abac:	f7f5 fcba 	bl	8000524 <__aeabi_i2d>
 800abb0:	a361      	add	r3, pc, #388	; (adr r3, 800ad38 <_dtoa_r+0x2c8>)
 800abb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb6:	f7f5 fd1f 	bl	80005f8 <__aeabi_dmul>
 800abba:	4602      	mov	r2, r0
 800abbc:	460b      	mov	r3, r1
 800abbe:	4630      	mov	r0, r6
 800abc0:	4639      	mov	r1, r7
 800abc2:	f7f5 fb63 	bl	800028c <__adddf3>
 800abc6:	4606      	mov	r6, r0
 800abc8:	460f      	mov	r7, r1
 800abca:	f7f5 ffc5 	bl	8000b58 <__aeabi_d2iz>
 800abce:	2200      	movs	r2, #0
 800abd0:	9000      	str	r0, [sp, #0]
 800abd2:	2300      	movs	r3, #0
 800abd4:	4630      	mov	r0, r6
 800abd6:	4639      	mov	r1, r7
 800abd8:	f7f5 ff80 	bl	8000adc <__aeabi_dcmplt>
 800abdc:	b150      	cbz	r0, 800abf4 <_dtoa_r+0x184>
 800abde:	9800      	ldr	r0, [sp, #0]
 800abe0:	f7f5 fca0 	bl	8000524 <__aeabi_i2d>
 800abe4:	4632      	mov	r2, r6
 800abe6:	463b      	mov	r3, r7
 800abe8:	f7f5 ff6e 	bl	8000ac8 <__aeabi_dcmpeq>
 800abec:	b910      	cbnz	r0, 800abf4 <_dtoa_r+0x184>
 800abee:	9b00      	ldr	r3, [sp, #0]
 800abf0:	3b01      	subs	r3, #1
 800abf2:	9300      	str	r3, [sp, #0]
 800abf4:	9b00      	ldr	r3, [sp, #0]
 800abf6:	2b16      	cmp	r3, #22
 800abf8:	d85a      	bhi.n	800acb0 <_dtoa_r+0x240>
 800abfa:	9a00      	ldr	r2, [sp, #0]
 800abfc:	4b57      	ldr	r3, [pc, #348]	; (800ad5c <_dtoa_r+0x2ec>)
 800abfe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac06:	ec51 0b19 	vmov	r0, r1, d9
 800ac0a:	f7f5 ff67 	bl	8000adc <__aeabi_dcmplt>
 800ac0e:	2800      	cmp	r0, #0
 800ac10:	d050      	beq.n	800acb4 <_dtoa_r+0x244>
 800ac12:	9b00      	ldr	r3, [sp, #0]
 800ac14:	3b01      	subs	r3, #1
 800ac16:	9300      	str	r3, [sp, #0]
 800ac18:	2300      	movs	r3, #0
 800ac1a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ac1e:	1b5d      	subs	r5, r3, r5
 800ac20:	1e6b      	subs	r3, r5, #1
 800ac22:	9305      	str	r3, [sp, #20]
 800ac24:	bf45      	ittet	mi
 800ac26:	f1c5 0301 	rsbmi	r3, r5, #1
 800ac2a:	9304      	strmi	r3, [sp, #16]
 800ac2c:	2300      	movpl	r3, #0
 800ac2e:	2300      	movmi	r3, #0
 800ac30:	bf4c      	ite	mi
 800ac32:	9305      	strmi	r3, [sp, #20]
 800ac34:	9304      	strpl	r3, [sp, #16]
 800ac36:	9b00      	ldr	r3, [sp, #0]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	db3d      	blt.n	800acb8 <_dtoa_r+0x248>
 800ac3c:	9b05      	ldr	r3, [sp, #20]
 800ac3e:	9a00      	ldr	r2, [sp, #0]
 800ac40:	920a      	str	r2, [sp, #40]	; 0x28
 800ac42:	4413      	add	r3, r2
 800ac44:	9305      	str	r3, [sp, #20]
 800ac46:	2300      	movs	r3, #0
 800ac48:	9307      	str	r3, [sp, #28]
 800ac4a:	9b06      	ldr	r3, [sp, #24]
 800ac4c:	2b09      	cmp	r3, #9
 800ac4e:	f200 8089 	bhi.w	800ad64 <_dtoa_r+0x2f4>
 800ac52:	2b05      	cmp	r3, #5
 800ac54:	bfc4      	itt	gt
 800ac56:	3b04      	subgt	r3, #4
 800ac58:	9306      	strgt	r3, [sp, #24]
 800ac5a:	9b06      	ldr	r3, [sp, #24]
 800ac5c:	f1a3 0302 	sub.w	r3, r3, #2
 800ac60:	bfcc      	ite	gt
 800ac62:	2500      	movgt	r5, #0
 800ac64:	2501      	movle	r5, #1
 800ac66:	2b03      	cmp	r3, #3
 800ac68:	f200 8087 	bhi.w	800ad7a <_dtoa_r+0x30a>
 800ac6c:	e8df f003 	tbb	[pc, r3]
 800ac70:	59383a2d 	.word	0x59383a2d
 800ac74:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ac78:	441d      	add	r5, r3
 800ac7a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ac7e:	2b20      	cmp	r3, #32
 800ac80:	bfc1      	itttt	gt
 800ac82:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ac86:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ac8a:	fa0b f303 	lslgt.w	r3, fp, r3
 800ac8e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ac92:	bfda      	itte	le
 800ac94:	f1c3 0320 	rsble	r3, r3, #32
 800ac98:	fa06 f003 	lslle.w	r0, r6, r3
 800ac9c:	4318      	orrgt	r0, r3
 800ac9e:	f7f5 fc31 	bl	8000504 <__aeabi_ui2d>
 800aca2:	2301      	movs	r3, #1
 800aca4:	4606      	mov	r6, r0
 800aca6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800acaa:	3d01      	subs	r5, #1
 800acac:	930e      	str	r3, [sp, #56]	; 0x38
 800acae:	e76a      	b.n	800ab86 <_dtoa_r+0x116>
 800acb0:	2301      	movs	r3, #1
 800acb2:	e7b2      	b.n	800ac1a <_dtoa_r+0x1aa>
 800acb4:	900b      	str	r0, [sp, #44]	; 0x2c
 800acb6:	e7b1      	b.n	800ac1c <_dtoa_r+0x1ac>
 800acb8:	9b04      	ldr	r3, [sp, #16]
 800acba:	9a00      	ldr	r2, [sp, #0]
 800acbc:	1a9b      	subs	r3, r3, r2
 800acbe:	9304      	str	r3, [sp, #16]
 800acc0:	4253      	negs	r3, r2
 800acc2:	9307      	str	r3, [sp, #28]
 800acc4:	2300      	movs	r3, #0
 800acc6:	930a      	str	r3, [sp, #40]	; 0x28
 800acc8:	e7bf      	b.n	800ac4a <_dtoa_r+0x1da>
 800acca:	2300      	movs	r3, #0
 800accc:	9308      	str	r3, [sp, #32]
 800acce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	dc55      	bgt.n	800ad80 <_dtoa_r+0x310>
 800acd4:	2301      	movs	r3, #1
 800acd6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800acda:	461a      	mov	r2, r3
 800acdc:	9209      	str	r2, [sp, #36]	; 0x24
 800acde:	e00c      	b.n	800acfa <_dtoa_r+0x28a>
 800ace0:	2301      	movs	r3, #1
 800ace2:	e7f3      	b.n	800accc <_dtoa_r+0x25c>
 800ace4:	2300      	movs	r3, #0
 800ace6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ace8:	9308      	str	r3, [sp, #32]
 800acea:	9b00      	ldr	r3, [sp, #0]
 800acec:	4413      	add	r3, r2
 800acee:	9302      	str	r3, [sp, #8]
 800acf0:	3301      	adds	r3, #1
 800acf2:	2b01      	cmp	r3, #1
 800acf4:	9303      	str	r3, [sp, #12]
 800acf6:	bfb8      	it	lt
 800acf8:	2301      	movlt	r3, #1
 800acfa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800acfc:	2200      	movs	r2, #0
 800acfe:	6042      	str	r2, [r0, #4]
 800ad00:	2204      	movs	r2, #4
 800ad02:	f102 0614 	add.w	r6, r2, #20
 800ad06:	429e      	cmp	r6, r3
 800ad08:	6841      	ldr	r1, [r0, #4]
 800ad0a:	d93d      	bls.n	800ad88 <_dtoa_r+0x318>
 800ad0c:	4620      	mov	r0, r4
 800ad0e:	f000 fca9 	bl	800b664 <_Balloc>
 800ad12:	9001      	str	r0, [sp, #4]
 800ad14:	2800      	cmp	r0, #0
 800ad16:	d13b      	bne.n	800ad90 <_dtoa_r+0x320>
 800ad18:	4b11      	ldr	r3, [pc, #68]	; (800ad60 <_dtoa_r+0x2f0>)
 800ad1a:	4602      	mov	r2, r0
 800ad1c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ad20:	e6c0      	b.n	800aaa4 <_dtoa_r+0x34>
 800ad22:	2301      	movs	r3, #1
 800ad24:	e7df      	b.n	800ace6 <_dtoa_r+0x276>
 800ad26:	bf00      	nop
 800ad28:	636f4361 	.word	0x636f4361
 800ad2c:	3fd287a7 	.word	0x3fd287a7
 800ad30:	8b60c8b3 	.word	0x8b60c8b3
 800ad34:	3fc68a28 	.word	0x3fc68a28
 800ad38:	509f79fb 	.word	0x509f79fb
 800ad3c:	3fd34413 	.word	0x3fd34413
 800ad40:	0800d29d 	.word	0x0800d29d
 800ad44:	0800d2b4 	.word	0x0800d2b4
 800ad48:	7ff00000 	.word	0x7ff00000
 800ad4c:	0800d299 	.word	0x0800d299
 800ad50:	0800d290 	.word	0x0800d290
 800ad54:	0800d26d 	.word	0x0800d26d
 800ad58:	3ff80000 	.word	0x3ff80000
 800ad5c:	0800d3a8 	.word	0x0800d3a8
 800ad60:	0800d30f 	.word	0x0800d30f
 800ad64:	2501      	movs	r5, #1
 800ad66:	2300      	movs	r3, #0
 800ad68:	9306      	str	r3, [sp, #24]
 800ad6a:	9508      	str	r5, [sp, #32]
 800ad6c:	f04f 33ff 	mov.w	r3, #4294967295
 800ad70:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ad74:	2200      	movs	r2, #0
 800ad76:	2312      	movs	r3, #18
 800ad78:	e7b0      	b.n	800acdc <_dtoa_r+0x26c>
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	9308      	str	r3, [sp, #32]
 800ad7e:	e7f5      	b.n	800ad6c <_dtoa_r+0x2fc>
 800ad80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad82:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ad86:	e7b8      	b.n	800acfa <_dtoa_r+0x28a>
 800ad88:	3101      	adds	r1, #1
 800ad8a:	6041      	str	r1, [r0, #4]
 800ad8c:	0052      	lsls	r2, r2, #1
 800ad8e:	e7b8      	b.n	800ad02 <_dtoa_r+0x292>
 800ad90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad92:	9a01      	ldr	r2, [sp, #4]
 800ad94:	601a      	str	r2, [r3, #0]
 800ad96:	9b03      	ldr	r3, [sp, #12]
 800ad98:	2b0e      	cmp	r3, #14
 800ad9a:	f200 809d 	bhi.w	800aed8 <_dtoa_r+0x468>
 800ad9e:	2d00      	cmp	r5, #0
 800ada0:	f000 809a 	beq.w	800aed8 <_dtoa_r+0x468>
 800ada4:	9b00      	ldr	r3, [sp, #0]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	dd32      	ble.n	800ae10 <_dtoa_r+0x3a0>
 800adaa:	4ab7      	ldr	r2, [pc, #732]	; (800b088 <_dtoa_r+0x618>)
 800adac:	f003 030f 	and.w	r3, r3, #15
 800adb0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800adb4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800adb8:	9b00      	ldr	r3, [sp, #0]
 800adba:	05d8      	lsls	r0, r3, #23
 800adbc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800adc0:	d516      	bpl.n	800adf0 <_dtoa_r+0x380>
 800adc2:	4bb2      	ldr	r3, [pc, #712]	; (800b08c <_dtoa_r+0x61c>)
 800adc4:	ec51 0b19 	vmov	r0, r1, d9
 800adc8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800adcc:	f7f5 fd3e 	bl	800084c <__aeabi_ddiv>
 800add0:	f007 070f 	and.w	r7, r7, #15
 800add4:	4682      	mov	sl, r0
 800add6:	468b      	mov	fp, r1
 800add8:	2503      	movs	r5, #3
 800adda:	4eac      	ldr	r6, [pc, #688]	; (800b08c <_dtoa_r+0x61c>)
 800addc:	b957      	cbnz	r7, 800adf4 <_dtoa_r+0x384>
 800adde:	4642      	mov	r2, r8
 800ade0:	464b      	mov	r3, r9
 800ade2:	4650      	mov	r0, sl
 800ade4:	4659      	mov	r1, fp
 800ade6:	f7f5 fd31 	bl	800084c <__aeabi_ddiv>
 800adea:	4682      	mov	sl, r0
 800adec:	468b      	mov	fp, r1
 800adee:	e028      	b.n	800ae42 <_dtoa_r+0x3d2>
 800adf0:	2502      	movs	r5, #2
 800adf2:	e7f2      	b.n	800adda <_dtoa_r+0x36a>
 800adf4:	07f9      	lsls	r1, r7, #31
 800adf6:	d508      	bpl.n	800ae0a <_dtoa_r+0x39a>
 800adf8:	4640      	mov	r0, r8
 800adfa:	4649      	mov	r1, r9
 800adfc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ae00:	f7f5 fbfa 	bl	80005f8 <__aeabi_dmul>
 800ae04:	3501      	adds	r5, #1
 800ae06:	4680      	mov	r8, r0
 800ae08:	4689      	mov	r9, r1
 800ae0a:	107f      	asrs	r7, r7, #1
 800ae0c:	3608      	adds	r6, #8
 800ae0e:	e7e5      	b.n	800addc <_dtoa_r+0x36c>
 800ae10:	f000 809b 	beq.w	800af4a <_dtoa_r+0x4da>
 800ae14:	9b00      	ldr	r3, [sp, #0]
 800ae16:	4f9d      	ldr	r7, [pc, #628]	; (800b08c <_dtoa_r+0x61c>)
 800ae18:	425e      	negs	r6, r3
 800ae1a:	4b9b      	ldr	r3, [pc, #620]	; (800b088 <_dtoa_r+0x618>)
 800ae1c:	f006 020f 	and.w	r2, r6, #15
 800ae20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae28:	ec51 0b19 	vmov	r0, r1, d9
 800ae2c:	f7f5 fbe4 	bl	80005f8 <__aeabi_dmul>
 800ae30:	1136      	asrs	r6, r6, #4
 800ae32:	4682      	mov	sl, r0
 800ae34:	468b      	mov	fp, r1
 800ae36:	2300      	movs	r3, #0
 800ae38:	2502      	movs	r5, #2
 800ae3a:	2e00      	cmp	r6, #0
 800ae3c:	d17a      	bne.n	800af34 <_dtoa_r+0x4c4>
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d1d3      	bne.n	800adea <_dtoa_r+0x37a>
 800ae42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	f000 8082 	beq.w	800af4e <_dtoa_r+0x4de>
 800ae4a:	4b91      	ldr	r3, [pc, #580]	; (800b090 <_dtoa_r+0x620>)
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	4650      	mov	r0, sl
 800ae50:	4659      	mov	r1, fp
 800ae52:	f7f5 fe43 	bl	8000adc <__aeabi_dcmplt>
 800ae56:	2800      	cmp	r0, #0
 800ae58:	d079      	beq.n	800af4e <_dtoa_r+0x4de>
 800ae5a:	9b03      	ldr	r3, [sp, #12]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d076      	beq.n	800af4e <_dtoa_r+0x4de>
 800ae60:	9b02      	ldr	r3, [sp, #8]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	dd36      	ble.n	800aed4 <_dtoa_r+0x464>
 800ae66:	9b00      	ldr	r3, [sp, #0]
 800ae68:	4650      	mov	r0, sl
 800ae6a:	4659      	mov	r1, fp
 800ae6c:	1e5f      	subs	r7, r3, #1
 800ae6e:	2200      	movs	r2, #0
 800ae70:	4b88      	ldr	r3, [pc, #544]	; (800b094 <_dtoa_r+0x624>)
 800ae72:	f7f5 fbc1 	bl	80005f8 <__aeabi_dmul>
 800ae76:	9e02      	ldr	r6, [sp, #8]
 800ae78:	4682      	mov	sl, r0
 800ae7a:	468b      	mov	fp, r1
 800ae7c:	3501      	adds	r5, #1
 800ae7e:	4628      	mov	r0, r5
 800ae80:	f7f5 fb50 	bl	8000524 <__aeabi_i2d>
 800ae84:	4652      	mov	r2, sl
 800ae86:	465b      	mov	r3, fp
 800ae88:	f7f5 fbb6 	bl	80005f8 <__aeabi_dmul>
 800ae8c:	4b82      	ldr	r3, [pc, #520]	; (800b098 <_dtoa_r+0x628>)
 800ae8e:	2200      	movs	r2, #0
 800ae90:	f7f5 f9fc 	bl	800028c <__adddf3>
 800ae94:	46d0      	mov	r8, sl
 800ae96:	46d9      	mov	r9, fp
 800ae98:	4682      	mov	sl, r0
 800ae9a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ae9e:	2e00      	cmp	r6, #0
 800aea0:	d158      	bne.n	800af54 <_dtoa_r+0x4e4>
 800aea2:	4b7e      	ldr	r3, [pc, #504]	; (800b09c <_dtoa_r+0x62c>)
 800aea4:	2200      	movs	r2, #0
 800aea6:	4640      	mov	r0, r8
 800aea8:	4649      	mov	r1, r9
 800aeaa:	f7f5 f9ed 	bl	8000288 <__aeabi_dsub>
 800aeae:	4652      	mov	r2, sl
 800aeb0:	465b      	mov	r3, fp
 800aeb2:	4680      	mov	r8, r0
 800aeb4:	4689      	mov	r9, r1
 800aeb6:	f7f5 fe2f 	bl	8000b18 <__aeabi_dcmpgt>
 800aeba:	2800      	cmp	r0, #0
 800aebc:	f040 8295 	bne.w	800b3ea <_dtoa_r+0x97a>
 800aec0:	4652      	mov	r2, sl
 800aec2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800aec6:	4640      	mov	r0, r8
 800aec8:	4649      	mov	r1, r9
 800aeca:	f7f5 fe07 	bl	8000adc <__aeabi_dcmplt>
 800aece:	2800      	cmp	r0, #0
 800aed0:	f040 8289 	bne.w	800b3e6 <_dtoa_r+0x976>
 800aed4:	ec5b ab19 	vmov	sl, fp, d9
 800aed8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	f2c0 8148 	blt.w	800b170 <_dtoa_r+0x700>
 800aee0:	9a00      	ldr	r2, [sp, #0]
 800aee2:	2a0e      	cmp	r2, #14
 800aee4:	f300 8144 	bgt.w	800b170 <_dtoa_r+0x700>
 800aee8:	4b67      	ldr	r3, [pc, #412]	; (800b088 <_dtoa_r+0x618>)
 800aeea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aeee:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	f280 80d5 	bge.w	800b0a4 <_dtoa_r+0x634>
 800aefa:	9b03      	ldr	r3, [sp, #12]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	f300 80d1 	bgt.w	800b0a4 <_dtoa_r+0x634>
 800af02:	f040 826f 	bne.w	800b3e4 <_dtoa_r+0x974>
 800af06:	4b65      	ldr	r3, [pc, #404]	; (800b09c <_dtoa_r+0x62c>)
 800af08:	2200      	movs	r2, #0
 800af0a:	4640      	mov	r0, r8
 800af0c:	4649      	mov	r1, r9
 800af0e:	f7f5 fb73 	bl	80005f8 <__aeabi_dmul>
 800af12:	4652      	mov	r2, sl
 800af14:	465b      	mov	r3, fp
 800af16:	f7f5 fdf5 	bl	8000b04 <__aeabi_dcmpge>
 800af1a:	9e03      	ldr	r6, [sp, #12]
 800af1c:	4637      	mov	r7, r6
 800af1e:	2800      	cmp	r0, #0
 800af20:	f040 8245 	bne.w	800b3ae <_dtoa_r+0x93e>
 800af24:	9d01      	ldr	r5, [sp, #4]
 800af26:	2331      	movs	r3, #49	; 0x31
 800af28:	f805 3b01 	strb.w	r3, [r5], #1
 800af2c:	9b00      	ldr	r3, [sp, #0]
 800af2e:	3301      	adds	r3, #1
 800af30:	9300      	str	r3, [sp, #0]
 800af32:	e240      	b.n	800b3b6 <_dtoa_r+0x946>
 800af34:	07f2      	lsls	r2, r6, #31
 800af36:	d505      	bpl.n	800af44 <_dtoa_r+0x4d4>
 800af38:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af3c:	f7f5 fb5c 	bl	80005f8 <__aeabi_dmul>
 800af40:	3501      	adds	r5, #1
 800af42:	2301      	movs	r3, #1
 800af44:	1076      	asrs	r6, r6, #1
 800af46:	3708      	adds	r7, #8
 800af48:	e777      	b.n	800ae3a <_dtoa_r+0x3ca>
 800af4a:	2502      	movs	r5, #2
 800af4c:	e779      	b.n	800ae42 <_dtoa_r+0x3d2>
 800af4e:	9f00      	ldr	r7, [sp, #0]
 800af50:	9e03      	ldr	r6, [sp, #12]
 800af52:	e794      	b.n	800ae7e <_dtoa_r+0x40e>
 800af54:	9901      	ldr	r1, [sp, #4]
 800af56:	4b4c      	ldr	r3, [pc, #304]	; (800b088 <_dtoa_r+0x618>)
 800af58:	4431      	add	r1, r6
 800af5a:	910d      	str	r1, [sp, #52]	; 0x34
 800af5c:	9908      	ldr	r1, [sp, #32]
 800af5e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800af62:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800af66:	2900      	cmp	r1, #0
 800af68:	d043      	beq.n	800aff2 <_dtoa_r+0x582>
 800af6a:	494d      	ldr	r1, [pc, #308]	; (800b0a0 <_dtoa_r+0x630>)
 800af6c:	2000      	movs	r0, #0
 800af6e:	f7f5 fc6d 	bl	800084c <__aeabi_ddiv>
 800af72:	4652      	mov	r2, sl
 800af74:	465b      	mov	r3, fp
 800af76:	f7f5 f987 	bl	8000288 <__aeabi_dsub>
 800af7a:	9d01      	ldr	r5, [sp, #4]
 800af7c:	4682      	mov	sl, r0
 800af7e:	468b      	mov	fp, r1
 800af80:	4649      	mov	r1, r9
 800af82:	4640      	mov	r0, r8
 800af84:	f7f5 fde8 	bl	8000b58 <__aeabi_d2iz>
 800af88:	4606      	mov	r6, r0
 800af8a:	f7f5 facb 	bl	8000524 <__aeabi_i2d>
 800af8e:	4602      	mov	r2, r0
 800af90:	460b      	mov	r3, r1
 800af92:	4640      	mov	r0, r8
 800af94:	4649      	mov	r1, r9
 800af96:	f7f5 f977 	bl	8000288 <__aeabi_dsub>
 800af9a:	3630      	adds	r6, #48	; 0x30
 800af9c:	f805 6b01 	strb.w	r6, [r5], #1
 800afa0:	4652      	mov	r2, sl
 800afa2:	465b      	mov	r3, fp
 800afa4:	4680      	mov	r8, r0
 800afa6:	4689      	mov	r9, r1
 800afa8:	f7f5 fd98 	bl	8000adc <__aeabi_dcmplt>
 800afac:	2800      	cmp	r0, #0
 800afae:	d163      	bne.n	800b078 <_dtoa_r+0x608>
 800afb0:	4642      	mov	r2, r8
 800afb2:	464b      	mov	r3, r9
 800afb4:	4936      	ldr	r1, [pc, #216]	; (800b090 <_dtoa_r+0x620>)
 800afb6:	2000      	movs	r0, #0
 800afb8:	f7f5 f966 	bl	8000288 <__aeabi_dsub>
 800afbc:	4652      	mov	r2, sl
 800afbe:	465b      	mov	r3, fp
 800afc0:	f7f5 fd8c 	bl	8000adc <__aeabi_dcmplt>
 800afc4:	2800      	cmp	r0, #0
 800afc6:	f040 80b5 	bne.w	800b134 <_dtoa_r+0x6c4>
 800afca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afcc:	429d      	cmp	r5, r3
 800afce:	d081      	beq.n	800aed4 <_dtoa_r+0x464>
 800afd0:	4b30      	ldr	r3, [pc, #192]	; (800b094 <_dtoa_r+0x624>)
 800afd2:	2200      	movs	r2, #0
 800afd4:	4650      	mov	r0, sl
 800afd6:	4659      	mov	r1, fp
 800afd8:	f7f5 fb0e 	bl	80005f8 <__aeabi_dmul>
 800afdc:	4b2d      	ldr	r3, [pc, #180]	; (800b094 <_dtoa_r+0x624>)
 800afde:	4682      	mov	sl, r0
 800afe0:	468b      	mov	fp, r1
 800afe2:	4640      	mov	r0, r8
 800afe4:	4649      	mov	r1, r9
 800afe6:	2200      	movs	r2, #0
 800afe8:	f7f5 fb06 	bl	80005f8 <__aeabi_dmul>
 800afec:	4680      	mov	r8, r0
 800afee:	4689      	mov	r9, r1
 800aff0:	e7c6      	b.n	800af80 <_dtoa_r+0x510>
 800aff2:	4650      	mov	r0, sl
 800aff4:	4659      	mov	r1, fp
 800aff6:	f7f5 faff 	bl	80005f8 <__aeabi_dmul>
 800affa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800affc:	9d01      	ldr	r5, [sp, #4]
 800affe:	930f      	str	r3, [sp, #60]	; 0x3c
 800b000:	4682      	mov	sl, r0
 800b002:	468b      	mov	fp, r1
 800b004:	4649      	mov	r1, r9
 800b006:	4640      	mov	r0, r8
 800b008:	f7f5 fda6 	bl	8000b58 <__aeabi_d2iz>
 800b00c:	4606      	mov	r6, r0
 800b00e:	f7f5 fa89 	bl	8000524 <__aeabi_i2d>
 800b012:	3630      	adds	r6, #48	; 0x30
 800b014:	4602      	mov	r2, r0
 800b016:	460b      	mov	r3, r1
 800b018:	4640      	mov	r0, r8
 800b01a:	4649      	mov	r1, r9
 800b01c:	f7f5 f934 	bl	8000288 <__aeabi_dsub>
 800b020:	f805 6b01 	strb.w	r6, [r5], #1
 800b024:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b026:	429d      	cmp	r5, r3
 800b028:	4680      	mov	r8, r0
 800b02a:	4689      	mov	r9, r1
 800b02c:	f04f 0200 	mov.w	r2, #0
 800b030:	d124      	bne.n	800b07c <_dtoa_r+0x60c>
 800b032:	4b1b      	ldr	r3, [pc, #108]	; (800b0a0 <_dtoa_r+0x630>)
 800b034:	4650      	mov	r0, sl
 800b036:	4659      	mov	r1, fp
 800b038:	f7f5 f928 	bl	800028c <__adddf3>
 800b03c:	4602      	mov	r2, r0
 800b03e:	460b      	mov	r3, r1
 800b040:	4640      	mov	r0, r8
 800b042:	4649      	mov	r1, r9
 800b044:	f7f5 fd68 	bl	8000b18 <__aeabi_dcmpgt>
 800b048:	2800      	cmp	r0, #0
 800b04a:	d173      	bne.n	800b134 <_dtoa_r+0x6c4>
 800b04c:	4652      	mov	r2, sl
 800b04e:	465b      	mov	r3, fp
 800b050:	4913      	ldr	r1, [pc, #76]	; (800b0a0 <_dtoa_r+0x630>)
 800b052:	2000      	movs	r0, #0
 800b054:	f7f5 f918 	bl	8000288 <__aeabi_dsub>
 800b058:	4602      	mov	r2, r0
 800b05a:	460b      	mov	r3, r1
 800b05c:	4640      	mov	r0, r8
 800b05e:	4649      	mov	r1, r9
 800b060:	f7f5 fd3c 	bl	8000adc <__aeabi_dcmplt>
 800b064:	2800      	cmp	r0, #0
 800b066:	f43f af35 	beq.w	800aed4 <_dtoa_r+0x464>
 800b06a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b06c:	1e6b      	subs	r3, r5, #1
 800b06e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b070:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b074:	2b30      	cmp	r3, #48	; 0x30
 800b076:	d0f8      	beq.n	800b06a <_dtoa_r+0x5fa>
 800b078:	9700      	str	r7, [sp, #0]
 800b07a:	e049      	b.n	800b110 <_dtoa_r+0x6a0>
 800b07c:	4b05      	ldr	r3, [pc, #20]	; (800b094 <_dtoa_r+0x624>)
 800b07e:	f7f5 fabb 	bl	80005f8 <__aeabi_dmul>
 800b082:	4680      	mov	r8, r0
 800b084:	4689      	mov	r9, r1
 800b086:	e7bd      	b.n	800b004 <_dtoa_r+0x594>
 800b088:	0800d3a8 	.word	0x0800d3a8
 800b08c:	0800d380 	.word	0x0800d380
 800b090:	3ff00000 	.word	0x3ff00000
 800b094:	40240000 	.word	0x40240000
 800b098:	401c0000 	.word	0x401c0000
 800b09c:	40140000 	.word	0x40140000
 800b0a0:	3fe00000 	.word	0x3fe00000
 800b0a4:	9d01      	ldr	r5, [sp, #4]
 800b0a6:	4656      	mov	r6, sl
 800b0a8:	465f      	mov	r7, fp
 800b0aa:	4642      	mov	r2, r8
 800b0ac:	464b      	mov	r3, r9
 800b0ae:	4630      	mov	r0, r6
 800b0b0:	4639      	mov	r1, r7
 800b0b2:	f7f5 fbcb 	bl	800084c <__aeabi_ddiv>
 800b0b6:	f7f5 fd4f 	bl	8000b58 <__aeabi_d2iz>
 800b0ba:	4682      	mov	sl, r0
 800b0bc:	f7f5 fa32 	bl	8000524 <__aeabi_i2d>
 800b0c0:	4642      	mov	r2, r8
 800b0c2:	464b      	mov	r3, r9
 800b0c4:	f7f5 fa98 	bl	80005f8 <__aeabi_dmul>
 800b0c8:	4602      	mov	r2, r0
 800b0ca:	460b      	mov	r3, r1
 800b0cc:	4630      	mov	r0, r6
 800b0ce:	4639      	mov	r1, r7
 800b0d0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b0d4:	f7f5 f8d8 	bl	8000288 <__aeabi_dsub>
 800b0d8:	f805 6b01 	strb.w	r6, [r5], #1
 800b0dc:	9e01      	ldr	r6, [sp, #4]
 800b0de:	9f03      	ldr	r7, [sp, #12]
 800b0e0:	1bae      	subs	r6, r5, r6
 800b0e2:	42b7      	cmp	r7, r6
 800b0e4:	4602      	mov	r2, r0
 800b0e6:	460b      	mov	r3, r1
 800b0e8:	d135      	bne.n	800b156 <_dtoa_r+0x6e6>
 800b0ea:	f7f5 f8cf 	bl	800028c <__adddf3>
 800b0ee:	4642      	mov	r2, r8
 800b0f0:	464b      	mov	r3, r9
 800b0f2:	4606      	mov	r6, r0
 800b0f4:	460f      	mov	r7, r1
 800b0f6:	f7f5 fd0f 	bl	8000b18 <__aeabi_dcmpgt>
 800b0fa:	b9d0      	cbnz	r0, 800b132 <_dtoa_r+0x6c2>
 800b0fc:	4642      	mov	r2, r8
 800b0fe:	464b      	mov	r3, r9
 800b100:	4630      	mov	r0, r6
 800b102:	4639      	mov	r1, r7
 800b104:	f7f5 fce0 	bl	8000ac8 <__aeabi_dcmpeq>
 800b108:	b110      	cbz	r0, 800b110 <_dtoa_r+0x6a0>
 800b10a:	f01a 0f01 	tst.w	sl, #1
 800b10e:	d110      	bne.n	800b132 <_dtoa_r+0x6c2>
 800b110:	4620      	mov	r0, r4
 800b112:	ee18 1a10 	vmov	r1, s16
 800b116:	f000 fae5 	bl	800b6e4 <_Bfree>
 800b11a:	2300      	movs	r3, #0
 800b11c:	9800      	ldr	r0, [sp, #0]
 800b11e:	702b      	strb	r3, [r5, #0]
 800b120:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b122:	3001      	adds	r0, #1
 800b124:	6018      	str	r0, [r3, #0]
 800b126:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b128:	2b00      	cmp	r3, #0
 800b12a:	f43f acf1 	beq.w	800ab10 <_dtoa_r+0xa0>
 800b12e:	601d      	str	r5, [r3, #0]
 800b130:	e4ee      	b.n	800ab10 <_dtoa_r+0xa0>
 800b132:	9f00      	ldr	r7, [sp, #0]
 800b134:	462b      	mov	r3, r5
 800b136:	461d      	mov	r5, r3
 800b138:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b13c:	2a39      	cmp	r2, #57	; 0x39
 800b13e:	d106      	bne.n	800b14e <_dtoa_r+0x6de>
 800b140:	9a01      	ldr	r2, [sp, #4]
 800b142:	429a      	cmp	r2, r3
 800b144:	d1f7      	bne.n	800b136 <_dtoa_r+0x6c6>
 800b146:	9901      	ldr	r1, [sp, #4]
 800b148:	2230      	movs	r2, #48	; 0x30
 800b14a:	3701      	adds	r7, #1
 800b14c:	700a      	strb	r2, [r1, #0]
 800b14e:	781a      	ldrb	r2, [r3, #0]
 800b150:	3201      	adds	r2, #1
 800b152:	701a      	strb	r2, [r3, #0]
 800b154:	e790      	b.n	800b078 <_dtoa_r+0x608>
 800b156:	4ba6      	ldr	r3, [pc, #664]	; (800b3f0 <_dtoa_r+0x980>)
 800b158:	2200      	movs	r2, #0
 800b15a:	f7f5 fa4d 	bl	80005f8 <__aeabi_dmul>
 800b15e:	2200      	movs	r2, #0
 800b160:	2300      	movs	r3, #0
 800b162:	4606      	mov	r6, r0
 800b164:	460f      	mov	r7, r1
 800b166:	f7f5 fcaf 	bl	8000ac8 <__aeabi_dcmpeq>
 800b16a:	2800      	cmp	r0, #0
 800b16c:	d09d      	beq.n	800b0aa <_dtoa_r+0x63a>
 800b16e:	e7cf      	b.n	800b110 <_dtoa_r+0x6a0>
 800b170:	9a08      	ldr	r2, [sp, #32]
 800b172:	2a00      	cmp	r2, #0
 800b174:	f000 80d7 	beq.w	800b326 <_dtoa_r+0x8b6>
 800b178:	9a06      	ldr	r2, [sp, #24]
 800b17a:	2a01      	cmp	r2, #1
 800b17c:	f300 80ba 	bgt.w	800b2f4 <_dtoa_r+0x884>
 800b180:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b182:	2a00      	cmp	r2, #0
 800b184:	f000 80b2 	beq.w	800b2ec <_dtoa_r+0x87c>
 800b188:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b18c:	9e07      	ldr	r6, [sp, #28]
 800b18e:	9d04      	ldr	r5, [sp, #16]
 800b190:	9a04      	ldr	r2, [sp, #16]
 800b192:	441a      	add	r2, r3
 800b194:	9204      	str	r2, [sp, #16]
 800b196:	9a05      	ldr	r2, [sp, #20]
 800b198:	2101      	movs	r1, #1
 800b19a:	441a      	add	r2, r3
 800b19c:	4620      	mov	r0, r4
 800b19e:	9205      	str	r2, [sp, #20]
 800b1a0:	f000 fb58 	bl	800b854 <__i2b>
 800b1a4:	4607      	mov	r7, r0
 800b1a6:	2d00      	cmp	r5, #0
 800b1a8:	dd0c      	ble.n	800b1c4 <_dtoa_r+0x754>
 800b1aa:	9b05      	ldr	r3, [sp, #20]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	dd09      	ble.n	800b1c4 <_dtoa_r+0x754>
 800b1b0:	42ab      	cmp	r3, r5
 800b1b2:	9a04      	ldr	r2, [sp, #16]
 800b1b4:	bfa8      	it	ge
 800b1b6:	462b      	movge	r3, r5
 800b1b8:	1ad2      	subs	r2, r2, r3
 800b1ba:	9204      	str	r2, [sp, #16]
 800b1bc:	9a05      	ldr	r2, [sp, #20]
 800b1be:	1aed      	subs	r5, r5, r3
 800b1c0:	1ad3      	subs	r3, r2, r3
 800b1c2:	9305      	str	r3, [sp, #20]
 800b1c4:	9b07      	ldr	r3, [sp, #28]
 800b1c6:	b31b      	cbz	r3, 800b210 <_dtoa_r+0x7a0>
 800b1c8:	9b08      	ldr	r3, [sp, #32]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	f000 80af 	beq.w	800b32e <_dtoa_r+0x8be>
 800b1d0:	2e00      	cmp	r6, #0
 800b1d2:	dd13      	ble.n	800b1fc <_dtoa_r+0x78c>
 800b1d4:	4639      	mov	r1, r7
 800b1d6:	4632      	mov	r2, r6
 800b1d8:	4620      	mov	r0, r4
 800b1da:	f000 fbfb 	bl	800b9d4 <__pow5mult>
 800b1de:	ee18 2a10 	vmov	r2, s16
 800b1e2:	4601      	mov	r1, r0
 800b1e4:	4607      	mov	r7, r0
 800b1e6:	4620      	mov	r0, r4
 800b1e8:	f000 fb4a 	bl	800b880 <__multiply>
 800b1ec:	ee18 1a10 	vmov	r1, s16
 800b1f0:	4680      	mov	r8, r0
 800b1f2:	4620      	mov	r0, r4
 800b1f4:	f000 fa76 	bl	800b6e4 <_Bfree>
 800b1f8:	ee08 8a10 	vmov	s16, r8
 800b1fc:	9b07      	ldr	r3, [sp, #28]
 800b1fe:	1b9a      	subs	r2, r3, r6
 800b200:	d006      	beq.n	800b210 <_dtoa_r+0x7a0>
 800b202:	ee18 1a10 	vmov	r1, s16
 800b206:	4620      	mov	r0, r4
 800b208:	f000 fbe4 	bl	800b9d4 <__pow5mult>
 800b20c:	ee08 0a10 	vmov	s16, r0
 800b210:	2101      	movs	r1, #1
 800b212:	4620      	mov	r0, r4
 800b214:	f000 fb1e 	bl	800b854 <__i2b>
 800b218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	4606      	mov	r6, r0
 800b21e:	f340 8088 	ble.w	800b332 <_dtoa_r+0x8c2>
 800b222:	461a      	mov	r2, r3
 800b224:	4601      	mov	r1, r0
 800b226:	4620      	mov	r0, r4
 800b228:	f000 fbd4 	bl	800b9d4 <__pow5mult>
 800b22c:	9b06      	ldr	r3, [sp, #24]
 800b22e:	2b01      	cmp	r3, #1
 800b230:	4606      	mov	r6, r0
 800b232:	f340 8081 	ble.w	800b338 <_dtoa_r+0x8c8>
 800b236:	f04f 0800 	mov.w	r8, #0
 800b23a:	6933      	ldr	r3, [r6, #16]
 800b23c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b240:	6918      	ldr	r0, [r3, #16]
 800b242:	f000 fab7 	bl	800b7b4 <__hi0bits>
 800b246:	f1c0 0020 	rsb	r0, r0, #32
 800b24a:	9b05      	ldr	r3, [sp, #20]
 800b24c:	4418      	add	r0, r3
 800b24e:	f010 001f 	ands.w	r0, r0, #31
 800b252:	f000 8092 	beq.w	800b37a <_dtoa_r+0x90a>
 800b256:	f1c0 0320 	rsb	r3, r0, #32
 800b25a:	2b04      	cmp	r3, #4
 800b25c:	f340 808a 	ble.w	800b374 <_dtoa_r+0x904>
 800b260:	f1c0 001c 	rsb	r0, r0, #28
 800b264:	9b04      	ldr	r3, [sp, #16]
 800b266:	4403      	add	r3, r0
 800b268:	9304      	str	r3, [sp, #16]
 800b26a:	9b05      	ldr	r3, [sp, #20]
 800b26c:	4403      	add	r3, r0
 800b26e:	4405      	add	r5, r0
 800b270:	9305      	str	r3, [sp, #20]
 800b272:	9b04      	ldr	r3, [sp, #16]
 800b274:	2b00      	cmp	r3, #0
 800b276:	dd07      	ble.n	800b288 <_dtoa_r+0x818>
 800b278:	ee18 1a10 	vmov	r1, s16
 800b27c:	461a      	mov	r2, r3
 800b27e:	4620      	mov	r0, r4
 800b280:	f000 fc02 	bl	800ba88 <__lshift>
 800b284:	ee08 0a10 	vmov	s16, r0
 800b288:	9b05      	ldr	r3, [sp, #20]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	dd05      	ble.n	800b29a <_dtoa_r+0x82a>
 800b28e:	4631      	mov	r1, r6
 800b290:	461a      	mov	r2, r3
 800b292:	4620      	mov	r0, r4
 800b294:	f000 fbf8 	bl	800ba88 <__lshift>
 800b298:	4606      	mov	r6, r0
 800b29a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d06e      	beq.n	800b37e <_dtoa_r+0x90e>
 800b2a0:	ee18 0a10 	vmov	r0, s16
 800b2a4:	4631      	mov	r1, r6
 800b2a6:	f000 fc5f 	bl	800bb68 <__mcmp>
 800b2aa:	2800      	cmp	r0, #0
 800b2ac:	da67      	bge.n	800b37e <_dtoa_r+0x90e>
 800b2ae:	9b00      	ldr	r3, [sp, #0]
 800b2b0:	3b01      	subs	r3, #1
 800b2b2:	ee18 1a10 	vmov	r1, s16
 800b2b6:	9300      	str	r3, [sp, #0]
 800b2b8:	220a      	movs	r2, #10
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	4620      	mov	r0, r4
 800b2be:	f000 fa33 	bl	800b728 <__multadd>
 800b2c2:	9b08      	ldr	r3, [sp, #32]
 800b2c4:	ee08 0a10 	vmov	s16, r0
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	f000 81b1 	beq.w	800b630 <_dtoa_r+0xbc0>
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	4639      	mov	r1, r7
 800b2d2:	220a      	movs	r2, #10
 800b2d4:	4620      	mov	r0, r4
 800b2d6:	f000 fa27 	bl	800b728 <__multadd>
 800b2da:	9b02      	ldr	r3, [sp, #8]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	4607      	mov	r7, r0
 800b2e0:	f300 808e 	bgt.w	800b400 <_dtoa_r+0x990>
 800b2e4:	9b06      	ldr	r3, [sp, #24]
 800b2e6:	2b02      	cmp	r3, #2
 800b2e8:	dc51      	bgt.n	800b38e <_dtoa_r+0x91e>
 800b2ea:	e089      	b.n	800b400 <_dtoa_r+0x990>
 800b2ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b2ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b2f2:	e74b      	b.n	800b18c <_dtoa_r+0x71c>
 800b2f4:	9b03      	ldr	r3, [sp, #12]
 800b2f6:	1e5e      	subs	r6, r3, #1
 800b2f8:	9b07      	ldr	r3, [sp, #28]
 800b2fa:	42b3      	cmp	r3, r6
 800b2fc:	bfbf      	itttt	lt
 800b2fe:	9b07      	ldrlt	r3, [sp, #28]
 800b300:	9607      	strlt	r6, [sp, #28]
 800b302:	1af2      	sublt	r2, r6, r3
 800b304:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b306:	bfb6      	itet	lt
 800b308:	189b      	addlt	r3, r3, r2
 800b30a:	1b9e      	subge	r6, r3, r6
 800b30c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b30e:	9b03      	ldr	r3, [sp, #12]
 800b310:	bfb8      	it	lt
 800b312:	2600      	movlt	r6, #0
 800b314:	2b00      	cmp	r3, #0
 800b316:	bfb7      	itett	lt
 800b318:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b31c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b320:	1a9d      	sublt	r5, r3, r2
 800b322:	2300      	movlt	r3, #0
 800b324:	e734      	b.n	800b190 <_dtoa_r+0x720>
 800b326:	9e07      	ldr	r6, [sp, #28]
 800b328:	9d04      	ldr	r5, [sp, #16]
 800b32a:	9f08      	ldr	r7, [sp, #32]
 800b32c:	e73b      	b.n	800b1a6 <_dtoa_r+0x736>
 800b32e:	9a07      	ldr	r2, [sp, #28]
 800b330:	e767      	b.n	800b202 <_dtoa_r+0x792>
 800b332:	9b06      	ldr	r3, [sp, #24]
 800b334:	2b01      	cmp	r3, #1
 800b336:	dc18      	bgt.n	800b36a <_dtoa_r+0x8fa>
 800b338:	f1ba 0f00 	cmp.w	sl, #0
 800b33c:	d115      	bne.n	800b36a <_dtoa_r+0x8fa>
 800b33e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b342:	b993      	cbnz	r3, 800b36a <_dtoa_r+0x8fa>
 800b344:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b348:	0d1b      	lsrs	r3, r3, #20
 800b34a:	051b      	lsls	r3, r3, #20
 800b34c:	b183      	cbz	r3, 800b370 <_dtoa_r+0x900>
 800b34e:	9b04      	ldr	r3, [sp, #16]
 800b350:	3301      	adds	r3, #1
 800b352:	9304      	str	r3, [sp, #16]
 800b354:	9b05      	ldr	r3, [sp, #20]
 800b356:	3301      	adds	r3, #1
 800b358:	9305      	str	r3, [sp, #20]
 800b35a:	f04f 0801 	mov.w	r8, #1
 800b35e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b360:	2b00      	cmp	r3, #0
 800b362:	f47f af6a 	bne.w	800b23a <_dtoa_r+0x7ca>
 800b366:	2001      	movs	r0, #1
 800b368:	e76f      	b.n	800b24a <_dtoa_r+0x7da>
 800b36a:	f04f 0800 	mov.w	r8, #0
 800b36e:	e7f6      	b.n	800b35e <_dtoa_r+0x8ee>
 800b370:	4698      	mov	r8, r3
 800b372:	e7f4      	b.n	800b35e <_dtoa_r+0x8ee>
 800b374:	f43f af7d 	beq.w	800b272 <_dtoa_r+0x802>
 800b378:	4618      	mov	r0, r3
 800b37a:	301c      	adds	r0, #28
 800b37c:	e772      	b.n	800b264 <_dtoa_r+0x7f4>
 800b37e:	9b03      	ldr	r3, [sp, #12]
 800b380:	2b00      	cmp	r3, #0
 800b382:	dc37      	bgt.n	800b3f4 <_dtoa_r+0x984>
 800b384:	9b06      	ldr	r3, [sp, #24]
 800b386:	2b02      	cmp	r3, #2
 800b388:	dd34      	ble.n	800b3f4 <_dtoa_r+0x984>
 800b38a:	9b03      	ldr	r3, [sp, #12]
 800b38c:	9302      	str	r3, [sp, #8]
 800b38e:	9b02      	ldr	r3, [sp, #8]
 800b390:	b96b      	cbnz	r3, 800b3ae <_dtoa_r+0x93e>
 800b392:	4631      	mov	r1, r6
 800b394:	2205      	movs	r2, #5
 800b396:	4620      	mov	r0, r4
 800b398:	f000 f9c6 	bl	800b728 <__multadd>
 800b39c:	4601      	mov	r1, r0
 800b39e:	4606      	mov	r6, r0
 800b3a0:	ee18 0a10 	vmov	r0, s16
 800b3a4:	f000 fbe0 	bl	800bb68 <__mcmp>
 800b3a8:	2800      	cmp	r0, #0
 800b3aa:	f73f adbb 	bgt.w	800af24 <_dtoa_r+0x4b4>
 800b3ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3b0:	9d01      	ldr	r5, [sp, #4]
 800b3b2:	43db      	mvns	r3, r3
 800b3b4:	9300      	str	r3, [sp, #0]
 800b3b6:	f04f 0800 	mov.w	r8, #0
 800b3ba:	4631      	mov	r1, r6
 800b3bc:	4620      	mov	r0, r4
 800b3be:	f000 f991 	bl	800b6e4 <_Bfree>
 800b3c2:	2f00      	cmp	r7, #0
 800b3c4:	f43f aea4 	beq.w	800b110 <_dtoa_r+0x6a0>
 800b3c8:	f1b8 0f00 	cmp.w	r8, #0
 800b3cc:	d005      	beq.n	800b3da <_dtoa_r+0x96a>
 800b3ce:	45b8      	cmp	r8, r7
 800b3d0:	d003      	beq.n	800b3da <_dtoa_r+0x96a>
 800b3d2:	4641      	mov	r1, r8
 800b3d4:	4620      	mov	r0, r4
 800b3d6:	f000 f985 	bl	800b6e4 <_Bfree>
 800b3da:	4639      	mov	r1, r7
 800b3dc:	4620      	mov	r0, r4
 800b3de:	f000 f981 	bl	800b6e4 <_Bfree>
 800b3e2:	e695      	b.n	800b110 <_dtoa_r+0x6a0>
 800b3e4:	2600      	movs	r6, #0
 800b3e6:	4637      	mov	r7, r6
 800b3e8:	e7e1      	b.n	800b3ae <_dtoa_r+0x93e>
 800b3ea:	9700      	str	r7, [sp, #0]
 800b3ec:	4637      	mov	r7, r6
 800b3ee:	e599      	b.n	800af24 <_dtoa_r+0x4b4>
 800b3f0:	40240000 	.word	0x40240000
 800b3f4:	9b08      	ldr	r3, [sp, #32]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	f000 80ca 	beq.w	800b590 <_dtoa_r+0xb20>
 800b3fc:	9b03      	ldr	r3, [sp, #12]
 800b3fe:	9302      	str	r3, [sp, #8]
 800b400:	2d00      	cmp	r5, #0
 800b402:	dd05      	ble.n	800b410 <_dtoa_r+0x9a0>
 800b404:	4639      	mov	r1, r7
 800b406:	462a      	mov	r2, r5
 800b408:	4620      	mov	r0, r4
 800b40a:	f000 fb3d 	bl	800ba88 <__lshift>
 800b40e:	4607      	mov	r7, r0
 800b410:	f1b8 0f00 	cmp.w	r8, #0
 800b414:	d05b      	beq.n	800b4ce <_dtoa_r+0xa5e>
 800b416:	6879      	ldr	r1, [r7, #4]
 800b418:	4620      	mov	r0, r4
 800b41a:	f000 f923 	bl	800b664 <_Balloc>
 800b41e:	4605      	mov	r5, r0
 800b420:	b928      	cbnz	r0, 800b42e <_dtoa_r+0x9be>
 800b422:	4b87      	ldr	r3, [pc, #540]	; (800b640 <_dtoa_r+0xbd0>)
 800b424:	4602      	mov	r2, r0
 800b426:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b42a:	f7ff bb3b 	b.w	800aaa4 <_dtoa_r+0x34>
 800b42e:	693a      	ldr	r2, [r7, #16]
 800b430:	3202      	adds	r2, #2
 800b432:	0092      	lsls	r2, r2, #2
 800b434:	f107 010c 	add.w	r1, r7, #12
 800b438:	300c      	adds	r0, #12
 800b43a:	f7fe fdd7 	bl	8009fec <memcpy>
 800b43e:	2201      	movs	r2, #1
 800b440:	4629      	mov	r1, r5
 800b442:	4620      	mov	r0, r4
 800b444:	f000 fb20 	bl	800ba88 <__lshift>
 800b448:	9b01      	ldr	r3, [sp, #4]
 800b44a:	f103 0901 	add.w	r9, r3, #1
 800b44e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b452:	4413      	add	r3, r2
 800b454:	9305      	str	r3, [sp, #20]
 800b456:	f00a 0301 	and.w	r3, sl, #1
 800b45a:	46b8      	mov	r8, r7
 800b45c:	9304      	str	r3, [sp, #16]
 800b45e:	4607      	mov	r7, r0
 800b460:	4631      	mov	r1, r6
 800b462:	ee18 0a10 	vmov	r0, s16
 800b466:	f7ff fa75 	bl	800a954 <quorem>
 800b46a:	4641      	mov	r1, r8
 800b46c:	9002      	str	r0, [sp, #8]
 800b46e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b472:	ee18 0a10 	vmov	r0, s16
 800b476:	f000 fb77 	bl	800bb68 <__mcmp>
 800b47a:	463a      	mov	r2, r7
 800b47c:	9003      	str	r0, [sp, #12]
 800b47e:	4631      	mov	r1, r6
 800b480:	4620      	mov	r0, r4
 800b482:	f000 fb8d 	bl	800bba0 <__mdiff>
 800b486:	68c2      	ldr	r2, [r0, #12]
 800b488:	f109 3bff 	add.w	fp, r9, #4294967295
 800b48c:	4605      	mov	r5, r0
 800b48e:	bb02      	cbnz	r2, 800b4d2 <_dtoa_r+0xa62>
 800b490:	4601      	mov	r1, r0
 800b492:	ee18 0a10 	vmov	r0, s16
 800b496:	f000 fb67 	bl	800bb68 <__mcmp>
 800b49a:	4602      	mov	r2, r0
 800b49c:	4629      	mov	r1, r5
 800b49e:	4620      	mov	r0, r4
 800b4a0:	9207      	str	r2, [sp, #28]
 800b4a2:	f000 f91f 	bl	800b6e4 <_Bfree>
 800b4a6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b4aa:	ea43 0102 	orr.w	r1, r3, r2
 800b4ae:	9b04      	ldr	r3, [sp, #16]
 800b4b0:	430b      	orrs	r3, r1
 800b4b2:	464d      	mov	r5, r9
 800b4b4:	d10f      	bne.n	800b4d6 <_dtoa_r+0xa66>
 800b4b6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b4ba:	d02a      	beq.n	800b512 <_dtoa_r+0xaa2>
 800b4bc:	9b03      	ldr	r3, [sp, #12]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	dd02      	ble.n	800b4c8 <_dtoa_r+0xa58>
 800b4c2:	9b02      	ldr	r3, [sp, #8]
 800b4c4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b4c8:	f88b a000 	strb.w	sl, [fp]
 800b4cc:	e775      	b.n	800b3ba <_dtoa_r+0x94a>
 800b4ce:	4638      	mov	r0, r7
 800b4d0:	e7ba      	b.n	800b448 <_dtoa_r+0x9d8>
 800b4d2:	2201      	movs	r2, #1
 800b4d4:	e7e2      	b.n	800b49c <_dtoa_r+0xa2c>
 800b4d6:	9b03      	ldr	r3, [sp, #12]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	db04      	blt.n	800b4e6 <_dtoa_r+0xa76>
 800b4dc:	9906      	ldr	r1, [sp, #24]
 800b4de:	430b      	orrs	r3, r1
 800b4e0:	9904      	ldr	r1, [sp, #16]
 800b4e2:	430b      	orrs	r3, r1
 800b4e4:	d122      	bne.n	800b52c <_dtoa_r+0xabc>
 800b4e6:	2a00      	cmp	r2, #0
 800b4e8:	ddee      	ble.n	800b4c8 <_dtoa_r+0xa58>
 800b4ea:	ee18 1a10 	vmov	r1, s16
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	4620      	mov	r0, r4
 800b4f2:	f000 fac9 	bl	800ba88 <__lshift>
 800b4f6:	4631      	mov	r1, r6
 800b4f8:	ee08 0a10 	vmov	s16, r0
 800b4fc:	f000 fb34 	bl	800bb68 <__mcmp>
 800b500:	2800      	cmp	r0, #0
 800b502:	dc03      	bgt.n	800b50c <_dtoa_r+0xa9c>
 800b504:	d1e0      	bne.n	800b4c8 <_dtoa_r+0xa58>
 800b506:	f01a 0f01 	tst.w	sl, #1
 800b50a:	d0dd      	beq.n	800b4c8 <_dtoa_r+0xa58>
 800b50c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b510:	d1d7      	bne.n	800b4c2 <_dtoa_r+0xa52>
 800b512:	2339      	movs	r3, #57	; 0x39
 800b514:	f88b 3000 	strb.w	r3, [fp]
 800b518:	462b      	mov	r3, r5
 800b51a:	461d      	mov	r5, r3
 800b51c:	3b01      	subs	r3, #1
 800b51e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b522:	2a39      	cmp	r2, #57	; 0x39
 800b524:	d071      	beq.n	800b60a <_dtoa_r+0xb9a>
 800b526:	3201      	adds	r2, #1
 800b528:	701a      	strb	r2, [r3, #0]
 800b52a:	e746      	b.n	800b3ba <_dtoa_r+0x94a>
 800b52c:	2a00      	cmp	r2, #0
 800b52e:	dd07      	ble.n	800b540 <_dtoa_r+0xad0>
 800b530:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b534:	d0ed      	beq.n	800b512 <_dtoa_r+0xaa2>
 800b536:	f10a 0301 	add.w	r3, sl, #1
 800b53a:	f88b 3000 	strb.w	r3, [fp]
 800b53e:	e73c      	b.n	800b3ba <_dtoa_r+0x94a>
 800b540:	9b05      	ldr	r3, [sp, #20]
 800b542:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b546:	4599      	cmp	r9, r3
 800b548:	d047      	beq.n	800b5da <_dtoa_r+0xb6a>
 800b54a:	ee18 1a10 	vmov	r1, s16
 800b54e:	2300      	movs	r3, #0
 800b550:	220a      	movs	r2, #10
 800b552:	4620      	mov	r0, r4
 800b554:	f000 f8e8 	bl	800b728 <__multadd>
 800b558:	45b8      	cmp	r8, r7
 800b55a:	ee08 0a10 	vmov	s16, r0
 800b55e:	f04f 0300 	mov.w	r3, #0
 800b562:	f04f 020a 	mov.w	r2, #10
 800b566:	4641      	mov	r1, r8
 800b568:	4620      	mov	r0, r4
 800b56a:	d106      	bne.n	800b57a <_dtoa_r+0xb0a>
 800b56c:	f000 f8dc 	bl	800b728 <__multadd>
 800b570:	4680      	mov	r8, r0
 800b572:	4607      	mov	r7, r0
 800b574:	f109 0901 	add.w	r9, r9, #1
 800b578:	e772      	b.n	800b460 <_dtoa_r+0x9f0>
 800b57a:	f000 f8d5 	bl	800b728 <__multadd>
 800b57e:	4639      	mov	r1, r7
 800b580:	4680      	mov	r8, r0
 800b582:	2300      	movs	r3, #0
 800b584:	220a      	movs	r2, #10
 800b586:	4620      	mov	r0, r4
 800b588:	f000 f8ce 	bl	800b728 <__multadd>
 800b58c:	4607      	mov	r7, r0
 800b58e:	e7f1      	b.n	800b574 <_dtoa_r+0xb04>
 800b590:	9b03      	ldr	r3, [sp, #12]
 800b592:	9302      	str	r3, [sp, #8]
 800b594:	9d01      	ldr	r5, [sp, #4]
 800b596:	ee18 0a10 	vmov	r0, s16
 800b59a:	4631      	mov	r1, r6
 800b59c:	f7ff f9da 	bl	800a954 <quorem>
 800b5a0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b5a4:	9b01      	ldr	r3, [sp, #4]
 800b5a6:	f805 ab01 	strb.w	sl, [r5], #1
 800b5aa:	1aea      	subs	r2, r5, r3
 800b5ac:	9b02      	ldr	r3, [sp, #8]
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	dd09      	ble.n	800b5c6 <_dtoa_r+0xb56>
 800b5b2:	ee18 1a10 	vmov	r1, s16
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	220a      	movs	r2, #10
 800b5ba:	4620      	mov	r0, r4
 800b5bc:	f000 f8b4 	bl	800b728 <__multadd>
 800b5c0:	ee08 0a10 	vmov	s16, r0
 800b5c4:	e7e7      	b.n	800b596 <_dtoa_r+0xb26>
 800b5c6:	9b02      	ldr	r3, [sp, #8]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	bfc8      	it	gt
 800b5cc:	461d      	movgt	r5, r3
 800b5ce:	9b01      	ldr	r3, [sp, #4]
 800b5d0:	bfd8      	it	le
 800b5d2:	2501      	movle	r5, #1
 800b5d4:	441d      	add	r5, r3
 800b5d6:	f04f 0800 	mov.w	r8, #0
 800b5da:	ee18 1a10 	vmov	r1, s16
 800b5de:	2201      	movs	r2, #1
 800b5e0:	4620      	mov	r0, r4
 800b5e2:	f000 fa51 	bl	800ba88 <__lshift>
 800b5e6:	4631      	mov	r1, r6
 800b5e8:	ee08 0a10 	vmov	s16, r0
 800b5ec:	f000 fabc 	bl	800bb68 <__mcmp>
 800b5f0:	2800      	cmp	r0, #0
 800b5f2:	dc91      	bgt.n	800b518 <_dtoa_r+0xaa8>
 800b5f4:	d102      	bne.n	800b5fc <_dtoa_r+0xb8c>
 800b5f6:	f01a 0f01 	tst.w	sl, #1
 800b5fa:	d18d      	bne.n	800b518 <_dtoa_r+0xaa8>
 800b5fc:	462b      	mov	r3, r5
 800b5fe:	461d      	mov	r5, r3
 800b600:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b604:	2a30      	cmp	r2, #48	; 0x30
 800b606:	d0fa      	beq.n	800b5fe <_dtoa_r+0xb8e>
 800b608:	e6d7      	b.n	800b3ba <_dtoa_r+0x94a>
 800b60a:	9a01      	ldr	r2, [sp, #4]
 800b60c:	429a      	cmp	r2, r3
 800b60e:	d184      	bne.n	800b51a <_dtoa_r+0xaaa>
 800b610:	9b00      	ldr	r3, [sp, #0]
 800b612:	3301      	adds	r3, #1
 800b614:	9300      	str	r3, [sp, #0]
 800b616:	2331      	movs	r3, #49	; 0x31
 800b618:	7013      	strb	r3, [r2, #0]
 800b61a:	e6ce      	b.n	800b3ba <_dtoa_r+0x94a>
 800b61c:	4b09      	ldr	r3, [pc, #36]	; (800b644 <_dtoa_r+0xbd4>)
 800b61e:	f7ff ba95 	b.w	800ab4c <_dtoa_r+0xdc>
 800b622:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b624:	2b00      	cmp	r3, #0
 800b626:	f47f aa6e 	bne.w	800ab06 <_dtoa_r+0x96>
 800b62a:	4b07      	ldr	r3, [pc, #28]	; (800b648 <_dtoa_r+0xbd8>)
 800b62c:	f7ff ba8e 	b.w	800ab4c <_dtoa_r+0xdc>
 800b630:	9b02      	ldr	r3, [sp, #8]
 800b632:	2b00      	cmp	r3, #0
 800b634:	dcae      	bgt.n	800b594 <_dtoa_r+0xb24>
 800b636:	9b06      	ldr	r3, [sp, #24]
 800b638:	2b02      	cmp	r3, #2
 800b63a:	f73f aea8 	bgt.w	800b38e <_dtoa_r+0x91e>
 800b63e:	e7a9      	b.n	800b594 <_dtoa_r+0xb24>
 800b640:	0800d30f 	.word	0x0800d30f
 800b644:	0800d26c 	.word	0x0800d26c
 800b648:	0800d290 	.word	0x0800d290

0800b64c <_localeconv_r>:
 800b64c:	4800      	ldr	r0, [pc, #0]	; (800b650 <_localeconv_r+0x4>)
 800b64e:	4770      	bx	lr
 800b650:	20000198 	.word	0x20000198

0800b654 <malloc>:
 800b654:	4b02      	ldr	r3, [pc, #8]	; (800b660 <malloc+0xc>)
 800b656:	4601      	mov	r1, r0
 800b658:	6818      	ldr	r0, [r3, #0]
 800b65a:	f000 bc09 	b.w	800be70 <_malloc_r>
 800b65e:	bf00      	nop
 800b660:	20000044 	.word	0x20000044

0800b664 <_Balloc>:
 800b664:	b570      	push	{r4, r5, r6, lr}
 800b666:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b668:	4604      	mov	r4, r0
 800b66a:	460d      	mov	r5, r1
 800b66c:	b976      	cbnz	r6, 800b68c <_Balloc+0x28>
 800b66e:	2010      	movs	r0, #16
 800b670:	f7ff fff0 	bl	800b654 <malloc>
 800b674:	4602      	mov	r2, r0
 800b676:	6260      	str	r0, [r4, #36]	; 0x24
 800b678:	b920      	cbnz	r0, 800b684 <_Balloc+0x20>
 800b67a:	4b18      	ldr	r3, [pc, #96]	; (800b6dc <_Balloc+0x78>)
 800b67c:	4818      	ldr	r0, [pc, #96]	; (800b6e0 <_Balloc+0x7c>)
 800b67e:	2166      	movs	r1, #102	; 0x66
 800b680:	f000 fdd6 	bl	800c230 <__assert_func>
 800b684:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b688:	6006      	str	r6, [r0, #0]
 800b68a:	60c6      	str	r6, [r0, #12]
 800b68c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b68e:	68f3      	ldr	r3, [r6, #12]
 800b690:	b183      	cbz	r3, 800b6b4 <_Balloc+0x50>
 800b692:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b694:	68db      	ldr	r3, [r3, #12]
 800b696:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b69a:	b9b8      	cbnz	r0, 800b6cc <_Balloc+0x68>
 800b69c:	2101      	movs	r1, #1
 800b69e:	fa01 f605 	lsl.w	r6, r1, r5
 800b6a2:	1d72      	adds	r2, r6, #5
 800b6a4:	0092      	lsls	r2, r2, #2
 800b6a6:	4620      	mov	r0, r4
 800b6a8:	f000 fb60 	bl	800bd6c <_calloc_r>
 800b6ac:	b160      	cbz	r0, 800b6c8 <_Balloc+0x64>
 800b6ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b6b2:	e00e      	b.n	800b6d2 <_Balloc+0x6e>
 800b6b4:	2221      	movs	r2, #33	; 0x21
 800b6b6:	2104      	movs	r1, #4
 800b6b8:	4620      	mov	r0, r4
 800b6ba:	f000 fb57 	bl	800bd6c <_calloc_r>
 800b6be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b6c0:	60f0      	str	r0, [r6, #12]
 800b6c2:	68db      	ldr	r3, [r3, #12]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d1e4      	bne.n	800b692 <_Balloc+0x2e>
 800b6c8:	2000      	movs	r0, #0
 800b6ca:	bd70      	pop	{r4, r5, r6, pc}
 800b6cc:	6802      	ldr	r2, [r0, #0]
 800b6ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b6d8:	e7f7      	b.n	800b6ca <_Balloc+0x66>
 800b6da:	bf00      	nop
 800b6dc:	0800d29d 	.word	0x0800d29d
 800b6e0:	0800d320 	.word	0x0800d320

0800b6e4 <_Bfree>:
 800b6e4:	b570      	push	{r4, r5, r6, lr}
 800b6e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b6e8:	4605      	mov	r5, r0
 800b6ea:	460c      	mov	r4, r1
 800b6ec:	b976      	cbnz	r6, 800b70c <_Bfree+0x28>
 800b6ee:	2010      	movs	r0, #16
 800b6f0:	f7ff ffb0 	bl	800b654 <malloc>
 800b6f4:	4602      	mov	r2, r0
 800b6f6:	6268      	str	r0, [r5, #36]	; 0x24
 800b6f8:	b920      	cbnz	r0, 800b704 <_Bfree+0x20>
 800b6fa:	4b09      	ldr	r3, [pc, #36]	; (800b720 <_Bfree+0x3c>)
 800b6fc:	4809      	ldr	r0, [pc, #36]	; (800b724 <_Bfree+0x40>)
 800b6fe:	218a      	movs	r1, #138	; 0x8a
 800b700:	f000 fd96 	bl	800c230 <__assert_func>
 800b704:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b708:	6006      	str	r6, [r0, #0]
 800b70a:	60c6      	str	r6, [r0, #12]
 800b70c:	b13c      	cbz	r4, 800b71e <_Bfree+0x3a>
 800b70e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b710:	6862      	ldr	r2, [r4, #4]
 800b712:	68db      	ldr	r3, [r3, #12]
 800b714:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b718:	6021      	str	r1, [r4, #0]
 800b71a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b71e:	bd70      	pop	{r4, r5, r6, pc}
 800b720:	0800d29d 	.word	0x0800d29d
 800b724:	0800d320 	.word	0x0800d320

0800b728 <__multadd>:
 800b728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b72c:	690d      	ldr	r5, [r1, #16]
 800b72e:	4607      	mov	r7, r0
 800b730:	460c      	mov	r4, r1
 800b732:	461e      	mov	r6, r3
 800b734:	f101 0c14 	add.w	ip, r1, #20
 800b738:	2000      	movs	r0, #0
 800b73a:	f8dc 3000 	ldr.w	r3, [ip]
 800b73e:	b299      	uxth	r1, r3
 800b740:	fb02 6101 	mla	r1, r2, r1, r6
 800b744:	0c1e      	lsrs	r6, r3, #16
 800b746:	0c0b      	lsrs	r3, r1, #16
 800b748:	fb02 3306 	mla	r3, r2, r6, r3
 800b74c:	b289      	uxth	r1, r1
 800b74e:	3001      	adds	r0, #1
 800b750:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b754:	4285      	cmp	r5, r0
 800b756:	f84c 1b04 	str.w	r1, [ip], #4
 800b75a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b75e:	dcec      	bgt.n	800b73a <__multadd+0x12>
 800b760:	b30e      	cbz	r6, 800b7a6 <__multadd+0x7e>
 800b762:	68a3      	ldr	r3, [r4, #8]
 800b764:	42ab      	cmp	r3, r5
 800b766:	dc19      	bgt.n	800b79c <__multadd+0x74>
 800b768:	6861      	ldr	r1, [r4, #4]
 800b76a:	4638      	mov	r0, r7
 800b76c:	3101      	adds	r1, #1
 800b76e:	f7ff ff79 	bl	800b664 <_Balloc>
 800b772:	4680      	mov	r8, r0
 800b774:	b928      	cbnz	r0, 800b782 <__multadd+0x5a>
 800b776:	4602      	mov	r2, r0
 800b778:	4b0c      	ldr	r3, [pc, #48]	; (800b7ac <__multadd+0x84>)
 800b77a:	480d      	ldr	r0, [pc, #52]	; (800b7b0 <__multadd+0x88>)
 800b77c:	21b5      	movs	r1, #181	; 0xb5
 800b77e:	f000 fd57 	bl	800c230 <__assert_func>
 800b782:	6922      	ldr	r2, [r4, #16]
 800b784:	3202      	adds	r2, #2
 800b786:	f104 010c 	add.w	r1, r4, #12
 800b78a:	0092      	lsls	r2, r2, #2
 800b78c:	300c      	adds	r0, #12
 800b78e:	f7fe fc2d 	bl	8009fec <memcpy>
 800b792:	4621      	mov	r1, r4
 800b794:	4638      	mov	r0, r7
 800b796:	f7ff ffa5 	bl	800b6e4 <_Bfree>
 800b79a:	4644      	mov	r4, r8
 800b79c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b7a0:	3501      	adds	r5, #1
 800b7a2:	615e      	str	r6, [r3, #20]
 800b7a4:	6125      	str	r5, [r4, #16]
 800b7a6:	4620      	mov	r0, r4
 800b7a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7ac:	0800d30f 	.word	0x0800d30f
 800b7b0:	0800d320 	.word	0x0800d320

0800b7b4 <__hi0bits>:
 800b7b4:	0c03      	lsrs	r3, r0, #16
 800b7b6:	041b      	lsls	r3, r3, #16
 800b7b8:	b9d3      	cbnz	r3, 800b7f0 <__hi0bits+0x3c>
 800b7ba:	0400      	lsls	r0, r0, #16
 800b7bc:	2310      	movs	r3, #16
 800b7be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b7c2:	bf04      	itt	eq
 800b7c4:	0200      	lsleq	r0, r0, #8
 800b7c6:	3308      	addeq	r3, #8
 800b7c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b7cc:	bf04      	itt	eq
 800b7ce:	0100      	lsleq	r0, r0, #4
 800b7d0:	3304      	addeq	r3, #4
 800b7d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b7d6:	bf04      	itt	eq
 800b7d8:	0080      	lsleq	r0, r0, #2
 800b7da:	3302      	addeq	r3, #2
 800b7dc:	2800      	cmp	r0, #0
 800b7de:	db05      	blt.n	800b7ec <__hi0bits+0x38>
 800b7e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b7e4:	f103 0301 	add.w	r3, r3, #1
 800b7e8:	bf08      	it	eq
 800b7ea:	2320      	moveq	r3, #32
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	4770      	bx	lr
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	e7e4      	b.n	800b7be <__hi0bits+0xa>

0800b7f4 <__lo0bits>:
 800b7f4:	6803      	ldr	r3, [r0, #0]
 800b7f6:	f013 0207 	ands.w	r2, r3, #7
 800b7fa:	4601      	mov	r1, r0
 800b7fc:	d00b      	beq.n	800b816 <__lo0bits+0x22>
 800b7fe:	07da      	lsls	r2, r3, #31
 800b800:	d423      	bmi.n	800b84a <__lo0bits+0x56>
 800b802:	0798      	lsls	r0, r3, #30
 800b804:	bf49      	itett	mi
 800b806:	085b      	lsrmi	r3, r3, #1
 800b808:	089b      	lsrpl	r3, r3, #2
 800b80a:	2001      	movmi	r0, #1
 800b80c:	600b      	strmi	r3, [r1, #0]
 800b80e:	bf5c      	itt	pl
 800b810:	600b      	strpl	r3, [r1, #0]
 800b812:	2002      	movpl	r0, #2
 800b814:	4770      	bx	lr
 800b816:	b298      	uxth	r0, r3
 800b818:	b9a8      	cbnz	r0, 800b846 <__lo0bits+0x52>
 800b81a:	0c1b      	lsrs	r3, r3, #16
 800b81c:	2010      	movs	r0, #16
 800b81e:	b2da      	uxtb	r2, r3
 800b820:	b90a      	cbnz	r2, 800b826 <__lo0bits+0x32>
 800b822:	3008      	adds	r0, #8
 800b824:	0a1b      	lsrs	r3, r3, #8
 800b826:	071a      	lsls	r2, r3, #28
 800b828:	bf04      	itt	eq
 800b82a:	091b      	lsreq	r3, r3, #4
 800b82c:	3004      	addeq	r0, #4
 800b82e:	079a      	lsls	r2, r3, #30
 800b830:	bf04      	itt	eq
 800b832:	089b      	lsreq	r3, r3, #2
 800b834:	3002      	addeq	r0, #2
 800b836:	07da      	lsls	r2, r3, #31
 800b838:	d403      	bmi.n	800b842 <__lo0bits+0x4e>
 800b83a:	085b      	lsrs	r3, r3, #1
 800b83c:	f100 0001 	add.w	r0, r0, #1
 800b840:	d005      	beq.n	800b84e <__lo0bits+0x5a>
 800b842:	600b      	str	r3, [r1, #0]
 800b844:	4770      	bx	lr
 800b846:	4610      	mov	r0, r2
 800b848:	e7e9      	b.n	800b81e <__lo0bits+0x2a>
 800b84a:	2000      	movs	r0, #0
 800b84c:	4770      	bx	lr
 800b84e:	2020      	movs	r0, #32
 800b850:	4770      	bx	lr
	...

0800b854 <__i2b>:
 800b854:	b510      	push	{r4, lr}
 800b856:	460c      	mov	r4, r1
 800b858:	2101      	movs	r1, #1
 800b85a:	f7ff ff03 	bl	800b664 <_Balloc>
 800b85e:	4602      	mov	r2, r0
 800b860:	b928      	cbnz	r0, 800b86e <__i2b+0x1a>
 800b862:	4b05      	ldr	r3, [pc, #20]	; (800b878 <__i2b+0x24>)
 800b864:	4805      	ldr	r0, [pc, #20]	; (800b87c <__i2b+0x28>)
 800b866:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b86a:	f000 fce1 	bl	800c230 <__assert_func>
 800b86e:	2301      	movs	r3, #1
 800b870:	6144      	str	r4, [r0, #20]
 800b872:	6103      	str	r3, [r0, #16]
 800b874:	bd10      	pop	{r4, pc}
 800b876:	bf00      	nop
 800b878:	0800d30f 	.word	0x0800d30f
 800b87c:	0800d320 	.word	0x0800d320

0800b880 <__multiply>:
 800b880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b884:	4691      	mov	r9, r2
 800b886:	690a      	ldr	r2, [r1, #16]
 800b888:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b88c:	429a      	cmp	r2, r3
 800b88e:	bfb8      	it	lt
 800b890:	460b      	movlt	r3, r1
 800b892:	460c      	mov	r4, r1
 800b894:	bfbc      	itt	lt
 800b896:	464c      	movlt	r4, r9
 800b898:	4699      	movlt	r9, r3
 800b89a:	6927      	ldr	r7, [r4, #16]
 800b89c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b8a0:	68a3      	ldr	r3, [r4, #8]
 800b8a2:	6861      	ldr	r1, [r4, #4]
 800b8a4:	eb07 060a 	add.w	r6, r7, sl
 800b8a8:	42b3      	cmp	r3, r6
 800b8aa:	b085      	sub	sp, #20
 800b8ac:	bfb8      	it	lt
 800b8ae:	3101      	addlt	r1, #1
 800b8b0:	f7ff fed8 	bl	800b664 <_Balloc>
 800b8b4:	b930      	cbnz	r0, 800b8c4 <__multiply+0x44>
 800b8b6:	4602      	mov	r2, r0
 800b8b8:	4b44      	ldr	r3, [pc, #272]	; (800b9cc <__multiply+0x14c>)
 800b8ba:	4845      	ldr	r0, [pc, #276]	; (800b9d0 <__multiply+0x150>)
 800b8bc:	f240 115d 	movw	r1, #349	; 0x15d
 800b8c0:	f000 fcb6 	bl	800c230 <__assert_func>
 800b8c4:	f100 0514 	add.w	r5, r0, #20
 800b8c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b8cc:	462b      	mov	r3, r5
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	4543      	cmp	r3, r8
 800b8d2:	d321      	bcc.n	800b918 <__multiply+0x98>
 800b8d4:	f104 0314 	add.w	r3, r4, #20
 800b8d8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b8dc:	f109 0314 	add.w	r3, r9, #20
 800b8e0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b8e4:	9202      	str	r2, [sp, #8]
 800b8e6:	1b3a      	subs	r2, r7, r4
 800b8e8:	3a15      	subs	r2, #21
 800b8ea:	f022 0203 	bic.w	r2, r2, #3
 800b8ee:	3204      	adds	r2, #4
 800b8f0:	f104 0115 	add.w	r1, r4, #21
 800b8f4:	428f      	cmp	r7, r1
 800b8f6:	bf38      	it	cc
 800b8f8:	2204      	movcc	r2, #4
 800b8fa:	9201      	str	r2, [sp, #4]
 800b8fc:	9a02      	ldr	r2, [sp, #8]
 800b8fe:	9303      	str	r3, [sp, #12]
 800b900:	429a      	cmp	r2, r3
 800b902:	d80c      	bhi.n	800b91e <__multiply+0x9e>
 800b904:	2e00      	cmp	r6, #0
 800b906:	dd03      	ble.n	800b910 <__multiply+0x90>
 800b908:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d05a      	beq.n	800b9c6 <__multiply+0x146>
 800b910:	6106      	str	r6, [r0, #16]
 800b912:	b005      	add	sp, #20
 800b914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b918:	f843 2b04 	str.w	r2, [r3], #4
 800b91c:	e7d8      	b.n	800b8d0 <__multiply+0x50>
 800b91e:	f8b3 a000 	ldrh.w	sl, [r3]
 800b922:	f1ba 0f00 	cmp.w	sl, #0
 800b926:	d024      	beq.n	800b972 <__multiply+0xf2>
 800b928:	f104 0e14 	add.w	lr, r4, #20
 800b92c:	46a9      	mov	r9, r5
 800b92e:	f04f 0c00 	mov.w	ip, #0
 800b932:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b936:	f8d9 1000 	ldr.w	r1, [r9]
 800b93a:	fa1f fb82 	uxth.w	fp, r2
 800b93e:	b289      	uxth	r1, r1
 800b940:	fb0a 110b 	mla	r1, sl, fp, r1
 800b944:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b948:	f8d9 2000 	ldr.w	r2, [r9]
 800b94c:	4461      	add	r1, ip
 800b94e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b952:	fb0a c20b 	mla	r2, sl, fp, ip
 800b956:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b95a:	b289      	uxth	r1, r1
 800b95c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b960:	4577      	cmp	r7, lr
 800b962:	f849 1b04 	str.w	r1, [r9], #4
 800b966:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b96a:	d8e2      	bhi.n	800b932 <__multiply+0xb2>
 800b96c:	9a01      	ldr	r2, [sp, #4]
 800b96e:	f845 c002 	str.w	ip, [r5, r2]
 800b972:	9a03      	ldr	r2, [sp, #12]
 800b974:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b978:	3304      	adds	r3, #4
 800b97a:	f1b9 0f00 	cmp.w	r9, #0
 800b97e:	d020      	beq.n	800b9c2 <__multiply+0x142>
 800b980:	6829      	ldr	r1, [r5, #0]
 800b982:	f104 0c14 	add.w	ip, r4, #20
 800b986:	46ae      	mov	lr, r5
 800b988:	f04f 0a00 	mov.w	sl, #0
 800b98c:	f8bc b000 	ldrh.w	fp, [ip]
 800b990:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b994:	fb09 220b 	mla	r2, r9, fp, r2
 800b998:	4492      	add	sl, r2
 800b99a:	b289      	uxth	r1, r1
 800b99c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b9a0:	f84e 1b04 	str.w	r1, [lr], #4
 800b9a4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b9a8:	f8be 1000 	ldrh.w	r1, [lr]
 800b9ac:	0c12      	lsrs	r2, r2, #16
 800b9ae:	fb09 1102 	mla	r1, r9, r2, r1
 800b9b2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b9b6:	4567      	cmp	r7, ip
 800b9b8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b9bc:	d8e6      	bhi.n	800b98c <__multiply+0x10c>
 800b9be:	9a01      	ldr	r2, [sp, #4]
 800b9c0:	50a9      	str	r1, [r5, r2]
 800b9c2:	3504      	adds	r5, #4
 800b9c4:	e79a      	b.n	800b8fc <__multiply+0x7c>
 800b9c6:	3e01      	subs	r6, #1
 800b9c8:	e79c      	b.n	800b904 <__multiply+0x84>
 800b9ca:	bf00      	nop
 800b9cc:	0800d30f 	.word	0x0800d30f
 800b9d0:	0800d320 	.word	0x0800d320

0800b9d4 <__pow5mult>:
 800b9d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9d8:	4615      	mov	r5, r2
 800b9da:	f012 0203 	ands.w	r2, r2, #3
 800b9de:	4606      	mov	r6, r0
 800b9e0:	460f      	mov	r7, r1
 800b9e2:	d007      	beq.n	800b9f4 <__pow5mult+0x20>
 800b9e4:	4c25      	ldr	r4, [pc, #148]	; (800ba7c <__pow5mult+0xa8>)
 800b9e6:	3a01      	subs	r2, #1
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b9ee:	f7ff fe9b 	bl	800b728 <__multadd>
 800b9f2:	4607      	mov	r7, r0
 800b9f4:	10ad      	asrs	r5, r5, #2
 800b9f6:	d03d      	beq.n	800ba74 <__pow5mult+0xa0>
 800b9f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b9fa:	b97c      	cbnz	r4, 800ba1c <__pow5mult+0x48>
 800b9fc:	2010      	movs	r0, #16
 800b9fe:	f7ff fe29 	bl	800b654 <malloc>
 800ba02:	4602      	mov	r2, r0
 800ba04:	6270      	str	r0, [r6, #36]	; 0x24
 800ba06:	b928      	cbnz	r0, 800ba14 <__pow5mult+0x40>
 800ba08:	4b1d      	ldr	r3, [pc, #116]	; (800ba80 <__pow5mult+0xac>)
 800ba0a:	481e      	ldr	r0, [pc, #120]	; (800ba84 <__pow5mult+0xb0>)
 800ba0c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ba10:	f000 fc0e 	bl	800c230 <__assert_func>
 800ba14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ba18:	6004      	str	r4, [r0, #0]
 800ba1a:	60c4      	str	r4, [r0, #12]
 800ba1c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ba20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ba24:	b94c      	cbnz	r4, 800ba3a <__pow5mult+0x66>
 800ba26:	f240 2171 	movw	r1, #625	; 0x271
 800ba2a:	4630      	mov	r0, r6
 800ba2c:	f7ff ff12 	bl	800b854 <__i2b>
 800ba30:	2300      	movs	r3, #0
 800ba32:	f8c8 0008 	str.w	r0, [r8, #8]
 800ba36:	4604      	mov	r4, r0
 800ba38:	6003      	str	r3, [r0, #0]
 800ba3a:	f04f 0900 	mov.w	r9, #0
 800ba3e:	07eb      	lsls	r3, r5, #31
 800ba40:	d50a      	bpl.n	800ba58 <__pow5mult+0x84>
 800ba42:	4639      	mov	r1, r7
 800ba44:	4622      	mov	r2, r4
 800ba46:	4630      	mov	r0, r6
 800ba48:	f7ff ff1a 	bl	800b880 <__multiply>
 800ba4c:	4639      	mov	r1, r7
 800ba4e:	4680      	mov	r8, r0
 800ba50:	4630      	mov	r0, r6
 800ba52:	f7ff fe47 	bl	800b6e4 <_Bfree>
 800ba56:	4647      	mov	r7, r8
 800ba58:	106d      	asrs	r5, r5, #1
 800ba5a:	d00b      	beq.n	800ba74 <__pow5mult+0xa0>
 800ba5c:	6820      	ldr	r0, [r4, #0]
 800ba5e:	b938      	cbnz	r0, 800ba70 <__pow5mult+0x9c>
 800ba60:	4622      	mov	r2, r4
 800ba62:	4621      	mov	r1, r4
 800ba64:	4630      	mov	r0, r6
 800ba66:	f7ff ff0b 	bl	800b880 <__multiply>
 800ba6a:	6020      	str	r0, [r4, #0]
 800ba6c:	f8c0 9000 	str.w	r9, [r0]
 800ba70:	4604      	mov	r4, r0
 800ba72:	e7e4      	b.n	800ba3e <__pow5mult+0x6a>
 800ba74:	4638      	mov	r0, r7
 800ba76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba7a:	bf00      	nop
 800ba7c:	0800d470 	.word	0x0800d470
 800ba80:	0800d29d 	.word	0x0800d29d
 800ba84:	0800d320 	.word	0x0800d320

0800ba88 <__lshift>:
 800ba88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba8c:	460c      	mov	r4, r1
 800ba8e:	6849      	ldr	r1, [r1, #4]
 800ba90:	6923      	ldr	r3, [r4, #16]
 800ba92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ba96:	68a3      	ldr	r3, [r4, #8]
 800ba98:	4607      	mov	r7, r0
 800ba9a:	4691      	mov	r9, r2
 800ba9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800baa0:	f108 0601 	add.w	r6, r8, #1
 800baa4:	42b3      	cmp	r3, r6
 800baa6:	db0b      	blt.n	800bac0 <__lshift+0x38>
 800baa8:	4638      	mov	r0, r7
 800baaa:	f7ff fddb 	bl	800b664 <_Balloc>
 800baae:	4605      	mov	r5, r0
 800bab0:	b948      	cbnz	r0, 800bac6 <__lshift+0x3e>
 800bab2:	4602      	mov	r2, r0
 800bab4:	4b2a      	ldr	r3, [pc, #168]	; (800bb60 <__lshift+0xd8>)
 800bab6:	482b      	ldr	r0, [pc, #172]	; (800bb64 <__lshift+0xdc>)
 800bab8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800babc:	f000 fbb8 	bl	800c230 <__assert_func>
 800bac0:	3101      	adds	r1, #1
 800bac2:	005b      	lsls	r3, r3, #1
 800bac4:	e7ee      	b.n	800baa4 <__lshift+0x1c>
 800bac6:	2300      	movs	r3, #0
 800bac8:	f100 0114 	add.w	r1, r0, #20
 800bacc:	f100 0210 	add.w	r2, r0, #16
 800bad0:	4618      	mov	r0, r3
 800bad2:	4553      	cmp	r3, sl
 800bad4:	db37      	blt.n	800bb46 <__lshift+0xbe>
 800bad6:	6920      	ldr	r0, [r4, #16]
 800bad8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800badc:	f104 0314 	add.w	r3, r4, #20
 800bae0:	f019 091f 	ands.w	r9, r9, #31
 800bae4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bae8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800baec:	d02f      	beq.n	800bb4e <__lshift+0xc6>
 800baee:	f1c9 0e20 	rsb	lr, r9, #32
 800baf2:	468a      	mov	sl, r1
 800baf4:	f04f 0c00 	mov.w	ip, #0
 800baf8:	681a      	ldr	r2, [r3, #0]
 800bafa:	fa02 f209 	lsl.w	r2, r2, r9
 800bafe:	ea42 020c 	orr.w	r2, r2, ip
 800bb02:	f84a 2b04 	str.w	r2, [sl], #4
 800bb06:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb0a:	4298      	cmp	r0, r3
 800bb0c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bb10:	d8f2      	bhi.n	800baf8 <__lshift+0x70>
 800bb12:	1b03      	subs	r3, r0, r4
 800bb14:	3b15      	subs	r3, #21
 800bb16:	f023 0303 	bic.w	r3, r3, #3
 800bb1a:	3304      	adds	r3, #4
 800bb1c:	f104 0215 	add.w	r2, r4, #21
 800bb20:	4290      	cmp	r0, r2
 800bb22:	bf38      	it	cc
 800bb24:	2304      	movcc	r3, #4
 800bb26:	f841 c003 	str.w	ip, [r1, r3]
 800bb2a:	f1bc 0f00 	cmp.w	ip, #0
 800bb2e:	d001      	beq.n	800bb34 <__lshift+0xac>
 800bb30:	f108 0602 	add.w	r6, r8, #2
 800bb34:	3e01      	subs	r6, #1
 800bb36:	4638      	mov	r0, r7
 800bb38:	612e      	str	r6, [r5, #16]
 800bb3a:	4621      	mov	r1, r4
 800bb3c:	f7ff fdd2 	bl	800b6e4 <_Bfree>
 800bb40:	4628      	mov	r0, r5
 800bb42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb46:	f842 0f04 	str.w	r0, [r2, #4]!
 800bb4a:	3301      	adds	r3, #1
 800bb4c:	e7c1      	b.n	800bad2 <__lshift+0x4a>
 800bb4e:	3904      	subs	r1, #4
 800bb50:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb54:	f841 2f04 	str.w	r2, [r1, #4]!
 800bb58:	4298      	cmp	r0, r3
 800bb5a:	d8f9      	bhi.n	800bb50 <__lshift+0xc8>
 800bb5c:	e7ea      	b.n	800bb34 <__lshift+0xac>
 800bb5e:	bf00      	nop
 800bb60:	0800d30f 	.word	0x0800d30f
 800bb64:	0800d320 	.word	0x0800d320

0800bb68 <__mcmp>:
 800bb68:	b530      	push	{r4, r5, lr}
 800bb6a:	6902      	ldr	r2, [r0, #16]
 800bb6c:	690c      	ldr	r4, [r1, #16]
 800bb6e:	1b12      	subs	r2, r2, r4
 800bb70:	d10e      	bne.n	800bb90 <__mcmp+0x28>
 800bb72:	f100 0314 	add.w	r3, r0, #20
 800bb76:	3114      	adds	r1, #20
 800bb78:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bb7c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bb80:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bb84:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bb88:	42a5      	cmp	r5, r4
 800bb8a:	d003      	beq.n	800bb94 <__mcmp+0x2c>
 800bb8c:	d305      	bcc.n	800bb9a <__mcmp+0x32>
 800bb8e:	2201      	movs	r2, #1
 800bb90:	4610      	mov	r0, r2
 800bb92:	bd30      	pop	{r4, r5, pc}
 800bb94:	4283      	cmp	r3, r0
 800bb96:	d3f3      	bcc.n	800bb80 <__mcmp+0x18>
 800bb98:	e7fa      	b.n	800bb90 <__mcmp+0x28>
 800bb9a:	f04f 32ff 	mov.w	r2, #4294967295
 800bb9e:	e7f7      	b.n	800bb90 <__mcmp+0x28>

0800bba0 <__mdiff>:
 800bba0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bba4:	460c      	mov	r4, r1
 800bba6:	4606      	mov	r6, r0
 800bba8:	4611      	mov	r1, r2
 800bbaa:	4620      	mov	r0, r4
 800bbac:	4690      	mov	r8, r2
 800bbae:	f7ff ffdb 	bl	800bb68 <__mcmp>
 800bbb2:	1e05      	subs	r5, r0, #0
 800bbb4:	d110      	bne.n	800bbd8 <__mdiff+0x38>
 800bbb6:	4629      	mov	r1, r5
 800bbb8:	4630      	mov	r0, r6
 800bbba:	f7ff fd53 	bl	800b664 <_Balloc>
 800bbbe:	b930      	cbnz	r0, 800bbce <__mdiff+0x2e>
 800bbc0:	4b3a      	ldr	r3, [pc, #232]	; (800bcac <__mdiff+0x10c>)
 800bbc2:	4602      	mov	r2, r0
 800bbc4:	f240 2132 	movw	r1, #562	; 0x232
 800bbc8:	4839      	ldr	r0, [pc, #228]	; (800bcb0 <__mdiff+0x110>)
 800bbca:	f000 fb31 	bl	800c230 <__assert_func>
 800bbce:	2301      	movs	r3, #1
 800bbd0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bbd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbd8:	bfa4      	itt	ge
 800bbda:	4643      	movge	r3, r8
 800bbdc:	46a0      	movge	r8, r4
 800bbde:	4630      	mov	r0, r6
 800bbe0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bbe4:	bfa6      	itte	ge
 800bbe6:	461c      	movge	r4, r3
 800bbe8:	2500      	movge	r5, #0
 800bbea:	2501      	movlt	r5, #1
 800bbec:	f7ff fd3a 	bl	800b664 <_Balloc>
 800bbf0:	b920      	cbnz	r0, 800bbfc <__mdiff+0x5c>
 800bbf2:	4b2e      	ldr	r3, [pc, #184]	; (800bcac <__mdiff+0x10c>)
 800bbf4:	4602      	mov	r2, r0
 800bbf6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bbfa:	e7e5      	b.n	800bbc8 <__mdiff+0x28>
 800bbfc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bc00:	6926      	ldr	r6, [r4, #16]
 800bc02:	60c5      	str	r5, [r0, #12]
 800bc04:	f104 0914 	add.w	r9, r4, #20
 800bc08:	f108 0514 	add.w	r5, r8, #20
 800bc0c:	f100 0e14 	add.w	lr, r0, #20
 800bc10:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bc14:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bc18:	f108 0210 	add.w	r2, r8, #16
 800bc1c:	46f2      	mov	sl, lr
 800bc1e:	2100      	movs	r1, #0
 800bc20:	f859 3b04 	ldr.w	r3, [r9], #4
 800bc24:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bc28:	fa1f f883 	uxth.w	r8, r3
 800bc2c:	fa11 f18b 	uxtah	r1, r1, fp
 800bc30:	0c1b      	lsrs	r3, r3, #16
 800bc32:	eba1 0808 	sub.w	r8, r1, r8
 800bc36:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bc3a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bc3e:	fa1f f888 	uxth.w	r8, r8
 800bc42:	1419      	asrs	r1, r3, #16
 800bc44:	454e      	cmp	r6, r9
 800bc46:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bc4a:	f84a 3b04 	str.w	r3, [sl], #4
 800bc4e:	d8e7      	bhi.n	800bc20 <__mdiff+0x80>
 800bc50:	1b33      	subs	r3, r6, r4
 800bc52:	3b15      	subs	r3, #21
 800bc54:	f023 0303 	bic.w	r3, r3, #3
 800bc58:	3304      	adds	r3, #4
 800bc5a:	3415      	adds	r4, #21
 800bc5c:	42a6      	cmp	r6, r4
 800bc5e:	bf38      	it	cc
 800bc60:	2304      	movcc	r3, #4
 800bc62:	441d      	add	r5, r3
 800bc64:	4473      	add	r3, lr
 800bc66:	469e      	mov	lr, r3
 800bc68:	462e      	mov	r6, r5
 800bc6a:	4566      	cmp	r6, ip
 800bc6c:	d30e      	bcc.n	800bc8c <__mdiff+0xec>
 800bc6e:	f10c 0203 	add.w	r2, ip, #3
 800bc72:	1b52      	subs	r2, r2, r5
 800bc74:	f022 0203 	bic.w	r2, r2, #3
 800bc78:	3d03      	subs	r5, #3
 800bc7a:	45ac      	cmp	ip, r5
 800bc7c:	bf38      	it	cc
 800bc7e:	2200      	movcc	r2, #0
 800bc80:	441a      	add	r2, r3
 800bc82:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bc86:	b17b      	cbz	r3, 800bca8 <__mdiff+0x108>
 800bc88:	6107      	str	r7, [r0, #16]
 800bc8a:	e7a3      	b.n	800bbd4 <__mdiff+0x34>
 800bc8c:	f856 8b04 	ldr.w	r8, [r6], #4
 800bc90:	fa11 f288 	uxtah	r2, r1, r8
 800bc94:	1414      	asrs	r4, r2, #16
 800bc96:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bc9a:	b292      	uxth	r2, r2
 800bc9c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bca0:	f84e 2b04 	str.w	r2, [lr], #4
 800bca4:	1421      	asrs	r1, r4, #16
 800bca6:	e7e0      	b.n	800bc6a <__mdiff+0xca>
 800bca8:	3f01      	subs	r7, #1
 800bcaa:	e7ea      	b.n	800bc82 <__mdiff+0xe2>
 800bcac:	0800d30f 	.word	0x0800d30f
 800bcb0:	0800d320 	.word	0x0800d320

0800bcb4 <__d2b>:
 800bcb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bcb8:	4689      	mov	r9, r1
 800bcba:	2101      	movs	r1, #1
 800bcbc:	ec57 6b10 	vmov	r6, r7, d0
 800bcc0:	4690      	mov	r8, r2
 800bcc2:	f7ff fccf 	bl	800b664 <_Balloc>
 800bcc6:	4604      	mov	r4, r0
 800bcc8:	b930      	cbnz	r0, 800bcd8 <__d2b+0x24>
 800bcca:	4602      	mov	r2, r0
 800bccc:	4b25      	ldr	r3, [pc, #148]	; (800bd64 <__d2b+0xb0>)
 800bcce:	4826      	ldr	r0, [pc, #152]	; (800bd68 <__d2b+0xb4>)
 800bcd0:	f240 310a 	movw	r1, #778	; 0x30a
 800bcd4:	f000 faac 	bl	800c230 <__assert_func>
 800bcd8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bcdc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bce0:	bb35      	cbnz	r5, 800bd30 <__d2b+0x7c>
 800bce2:	2e00      	cmp	r6, #0
 800bce4:	9301      	str	r3, [sp, #4]
 800bce6:	d028      	beq.n	800bd3a <__d2b+0x86>
 800bce8:	4668      	mov	r0, sp
 800bcea:	9600      	str	r6, [sp, #0]
 800bcec:	f7ff fd82 	bl	800b7f4 <__lo0bits>
 800bcf0:	9900      	ldr	r1, [sp, #0]
 800bcf2:	b300      	cbz	r0, 800bd36 <__d2b+0x82>
 800bcf4:	9a01      	ldr	r2, [sp, #4]
 800bcf6:	f1c0 0320 	rsb	r3, r0, #32
 800bcfa:	fa02 f303 	lsl.w	r3, r2, r3
 800bcfe:	430b      	orrs	r3, r1
 800bd00:	40c2      	lsrs	r2, r0
 800bd02:	6163      	str	r3, [r4, #20]
 800bd04:	9201      	str	r2, [sp, #4]
 800bd06:	9b01      	ldr	r3, [sp, #4]
 800bd08:	61a3      	str	r3, [r4, #24]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	bf14      	ite	ne
 800bd0e:	2202      	movne	r2, #2
 800bd10:	2201      	moveq	r2, #1
 800bd12:	6122      	str	r2, [r4, #16]
 800bd14:	b1d5      	cbz	r5, 800bd4c <__d2b+0x98>
 800bd16:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bd1a:	4405      	add	r5, r0
 800bd1c:	f8c9 5000 	str.w	r5, [r9]
 800bd20:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bd24:	f8c8 0000 	str.w	r0, [r8]
 800bd28:	4620      	mov	r0, r4
 800bd2a:	b003      	add	sp, #12
 800bd2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd34:	e7d5      	b.n	800bce2 <__d2b+0x2e>
 800bd36:	6161      	str	r1, [r4, #20]
 800bd38:	e7e5      	b.n	800bd06 <__d2b+0x52>
 800bd3a:	a801      	add	r0, sp, #4
 800bd3c:	f7ff fd5a 	bl	800b7f4 <__lo0bits>
 800bd40:	9b01      	ldr	r3, [sp, #4]
 800bd42:	6163      	str	r3, [r4, #20]
 800bd44:	2201      	movs	r2, #1
 800bd46:	6122      	str	r2, [r4, #16]
 800bd48:	3020      	adds	r0, #32
 800bd4a:	e7e3      	b.n	800bd14 <__d2b+0x60>
 800bd4c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bd50:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bd54:	f8c9 0000 	str.w	r0, [r9]
 800bd58:	6918      	ldr	r0, [r3, #16]
 800bd5a:	f7ff fd2b 	bl	800b7b4 <__hi0bits>
 800bd5e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bd62:	e7df      	b.n	800bd24 <__d2b+0x70>
 800bd64:	0800d30f 	.word	0x0800d30f
 800bd68:	0800d320 	.word	0x0800d320

0800bd6c <_calloc_r>:
 800bd6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bd6e:	fba1 2402 	umull	r2, r4, r1, r2
 800bd72:	b94c      	cbnz	r4, 800bd88 <_calloc_r+0x1c>
 800bd74:	4611      	mov	r1, r2
 800bd76:	9201      	str	r2, [sp, #4]
 800bd78:	f000 f87a 	bl	800be70 <_malloc_r>
 800bd7c:	9a01      	ldr	r2, [sp, #4]
 800bd7e:	4605      	mov	r5, r0
 800bd80:	b930      	cbnz	r0, 800bd90 <_calloc_r+0x24>
 800bd82:	4628      	mov	r0, r5
 800bd84:	b003      	add	sp, #12
 800bd86:	bd30      	pop	{r4, r5, pc}
 800bd88:	220c      	movs	r2, #12
 800bd8a:	6002      	str	r2, [r0, #0]
 800bd8c:	2500      	movs	r5, #0
 800bd8e:	e7f8      	b.n	800bd82 <_calloc_r+0x16>
 800bd90:	4621      	mov	r1, r4
 800bd92:	f7fe f939 	bl	800a008 <memset>
 800bd96:	e7f4      	b.n	800bd82 <_calloc_r+0x16>

0800bd98 <_free_r>:
 800bd98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bd9a:	2900      	cmp	r1, #0
 800bd9c:	d044      	beq.n	800be28 <_free_r+0x90>
 800bd9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bda2:	9001      	str	r0, [sp, #4]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	f1a1 0404 	sub.w	r4, r1, #4
 800bdaa:	bfb8      	it	lt
 800bdac:	18e4      	addlt	r4, r4, r3
 800bdae:	f000 fa9b 	bl	800c2e8 <__malloc_lock>
 800bdb2:	4a1e      	ldr	r2, [pc, #120]	; (800be2c <_free_r+0x94>)
 800bdb4:	9801      	ldr	r0, [sp, #4]
 800bdb6:	6813      	ldr	r3, [r2, #0]
 800bdb8:	b933      	cbnz	r3, 800bdc8 <_free_r+0x30>
 800bdba:	6063      	str	r3, [r4, #4]
 800bdbc:	6014      	str	r4, [r2, #0]
 800bdbe:	b003      	add	sp, #12
 800bdc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bdc4:	f000 ba96 	b.w	800c2f4 <__malloc_unlock>
 800bdc8:	42a3      	cmp	r3, r4
 800bdca:	d908      	bls.n	800bdde <_free_r+0x46>
 800bdcc:	6825      	ldr	r5, [r4, #0]
 800bdce:	1961      	adds	r1, r4, r5
 800bdd0:	428b      	cmp	r3, r1
 800bdd2:	bf01      	itttt	eq
 800bdd4:	6819      	ldreq	r1, [r3, #0]
 800bdd6:	685b      	ldreq	r3, [r3, #4]
 800bdd8:	1949      	addeq	r1, r1, r5
 800bdda:	6021      	streq	r1, [r4, #0]
 800bddc:	e7ed      	b.n	800bdba <_free_r+0x22>
 800bdde:	461a      	mov	r2, r3
 800bde0:	685b      	ldr	r3, [r3, #4]
 800bde2:	b10b      	cbz	r3, 800bde8 <_free_r+0x50>
 800bde4:	42a3      	cmp	r3, r4
 800bde6:	d9fa      	bls.n	800bdde <_free_r+0x46>
 800bde8:	6811      	ldr	r1, [r2, #0]
 800bdea:	1855      	adds	r5, r2, r1
 800bdec:	42a5      	cmp	r5, r4
 800bdee:	d10b      	bne.n	800be08 <_free_r+0x70>
 800bdf0:	6824      	ldr	r4, [r4, #0]
 800bdf2:	4421      	add	r1, r4
 800bdf4:	1854      	adds	r4, r2, r1
 800bdf6:	42a3      	cmp	r3, r4
 800bdf8:	6011      	str	r1, [r2, #0]
 800bdfa:	d1e0      	bne.n	800bdbe <_free_r+0x26>
 800bdfc:	681c      	ldr	r4, [r3, #0]
 800bdfe:	685b      	ldr	r3, [r3, #4]
 800be00:	6053      	str	r3, [r2, #4]
 800be02:	4421      	add	r1, r4
 800be04:	6011      	str	r1, [r2, #0]
 800be06:	e7da      	b.n	800bdbe <_free_r+0x26>
 800be08:	d902      	bls.n	800be10 <_free_r+0x78>
 800be0a:	230c      	movs	r3, #12
 800be0c:	6003      	str	r3, [r0, #0]
 800be0e:	e7d6      	b.n	800bdbe <_free_r+0x26>
 800be10:	6825      	ldr	r5, [r4, #0]
 800be12:	1961      	adds	r1, r4, r5
 800be14:	428b      	cmp	r3, r1
 800be16:	bf04      	itt	eq
 800be18:	6819      	ldreq	r1, [r3, #0]
 800be1a:	685b      	ldreq	r3, [r3, #4]
 800be1c:	6063      	str	r3, [r4, #4]
 800be1e:	bf04      	itt	eq
 800be20:	1949      	addeq	r1, r1, r5
 800be22:	6021      	streq	r1, [r4, #0]
 800be24:	6054      	str	r4, [r2, #4]
 800be26:	e7ca      	b.n	800bdbe <_free_r+0x26>
 800be28:	b003      	add	sp, #12
 800be2a:	bd30      	pop	{r4, r5, pc}
 800be2c:	20013144 	.word	0x20013144

0800be30 <sbrk_aligned>:
 800be30:	b570      	push	{r4, r5, r6, lr}
 800be32:	4e0e      	ldr	r6, [pc, #56]	; (800be6c <sbrk_aligned+0x3c>)
 800be34:	460c      	mov	r4, r1
 800be36:	6831      	ldr	r1, [r6, #0]
 800be38:	4605      	mov	r5, r0
 800be3a:	b911      	cbnz	r1, 800be42 <sbrk_aligned+0x12>
 800be3c:	f000 f9e8 	bl	800c210 <_sbrk_r>
 800be40:	6030      	str	r0, [r6, #0]
 800be42:	4621      	mov	r1, r4
 800be44:	4628      	mov	r0, r5
 800be46:	f000 f9e3 	bl	800c210 <_sbrk_r>
 800be4a:	1c43      	adds	r3, r0, #1
 800be4c:	d00a      	beq.n	800be64 <sbrk_aligned+0x34>
 800be4e:	1cc4      	adds	r4, r0, #3
 800be50:	f024 0403 	bic.w	r4, r4, #3
 800be54:	42a0      	cmp	r0, r4
 800be56:	d007      	beq.n	800be68 <sbrk_aligned+0x38>
 800be58:	1a21      	subs	r1, r4, r0
 800be5a:	4628      	mov	r0, r5
 800be5c:	f000 f9d8 	bl	800c210 <_sbrk_r>
 800be60:	3001      	adds	r0, #1
 800be62:	d101      	bne.n	800be68 <sbrk_aligned+0x38>
 800be64:	f04f 34ff 	mov.w	r4, #4294967295
 800be68:	4620      	mov	r0, r4
 800be6a:	bd70      	pop	{r4, r5, r6, pc}
 800be6c:	20013148 	.word	0x20013148

0800be70 <_malloc_r>:
 800be70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be74:	1ccd      	adds	r5, r1, #3
 800be76:	f025 0503 	bic.w	r5, r5, #3
 800be7a:	3508      	adds	r5, #8
 800be7c:	2d0c      	cmp	r5, #12
 800be7e:	bf38      	it	cc
 800be80:	250c      	movcc	r5, #12
 800be82:	2d00      	cmp	r5, #0
 800be84:	4607      	mov	r7, r0
 800be86:	db01      	blt.n	800be8c <_malloc_r+0x1c>
 800be88:	42a9      	cmp	r1, r5
 800be8a:	d905      	bls.n	800be98 <_malloc_r+0x28>
 800be8c:	230c      	movs	r3, #12
 800be8e:	603b      	str	r3, [r7, #0]
 800be90:	2600      	movs	r6, #0
 800be92:	4630      	mov	r0, r6
 800be94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be98:	4e2e      	ldr	r6, [pc, #184]	; (800bf54 <_malloc_r+0xe4>)
 800be9a:	f000 fa25 	bl	800c2e8 <__malloc_lock>
 800be9e:	6833      	ldr	r3, [r6, #0]
 800bea0:	461c      	mov	r4, r3
 800bea2:	bb34      	cbnz	r4, 800bef2 <_malloc_r+0x82>
 800bea4:	4629      	mov	r1, r5
 800bea6:	4638      	mov	r0, r7
 800bea8:	f7ff ffc2 	bl	800be30 <sbrk_aligned>
 800beac:	1c43      	adds	r3, r0, #1
 800beae:	4604      	mov	r4, r0
 800beb0:	d14d      	bne.n	800bf4e <_malloc_r+0xde>
 800beb2:	6834      	ldr	r4, [r6, #0]
 800beb4:	4626      	mov	r6, r4
 800beb6:	2e00      	cmp	r6, #0
 800beb8:	d140      	bne.n	800bf3c <_malloc_r+0xcc>
 800beba:	6823      	ldr	r3, [r4, #0]
 800bebc:	4631      	mov	r1, r6
 800bebe:	4638      	mov	r0, r7
 800bec0:	eb04 0803 	add.w	r8, r4, r3
 800bec4:	f000 f9a4 	bl	800c210 <_sbrk_r>
 800bec8:	4580      	cmp	r8, r0
 800beca:	d13a      	bne.n	800bf42 <_malloc_r+0xd2>
 800becc:	6821      	ldr	r1, [r4, #0]
 800bece:	3503      	adds	r5, #3
 800bed0:	1a6d      	subs	r5, r5, r1
 800bed2:	f025 0503 	bic.w	r5, r5, #3
 800bed6:	3508      	adds	r5, #8
 800bed8:	2d0c      	cmp	r5, #12
 800beda:	bf38      	it	cc
 800bedc:	250c      	movcc	r5, #12
 800bede:	4629      	mov	r1, r5
 800bee0:	4638      	mov	r0, r7
 800bee2:	f7ff ffa5 	bl	800be30 <sbrk_aligned>
 800bee6:	3001      	adds	r0, #1
 800bee8:	d02b      	beq.n	800bf42 <_malloc_r+0xd2>
 800beea:	6823      	ldr	r3, [r4, #0]
 800beec:	442b      	add	r3, r5
 800beee:	6023      	str	r3, [r4, #0]
 800bef0:	e00e      	b.n	800bf10 <_malloc_r+0xa0>
 800bef2:	6822      	ldr	r2, [r4, #0]
 800bef4:	1b52      	subs	r2, r2, r5
 800bef6:	d41e      	bmi.n	800bf36 <_malloc_r+0xc6>
 800bef8:	2a0b      	cmp	r2, #11
 800befa:	d916      	bls.n	800bf2a <_malloc_r+0xba>
 800befc:	1961      	adds	r1, r4, r5
 800befe:	42a3      	cmp	r3, r4
 800bf00:	6025      	str	r5, [r4, #0]
 800bf02:	bf18      	it	ne
 800bf04:	6059      	strne	r1, [r3, #4]
 800bf06:	6863      	ldr	r3, [r4, #4]
 800bf08:	bf08      	it	eq
 800bf0a:	6031      	streq	r1, [r6, #0]
 800bf0c:	5162      	str	r2, [r4, r5]
 800bf0e:	604b      	str	r3, [r1, #4]
 800bf10:	4638      	mov	r0, r7
 800bf12:	f104 060b 	add.w	r6, r4, #11
 800bf16:	f000 f9ed 	bl	800c2f4 <__malloc_unlock>
 800bf1a:	f026 0607 	bic.w	r6, r6, #7
 800bf1e:	1d23      	adds	r3, r4, #4
 800bf20:	1af2      	subs	r2, r6, r3
 800bf22:	d0b6      	beq.n	800be92 <_malloc_r+0x22>
 800bf24:	1b9b      	subs	r3, r3, r6
 800bf26:	50a3      	str	r3, [r4, r2]
 800bf28:	e7b3      	b.n	800be92 <_malloc_r+0x22>
 800bf2a:	6862      	ldr	r2, [r4, #4]
 800bf2c:	42a3      	cmp	r3, r4
 800bf2e:	bf0c      	ite	eq
 800bf30:	6032      	streq	r2, [r6, #0]
 800bf32:	605a      	strne	r2, [r3, #4]
 800bf34:	e7ec      	b.n	800bf10 <_malloc_r+0xa0>
 800bf36:	4623      	mov	r3, r4
 800bf38:	6864      	ldr	r4, [r4, #4]
 800bf3a:	e7b2      	b.n	800bea2 <_malloc_r+0x32>
 800bf3c:	4634      	mov	r4, r6
 800bf3e:	6876      	ldr	r6, [r6, #4]
 800bf40:	e7b9      	b.n	800beb6 <_malloc_r+0x46>
 800bf42:	230c      	movs	r3, #12
 800bf44:	603b      	str	r3, [r7, #0]
 800bf46:	4638      	mov	r0, r7
 800bf48:	f000 f9d4 	bl	800c2f4 <__malloc_unlock>
 800bf4c:	e7a1      	b.n	800be92 <_malloc_r+0x22>
 800bf4e:	6025      	str	r5, [r4, #0]
 800bf50:	e7de      	b.n	800bf10 <_malloc_r+0xa0>
 800bf52:	bf00      	nop
 800bf54:	20013144 	.word	0x20013144

0800bf58 <__ssputs_r>:
 800bf58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf5c:	688e      	ldr	r6, [r1, #8]
 800bf5e:	429e      	cmp	r6, r3
 800bf60:	4682      	mov	sl, r0
 800bf62:	460c      	mov	r4, r1
 800bf64:	4690      	mov	r8, r2
 800bf66:	461f      	mov	r7, r3
 800bf68:	d838      	bhi.n	800bfdc <__ssputs_r+0x84>
 800bf6a:	898a      	ldrh	r2, [r1, #12]
 800bf6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bf70:	d032      	beq.n	800bfd8 <__ssputs_r+0x80>
 800bf72:	6825      	ldr	r5, [r4, #0]
 800bf74:	6909      	ldr	r1, [r1, #16]
 800bf76:	eba5 0901 	sub.w	r9, r5, r1
 800bf7a:	6965      	ldr	r5, [r4, #20]
 800bf7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bf80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bf84:	3301      	adds	r3, #1
 800bf86:	444b      	add	r3, r9
 800bf88:	106d      	asrs	r5, r5, #1
 800bf8a:	429d      	cmp	r5, r3
 800bf8c:	bf38      	it	cc
 800bf8e:	461d      	movcc	r5, r3
 800bf90:	0553      	lsls	r3, r2, #21
 800bf92:	d531      	bpl.n	800bff8 <__ssputs_r+0xa0>
 800bf94:	4629      	mov	r1, r5
 800bf96:	f7ff ff6b 	bl	800be70 <_malloc_r>
 800bf9a:	4606      	mov	r6, r0
 800bf9c:	b950      	cbnz	r0, 800bfb4 <__ssputs_r+0x5c>
 800bf9e:	230c      	movs	r3, #12
 800bfa0:	f8ca 3000 	str.w	r3, [sl]
 800bfa4:	89a3      	ldrh	r3, [r4, #12]
 800bfa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfaa:	81a3      	strh	r3, [r4, #12]
 800bfac:	f04f 30ff 	mov.w	r0, #4294967295
 800bfb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfb4:	6921      	ldr	r1, [r4, #16]
 800bfb6:	464a      	mov	r2, r9
 800bfb8:	f7fe f818 	bl	8009fec <memcpy>
 800bfbc:	89a3      	ldrh	r3, [r4, #12]
 800bfbe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bfc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfc6:	81a3      	strh	r3, [r4, #12]
 800bfc8:	6126      	str	r6, [r4, #16]
 800bfca:	6165      	str	r5, [r4, #20]
 800bfcc:	444e      	add	r6, r9
 800bfce:	eba5 0509 	sub.w	r5, r5, r9
 800bfd2:	6026      	str	r6, [r4, #0]
 800bfd4:	60a5      	str	r5, [r4, #8]
 800bfd6:	463e      	mov	r6, r7
 800bfd8:	42be      	cmp	r6, r7
 800bfda:	d900      	bls.n	800bfde <__ssputs_r+0x86>
 800bfdc:	463e      	mov	r6, r7
 800bfde:	6820      	ldr	r0, [r4, #0]
 800bfe0:	4632      	mov	r2, r6
 800bfe2:	4641      	mov	r1, r8
 800bfe4:	f000 f966 	bl	800c2b4 <memmove>
 800bfe8:	68a3      	ldr	r3, [r4, #8]
 800bfea:	1b9b      	subs	r3, r3, r6
 800bfec:	60a3      	str	r3, [r4, #8]
 800bfee:	6823      	ldr	r3, [r4, #0]
 800bff0:	4433      	add	r3, r6
 800bff2:	6023      	str	r3, [r4, #0]
 800bff4:	2000      	movs	r0, #0
 800bff6:	e7db      	b.n	800bfb0 <__ssputs_r+0x58>
 800bff8:	462a      	mov	r2, r5
 800bffa:	f000 f981 	bl	800c300 <_realloc_r>
 800bffe:	4606      	mov	r6, r0
 800c000:	2800      	cmp	r0, #0
 800c002:	d1e1      	bne.n	800bfc8 <__ssputs_r+0x70>
 800c004:	6921      	ldr	r1, [r4, #16]
 800c006:	4650      	mov	r0, sl
 800c008:	f7ff fec6 	bl	800bd98 <_free_r>
 800c00c:	e7c7      	b.n	800bf9e <__ssputs_r+0x46>
	...

0800c010 <_svfiprintf_r>:
 800c010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c014:	4698      	mov	r8, r3
 800c016:	898b      	ldrh	r3, [r1, #12]
 800c018:	061b      	lsls	r3, r3, #24
 800c01a:	b09d      	sub	sp, #116	; 0x74
 800c01c:	4607      	mov	r7, r0
 800c01e:	460d      	mov	r5, r1
 800c020:	4614      	mov	r4, r2
 800c022:	d50e      	bpl.n	800c042 <_svfiprintf_r+0x32>
 800c024:	690b      	ldr	r3, [r1, #16]
 800c026:	b963      	cbnz	r3, 800c042 <_svfiprintf_r+0x32>
 800c028:	2140      	movs	r1, #64	; 0x40
 800c02a:	f7ff ff21 	bl	800be70 <_malloc_r>
 800c02e:	6028      	str	r0, [r5, #0]
 800c030:	6128      	str	r0, [r5, #16]
 800c032:	b920      	cbnz	r0, 800c03e <_svfiprintf_r+0x2e>
 800c034:	230c      	movs	r3, #12
 800c036:	603b      	str	r3, [r7, #0]
 800c038:	f04f 30ff 	mov.w	r0, #4294967295
 800c03c:	e0d1      	b.n	800c1e2 <_svfiprintf_r+0x1d2>
 800c03e:	2340      	movs	r3, #64	; 0x40
 800c040:	616b      	str	r3, [r5, #20]
 800c042:	2300      	movs	r3, #0
 800c044:	9309      	str	r3, [sp, #36]	; 0x24
 800c046:	2320      	movs	r3, #32
 800c048:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c04c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c050:	2330      	movs	r3, #48	; 0x30
 800c052:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c1fc <_svfiprintf_r+0x1ec>
 800c056:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c05a:	f04f 0901 	mov.w	r9, #1
 800c05e:	4623      	mov	r3, r4
 800c060:	469a      	mov	sl, r3
 800c062:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c066:	b10a      	cbz	r2, 800c06c <_svfiprintf_r+0x5c>
 800c068:	2a25      	cmp	r2, #37	; 0x25
 800c06a:	d1f9      	bne.n	800c060 <_svfiprintf_r+0x50>
 800c06c:	ebba 0b04 	subs.w	fp, sl, r4
 800c070:	d00b      	beq.n	800c08a <_svfiprintf_r+0x7a>
 800c072:	465b      	mov	r3, fp
 800c074:	4622      	mov	r2, r4
 800c076:	4629      	mov	r1, r5
 800c078:	4638      	mov	r0, r7
 800c07a:	f7ff ff6d 	bl	800bf58 <__ssputs_r>
 800c07e:	3001      	adds	r0, #1
 800c080:	f000 80aa 	beq.w	800c1d8 <_svfiprintf_r+0x1c8>
 800c084:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c086:	445a      	add	r2, fp
 800c088:	9209      	str	r2, [sp, #36]	; 0x24
 800c08a:	f89a 3000 	ldrb.w	r3, [sl]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	f000 80a2 	beq.w	800c1d8 <_svfiprintf_r+0x1c8>
 800c094:	2300      	movs	r3, #0
 800c096:	f04f 32ff 	mov.w	r2, #4294967295
 800c09a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c09e:	f10a 0a01 	add.w	sl, sl, #1
 800c0a2:	9304      	str	r3, [sp, #16]
 800c0a4:	9307      	str	r3, [sp, #28]
 800c0a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c0aa:	931a      	str	r3, [sp, #104]	; 0x68
 800c0ac:	4654      	mov	r4, sl
 800c0ae:	2205      	movs	r2, #5
 800c0b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0b4:	4851      	ldr	r0, [pc, #324]	; (800c1fc <_svfiprintf_r+0x1ec>)
 800c0b6:	f7f4 f893 	bl	80001e0 <memchr>
 800c0ba:	9a04      	ldr	r2, [sp, #16]
 800c0bc:	b9d8      	cbnz	r0, 800c0f6 <_svfiprintf_r+0xe6>
 800c0be:	06d0      	lsls	r0, r2, #27
 800c0c0:	bf44      	itt	mi
 800c0c2:	2320      	movmi	r3, #32
 800c0c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0c8:	0711      	lsls	r1, r2, #28
 800c0ca:	bf44      	itt	mi
 800c0cc:	232b      	movmi	r3, #43	; 0x2b
 800c0ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0d2:	f89a 3000 	ldrb.w	r3, [sl]
 800c0d6:	2b2a      	cmp	r3, #42	; 0x2a
 800c0d8:	d015      	beq.n	800c106 <_svfiprintf_r+0xf6>
 800c0da:	9a07      	ldr	r2, [sp, #28]
 800c0dc:	4654      	mov	r4, sl
 800c0de:	2000      	movs	r0, #0
 800c0e0:	f04f 0c0a 	mov.w	ip, #10
 800c0e4:	4621      	mov	r1, r4
 800c0e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c0ea:	3b30      	subs	r3, #48	; 0x30
 800c0ec:	2b09      	cmp	r3, #9
 800c0ee:	d94e      	bls.n	800c18e <_svfiprintf_r+0x17e>
 800c0f0:	b1b0      	cbz	r0, 800c120 <_svfiprintf_r+0x110>
 800c0f2:	9207      	str	r2, [sp, #28]
 800c0f4:	e014      	b.n	800c120 <_svfiprintf_r+0x110>
 800c0f6:	eba0 0308 	sub.w	r3, r0, r8
 800c0fa:	fa09 f303 	lsl.w	r3, r9, r3
 800c0fe:	4313      	orrs	r3, r2
 800c100:	9304      	str	r3, [sp, #16]
 800c102:	46a2      	mov	sl, r4
 800c104:	e7d2      	b.n	800c0ac <_svfiprintf_r+0x9c>
 800c106:	9b03      	ldr	r3, [sp, #12]
 800c108:	1d19      	adds	r1, r3, #4
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	9103      	str	r1, [sp, #12]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	bfbb      	ittet	lt
 800c112:	425b      	neglt	r3, r3
 800c114:	f042 0202 	orrlt.w	r2, r2, #2
 800c118:	9307      	strge	r3, [sp, #28]
 800c11a:	9307      	strlt	r3, [sp, #28]
 800c11c:	bfb8      	it	lt
 800c11e:	9204      	strlt	r2, [sp, #16]
 800c120:	7823      	ldrb	r3, [r4, #0]
 800c122:	2b2e      	cmp	r3, #46	; 0x2e
 800c124:	d10c      	bne.n	800c140 <_svfiprintf_r+0x130>
 800c126:	7863      	ldrb	r3, [r4, #1]
 800c128:	2b2a      	cmp	r3, #42	; 0x2a
 800c12a:	d135      	bne.n	800c198 <_svfiprintf_r+0x188>
 800c12c:	9b03      	ldr	r3, [sp, #12]
 800c12e:	1d1a      	adds	r2, r3, #4
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	9203      	str	r2, [sp, #12]
 800c134:	2b00      	cmp	r3, #0
 800c136:	bfb8      	it	lt
 800c138:	f04f 33ff 	movlt.w	r3, #4294967295
 800c13c:	3402      	adds	r4, #2
 800c13e:	9305      	str	r3, [sp, #20]
 800c140:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c20c <_svfiprintf_r+0x1fc>
 800c144:	7821      	ldrb	r1, [r4, #0]
 800c146:	2203      	movs	r2, #3
 800c148:	4650      	mov	r0, sl
 800c14a:	f7f4 f849 	bl	80001e0 <memchr>
 800c14e:	b140      	cbz	r0, 800c162 <_svfiprintf_r+0x152>
 800c150:	2340      	movs	r3, #64	; 0x40
 800c152:	eba0 000a 	sub.w	r0, r0, sl
 800c156:	fa03 f000 	lsl.w	r0, r3, r0
 800c15a:	9b04      	ldr	r3, [sp, #16]
 800c15c:	4303      	orrs	r3, r0
 800c15e:	3401      	adds	r4, #1
 800c160:	9304      	str	r3, [sp, #16]
 800c162:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c166:	4826      	ldr	r0, [pc, #152]	; (800c200 <_svfiprintf_r+0x1f0>)
 800c168:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c16c:	2206      	movs	r2, #6
 800c16e:	f7f4 f837 	bl	80001e0 <memchr>
 800c172:	2800      	cmp	r0, #0
 800c174:	d038      	beq.n	800c1e8 <_svfiprintf_r+0x1d8>
 800c176:	4b23      	ldr	r3, [pc, #140]	; (800c204 <_svfiprintf_r+0x1f4>)
 800c178:	bb1b      	cbnz	r3, 800c1c2 <_svfiprintf_r+0x1b2>
 800c17a:	9b03      	ldr	r3, [sp, #12]
 800c17c:	3307      	adds	r3, #7
 800c17e:	f023 0307 	bic.w	r3, r3, #7
 800c182:	3308      	adds	r3, #8
 800c184:	9303      	str	r3, [sp, #12]
 800c186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c188:	4433      	add	r3, r6
 800c18a:	9309      	str	r3, [sp, #36]	; 0x24
 800c18c:	e767      	b.n	800c05e <_svfiprintf_r+0x4e>
 800c18e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c192:	460c      	mov	r4, r1
 800c194:	2001      	movs	r0, #1
 800c196:	e7a5      	b.n	800c0e4 <_svfiprintf_r+0xd4>
 800c198:	2300      	movs	r3, #0
 800c19a:	3401      	adds	r4, #1
 800c19c:	9305      	str	r3, [sp, #20]
 800c19e:	4619      	mov	r1, r3
 800c1a0:	f04f 0c0a 	mov.w	ip, #10
 800c1a4:	4620      	mov	r0, r4
 800c1a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1aa:	3a30      	subs	r2, #48	; 0x30
 800c1ac:	2a09      	cmp	r2, #9
 800c1ae:	d903      	bls.n	800c1b8 <_svfiprintf_r+0x1a8>
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d0c5      	beq.n	800c140 <_svfiprintf_r+0x130>
 800c1b4:	9105      	str	r1, [sp, #20]
 800c1b6:	e7c3      	b.n	800c140 <_svfiprintf_r+0x130>
 800c1b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c1bc:	4604      	mov	r4, r0
 800c1be:	2301      	movs	r3, #1
 800c1c0:	e7f0      	b.n	800c1a4 <_svfiprintf_r+0x194>
 800c1c2:	ab03      	add	r3, sp, #12
 800c1c4:	9300      	str	r3, [sp, #0]
 800c1c6:	462a      	mov	r2, r5
 800c1c8:	4b0f      	ldr	r3, [pc, #60]	; (800c208 <_svfiprintf_r+0x1f8>)
 800c1ca:	a904      	add	r1, sp, #16
 800c1cc:	4638      	mov	r0, r7
 800c1ce:	f7fd ffc3 	bl	800a158 <_printf_float>
 800c1d2:	1c42      	adds	r2, r0, #1
 800c1d4:	4606      	mov	r6, r0
 800c1d6:	d1d6      	bne.n	800c186 <_svfiprintf_r+0x176>
 800c1d8:	89ab      	ldrh	r3, [r5, #12]
 800c1da:	065b      	lsls	r3, r3, #25
 800c1dc:	f53f af2c 	bmi.w	800c038 <_svfiprintf_r+0x28>
 800c1e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c1e2:	b01d      	add	sp, #116	; 0x74
 800c1e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1e8:	ab03      	add	r3, sp, #12
 800c1ea:	9300      	str	r3, [sp, #0]
 800c1ec:	462a      	mov	r2, r5
 800c1ee:	4b06      	ldr	r3, [pc, #24]	; (800c208 <_svfiprintf_r+0x1f8>)
 800c1f0:	a904      	add	r1, sp, #16
 800c1f2:	4638      	mov	r0, r7
 800c1f4:	f7fe fa54 	bl	800a6a0 <_printf_i>
 800c1f8:	e7eb      	b.n	800c1d2 <_svfiprintf_r+0x1c2>
 800c1fa:	bf00      	nop
 800c1fc:	0800d47c 	.word	0x0800d47c
 800c200:	0800d486 	.word	0x0800d486
 800c204:	0800a159 	.word	0x0800a159
 800c208:	0800bf59 	.word	0x0800bf59
 800c20c:	0800d482 	.word	0x0800d482

0800c210 <_sbrk_r>:
 800c210:	b538      	push	{r3, r4, r5, lr}
 800c212:	4d06      	ldr	r5, [pc, #24]	; (800c22c <_sbrk_r+0x1c>)
 800c214:	2300      	movs	r3, #0
 800c216:	4604      	mov	r4, r0
 800c218:	4608      	mov	r0, r1
 800c21a:	602b      	str	r3, [r5, #0]
 800c21c:	f7f7 feca 	bl	8003fb4 <_sbrk>
 800c220:	1c43      	adds	r3, r0, #1
 800c222:	d102      	bne.n	800c22a <_sbrk_r+0x1a>
 800c224:	682b      	ldr	r3, [r5, #0]
 800c226:	b103      	cbz	r3, 800c22a <_sbrk_r+0x1a>
 800c228:	6023      	str	r3, [r4, #0]
 800c22a:	bd38      	pop	{r3, r4, r5, pc}
 800c22c:	2001314c 	.word	0x2001314c

0800c230 <__assert_func>:
 800c230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c232:	4614      	mov	r4, r2
 800c234:	461a      	mov	r2, r3
 800c236:	4b09      	ldr	r3, [pc, #36]	; (800c25c <__assert_func+0x2c>)
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	4605      	mov	r5, r0
 800c23c:	68d8      	ldr	r0, [r3, #12]
 800c23e:	b14c      	cbz	r4, 800c254 <__assert_func+0x24>
 800c240:	4b07      	ldr	r3, [pc, #28]	; (800c260 <__assert_func+0x30>)
 800c242:	9100      	str	r1, [sp, #0]
 800c244:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c248:	4906      	ldr	r1, [pc, #24]	; (800c264 <__assert_func+0x34>)
 800c24a:	462b      	mov	r3, r5
 800c24c:	f000 f80e 	bl	800c26c <fiprintf>
 800c250:	f000 faac 	bl	800c7ac <abort>
 800c254:	4b04      	ldr	r3, [pc, #16]	; (800c268 <__assert_func+0x38>)
 800c256:	461c      	mov	r4, r3
 800c258:	e7f3      	b.n	800c242 <__assert_func+0x12>
 800c25a:	bf00      	nop
 800c25c:	20000044 	.word	0x20000044
 800c260:	0800d48d 	.word	0x0800d48d
 800c264:	0800d49a 	.word	0x0800d49a
 800c268:	0800d4c8 	.word	0x0800d4c8

0800c26c <fiprintf>:
 800c26c:	b40e      	push	{r1, r2, r3}
 800c26e:	b503      	push	{r0, r1, lr}
 800c270:	4601      	mov	r1, r0
 800c272:	ab03      	add	r3, sp, #12
 800c274:	4805      	ldr	r0, [pc, #20]	; (800c28c <fiprintf+0x20>)
 800c276:	f853 2b04 	ldr.w	r2, [r3], #4
 800c27a:	6800      	ldr	r0, [r0, #0]
 800c27c:	9301      	str	r3, [sp, #4]
 800c27e:	f000 f897 	bl	800c3b0 <_vfiprintf_r>
 800c282:	b002      	add	sp, #8
 800c284:	f85d eb04 	ldr.w	lr, [sp], #4
 800c288:	b003      	add	sp, #12
 800c28a:	4770      	bx	lr
 800c28c:	20000044 	.word	0x20000044

0800c290 <__ascii_mbtowc>:
 800c290:	b082      	sub	sp, #8
 800c292:	b901      	cbnz	r1, 800c296 <__ascii_mbtowc+0x6>
 800c294:	a901      	add	r1, sp, #4
 800c296:	b142      	cbz	r2, 800c2aa <__ascii_mbtowc+0x1a>
 800c298:	b14b      	cbz	r3, 800c2ae <__ascii_mbtowc+0x1e>
 800c29a:	7813      	ldrb	r3, [r2, #0]
 800c29c:	600b      	str	r3, [r1, #0]
 800c29e:	7812      	ldrb	r2, [r2, #0]
 800c2a0:	1e10      	subs	r0, r2, #0
 800c2a2:	bf18      	it	ne
 800c2a4:	2001      	movne	r0, #1
 800c2a6:	b002      	add	sp, #8
 800c2a8:	4770      	bx	lr
 800c2aa:	4610      	mov	r0, r2
 800c2ac:	e7fb      	b.n	800c2a6 <__ascii_mbtowc+0x16>
 800c2ae:	f06f 0001 	mvn.w	r0, #1
 800c2b2:	e7f8      	b.n	800c2a6 <__ascii_mbtowc+0x16>

0800c2b4 <memmove>:
 800c2b4:	4288      	cmp	r0, r1
 800c2b6:	b510      	push	{r4, lr}
 800c2b8:	eb01 0402 	add.w	r4, r1, r2
 800c2bc:	d902      	bls.n	800c2c4 <memmove+0x10>
 800c2be:	4284      	cmp	r4, r0
 800c2c0:	4623      	mov	r3, r4
 800c2c2:	d807      	bhi.n	800c2d4 <memmove+0x20>
 800c2c4:	1e43      	subs	r3, r0, #1
 800c2c6:	42a1      	cmp	r1, r4
 800c2c8:	d008      	beq.n	800c2dc <memmove+0x28>
 800c2ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c2ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c2d2:	e7f8      	b.n	800c2c6 <memmove+0x12>
 800c2d4:	4402      	add	r2, r0
 800c2d6:	4601      	mov	r1, r0
 800c2d8:	428a      	cmp	r2, r1
 800c2da:	d100      	bne.n	800c2de <memmove+0x2a>
 800c2dc:	bd10      	pop	{r4, pc}
 800c2de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c2e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c2e6:	e7f7      	b.n	800c2d8 <memmove+0x24>

0800c2e8 <__malloc_lock>:
 800c2e8:	4801      	ldr	r0, [pc, #4]	; (800c2f0 <__malloc_lock+0x8>)
 800c2ea:	f000 bc1f 	b.w	800cb2c <__retarget_lock_acquire_recursive>
 800c2ee:	bf00      	nop
 800c2f0:	20013150 	.word	0x20013150

0800c2f4 <__malloc_unlock>:
 800c2f4:	4801      	ldr	r0, [pc, #4]	; (800c2fc <__malloc_unlock+0x8>)
 800c2f6:	f000 bc1a 	b.w	800cb2e <__retarget_lock_release_recursive>
 800c2fa:	bf00      	nop
 800c2fc:	20013150 	.word	0x20013150

0800c300 <_realloc_r>:
 800c300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c304:	4680      	mov	r8, r0
 800c306:	4614      	mov	r4, r2
 800c308:	460e      	mov	r6, r1
 800c30a:	b921      	cbnz	r1, 800c316 <_realloc_r+0x16>
 800c30c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c310:	4611      	mov	r1, r2
 800c312:	f7ff bdad 	b.w	800be70 <_malloc_r>
 800c316:	b92a      	cbnz	r2, 800c324 <_realloc_r+0x24>
 800c318:	f7ff fd3e 	bl	800bd98 <_free_r>
 800c31c:	4625      	mov	r5, r4
 800c31e:	4628      	mov	r0, r5
 800c320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c324:	f000 fc6a 	bl	800cbfc <_malloc_usable_size_r>
 800c328:	4284      	cmp	r4, r0
 800c32a:	4607      	mov	r7, r0
 800c32c:	d802      	bhi.n	800c334 <_realloc_r+0x34>
 800c32e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c332:	d812      	bhi.n	800c35a <_realloc_r+0x5a>
 800c334:	4621      	mov	r1, r4
 800c336:	4640      	mov	r0, r8
 800c338:	f7ff fd9a 	bl	800be70 <_malloc_r>
 800c33c:	4605      	mov	r5, r0
 800c33e:	2800      	cmp	r0, #0
 800c340:	d0ed      	beq.n	800c31e <_realloc_r+0x1e>
 800c342:	42bc      	cmp	r4, r7
 800c344:	4622      	mov	r2, r4
 800c346:	4631      	mov	r1, r6
 800c348:	bf28      	it	cs
 800c34a:	463a      	movcs	r2, r7
 800c34c:	f7fd fe4e 	bl	8009fec <memcpy>
 800c350:	4631      	mov	r1, r6
 800c352:	4640      	mov	r0, r8
 800c354:	f7ff fd20 	bl	800bd98 <_free_r>
 800c358:	e7e1      	b.n	800c31e <_realloc_r+0x1e>
 800c35a:	4635      	mov	r5, r6
 800c35c:	e7df      	b.n	800c31e <_realloc_r+0x1e>

0800c35e <__sfputc_r>:
 800c35e:	6893      	ldr	r3, [r2, #8]
 800c360:	3b01      	subs	r3, #1
 800c362:	2b00      	cmp	r3, #0
 800c364:	b410      	push	{r4}
 800c366:	6093      	str	r3, [r2, #8]
 800c368:	da08      	bge.n	800c37c <__sfputc_r+0x1e>
 800c36a:	6994      	ldr	r4, [r2, #24]
 800c36c:	42a3      	cmp	r3, r4
 800c36e:	db01      	blt.n	800c374 <__sfputc_r+0x16>
 800c370:	290a      	cmp	r1, #10
 800c372:	d103      	bne.n	800c37c <__sfputc_r+0x1e>
 800c374:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c378:	f000 b94a 	b.w	800c610 <__swbuf_r>
 800c37c:	6813      	ldr	r3, [r2, #0]
 800c37e:	1c58      	adds	r0, r3, #1
 800c380:	6010      	str	r0, [r2, #0]
 800c382:	7019      	strb	r1, [r3, #0]
 800c384:	4608      	mov	r0, r1
 800c386:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c38a:	4770      	bx	lr

0800c38c <__sfputs_r>:
 800c38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c38e:	4606      	mov	r6, r0
 800c390:	460f      	mov	r7, r1
 800c392:	4614      	mov	r4, r2
 800c394:	18d5      	adds	r5, r2, r3
 800c396:	42ac      	cmp	r4, r5
 800c398:	d101      	bne.n	800c39e <__sfputs_r+0x12>
 800c39a:	2000      	movs	r0, #0
 800c39c:	e007      	b.n	800c3ae <__sfputs_r+0x22>
 800c39e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3a2:	463a      	mov	r2, r7
 800c3a4:	4630      	mov	r0, r6
 800c3a6:	f7ff ffda 	bl	800c35e <__sfputc_r>
 800c3aa:	1c43      	adds	r3, r0, #1
 800c3ac:	d1f3      	bne.n	800c396 <__sfputs_r+0xa>
 800c3ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c3b0 <_vfiprintf_r>:
 800c3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3b4:	460d      	mov	r5, r1
 800c3b6:	b09d      	sub	sp, #116	; 0x74
 800c3b8:	4614      	mov	r4, r2
 800c3ba:	4698      	mov	r8, r3
 800c3bc:	4606      	mov	r6, r0
 800c3be:	b118      	cbz	r0, 800c3c8 <_vfiprintf_r+0x18>
 800c3c0:	6983      	ldr	r3, [r0, #24]
 800c3c2:	b90b      	cbnz	r3, 800c3c8 <_vfiprintf_r+0x18>
 800c3c4:	f000 fb14 	bl	800c9f0 <__sinit>
 800c3c8:	4b89      	ldr	r3, [pc, #548]	; (800c5f0 <_vfiprintf_r+0x240>)
 800c3ca:	429d      	cmp	r5, r3
 800c3cc:	d11b      	bne.n	800c406 <_vfiprintf_r+0x56>
 800c3ce:	6875      	ldr	r5, [r6, #4]
 800c3d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c3d2:	07d9      	lsls	r1, r3, #31
 800c3d4:	d405      	bmi.n	800c3e2 <_vfiprintf_r+0x32>
 800c3d6:	89ab      	ldrh	r3, [r5, #12]
 800c3d8:	059a      	lsls	r2, r3, #22
 800c3da:	d402      	bmi.n	800c3e2 <_vfiprintf_r+0x32>
 800c3dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c3de:	f000 fba5 	bl	800cb2c <__retarget_lock_acquire_recursive>
 800c3e2:	89ab      	ldrh	r3, [r5, #12]
 800c3e4:	071b      	lsls	r3, r3, #28
 800c3e6:	d501      	bpl.n	800c3ec <_vfiprintf_r+0x3c>
 800c3e8:	692b      	ldr	r3, [r5, #16]
 800c3ea:	b9eb      	cbnz	r3, 800c428 <_vfiprintf_r+0x78>
 800c3ec:	4629      	mov	r1, r5
 800c3ee:	4630      	mov	r0, r6
 800c3f0:	f000 f96e 	bl	800c6d0 <__swsetup_r>
 800c3f4:	b1c0      	cbz	r0, 800c428 <_vfiprintf_r+0x78>
 800c3f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c3f8:	07dc      	lsls	r4, r3, #31
 800c3fa:	d50e      	bpl.n	800c41a <_vfiprintf_r+0x6a>
 800c3fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c400:	b01d      	add	sp, #116	; 0x74
 800c402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c406:	4b7b      	ldr	r3, [pc, #492]	; (800c5f4 <_vfiprintf_r+0x244>)
 800c408:	429d      	cmp	r5, r3
 800c40a:	d101      	bne.n	800c410 <_vfiprintf_r+0x60>
 800c40c:	68b5      	ldr	r5, [r6, #8]
 800c40e:	e7df      	b.n	800c3d0 <_vfiprintf_r+0x20>
 800c410:	4b79      	ldr	r3, [pc, #484]	; (800c5f8 <_vfiprintf_r+0x248>)
 800c412:	429d      	cmp	r5, r3
 800c414:	bf08      	it	eq
 800c416:	68f5      	ldreq	r5, [r6, #12]
 800c418:	e7da      	b.n	800c3d0 <_vfiprintf_r+0x20>
 800c41a:	89ab      	ldrh	r3, [r5, #12]
 800c41c:	0598      	lsls	r0, r3, #22
 800c41e:	d4ed      	bmi.n	800c3fc <_vfiprintf_r+0x4c>
 800c420:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c422:	f000 fb84 	bl	800cb2e <__retarget_lock_release_recursive>
 800c426:	e7e9      	b.n	800c3fc <_vfiprintf_r+0x4c>
 800c428:	2300      	movs	r3, #0
 800c42a:	9309      	str	r3, [sp, #36]	; 0x24
 800c42c:	2320      	movs	r3, #32
 800c42e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c432:	f8cd 800c 	str.w	r8, [sp, #12]
 800c436:	2330      	movs	r3, #48	; 0x30
 800c438:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c5fc <_vfiprintf_r+0x24c>
 800c43c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c440:	f04f 0901 	mov.w	r9, #1
 800c444:	4623      	mov	r3, r4
 800c446:	469a      	mov	sl, r3
 800c448:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c44c:	b10a      	cbz	r2, 800c452 <_vfiprintf_r+0xa2>
 800c44e:	2a25      	cmp	r2, #37	; 0x25
 800c450:	d1f9      	bne.n	800c446 <_vfiprintf_r+0x96>
 800c452:	ebba 0b04 	subs.w	fp, sl, r4
 800c456:	d00b      	beq.n	800c470 <_vfiprintf_r+0xc0>
 800c458:	465b      	mov	r3, fp
 800c45a:	4622      	mov	r2, r4
 800c45c:	4629      	mov	r1, r5
 800c45e:	4630      	mov	r0, r6
 800c460:	f7ff ff94 	bl	800c38c <__sfputs_r>
 800c464:	3001      	adds	r0, #1
 800c466:	f000 80aa 	beq.w	800c5be <_vfiprintf_r+0x20e>
 800c46a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c46c:	445a      	add	r2, fp
 800c46e:	9209      	str	r2, [sp, #36]	; 0x24
 800c470:	f89a 3000 	ldrb.w	r3, [sl]
 800c474:	2b00      	cmp	r3, #0
 800c476:	f000 80a2 	beq.w	800c5be <_vfiprintf_r+0x20e>
 800c47a:	2300      	movs	r3, #0
 800c47c:	f04f 32ff 	mov.w	r2, #4294967295
 800c480:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c484:	f10a 0a01 	add.w	sl, sl, #1
 800c488:	9304      	str	r3, [sp, #16]
 800c48a:	9307      	str	r3, [sp, #28]
 800c48c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c490:	931a      	str	r3, [sp, #104]	; 0x68
 800c492:	4654      	mov	r4, sl
 800c494:	2205      	movs	r2, #5
 800c496:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c49a:	4858      	ldr	r0, [pc, #352]	; (800c5fc <_vfiprintf_r+0x24c>)
 800c49c:	f7f3 fea0 	bl	80001e0 <memchr>
 800c4a0:	9a04      	ldr	r2, [sp, #16]
 800c4a2:	b9d8      	cbnz	r0, 800c4dc <_vfiprintf_r+0x12c>
 800c4a4:	06d1      	lsls	r1, r2, #27
 800c4a6:	bf44      	itt	mi
 800c4a8:	2320      	movmi	r3, #32
 800c4aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4ae:	0713      	lsls	r3, r2, #28
 800c4b0:	bf44      	itt	mi
 800c4b2:	232b      	movmi	r3, #43	; 0x2b
 800c4b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4b8:	f89a 3000 	ldrb.w	r3, [sl]
 800c4bc:	2b2a      	cmp	r3, #42	; 0x2a
 800c4be:	d015      	beq.n	800c4ec <_vfiprintf_r+0x13c>
 800c4c0:	9a07      	ldr	r2, [sp, #28]
 800c4c2:	4654      	mov	r4, sl
 800c4c4:	2000      	movs	r0, #0
 800c4c6:	f04f 0c0a 	mov.w	ip, #10
 800c4ca:	4621      	mov	r1, r4
 800c4cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c4d0:	3b30      	subs	r3, #48	; 0x30
 800c4d2:	2b09      	cmp	r3, #9
 800c4d4:	d94e      	bls.n	800c574 <_vfiprintf_r+0x1c4>
 800c4d6:	b1b0      	cbz	r0, 800c506 <_vfiprintf_r+0x156>
 800c4d8:	9207      	str	r2, [sp, #28]
 800c4da:	e014      	b.n	800c506 <_vfiprintf_r+0x156>
 800c4dc:	eba0 0308 	sub.w	r3, r0, r8
 800c4e0:	fa09 f303 	lsl.w	r3, r9, r3
 800c4e4:	4313      	orrs	r3, r2
 800c4e6:	9304      	str	r3, [sp, #16]
 800c4e8:	46a2      	mov	sl, r4
 800c4ea:	e7d2      	b.n	800c492 <_vfiprintf_r+0xe2>
 800c4ec:	9b03      	ldr	r3, [sp, #12]
 800c4ee:	1d19      	adds	r1, r3, #4
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	9103      	str	r1, [sp, #12]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	bfbb      	ittet	lt
 800c4f8:	425b      	neglt	r3, r3
 800c4fa:	f042 0202 	orrlt.w	r2, r2, #2
 800c4fe:	9307      	strge	r3, [sp, #28]
 800c500:	9307      	strlt	r3, [sp, #28]
 800c502:	bfb8      	it	lt
 800c504:	9204      	strlt	r2, [sp, #16]
 800c506:	7823      	ldrb	r3, [r4, #0]
 800c508:	2b2e      	cmp	r3, #46	; 0x2e
 800c50a:	d10c      	bne.n	800c526 <_vfiprintf_r+0x176>
 800c50c:	7863      	ldrb	r3, [r4, #1]
 800c50e:	2b2a      	cmp	r3, #42	; 0x2a
 800c510:	d135      	bne.n	800c57e <_vfiprintf_r+0x1ce>
 800c512:	9b03      	ldr	r3, [sp, #12]
 800c514:	1d1a      	adds	r2, r3, #4
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	9203      	str	r2, [sp, #12]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	bfb8      	it	lt
 800c51e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c522:	3402      	adds	r4, #2
 800c524:	9305      	str	r3, [sp, #20]
 800c526:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c60c <_vfiprintf_r+0x25c>
 800c52a:	7821      	ldrb	r1, [r4, #0]
 800c52c:	2203      	movs	r2, #3
 800c52e:	4650      	mov	r0, sl
 800c530:	f7f3 fe56 	bl	80001e0 <memchr>
 800c534:	b140      	cbz	r0, 800c548 <_vfiprintf_r+0x198>
 800c536:	2340      	movs	r3, #64	; 0x40
 800c538:	eba0 000a 	sub.w	r0, r0, sl
 800c53c:	fa03 f000 	lsl.w	r0, r3, r0
 800c540:	9b04      	ldr	r3, [sp, #16]
 800c542:	4303      	orrs	r3, r0
 800c544:	3401      	adds	r4, #1
 800c546:	9304      	str	r3, [sp, #16]
 800c548:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c54c:	482c      	ldr	r0, [pc, #176]	; (800c600 <_vfiprintf_r+0x250>)
 800c54e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c552:	2206      	movs	r2, #6
 800c554:	f7f3 fe44 	bl	80001e0 <memchr>
 800c558:	2800      	cmp	r0, #0
 800c55a:	d03f      	beq.n	800c5dc <_vfiprintf_r+0x22c>
 800c55c:	4b29      	ldr	r3, [pc, #164]	; (800c604 <_vfiprintf_r+0x254>)
 800c55e:	bb1b      	cbnz	r3, 800c5a8 <_vfiprintf_r+0x1f8>
 800c560:	9b03      	ldr	r3, [sp, #12]
 800c562:	3307      	adds	r3, #7
 800c564:	f023 0307 	bic.w	r3, r3, #7
 800c568:	3308      	adds	r3, #8
 800c56a:	9303      	str	r3, [sp, #12]
 800c56c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c56e:	443b      	add	r3, r7
 800c570:	9309      	str	r3, [sp, #36]	; 0x24
 800c572:	e767      	b.n	800c444 <_vfiprintf_r+0x94>
 800c574:	fb0c 3202 	mla	r2, ip, r2, r3
 800c578:	460c      	mov	r4, r1
 800c57a:	2001      	movs	r0, #1
 800c57c:	e7a5      	b.n	800c4ca <_vfiprintf_r+0x11a>
 800c57e:	2300      	movs	r3, #0
 800c580:	3401      	adds	r4, #1
 800c582:	9305      	str	r3, [sp, #20]
 800c584:	4619      	mov	r1, r3
 800c586:	f04f 0c0a 	mov.w	ip, #10
 800c58a:	4620      	mov	r0, r4
 800c58c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c590:	3a30      	subs	r2, #48	; 0x30
 800c592:	2a09      	cmp	r2, #9
 800c594:	d903      	bls.n	800c59e <_vfiprintf_r+0x1ee>
 800c596:	2b00      	cmp	r3, #0
 800c598:	d0c5      	beq.n	800c526 <_vfiprintf_r+0x176>
 800c59a:	9105      	str	r1, [sp, #20]
 800c59c:	e7c3      	b.n	800c526 <_vfiprintf_r+0x176>
 800c59e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c5a2:	4604      	mov	r4, r0
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	e7f0      	b.n	800c58a <_vfiprintf_r+0x1da>
 800c5a8:	ab03      	add	r3, sp, #12
 800c5aa:	9300      	str	r3, [sp, #0]
 800c5ac:	462a      	mov	r2, r5
 800c5ae:	4b16      	ldr	r3, [pc, #88]	; (800c608 <_vfiprintf_r+0x258>)
 800c5b0:	a904      	add	r1, sp, #16
 800c5b2:	4630      	mov	r0, r6
 800c5b4:	f7fd fdd0 	bl	800a158 <_printf_float>
 800c5b8:	4607      	mov	r7, r0
 800c5ba:	1c78      	adds	r0, r7, #1
 800c5bc:	d1d6      	bne.n	800c56c <_vfiprintf_r+0x1bc>
 800c5be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5c0:	07d9      	lsls	r1, r3, #31
 800c5c2:	d405      	bmi.n	800c5d0 <_vfiprintf_r+0x220>
 800c5c4:	89ab      	ldrh	r3, [r5, #12]
 800c5c6:	059a      	lsls	r2, r3, #22
 800c5c8:	d402      	bmi.n	800c5d0 <_vfiprintf_r+0x220>
 800c5ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5cc:	f000 faaf 	bl	800cb2e <__retarget_lock_release_recursive>
 800c5d0:	89ab      	ldrh	r3, [r5, #12]
 800c5d2:	065b      	lsls	r3, r3, #25
 800c5d4:	f53f af12 	bmi.w	800c3fc <_vfiprintf_r+0x4c>
 800c5d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c5da:	e711      	b.n	800c400 <_vfiprintf_r+0x50>
 800c5dc:	ab03      	add	r3, sp, #12
 800c5de:	9300      	str	r3, [sp, #0]
 800c5e0:	462a      	mov	r2, r5
 800c5e2:	4b09      	ldr	r3, [pc, #36]	; (800c608 <_vfiprintf_r+0x258>)
 800c5e4:	a904      	add	r1, sp, #16
 800c5e6:	4630      	mov	r0, r6
 800c5e8:	f7fe f85a 	bl	800a6a0 <_printf_i>
 800c5ec:	e7e4      	b.n	800c5b8 <_vfiprintf_r+0x208>
 800c5ee:	bf00      	nop
 800c5f0:	0800d5f4 	.word	0x0800d5f4
 800c5f4:	0800d614 	.word	0x0800d614
 800c5f8:	0800d5d4 	.word	0x0800d5d4
 800c5fc:	0800d47c 	.word	0x0800d47c
 800c600:	0800d486 	.word	0x0800d486
 800c604:	0800a159 	.word	0x0800a159
 800c608:	0800c38d 	.word	0x0800c38d
 800c60c:	0800d482 	.word	0x0800d482

0800c610 <__swbuf_r>:
 800c610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c612:	460e      	mov	r6, r1
 800c614:	4614      	mov	r4, r2
 800c616:	4605      	mov	r5, r0
 800c618:	b118      	cbz	r0, 800c622 <__swbuf_r+0x12>
 800c61a:	6983      	ldr	r3, [r0, #24]
 800c61c:	b90b      	cbnz	r3, 800c622 <__swbuf_r+0x12>
 800c61e:	f000 f9e7 	bl	800c9f0 <__sinit>
 800c622:	4b21      	ldr	r3, [pc, #132]	; (800c6a8 <__swbuf_r+0x98>)
 800c624:	429c      	cmp	r4, r3
 800c626:	d12b      	bne.n	800c680 <__swbuf_r+0x70>
 800c628:	686c      	ldr	r4, [r5, #4]
 800c62a:	69a3      	ldr	r3, [r4, #24]
 800c62c:	60a3      	str	r3, [r4, #8]
 800c62e:	89a3      	ldrh	r3, [r4, #12]
 800c630:	071a      	lsls	r2, r3, #28
 800c632:	d52f      	bpl.n	800c694 <__swbuf_r+0x84>
 800c634:	6923      	ldr	r3, [r4, #16]
 800c636:	b36b      	cbz	r3, 800c694 <__swbuf_r+0x84>
 800c638:	6923      	ldr	r3, [r4, #16]
 800c63a:	6820      	ldr	r0, [r4, #0]
 800c63c:	1ac0      	subs	r0, r0, r3
 800c63e:	6963      	ldr	r3, [r4, #20]
 800c640:	b2f6      	uxtb	r6, r6
 800c642:	4283      	cmp	r3, r0
 800c644:	4637      	mov	r7, r6
 800c646:	dc04      	bgt.n	800c652 <__swbuf_r+0x42>
 800c648:	4621      	mov	r1, r4
 800c64a:	4628      	mov	r0, r5
 800c64c:	f000 f93c 	bl	800c8c8 <_fflush_r>
 800c650:	bb30      	cbnz	r0, 800c6a0 <__swbuf_r+0x90>
 800c652:	68a3      	ldr	r3, [r4, #8]
 800c654:	3b01      	subs	r3, #1
 800c656:	60a3      	str	r3, [r4, #8]
 800c658:	6823      	ldr	r3, [r4, #0]
 800c65a:	1c5a      	adds	r2, r3, #1
 800c65c:	6022      	str	r2, [r4, #0]
 800c65e:	701e      	strb	r6, [r3, #0]
 800c660:	6963      	ldr	r3, [r4, #20]
 800c662:	3001      	adds	r0, #1
 800c664:	4283      	cmp	r3, r0
 800c666:	d004      	beq.n	800c672 <__swbuf_r+0x62>
 800c668:	89a3      	ldrh	r3, [r4, #12]
 800c66a:	07db      	lsls	r3, r3, #31
 800c66c:	d506      	bpl.n	800c67c <__swbuf_r+0x6c>
 800c66e:	2e0a      	cmp	r6, #10
 800c670:	d104      	bne.n	800c67c <__swbuf_r+0x6c>
 800c672:	4621      	mov	r1, r4
 800c674:	4628      	mov	r0, r5
 800c676:	f000 f927 	bl	800c8c8 <_fflush_r>
 800c67a:	b988      	cbnz	r0, 800c6a0 <__swbuf_r+0x90>
 800c67c:	4638      	mov	r0, r7
 800c67e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c680:	4b0a      	ldr	r3, [pc, #40]	; (800c6ac <__swbuf_r+0x9c>)
 800c682:	429c      	cmp	r4, r3
 800c684:	d101      	bne.n	800c68a <__swbuf_r+0x7a>
 800c686:	68ac      	ldr	r4, [r5, #8]
 800c688:	e7cf      	b.n	800c62a <__swbuf_r+0x1a>
 800c68a:	4b09      	ldr	r3, [pc, #36]	; (800c6b0 <__swbuf_r+0xa0>)
 800c68c:	429c      	cmp	r4, r3
 800c68e:	bf08      	it	eq
 800c690:	68ec      	ldreq	r4, [r5, #12]
 800c692:	e7ca      	b.n	800c62a <__swbuf_r+0x1a>
 800c694:	4621      	mov	r1, r4
 800c696:	4628      	mov	r0, r5
 800c698:	f000 f81a 	bl	800c6d0 <__swsetup_r>
 800c69c:	2800      	cmp	r0, #0
 800c69e:	d0cb      	beq.n	800c638 <__swbuf_r+0x28>
 800c6a0:	f04f 37ff 	mov.w	r7, #4294967295
 800c6a4:	e7ea      	b.n	800c67c <__swbuf_r+0x6c>
 800c6a6:	bf00      	nop
 800c6a8:	0800d5f4 	.word	0x0800d5f4
 800c6ac:	0800d614 	.word	0x0800d614
 800c6b0:	0800d5d4 	.word	0x0800d5d4

0800c6b4 <__ascii_wctomb>:
 800c6b4:	b149      	cbz	r1, 800c6ca <__ascii_wctomb+0x16>
 800c6b6:	2aff      	cmp	r2, #255	; 0xff
 800c6b8:	bf85      	ittet	hi
 800c6ba:	238a      	movhi	r3, #138	; 0x8a
 800c6bc:	6003      	strhi	r3, [r0, #0]
 800c6be:	700a      	strbls	r2, [r1, #0]
 800c6c0:	f04f 30ff 	movhi.w	r0, #4294967295
 800c6c4:	bf98      	it	ls
 800c6c6:	2001      	movls	r0, #1
 800c6c8:	4770      	bx	lr
 800c6ca:	4608      	mov	r0, r1
 800c6cc:	4770      	bx	lr
	...

0800c6d0 <__swsetup_r>:
 800c6d0:	4b32      	ldr	r3, [pc, #200]	; (800c79c <__swsetup_r+0xcc>)
 800c6d2:	b570      	push	{r4, r5, r6, lr}
 800c6d4:	681d      	ldr	r5, [r3, #0]
 800c6d6:	4606      	mov	r6, r0
 800c6d8:	460c      	mov	r4, r1
 800c6da:	b125      	cbz	r5, 800c6e6 <__swsetup_r+0x16>
 800c6dc:	69ab      	ldr	r3, [r5, #24]
 800c6de:	b913      	cbnz	r3, 800c6e6 <__swsetup_r+0x16>
 800c6e0:	4628      	mov	r0, r5
 800c6e2:	f000 f985 	bl	800c9f0 <__sinit>
 800c6e6:	4b2e      	ldr	r3, [pc, #184]	; (800c7a0 <__swsetup_r+0xd0>)
 800c6e8:	429c      	cmp	r4, r3
 800c6ea:	d10f      	bne.n	800c70c <__swsetup_r+0x3c>
 800c6ec:	686c      	ldr	r4, [r5, #4]
 800c6ee:	89a3      	ldrh	r3, [r4, #12]
 800c6f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c6f4:	0719      	lsls	r1, r3, #28
 800c6f6:	d42c      	bmi.n	800c752 <__swsetup_r+0x82>
 800c6f8:	06dd      	lsls	r5, r3, #27
 800c6fa:	d411      	bmi.n	800c720 <__swsetup_r+0x50>
 800c6fc:	2309      	movs	r3, #9
 800c6fe:	6033      	str	r3, [r6, #0]
 800c700:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c704:	81a3      	strh	r3, [r4, #12]
 800c706:	f04f 30ff 	mov.w	r0, #4294967295
 800c70a:	e03e      	b.n	800c78a <__swsetup_r+0xba>
 800c70c:	4b25      	ldr	r3, [pc, #148]	; (800c7a4 <__swsetup_r+0xd4>)
 800c70e:	429c      	cmp	r4, r3
 800c710:	d101      	bne.n	800c716 <__swsetup_r+0x46>
 800c712:	68ac      	ldr	r4, [r5, #8]
 800c714:	e7eb      	b.n	800c6ee <__swsetup_r+0x1e>
 800c716:	4b24      	ldr	r3, [pc, #144]	; (800c7a8 <__swsetup_r+0xd8>)
 800c718:	429c      	cmp	r4, r3
 800c71a:	bf08      	it	eq
 800c71c:	68ec      	ldreq	r4, [r5, #12]
 800c71e:	e7e6      	b.n	800c6ee <__swsetup_r+0x1e>
 800c720:	0758      	lsls	r0, r3, #29
 800c722:	d512      	bpl.n	800c74a <__swsetup_r+0x7a>
 800c724:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c726:	b141      	cbz	r1, 800c73a <__swsetup_r+0x6a>
 800c728:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c72c:	4299      	cmp	r1, r3
 800c72e:	d002      	beq.n	800c736 <__swsetup_r+0x66>
 800c730:	4630      	mov	r0, r6
 800c732:	f7ff fb31 	bl	800bd98 <_free_r>
 800c736:	2300      	movs	r3, #0
 800c738:	6363      	str	r3, [r4, #52]	; 0x34
 800c73a:	89a3      	ldrh	r3, [r4, #12]
 800c73c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c740:	81a3      	strh	r3, [r4, #12]
 800c742:	2300      	movs	r3, #0
 800c744:	6063      	str	r3, [r4, #4]
 800c746:	6923      	ldr	r3, [r4, #16]
 800c748:	6023      	str	r3, [r4, #0]
 800c74a:	89a3      	ldrh	r3, [r4, #12]
 800c74c:	f043 0308 	orr.w	r3, r3, #8
 800c750:	81a3      	strh	r3, [r4, #12]
 800c752:	6923      	ldr	r3, [r4, #16]
 800c754:	b94b      	cbnz	r3, 800c76a <__swsetup_r+0x9a>
 800c756:	89a3      	ldrh	r3, [r4, #12]
 800c758:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c75c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c760:	d003      	beq.n	800c76a <__swsetup_r+0x9a>
 800c762:	4621      	mov	r1, r4
 800c764:	4630      	mov	r0, r6
 800c766:	f000 fa09 	bl	800cb7c <__smakebuf_r>
 800c76a:	89a0      	ldrh	r0, [r4, #12]
 800c76c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c770:	f010 0301 	ands.w	r3, r0, #1
 800c774:	d00a      	beq.n	800c78c <__swsetup_r+0xbc>
 800c776:	2300      	movs	r3, #0
 800c778:	60a3      	str	r3, [r4, #8]
 800c77a:	6963      	ldr	r3, [r4, #20]
 800c77c:	425b      	negs	r3, r3
 800c77e:	61a3      	str	r3, [r4, #24]
 800c780:	6923      	ldr	r3, [r4, #16]
 800c782:	b943      	cbnz	r3, 800c796 <__swsetup_r+0xc6>
 800c784:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c788:	d1ba      	bne.n	800c700 <__swsetup_r+0x30>
 800c78a:	bd70      	pop	{r4, r5, r6, pc}
 800c78c:	0781      	lsls	r1, r0, #30
 800c78e:	bf58      	it	pl
 800c790:	6963      	ldrpl	r3, [r4, #20]
 800c792:	60a3      	str	r3, [r4, #8]
 800c794:	e7f4      	b.n	800c780 <__swsetup_r+0xb0>
 800c796:	2000      	movs	r0, #0
 800c798:	e7f7      	b.n	800c78a <__swsetup_r+0xba>
 800c79a:	bf00      	nop
 800c79c:	20000044 	.word	0x20000044
 800c7a0:	0800d5f4 	.word	0x0800d5f4
 800c7a4:	0800d614 	.word	0x0800d614
 800c7a8:	0800d5d4 	.word	0x0800d5d4

0800c7ac <abort>:
 800c7ac:	b508      	push	{r3, lr}
 800c7ae:	2006      	movs	r0, #6
 800c7b0:	f000 fa54 	bl	800cc5c <raise>
 800c7b4:	2001      	movs	r0, #1
 800c7b6:	f7f7 fb85 	bl	8003ec4 <_exit>
	...

0800c7bc <__sflush_r>:
 800c7bc:	898a      	ldrh	r2, [r1, #12]
 800c7be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7c2:	4605      	mov	r5, r0
 800c7c4:	0710      	lsls	r0, r2, #28
 800c7c6:	460c      	mov	r4, r1
 800c7c8:	d458      	bmi.n	800c87c <__sflush_r+0xc0>
 800c7ca:	684b      	ldr	r3, [r1, #4]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	dc05      	bgt.n	800c7dc <__sflush_r+0x20>
 800c7d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	dc02      	bgt.n	800c7dc <__sflush_r+0x20>
 800c7d6:	2000      	movs	r0, #0
 800c7d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c7de:	2e00      	cmp	r6, #0
 800c7e0:	d0f9      	beq.n	800c7d6 <__sflush_r+0x1a>
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c7e8:	682f      	ldr	r7, [r5, #0]
 800c7ea:	602b      	str	r3, [r5, #0]
 800c7ec:	d032      	beq.n	800c854 <__sflush_r+0x98>
 800c7ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c7f0:	89a3      	ldrh	r3, [r4, #12]
 800c7f2:	075a      	lsls	r2, r3, #29
 800c7f4:	d505      	bpl.n	800c802 <__sflush_r+0x46>
 800c7f6:	6863      	ldr	r3, [r4, #4]
 800c7f8:	1ac0      	subs	r0, r0, r3
 800c7fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c7fc:	b10b      	cbz	r3, 800c802 <__sflush_r+0x46>
 800c7fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c800:	1ac0      	subs	r0, r0, r3
 800c802:	2300      	movs	r3, #0
 800c804:	4602      	mov	r2, r0
 800c806:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c808:	6a21      	ldr	r1, [r4, #32]
 800c80a:	4628      	mov	r0, r5
 800c80c:	47b0      	blx	r6
 800c80e:	1c43      	adds	r3, r0, #1
 800c810:	89a3      	ldrh	r3, [r4, #12]
 800c812:	d106      	bne.n	800c822 <__sflush_r+0x66>
 800c814:	6829      	ldr	r1, [r5, #0]
 800c816:	291d      	cmp	r1, #29
 800c818:	d82c      	bhi.n	800c874 <__sflush_r+0xb8>
 800c81a:	4a2a      	ldr	r2, [pc, #168]	; (800c8c4 <__sflush_r+0x108>)
 800c81c:	40ca      	lsrs	r2, r1
 800c81e:	07d6      	lsls	r6, r2, #31
 800c820:	d528      	bpl.n	800c874 <__sflush_r+0xb8>
 800c822:	2200      	movs	r2, #0
 800c824:	6062      	str	r2, [r4, #4]
 800c826:	04d9      	lsls	r1, r3, #19
 800c828:	6922      	ldr	r2, [r4, #16]
 800c82a:	6022      	str	r2, [r4, #0]
 800c82c:	d504      	bpl.n	800c838 <__sflush_r+0x7c>
 800c82e:	1c42      	adds	r2, r0, #1
 800c830:	d101      	bne.n	800c836 <__sflush_r+0x7a>
 800c832:	682b      	ldr	r3, [r5, #0]
 800c834:	b903      	cbnz	r3, 800c838 <__sflush_r+0x7c>
 800c836:	6560      	str	r0, [r4, #84]	; 0x54
 800c838:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c83a:	602f      	str	r7, [r5, #0]
 800c83c:	2900      	cmp	r1, #0
 800c83e:	d0ca      	beq.n	800c7d6 <__sflush_r+0x1a>
 800c840:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c844:	4299      	cmp	r1, r3
 800c846:	d002      	beq.n	800c84e <__sflush_r+0x92>
 800c848:	4628      	mov	r0, r5
 800c84a:	f7ff faa5 	bl	800bd98 <_free_r>
 800c84e:	2000      	movs	r0, #0
 800c850:	6360      	str	r0, [r4, #52]	; 0x34
 800c852:	e7c1      	b.n	800c7d8 <__sflush_r+0x1c>
 800c854:	6a21      	ldr	r1, [r4, #32]
 800c856:	2301      	movs	r3, #1
 800c858:	4628      	mov	r0, r5
 800c85a:	47b0      	blx	r6
 800c85c:	1c41      	adds	r1, r0, #1
 800c85e:	d1c7      	bne.n	800c7f0 <__sflush_r+0x34>
 800c860:	682b      	ldr	r3, [r5, #0]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d0c4      	beq.n	800c7f0 <__sflush_r+0x34>
 800c866:	2b1d      	cmp	r3, #29
 800c868:	d001      	beq.n	800c86e <__sflush_r+0xb2>
 800c86a:	2b16      	cmp	r3, #22
 800c86c:	d101      	bne.n	800c872 <__sflush_r+0xb6>
 800c86e:	602f      	str	r7, [r5, #0]
 800c870:	e7b1      	b.n	800c7d6 <__sflush_r+0x1a>
 800c872:	89a3      	ldrh	r3, [r4, #12]
 800c874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c878:	81a3      	strh	r3, [r4, #12]
 800c87a:	e7ad      	b.n	800c7d8 <__sflush_r+0x1c>
 800c87c:	690f      	ldr	r7, [r1, #16]
 800c87e:	2f00      	cmp	r7, #0
 800c880:	d0a9      	beq.n	800c7d6 <__sflush_r+0x1a>
 800c882:	0793      	lsls	r3, r2, #30
 800c884:	680e      	ldr	r6, [r1, #0]
 800c886:	bf08      	it	eq
 800c888:	694b      	ldreq	r3, [r1, #20]
 800c88a:	600f      	str	r7, [r1, #0]
 800c88c:	bf18      	it	ne
 800c88e:	2300      	movne	r3, #0
 800c890:	eba6 0807 	sub.w	r8, r6, r7
 800c894:	608b      	str	r3, [r1, #8]
 800c896:	f1b8 0f00 	cmp.w	r8, #0
 800c89a:	dd9c      	ble.n	800c7d6 <__sflush_r+0x1a>
 800c89c:	6a21      	ldr	r1, [r4, #32]
 800c89e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c8a0:	4643      	mov	r3, r8
 800c8a2:	463a      	mov	r2, r7
 800c8a4:	4628      	mov	r0, r5
 800c8a6:	47b0      	blx	r6
 800c8a8:	2800      	cmp	r0, #0
 800c8aa:	dc06      	bgt.n	800c8ba <__sflush_r+0xfe>
 800c8ac:	89a3      	ldrh	r3, [r4, #12]
 800c8ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8b2:	81a3      	strh	r3, [r4, #12]
 800c8b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c8b8:	e78e      	b.n	800c7d8 <__sflush_r+0x1c>
 800c8ba:	4407      	add	r7, r0
 800c8bc:	eba8 0800 	sub.w	r8, r8, r0
 800c8c0:	e7e9      	b.n	800c896 <__sflush_r+0xda>
 800c8c2:	bf00      	nop
 800c8c4:	20400001 	.word	0x20400001

0800c8c8 <_fflush_r>:
 800c8c8:	b538      	push	{r3, r4, r5, lr}
 800c8ca:	690b      	ldr	r3, [r1, #16]
 800c8cc:	4605      	mov	r5, r0
 800c8ce:	460c      	mov	r4, r1
 800c8d0:	b913      	cbnz	r3, 800c8d8 <_fflush_r+0x10>
 800c8d2:	2500      	movs	r5, #0
 800c8d4:	4628      	mov	r0, r5
 800c8d6:	bd38      	pop	{r3, r4, r5, pc}
 800c8d8:	b118      	cbz	r0, 800c8e2 <_fflush_r+0x1a>
 800c8da:	6983      	ldr	r3, [r0, #24]
 800c8dc:	b90b      	cbnz	r3, 800c8e2 <_fflush_r+0x1a>
 800c8de:	f000 f887 	bl	800c9f0 <__sinit>
 800c8e2:	4b14      	ldr	r3, [pc, #80]	; (800c934 <_fflush_r+0x6c>)
 800c8e4:	429c      	cmp	r4, r3
 800c8e6:	d11b      	bne.n	800c920 <_fflush_r+0x58>
 800c8e8:	686c      	ldr	r4, [r5, #4]
 800c8ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d0ef      	beq.n	800c8d2 <_fflush_r+0xa>
 800c8f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c8f4:	07d0      	lsls	r0, r2, #31
 800c8f6:	d404      	bmi.n	800c902 <_fflush_r+0x3a>
 800c8f8:	0599      	lsls	r1, r3, #22
 800c8fa:	d402      	bmi.n	800c902 <_fflush_r+0x3a>
 800c8fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c8fe:	f000 f915 	bl	800cb2c <__retarget_lock_acquire_recursive>
 800c902:	4628      	mov	r0, r5
 800c904:	4621      	mov	r1, r4
 800c906:	f7ff ff59 	bl	800c7bc <__sflush_r>
 800c90a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c90c:	07da      	lsls	r2, r3, #31
 800c90e:	4605      	mov	r5, r0
 800c910:	d4e0      	bmi.n	800c8d4 <_fflush_r+0xc>
 800c912:	89a3      	ldrh	r3, [r4, #12]
 800c914:	059b      	lsls	r3, r3, #22
 800c916:	d4dd      	bmi.n	800c8d4 <_fflush_r+0xc>
 800c918:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c91a:	f000 f908 	bl	800cb2e <__retarget_lock_release_recursive>
 800c91e:	e7d9      	b.n	800c8d4 <_fflush_r+0xc>
 800c920:	4b05      	ldr	r3, [pc, #20]	; (800c938 <_fflush_r+0x70>)
 800c922:	429c      	cmp	r4, r3
 800c924:	d101      	bne.n	800c92a <_fflush_r+0x62>
 800c926:	68ac      	ldr	r4, [r5, #8]
 800c928:	e7df      	b.n	800c8ea <_fflush_r+0x22>
 800c92a:	4b04      	ldr	r3, [pc, #16]	; (800c93c <_fflush_r+0x74>)
 800c92c:	429c      	cmp	r4, r3
 800c92e:	bf08      	it	eq
 800c930:	68ec      	ldreq	r4, [r5, #12]
 800c932:	e7da      	b.n	800c8ea <_fflush_r+0x22>
 800c934:	0800d5f4 	.word	0x0800d5f4
 800c938:	0800d614 	.word	0x0800d614
 800c93c:	0800d5d4 	.word	0x0800d5d4

0800c940 <std>:
 800c940:	2300      	movs	r3, #0
 800c942:	b510      	push	{r4, lr}
 800c944:	4604      	mov	r4, r0
 800c946:	e9c0 3300 	strd	r3, r3, [r0]
 800c94a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c94e:	6083      	str	r3, [r0, #8]
 800c950:	8181      	strh	r1, [r0, #12]
 800c952:	6643      	str	r3, [r0, #100]	; 0x64
 800c954:	81c2      	strh	r2, [r0, #14]
 800c956:	6183      	str	r3, [r0, #24]
 800c958:	4619      	mov	r1, r3
 800c95a:	2208      	movs	r2, #8
 800c95c:	305c      	adds	r0, #92	; 0x5c
 800c95e:	f7fd fb53 	bl	800a008 <memset>
 800c962:	4b05      	ldr	r3, [pc, #20]	; (800c978 <std+0x38>)
 800c964:	6263      	str	r3, [r4, #36]	; 0x24
 800c966:	4b05      	ldr	r3, [pc, #20]	; (800c97c <std+0x3c>)
 800c968:	62a3      	str	r3, [r4, #40]	; 0x28
 800c96a:	4b05      	ldr	r3, [pc, #20]	; (800c980 <std+0x40>)
 800c96c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c96e:	4b05      	ldr	r3, [pc, #20]	; (800c984 <std+0x44>)
 800c970:	6224      	str	r4, [r4, #32]
 800c972:	6323      	str	r3, [r4, #48]	; 0x30
 800c974:	bd10      	pop	{r4, pc}
 800c976:	bf00      	nop
 800c978:	0800cc95 	.word	0x0800cc95
 800c97c:	0800ccb7 	.word	0x0800ccb7
 800c980:	0800ccef 	.word	0x0800ccef
 800c984:	0800cd13 	.word	0x0800cd13

0800c988 <_cleanup_r>:
 800c988:	4901      	ldr	r1, [pc, #4]	; (800c990 <_cleanup_r+0x8>)
 800c98a:	f000 b8af 	b.w	800caec <_fwalk_reent>
 800c98e:	bf00      	nop
 800c990:	0800c8c9 	.word	0x0800c8c9

0800c994 <__sfmoreglue>:
 800c994:	b570      	push	{r4, r5, r6, lr}
 800c996:	2268      	movs	r2, #104	; 0x68
 800c998:	1e4d      	subs	r5, r1, #1
 800c99a:	4355      	muls	r5, r2
 800c99c:	460e      	mov	r6, r1
 800c99e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c9a2:	f7ff fa65 	bl	800be70 <_malloc_r>
 800c9a6:	4604      	mov	r4, r0
 800c9a8:	b140      	cbz	r0, 800c9bc <__sfmoreglue+0x28>
 800c9aa:	2100      	movs	r1, #0
 800c9ac:	e9c0 1600 	strd	r1, r6, [r0]
 800c9b0:	300c      	adds	r0, #12
 800c9b2:	60a0      	str	r0, [r4, #8]
 800c9b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c9b8:	f7fd fb26 	bl	800a008 <memset>
 800c9bc:	4620      	mov	r0, r4
 800c9be:	bd70      	pop	{r4, r5, r6, pc}

0800c9c0 <__sfp_lock_acquire>:
 800c9c0:	4801      	ldr	r0, [pc, #4]	; (800c9c8 <__sfp_lock_acquire+0x8>)
 800c9c2:	f000 b8b3 	b.w	800cb2c <__retarget_lock_acquire_recursive>
 800c9c6:	bf00      	nop
 800c9c8:	20013151 	.word	0x20013151

0800c9cc <__sfp_lock_release>:
 800c9cc:	4801      	ldr	r0, [pc, #4]	; (800c9d4 <__sfp_lock_release+0x8>)
 800c9ce:	f000 b8ae 	b.w	800cb2e <__retarget_lock_release_recursive>
 800c9d2:	bf00      	nop
 800c9d4:	20013151 	.word	0x20013151

0800c9d8 <__sinit_lock_acquire>:
 800c9d8:	4801      	ldr	r0, [pc, #4]	; (800c9e0 <__sinit_lock_acquire+0x8>)
 800c9da:	f000 b8a7 	b.w	800cb2c <__retarget_lock_acquire_recursive>
 800c9de:	bf00      	nop
 800c9e0:	20013152 	.word	0x20013152

0800c9e4 <__sinit_lock_release>:
 800c9e4:	4801      	ldr	r0, [pc, #4]	; (800c9ec <__sinit_lock_release+0x8>)
 800c9e6:	f000 b8a2 	b.w	800cb2e <__retarget_lock_release_recursive>
 800c9ea:	bf00      	nop
 800c9ec:	20013152 	.word	0x20013152

0800c9f0 <__sinit>:
 800c9f0:	b510      	push	{r4, lr}
 800c9f2:	4604      	mov	r4, r0
 800c9f4:	f7ff fff0 	bl	800c9d8 <__sinit_lock_acquire>
 800c9f8:	69a3      	ldr	r3, [r4, #24]
 800c9fa:	b11b      	cbz	r3, 800ca04 <__sinit+0x14>
 800c9fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca00:	f7ff bff0 	b.w	800c9e4 <__sinit_lock_release>
 800ca04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ca08:	6523      	str	r3, [r4, #80]	; 0x50
 800ca0a:	4b13      	ldr	r3, [pc, #76]	; (800ca58 <__sinit+0x68>)
 800ca0c:	4a13      	ldr	r2, [pc, #76]	; (800ca5c <__sinit+0x6c>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	62a2      	str	r2, [r4, #40]	; 0x28
 800ca12:	42a3      	cmp	r3, r4
 800ca14:	bf04      	itt	eq
 800ca16:	2301      	moveq	r3, #1
 800ca18:	61a3      	streq	r3, [r4, #24]
 800ca1a:	4620      	mov	r0, r4
 800ca1c:	f000 f820 	bl	800ca60 <__sfp>
 800ca20:	6060      	str	r0, [r4, #4]
 800ca22:	4620      	mov	r0, r4
 800ca24:	f000 f81c 	bl	800ca60 <__sfp>
 800ca28:	60a0      	str	r0, [r4, #8]
 800ca2a:	4620      	mov	r0, r4
 800ca2c:	f000 f818 	bl	800ca60 <__sfp>
 800ca30:	2200      	movs	r2, #0
 800ca32:	60e0      	str	r0, [r4, #12]
 800ca34:	2104      	movs	r1, #4
 800ca36:	6860      	ldr	r0, [r4, #4]
 800ca38:	f7ff ff82 	bl	800c940 <std>
 800ca3c:	68a0      	ldr	r0, [r4, #8]
 800ca3e:	2201      	movs	r2, #1
 800ca40:	2109      	movs	r1, #9
 800ca42:	f7ff ff7d 	bl	800c940 <std>
 800ca46:	68e0      	ldr	r0, [r4, #12]
 800ca48:	2202      	movs	r2, #2
 800ca4a:	2112      	movs	r1, #18
 800ca4c:	f7ff ff78 	bl	800c940 <std>
 800ca50:	2301      	movs	r3, #1
 800ca52:	61a3      	str	r3, [r4, #24]
 800ca54:	e7d2      	b.n	800c9fc <__sinit+0xc>
 800ca56:	bf00      	nop
 800ca58:	0800d258 	.word	0x0800d258
 800ca5c:	0800c989 	.word	0x0800c989

0800ca60 <__sfp>:
 800ca60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca62:	4607      	mov	r7, r0
 800ca64:	f7ff ffac 	bl	800c9c0 <__sfp_lock_acquire>
 800ca68:	4b1e      	ldr	r3, [pc, #120]	; (800cae4 <__sfp+0x84>)
 800ca6a:	681e      	ldr	r6, [r3, #0]
 800ca6c:	69b3      	ldr	r3, [r6, #24]
 800ca6e:	b913      	cbnz	r3, 800ca76 <__sfp+0x16>
 800ca70:	4630      	mov	r0, r6
 800ca72:	f7ff ffbd 	bl	800c9f0 <__sinit>
 800ca76:	3648      	adds	r6, #72	; 0x48
 800ca78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ca7c:	3b01      	subs	r3, #1
 800ca7e:	d503      	bpl.n	800ca88 <__sfp+0x28>
 800ca80:	6833      	ldr	r3, [r6, #0]
 800ca82:	b30b      	cbz	r3, 800cac8 <__sfp+0x68>
 800ca84:	6836      	ldr	r6, [r6, #0]
 800ca86:	e7f7      	b.n	800ca78 <__sfp+0x18>
 800ca88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ca8c:	b9d5      	cbnz	r5, 800cac4 <__sfp+0x64>
 800ca8e:	4b16      	ldr	r3, [pc, #88]	; (800cae8 <__sfp+0x88>)
 800ca90:	60e3      	str	r3, [r4, #12]
 800ca92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ca96:	6665      	str	r5, [r4, #100]	; 0x64
 800ca98:	f000 f847 	bl	800cb2a <__retarget_lock_init_recursive>
 800ca9c:	f7ff ff96 	bl	800c9cc <__sfp_lock_release>
 800caa0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800caa4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800caa8:	6025      	str	r5, [r4, #0]
 800caaa:	61a5      	str	r5, [r4, #24]
 800caac:	2208      	movs	r2, #8
 800caae:	4629      	mov	r1, r5
 800cab0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cab4:	f7fd faa8 	bl	800a008 <memset>
 800cab8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cabc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cac0:	4620      	mov	r0, r4
 800cac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cac4:	3468      	adds	r4, #104	; 0x68
 800cac6:	e7d9      	b.n	800ca7c <__sfp+0x1c>
 800cac8:	2104      	movs	r1, #4
 800caca:	4638      	mov	r0, r7
 800cacc:	f7ff ff62 	bl	800c994 <__sfmoreglue>
 800cad0:	4604      	mov	r4, r0
 800cad2:	6030      	str	r0, [r6, #0]
 800cad4:	2800      	cmp	r0, #0
 800cad6:	d1d5      	bne.n	800ca84 <__sfp+0x24>
 800cad8:	f7ff ff78 	bl	800c9cc <__sfp_lock_release>
 800cadc:	230c      	movs	r3, #12
 800cade:	603b      	str	r3, [r7, #0]
 800cae0:	e7ee      	b.n	800cac0 <__sfp+0x60>
 800cae2:	bf00      	nop
 800cae4:	0800d258 	.word	0x0800d258
 800cae8:	ffff0001 	.word	0xffff0001

0800caec <_fwalk_reent>:
 800caec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800caf0:	4606      	mov	r6, r0
 800caf2:	4688      	mov	r8, r1
 800caf4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800caf8:	2700      	movs	r7, #0
 800cafa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cafe:	f1b9 0901 	subs.w	r9, r9, #1
 800cb02:	d505      	bpl.n	800cb10 <_fwalk_reent+0x24>
 800cb04:	6824      	ldr	r4, [r4, #0]
 800cb06:	2c00      	cmp	r4, #0
 800cb08:	d1f7      	bne.n	800cafa <_fwalk_reent+0xe>
 800cb0a:	4638      	mov	r0, r7
 800cb0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb10:	89ab      	ldrh	r3, [r5, #12]
 800cb12:	2b01      	cmp	r3, #1
 800cb14:	d907      	bls.n	800cb26 <_fwalk_reent+0x3a>
 800cb16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cb1a:	3301      	adds	r3, #1
 800cb1c:	d003      	beq.n	800cb26 <_fwalk_reent+0x3a>
 800cb1e:	4629      	mov	r1, r5
 800cb20:	4630      	mov	r0, r6
 800cb22:	47c0      	blx	r8
 800cb24:	4307      	orrs	r7, r0
 800cb26:	3568      	adds	r5, #104	; 0x68
 800cb28:	e7e9      	b.n	800cafe <_fwalk_reent+0x12>

0800cb2a <__retarget_lock_init_recursive>:
 800cb2a:	4770      	bx	lr

0800cb2c <__retarget_lock_acquire_recursive>:
 800cb2c:	4770      	bx	lr

0800cb2e <__retarget_lock_release_recursive>:
 800cb2e:	4770      	bx	lr

0800cb30 <__swhatbuf_r>:
 800cb30:	b570      	push	{r4, r5, r6, lr}
 800cb32:	460e      	mov	r6, r1
 800cb34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb38:	2900      	cmp	r1, #0
 800cb3a:	b096      	sub	sp, #88	; 0x58
 800cb3c:	4614      	mov	r4, r2
 800cb3e:	461d      	mov	r5, r3
 800cb40:	da08      	bge.n	800cb54 <__swhatbuf_r+0x24>
 800cb42:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cb46:	2200      	movs	r2, #0
 800cb48:	602a      	str	r2, [r5, #0]
 800cb4a:	061a      	lsls	r2, r3, #24
 800cb4c:	d410      	bmi.n	800cb70 <__swhatbuf_r+0x40>
 800cb4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb52:	e00e      	b.n	800cb72 <__swhatbuf_r+0x42>
 800cb54:	466a      	mov	r2, sp
 800cb56:	f000 f903 	bl	800cd60 <_fstat_r>
 800cb5a:	2800      	cmp	r0, #0
 800cb5c:	dbf1      	blt.n	800cb42 <__swhatbuf_r+0x12>
 800cb5e:	9a01      	ldr	r2, [sp, #4]
 800cb60:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cb64:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cb68:	425a      	negs	r2, r3
 800cb6a:	415a      	adcs	r2, r3
 800cb6c:	602a      	str	r2, [r5, #0]
 800cb6e:	e7ee      	b.n	800cb4e <__swhatbuf_r+0x1e>
 800cb70:	2340      	movs	r3, #64	; 0x40
 800cb72:	2000      	movs	r0, #0
 800cb74:	6023      	str	r3, [r4, #0]
 800cb76:	b016      	add	sp, #88	; 0x58
 800cb78:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cb7c <__smakebuf_r>:
 800cb7c:	898b      	ldrh	r3, [r1, #12]
 800cb7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cb80:	079d      	lsls	r5, r3, #30
 800cb82:	4606      	mov	r6, r0
 800cb84:	460c      	mov	r4, r1
 800cb86:	d507      	bpl.n	800cb98 <__smakebuf_r+0x1c>
 800cb88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cb8c:	6023      	str	r3, [r4, #0]
 800cb8e:	6123      	str	r3, [r4, #16]
 800cb90:	2301      	movs	r3, #1
 800cb92:	6163      	str	r3, [r4, #20]
 800cb94:	b002      	add	sp, #8
 800cb96:	bd70      	pop	{r4, r5, r6, pc}
 800cb98:	ab01      	add	r3, sp, #4
 800cb9a:	466a      	mov	r2, sp
 800cb9c:	f7ff ffc8 	bl	800cb30 <__swhatbuf_r>
 800cba0:	9900      	ldr	r1, [sp, #0]
 800cba2:	4605      	mov	r5, r0
 800cba4:	4630      	mov	r0, r6
 800cba6:	f7ff f963 	bl	800be70 <_malloc_r>
 800cbaa:	b948      	cbnz	r0, 800cbc0 <__smakebuf_r+0x44>
 800cbac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbb0:	059a      	lsls	r2, r3, #22
 800cbb2:	d4ef      	bmi.n	800cb94 <__smakebuf_r+0x18>
 800cbb4:	f023 0303 	bic.w	r3, r3, #3
 800cbb8:	f043 0302 	orr.w	r3, r3, #2
 800cbbc:	81a3      	strh	r3, [r4, #12]
 800cbbe:	e7e3      	b.n	800cb88 <__smakebuf_r+0xc>
 800cbc0:	4b0d      	ldr	r3, [pc, #52]	; (800cbf8 <__smakebuf_r+0x7c>)
 800cbc2:	62b3      	str	r3, [r6, #40]	; 0x28
 800cbc4:	89a3      	ldrh	r3, [r4, #12]
 800cbc6:	6020      	str	r0, [r4, #0]
 800cbc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbcc:	81a3      	strh	r3, [r4, #12]
 800cbce:	9b00      	ldr	r3, [sp, #0]
 800cbd0:	6163      	str	r3, [r4, #20]
 800cbd2:	9b01      	ldr	r3, [sp, #4]
 800cbd4:	6120      	str	r0, [r4, #16]
 800cbd6:	b15b      	cbz	r3, 800cbf0 <__smakebuf_r+0x74>
 800cbd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cbdc:	4630      	mov	r0, r6
 800cbde:	f000 f8d1 	bl	800cd84 <_isatty_r>
 800cbe2:	b128      	cbz	r0, 800cbf0 <__smakebuf_r+0x74>
 800cbe4:	89a3      	ldrh	r3, [r4, #12]
 800cbe6:	f023 0303 	bic.w	r3, r3, #3
 800cbea:	f043 0301 	orr.w	r3, r3, #1
 800cbee:	81a3      	strh	r3, [r4, #12]
 800cbf0:	89a0      	ldrh	r0, [r4, #12]
 800cbf2:	4305      	orrs	r5, r0
 800cbf4:	81a5      	strh	r5, [r4, #12]
 800cbf6:	e7cd      	b.n	800cb94 <__smakebuf_r+0x18>
 800cbf8:	0800c989 	.word	0x0800c989

0800cbfc <_malloc_usable_size_r>:
 800cbfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc00:	1f18      	subs	r0, r3, #4
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	bfbc      	itt	lt
 800cc06:	580b      	ldrlt	r3, [r1, r0]
 800cc08:	18c0      	addlt	r0, r0, r3
 800cc0a:	4770      	bx	lr

0800cc0c <_raise_r>:
 800cc0c:	291f      	cmp	r1, #31
 800cc0e:	b538      	push	{r3, r4, r5, lr}
 800cc10:	4604      	mov	r4, r0
 800cc12:	460d      	mov	r5, r1
 800cc14:	d904      	bls.n	800cc20 <_raise_r+0x14>
 800cc16:	2316      	movs	r3, #22
 800cc18:	6003      	str	r3, [r0, #0]
 800cc1a:	f04f 30ff 	mov.w	r0, #4294967295
 800cc1e:	bd38      	pop	{r3, r4, r5, pc}
 800cc20:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cc22:	b112      	cbz	r2, 800cc2a <_raise_r+0x1e>
 800cc24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cc28:	b94b      	cbnz	r3, 800cc3e <_raise_r+0x32>
 800cc2a:	4620      	mov	r0, r4
 800cc2c:	f000 f830 	bl	800cc90 <_getpid_r>
 800cc30:	462a      	mov	r2, r5
 800cc32:	4601      	mov	r1, r0
 800cc34:	4620      	mov	r0, r4
 800cc36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc3a:	f000 b817 	b.w	800cc6c <_kill_r>
 800cc3e:	2b01      	cmp	r3, #1
 800cc40:	d00a      	beq.n	800cc58 <_raise_r+0x4c>
 800cc42:	1c59      	adds	r1, r3, #1
 800cc44:	d103      	bne.n	800cc4e <_raise_r+0x42>
 800cc46:	2316      	movs	r3, #22
 800cc48:	6003      	str	r3, [r0, #0]
 800cc4a:	2001      	movs	r0, #1
 800cc4c:	e7e7      	b.n	800cc1e <_raise_r+0x12>
 800cc4e:	2400      	movs	r4, #0
 800cc50:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cc54:	4628      	mov	r0, r5
 800cc56:	4798      	blx	r3
 800cc58:	2000      	movs	r0, #0
 800cc5a:	e7e0      	b.n	800cc1e <_raise_r+0x12>

0800cc5c <raise>:
 800cc5c:	4b02      	ldr	r3, [pc, #8]	; (800cc68 <raise+0xc>)
 800cc5e:	4601      	mov	r1, r0
 800cc60:	6818      	ldr	r0, [r3, #0]
 800cc62:	f7ff bfd3 	b.w	800cc0c <_raise_r>
 800cc66:	bf00      	nop
 800cc68:	20000044 	.word	0x20000044

0800cc6c <_kill_r>:
 800cc6c:	b538      	push	{r3, r4, r5, lr}
 800cc6e:	4d07      	ldr	r5, [pc, #28]	; (800cc8c <_kill_r+0x20>)
 800cc70:	2300      	movs	r3, #0
 800cc72:	4604      	mov	r4, r0
 800cc74:	4608      	mov	r0, r1
 800cc76:	4611      	mov	r1, r2
 800cc78:	602b      	str	r3, [r5, #0]
 800cc7a:	f7f7 f913 	bl	8003ea4 <_kill>
 800cc7e:	1c43      	adds	r3, r0, #1
 800cc80:	d102      	bne.n	800cc88 <_kill_r+0x1c>
 800cc82:	682b      	ldr	r3, [r5, #0]
 800cc84:	b103      	cbz	r3, 800cc88 <_kill_r+0x1c>
 800cc86:	6023      	str	r3, [r4, #0]
 800cc88:	bd38      	pop	{r3, r4, r5, pc}
 800cc8a:	bf00      	nop
 800cc8c:	2001314c 	.word	0x2001314c

0800cc90 <_getpid_r>:
 800cc90:	f7f7 b900 	b.w	8003e94 <_getpid>

0800cc94 <__sread>:
 800cc94:	b510      	push	{r4, lr}
 800cc96:	460c      	mov	r4, r1
 800cc98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc9c:	f000 f894 	bl	800cdc8 <_read_r>
 800cca0:	2800      	cmp	r0, #0
 800cca2:	bfab      	itete	ge
 800cca4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cca6:	89a3      	ldrhlt	r3, [r4, #12]
 800cca8:	181b      	addge	r3, r3, r0
 800ccaa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ccae:	bfac      	ite	ge
 800ccb0:	6563      	strge	r3, [r4, #84]	; 0x54
 800ccb2:	81a3      	strhlt	r3, [r4, #12]
 800ccb4:	bd10      	pop	{r4, pc}

0800ccb6 <__swrite>:
 800ccb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccba:	461f      	mov	r7, r3
 800ccbc:	898b      	ldrh	r3, [r1, #12]
 800ccbe:	05db      	lsls	r3, r3, #23
 800ccc0:	4605      	mov	r5, r0
 800ccc2:	460c      	mov	r4, r1
 800ccc4:	4616      	mov	r6, r2
 800ccc6:	d505      	bpl.n	800ccd4 <__swrite+0x1e>
 800ccc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cccc:	2302      	movs	r3, #2
 800ccce:	2200      	movs	r2, #0
 800ccd0:	f000 f868 	bl	800cda4 <_lseek_r>
 800ccd4:	89a3      	ldrh	r3, [r4, #12]
 800ccd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ccda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ccde:	81a3      	strh	r3, [r4, #12]
 800cce0:	4632      	mov	r2, r6
 800cce2:	463b      	mov	r3, r7
 800cce4:	4628      	mov	r0, r5
 800cce6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ccea:	f000 b817 	b.w	800cd1c <_write_r>

0800ccee <__sseek>:
 800ccee:	b510      	push	{r4, lr}
 800ccf0:	460c      	mov	r4, r1
 800ccf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccf6:	f000 f855 	bl	800cda4 <_lseek_r>
 800ccfa:	1c43      	adds	r3, r0, #1
 800ccfc:	89a3      	ldrh	r3, [r4, #12]
 800ccfe:	bf15      	itete	ne
 800cd00:	6560      	strne	r0, [r4, #84]	; 0x54
 800cd02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cd06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cd0a:	81a3      	strheq	r3, [r4, #12]
 800cd0c:	bf18      	it	ne
 800cd0e:	81a3      	strhne	r3, [r4, #12]
 800cd10:	bd10      	pop	{r4, pc}

0800cd12 <__sclose>:
 800cd12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd16:	f000 b813 	b.w	800cd40 <_close_r>
	...

0800cd1c <_write_r>:
 800cd1c:	b538      	push	{r3, r4, r5, lr}
 800cd1e:	4d07      	ldr	r5, [pc, #28]	; (800cd3c <_write_r+0x20>)
 800cd20:	4604      	mov	r4, r0
 800cd22:	4608      	mov	r0, r1
 800cd24:	4611      	mov	r1, r2
 800cd26:	2200      	movs	r2, #0
 800cd28:	602a      	str	r2, [r5, #0]
 800cd2a:	461a      	mov	r2, r3
 800cd2c:	f7f7 f8f1 	bl	8003f12 <_write>
 800cd30:	1c43      	adds	r3, r0, #1
 800cd32:	d102      	bne.n	800cd3a <_write_r+0x1e>
 800cd34:	682b      	ldr	r3, [r5, #0]
 800cd36:	b103      	cbz	r3, 800cd3a <_write_r+0x1e>
 800cd38:	6023      	str	r3, [r4, #0]
 800cd3a:	bd38      	pop	{r3, r4, r5, pc}
 800cd3c:	2001314c 	.word	0x2001314c

0800cd40 <_close_r>:
 800cd40:	b538      	push	{r3, r4, r5, lr}
 800cd42:	4d06      	ldr	r5, [pc, #24]	; (800cd5c <_close_r+0x1c>)
 800cd44:	2300      	movs	r3, #0
 800cd46:	4604      	mov	r4, r0
 800cd48:	4608      	mov	r0, r1
 800cd4a:	602b      	str	r3, [r5, #0]
 800cd4c:	f7f7 f8fd 	bl	8003f4a <_close>
 800cd50:	1c43      	adds	r3, r0, #1
 800cd52:	d102      	bne.n	800cd5a <_close_r+0x1a>
 800cd54:	682b      	ldr	r3, [r5, #0]
 800cd56:	b103      	cbz	r3, 800cd5a <_close_r+0x1a>
 800cd58:	6023      	str	r3, [r4, #0]
 800cd5a:	bd38      	pop	{r3, r4, r5, pc}
 800cd5c:	2001314c 	.word	0x2001314c

0800cd60 <_fstat_r>:
 800cd60:	b538      	push	{r3, r4, r5, lr}
 800cd62:	4d07      	ldr	r5, [pc, #28]	; (800cd80 <_fstat_r+0x20>)
 800cd64:	2300      	movs	r3, #0
 800cd66:	4604      	mov	r4, r0
 800cd68:	4608      	mov	r0, r1
 800cd6a:	4611      	mov	r1, r2
 800cd6c:	602b      	str	r3, [r5, #0]
 800cd6e:	f7f7 f8f8 	bl	8003f62 <_fstat>
 800cd72:	1c43      	adds	r3, r0, #1
 800cd74:	d102      	bne.n	800cd7c <_fstat_r+0x1c>
 800cd76:	682b      	ldr	r3, [r5, #0]
 800cd78:	b103      	cbz	r3, 800cd7c <_fstat_r+0x1c>
 800cd7a:	6023      	str	r3, [r4, #0]
 800cd7c:	bd38      	pop	{r3, r4, r5, pc}
 800cd7e:	bf00      	nop
 800cd80:	2001314c 	.word	0x2001314c

0800cd84 <_isatty_r>:
 800cd84:	b538      	push	{r3, r4, r5, lr}
 800cd86:	4d06      	ldr	r5, [pc, #24]	; (800cda0 <_isatty_r+0x1c>)
 800cd88:	2300      	movs	r3, #0
 800cd8a:	4604      	mov	r4, r0
 800cd8c:	4608      	mov	r0, r1
 800cd8e:	602b      	str	r3, [r5, #0]
 800cd90:	f7f7 f8f7 	bl	8003f82 <_isatty>
 800cd94:	1c43      	adds	r3, r0, #1
 800cd96:	d102      	bne.n	800cd9e <_isatty_r+0x1a>
 800cd98:	682b      	ldr	r3, [r5, #0]
 800cd9a:	b103      	cbz	r3, 800cd9e <_isatty_r+0x1a>
 800cd9c:	6023      	str	r3, [r4, #0]
 800cd9e:	bd38      	pop	{r3, r4, r5, pc}
 800cda0:	2001314c 	.word	0x2001314c

0800cda4 <_lseek_r>:
 800cda4:	b538      	push	{r3, r4, r5, lr}
 800cda6:	4d07      	ldr	r5, [pc, #28]	; (800cdc4 <_lseek_r+0x20>)
 800cda8:	4604      	mov	r4, r0
 800cdaa:	4608      	mov	r0, r1
 800cdac:	4611      	mov	r1, r2
 800cdae:	2200      	movs	r2, #0
 800cdb0:	602a      	str	r2, [r5, #0]
 800cdb2:	461a      	mov	r2, r3
 800cdb4:	f7f7 f8f0 	bl	8003f98 <_lseek>
 800cdb8:	1c43      	adds	r3, r0, #1
 800cdba:	d102      	bne.n	800cdc2 <_lseek_r+0x1e>
 800cdbc:	682b      	ldr	r3, [r5, #0]
 800cdbe:	b103      	cbz	r3, 800cdc2 <_lseek_r+0x1e>
 800cdc0:	6023      	str	r3, [r4, #0]
 800cdc2:	bd38      	pop	{r3, r4, r5, pc}
 800cdc4:	2001314c 	.word	0x2001314c

0800cdc8 <_read_r>:
 800cdc8:	b538      	push	{r3, r4, r5, lr}
 800cdca:	4d07      	ldr	r5, [pc, #28]	; (800cde8 <_read_r+0x20>)
 800cdcc:	4604      	mov	r4, r0
 800cdce:	4608      	mov	r0, r1
 800cdd0:	4611      	mov	r1, r2
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	602a      	str	r2, [r5, #0]
 800cdd6:	461a      	mov	r2, r3
 800cdd8:	f7f7 f87e 	bl	8003ed8 <_read>
 800cddc:	1c43      	adds	r3, r0, #1
 800cdde:	d102      	bne.n	800cde6 <_read_r+0x1e>
 800cde0:	682b      	ldr	r3, [r5, #0]
 800cde2:	b103      	cbz	r3, 800cde6 <_read_r+0x1e>
 800cde4:	6023      	str	r3, [r4, #0]
 800cde6:	bd38      	pop	{r3, r4, r5, pc}
 800cde8:	2001314c 	.word	0x2001314c

0800cdec <_init>:
 800cdec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdee:	bf00      	nop
 800cdf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdf2:	bc08      	pop	{r3}
 800cdf4:	469e      	mov	lr, r3
 800cdf6:	4770      	bx	lr

0800cdf8 <_fini>:
 800cdf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdfa:	bf00      	nop
 800cdfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdfe:	bc08      	pop	{r3}
 800ce00:	469e      	mov	lr, r3
 800ce02:	4770      	bx	lr
