
RTOS_Data_Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009918  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000784  08009aa8  08009aa8  00019aa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a22c  0800a22c  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  0800a22c  0800a22c  0001a22c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a234  0800a234  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a234  0800a234  0001a234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a238  0800a238  0001a238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800a23c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020208  2**0
                  CONTENTS
 10 .bss          000000d0  20000208  20000208  00020208  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002d8  200002d8  00020208  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dcbf  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d94  00000000  00000000  0002def7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b78  00000000  00000000  0002fc90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ad8  00000000  00000000  00030808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022000  00000000  00000000  000312e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f094  00000000  00000000  000532e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8823  00000000  00000000  00062374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012ab97  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000041b0  00000000  00000000  0012abe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009a90 	.word	0x08009a90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	08009a90 	.word	0x08009a90

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <bme68x_init>:
/* @brief This API reads the chip-id of the sensor which is the first step to
* verify the sensor and also calibrates the sensor
* As this API is the entry point, call this API before using other APIs.
*/
int8_t bme68x_init(struct bme68x_dev *dev)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    (void) bme68x_soft_reset(dev);
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f000 f8fb 	bl	80010b0 <bme68x_soft_reset>

    rslt = bme68x_get_regs(BME68X_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8000eba:	6879      	ldr	r1, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	20d0      	movs	r0, #208	; 0xd0
 8000ec2:	f000 f8b1 	bl	8001028 <bme68x_get_regs>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 8000eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d114      	bne.n	8000efc <bme68x_init+0x50>
    {
        if (dev->chip_id == BME68X_CHIP_ID)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b61      	cmp	r3, #97	; 0x61
 8000ed8:	d10e      	bne.n	8000ef8 <bme68x_init+0x4c>
        {
            /* Read Variant ID */
            rslt = read_variant_id(dev);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f001 ffe4 	bl	8002ea8 <read_variant_id>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	73fb      	strb	r3, [r7, #15]

            if (rslt == BME68X_OK)
 8000ee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d107      	bne.n	8000efc <bme68x_init+0x50>
            {
                /* Get the Calibration data */
                rslt = get_calib_data(dev);
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f001 fed7 	bl	8002ca0 <get_calib_data>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	73fb      	strb	r3, [r7, #15]
 8000ef6:	e001      	b.n	8000efc <bme68x_init+0x50>
            }
        }
        else
        {
            rslt = BME68X_E_DEV_NOT_FOUND;
 8000ef8:	23fd      	movs	r3, #253	; 0xfd
 8000efa:	73fb      	strb	r3, [r7, #15]
        }
    }
    return rslt;
 8000efc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3710      	adds	r7, #16
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <bme68x_set_regs>:

/*
 * @brief This API writes the given data to the register address of the sensor
 */
int8_t bme68x_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 8000f08:	b5b0      	push	{r4, r5, r7, lr}
 8000f0a:	b08a      	sub	sp, #40	; 0x28
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
 8000f14:	603b      	str	r3, [r7, #0]
    int8_t rslt;

    /* Length of the temporary buffer is 2*(length of register)*/
    uint8_t tmp_buff[BME68X_LEN_INTERLEAVE_BUFF] = { 0 };
 8000f16:	2300      	movs	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	f107 0314 	add.w	r3, r7, #20
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
 8000f26:	60da      	str	r2, [r3, #12]
    uint16_t index;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000f28:	6838      	ldr	r0, [r7, #0]
 8000f2a:	f001 fc93 	bl	8002854 <null_ptr_check>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if ((rslt == BME68X_OK) && reg_addr && reg_data)
 8000f34:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d16c      	bne.n	8001016 <bme68x_set_regs+0x10e>
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d069      	beq.n	8001016 <bme68x_set_regs+0x10e>
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d066      	beq.n	8001016 <bme68x_set_regs+0x10e>
    {
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d05d      	beq.n	800100a <bme68x_set_regs+0x102>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2b0a      	cmp	r3, #10
 8000f52:	d85a      	bhi.n	800100a <bme68x_set_regs+0x102>
        {
            /* Interleave the 2 arrays */
            for (index = 0; index < len; index++)
 8000f54:	2300      	movs	r3, #0
 8000f56:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000f58:	e034      	b.n	8000fc4 <bme68x_set_regs+0xbc>
            {
                if (dev->intf == BME68X_SPI_INTF)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	7b1b      	ldrb	r3, [r3, #12]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d118      	bne.n	8000f94 <bme68x_set_regs+0x8c>
                {
                    /* Set the memory page */
                    rslt = set_mem_page(reg_addr[index], dev);
 8000f62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f64:	68fa      	ldr	r2, [r7, #12]
 8000f66:	4413      	add	r3, r2
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	6839      	ldr	r1, [r7, #0]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f001 fbb0 	bl	80026d2 <set_mem_page>
 8000f72:	4603      	mov	r3, r0
 8000f74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8000f78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	781a      	ldrb	r2, [r3, #0]
 8000f80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000f88:	b2d2      	uxtb	r2, r2
 8000f8a:	3328      	adds	r3, #40	; 0x28
 8000f8c:	443b      	add	r3, r7
 8000f8e:	f803 2c18 	strb.w	r2, [r3, #-24]
 8000f92:	e009      	b.n	8000fa8 <bme68x_set_regs+0xa0>
                }
                else
                {
                    tmp_buff[(2 * index)] = reg_addr[index];
 8000f94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	441a      	add	r2, r3
 8000f9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	7812      	ldrb	r2, [r2, #0]
 8000fa0:	3328      	adds	r3, #40	; 0x28
 8000fa2:	443b      	add	r3, r7
 8000fa4:	f803 2c18 	strb.w	r2, [r3, #-24]
                }

                tmp_buff[(2 * index) + 1] = reg_data[index];
 8000fa8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	441a      	add	r2, r3
 8000fae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	7812      	ldrb	r2, [r2, #0]
 8000fb6:	3328      	adds	r3, #40	; 0x28
 8000fb8:	443b      	add	r3, r7
 8000fba:	f803 2c18 	strb.w	r2, [r3, #-24]
            for (index = 0; index < len; index++)
 8000fbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000fc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d8c6      	bhi.n	8000f5a <bme68x_set_regs+0x52>
            }

            /* Write the interleaved array */
            if (rslt == BME68X_OK)
 8000fcc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d11e      	bne.n	8001012 <bme68x_set_regs+0x10a>
            {
                dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1], (2 * len) - 1, dev->intf_ptr);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8000fd8:	7c38      	ldrb	r0, [r7, #16]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	1e5a      	subs	r2, r3, #1
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685d      	ldr	r5, [r3, #4]
 8000fe4:	f107 0310 	add.w	r3, r7, #16
 8000fe8:	1c59      	adds	r1, r3, #1
 8000fea:	462b      	mov	r3, r5
 8000fec:	47a0      	blx	r4
 8000fee:	4603      	mov	r3, r0
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
                if (dev->intf_rslt != 0)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d007      	beq.n	8001012 <bme68x_set_regs+0x10a>
                {
                    rslt = BME68X_E_COM_FAIL;
 8001002:	23fe      	movs	r3, #254	; 0xfe
 8001004:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if (rslt == BME68X_OK)
 8001008:	e003      	b.n	8001012 <bme68x_set_regs+0x10a>
                }
            }
        }
        else
        {
            rslt = BME68X_E_INVALID_LENGTH;
 800100a:	23fc      	movs	r3, #252	; 0xfc
 800100c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8001010:	e004      	b.n	800101c <bme68x_set_regs+0x114>
            if (rslt == BME68X_OK)
 8001012:	bf00      	nop
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8001014:	e002      	b.n	800101c <bme68x_set_regs+0x114>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8001016:	23ff      	movs	r3, #255	; 0xff
 8001018:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 800101c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001020:	4618      	mov	r0, r3
 8001022:	3728      	adds	r7, #40	; 0x28
 8001024:	46bd      	mov	sp, r7
 8001026:	bdb0      	pop	{r4, r5, r7, pc}

08001028 <bme68x_get_regs>:

/*
 * @brief This API reads the data from the given register address of sensor.
 */
int8_t bme68x_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b087      	sub	sp, #28
 800102c:	af00      	add	r7, sp, #0
 800102e:	60b9      	str	r1, [r7, #8]
 8001030:	607a      	str	r2, [r7, #4]
 8001032:	603b      	str	r3, [r7, #0]
 8001034:	4603      	mov	r3, r0
 8001036:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001038:	6838      	ldr	r0, [r7, #0]
 800103a:	f001 fc0b 	bl	8002854 <null_ptr_check>
 800103e:	4603      	mov	r3, r0
 8001040:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BME68X_OK) && reg_data)
 8001042:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d12a      	bne.n	80010a0 <bme68x_get_regs+0x78>
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d027      	beq.n	80010a0 <bme68x_get_regs+0x78>
    {
        if (dev->intf == BME68X_SPI_INTF)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	7b1b      	ldrb	r3, [r3, #12]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d10e      	bne.n	8001076 <bme68x_get_regs+0x4e>
        {
            /* Set the memory page */
            rslt = set_mem_page(reg_addr, dev);
 8001058:	7bfb      	ldrb	r3, [r7, #15]
 800105a:	6839      	ldr	r1, [r7, #0]
 800105c:	4618      	mov	r0, r3
 800105e:	f001 fb38 	bl	80026d2 <set_mem_page>
 8001062:	4603      	mov	r3, r0
 8001064:	75fb      	strb	r3, [r7, #23]
            if (rslt == BME68X_OK)
 8001066:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d103      	bne.n	8001076 <bme68x_get_regs+0x4e>
            {
                reg_addr = reg_addr | BME68X_SPI_RD_MSK;
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001074:	73fb      	strb	r3, [r7, #15]
            }
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	7bf8      	ldrb	r0, [r7, #15]
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	68b9      	ldr	r1, [r7, #8]
 8001084:	47a0      	blx	r4
 8001086:	4603      	mov	r3, r0
 8001088:	461a      	mov	r2, r3
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (dev->intf_rslt != 0)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 8001096:	2b00      	cmp	r3, #0
 8001098:	d004      	beq.n	80010a4 <bme68x_get_regs+0x7c>
        {
            rslt = BME68X_E_COM_FAIL;
 800109a:	23fe      	movs	r3, #254	; 0xfe
 800109c:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != 0)
 800109e:	e001      	b.n	80010a4 <bme68x_get_regs+0x7c>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80010a0:	23ff      	movs	r3, #255	; 0xff
 80010a2:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80010a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	371c      	adds	r7, #28
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd90      	pop	{r4, r7, pc}

080010b0 <bme68x_soft_reset>:

/*
 * @brief This API soft-resets the sensor.
 */
int8_t bme68x_soft_reset(struct bme68x_dev *dev)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME68X_REG_SOFT_RESET;
 80010b8:	23e0      	movs	r3, #224	; 0xe0
 80010ba:	73bb      	strb	r3, [r7, #14]

    /* 0xb6 is the soft reset command */
    uint8_t soft_rst_cmd = BME68X_SOFT_RESET_CMD;
 80010bc:	23b6      	movs	r3, #182	; 0xb6
 80010be:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f001 fbc7 	bl	8002854 <null_ptr_check>
 80010c6:	4603      	mov	r3, r0
 80010c8:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 80010ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d12b      	bne.n	800112a <bme68x_soft_reset+0x7a>
    {
        if (dev->intf == BME68X_SPI_INTF)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	7b1b      	ldrb	r3, [r3, #12]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d104      	bne.n	80010e4 <bme68x_soft_reset+0x34>
        {
            rslt = get_mem_page(dev);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f001 fb5e 	bl	800279c <get_mem_page>
 80010e0:	4603      	mov	r3, r0
 80010e2:	73fb      	strb	r3, [r7, #15]
        }

        /* Reset the device */
        if (rslt == BME68X_OK)
 80010e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d11e      	bne.n	800112a <bme68x_soft_reset+0x7a>
        {
            rslt = bme68x_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80010ec:	f107 010d 	add.w	r1, r7, #13
 80010f0:	f107 000e 	add.w	r0, r7, #14
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2201      	movs	r2, #1
 80010f8:	f7ff ff06 	bl	8000f08 <bme68x_set_regs>
 80010fc:	4603      	mov	r3, r0
 80010fe:	73fb      	strb	r3, [r7, #15]

            if (rslt == BME68X_OK)
 8001100:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d110      	bne.n	800112a <bme68x_soft_reset+0x7a>
            {
                /* Wait for 5ms */
                dev->delay_us(BME68X_PERIOD_RESET, dev->intf_ptr);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	6852      	ldr	r2, [r2, #4]
 8001110:	4611      	mov	r1, r2
 8001112:	f242 7010 	movw	r0, #10000	; 0x2710
 8001116:	4798      	blx	r3

                /* After reset get the memory page */
                if (dev->intf == BME68X_SPI_INTF)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	7b1b      	ldrb	r3, [r3, #12]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d104      	bne.n	800112a <bme68x_soft_reset+0x7a>
                {
                    rslt = get_mem_page(dev);
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f001 fb3b 	bl	800279c <get_mem_page>
 8001126:	4603      	mov	r3, r0
 8001128:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 800112a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <bme68x_set_conf>:

/*
 * @brief This API is used to set the oversampling, filter and odr configuration
 */
int8_t bme68x_set_conf(struct bme68x_conf *conf, struct bme68x_dev *dev)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b088      	sub	sp, #32
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t odr20 = 0, odr3 = 1;
 8001142:	2300      	movs	r3, #0
 8001144:	77bb      	strb	r3, [r7, #30]
 8001146:	2301      	movs	r3, #1
 8001148:	777b      	strb	r3, [r7, #29]
    uint8_t current_op_mode;

    /* Register data starting from BME68X_REG_CTRL_GAS_1(0x71) up to BME68X_REG_CONFIG(0x75) */
    uint8_t reg_array[BME68X_LEN_CONFIG] = { 0x71, 0x72, 0x73, 0x74, 0x75 };
 800114a:	4a7c      	ldr	r2, [pc, #496]	; (800133c <bme68x_set_conf+0x204>)
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001154:	6018      	str	r0, [r3, #0]
 8001156:	3304      	adds	r3, #4
 8001158:	7019      	strb	r1, [r3, #0]
    uint8_t data_array[BME68X_LEN_CONFIG] = { 0 };
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	2300      	movs	r3, #0
 8001160:	743b      	strb	r3, [r7, #16]

    rslt = bme68x_get_op_mode(&current_op_mode, dev);
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	6839      	ldr	r1, [r7, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f000 f94a 	bl	8001402 <bme68x_get_op_mode>
 800116e:	4603      	mov	r3, r0
 8001170:	77fb      	strb	r3, [r7, #31]
    if (rslt == BME68X_OK)
 8001172:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d105      	bne.n	8001186 <bme68x_set_conf+0x4e>
    {
        /* Configure only in the sleep mode */
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 800117a:	6839      	ldr	r1, [r7, #0]
 800117c:	2000      	movs	r0, #0
 800117e:	f000 f8df 	bl	8001340 <bme68x_set_op_mode>
 8001182:	4603      	mov	r3, r0
 8001184:	77fb      	strb	r3, [r7, #31]
    }

    if (conf == NULL)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d102      	bne.n	8001192 <bme68x_set_conf+0x5a>
    {
        rslt = BME68X_E_NULL_PTR;
 800118c:	23ff      	movs	r3, #255	; 0xff
 800118e:	77fb      	strb	r3, [r7, #31]
 8001190:	e0b2      	b.n	80012f8 <bme68x_set_conf+0x1c0>
    }
    else if (rslt == BME68X_OK)
 8001192:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001196:	2b00      	cmp	r3, #0
 8001198:	f040 80ae 	bne.w	80012f8 <bme68x_set_conf+0x1c0>
    {
        /* Read the whole configuration and write it back once later */
        rslt = bme68x_get_regs(reg_array[0], data_array, BME68X_LEN_CONFIG, dev);
 800119c:	7d38      	ldrb	r0, [r7, #20]
 800119e:	f107 010c 	add.w	r1, r7, #12
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	2205      	movs	r2, #5
 80011a6:	f7ff ff3f 	bl	8001028 <bme68x_get_regs>
 80011aa:	4603      	mov	r3, r0
 80011ac:	77fb      	strb	r3, [r7, #31]
        dev->info_msg = BME68X_OK;
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        if (rslt == BME68X_OK)
 80011b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d108      	bne.n	80011d0 <bme68x_set_conf+0x98>
        {
            rslt = boundary_check(&conf->filter, BME68X_FILTER_SIZE_127, dev);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	3303      	adds	r3, #3
 80011c2:	683a      	ldr	r2, [r7, #0]
 80011c4:	2107      	movs	r1, #7
 80011c6:	4618      	mov	r0, r3
 80011c8:	f001 fb17 	bl	80027fa <boundary_check>
 80011cc:	4603      	mov	r3, r0
 80011ce:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 80011d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d108      	bne.n	80011ea <bme68x_set_conf+0xb2>
        {
            rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3301      	adds	r3, #1
 80011dc:	683a      	ldr	r2, [r7, #0]
 80011de:	2105      	movs	r1, #5
 80011e0:	4618      	mov	r0, r3
 80011e2:	f001 fb0a 	bl	80027fa <boundary_check>
 80011e6:	4603      	mov	r3, r0
 80011e8:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 80011ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d108      	bne.n	8001204 <bme68x_set_conf+0xcc>
        {
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3302      	adds	r3, #2
 80011f6:	683a      	ldr	r2, [r7, #0]
 80011f8:	2105      	movs	r1, #5
 80011fa:	4618      	mov	r0, r3
 80011fc:	f001 fafd 	bl	80027fa <boundary_check>
 8001200:	4603      	mov	r3, r0
 8001202:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8001204:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d107      	bne.n	800121c <bme68x_set_conf+0xe4>
        {
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	683a      	ldr	r2, [r7, #0]
 8001210:	2105      	movs	r1, #5
 8001212:	4618      	mov	r0, r3
 8001214:	f001 faf1 	bl	80027fa <boundary_check>
 8001218:	4603      	mov	r3, r0
 800121a:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 800121c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d108      	bne.n	8001236 <bme68x_set_conf+0xfe>
        {
            rslt = boundary_check(&conf->odr, BME68X_ODR_NONE, dev);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3304      	adds	r3, #4
 8001228:	683a      	ldr	r2, [r7, #0]
 800122a:	2108      	movs	r1, #8
 800122c:	4618      	mov	r0, r3
 800122e:	f001 fae4 	bl	80027fa <boundary_check>
 8001232:	4603      	mov	r3, r0
 8001234:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8001236:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d15c      	bne.n	80012f8 <bme68x_set_conf+0x1c0>
        {
            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_FILTER, conf->filter);
 800123e:	7c3b      	ldrb	r3, [r7, #16]
 8001240:	b25b      	sxtb	r3, r3
 8001242:	f023 031c 	bic.w	r3, r3, #28
 8001246:	b25a      	sxtb	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	78db      	ldrb	r3, [r3, #3]
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	b25b      	sxtb	r3, r3
 8001250:	f003 031c 	and.w	r3, r3, #28
 8001254:	b25b      	sxtb	r3, r3
 8001256:	4313      	orrs	r3, r2
 8001258:	b25b      	sxtb	r3, r3
 800125a:	b2db      	uxtb	r3, r3
 800125c:	743b      	strb	r3, [r7, #16]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OST, conf->os_temp);
 800125e:	7bfb      	ldrb	r3, [r7, #15]
 8001260:	b25b      	sxtb	r3, r3
 8001262:	f003 031f 	and.w	r3, r3, #31
 8001266:	b25a      	sxtb	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	785b      	ldrb	r3, [r3, #1]
 800126c:	015b      	lsls	r3, r3, #5
 800126e:	b25b      	sxtb	r3, r3
 8001270:	4313      	orrs	r3, r2
 8001272:	b25b      	sxtb	r3, r3
 8001274:	b2db      	uxtb	r3, r3
 8001276:	73fb      	strb	r3, [r7, #15]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OSP, conf->os_pres);
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	b25b      	sxtb	r3, r3
 800127c:	f023 031c 	bic.w	r3, r3, #28
 8001280:	b25a      	sxtb	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	789b      	ldrb	r3, [r3, #2]
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	b25b      	sxtb	r3, r3
 800128a:	f003 031c 	and.w	r3, r3, #28
 800128e:	b25b      	sxtb	r3, r3
 8001290:	4313      	orrs	r3, r2
 8001292:	b25b      	sxtb	r3, r3
 8001294:	b2db      	uxtb	r3, r3
 8001296:	73fb      	strb	r3, [r7, #15]
            data_array[1] = BME68X_SET_BITS_POS_0(data_array[1], BME68X_OSH, conf->os_hum);
 8001298:	7b7b      	ldrb	r3, [r7, #13]
 800129a:	b25b      	sxtb	r3, r3
 800129c:	f023 0307 	bic.w	r3, r3, #7
 80012a0:	b25a      	sxtb	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	b25b      	sxtb	r3, r3
 80012a8:	f003 0307 	and.w	r3, r3, #7
 80012ac:	b25b      	sxtb	r3, r3
 80012ae:	4313      	orrs	r3, r2
 80012b0:	b25b      	sxtb	r3, r3
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	737b      	strb	r3, [r7, #13]
            if (conf->odr != BME68X_ODR_NONE)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	791b      	ldrb	r3, [r3, #4]
 80012ba:	2b08      	cmp	r3, #8
 80012bc:	d004      	beq.n	80012c8 <bme68x_set_conf+0x190>
            {
                odr20 = conf->odr;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	791b      	ldrb	r3, [r3, #4]
 80012c2:	77bb      	strb	r3, [r7, #30]
                odr3 = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	777b      	strb	r3, [r7, #29]
            }

            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_ODR20, odr20);
 80012c8:	7c3b      	ldrb	r3, [r7, #16]
 80012ca:	b25b      	sxtb	r3, r3
 80012cc:	f003 031f 	and.w	r3, r3, #31
 80012d0:	b25a      	sxtb	r2, r3
 80012d2:	7fbb      	ldrb	r3, [r7, #30]
 80012d4:	015b      	lsls	r3, r3, #5
 80012d6:	b25b      	sxtb	r3, r3
 80012d8:	4313      	orrs	r3, r2
 80012da:	b25b      	sxtb	r3, r3
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	743b      	strb	r3, [r7, #16]
            data_array[0] = BME68X_SET_BITS(data_array[0], BME68X_ODR3, odr3);
 80012e0:	7b3b      	ldrb	r3, [r7, #12]
 80012e2:	b25b      	sxtb	r3, r3
 80012e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80012e8:	b25a      	sxtb	r2, r3
 80012ea:	7f7b      	ldrb	r3, [r7, #29]
 80012ec:	01db      	lsls	r3, r3, #7
 80012ee:	b25b      	sxtb	r3, r3
 80012f0:	4313      	orrs	r3, r2
 80012f2:	b25b      	sxtb	r3, r3
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	733b      	strb	r3, [r7, #12]
        }
    }

    if (rslt == BME68X_OK)
 80012f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d109      	bne.n	8001314 <bme68x_set_conf+0x1dc>
    {
        rslt = bme68x_set_regs(reg_array, data_array, BME68X_LEN_CONFIG, dev);
 8001300:	f107 010c 	add.w	r1, r7, #12
 8001304:	f107 0014 	add.w	r0, r7, #20
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	2205      	movs	r2, #5
 800130c:	f7ff fdfc 	bl	8000f08 <bme68x_set_regs>
 8001310:	4603      	mov	r3, r0
 8001312:	77fb      	strb	r3, [r7, #31]
    }

    if ((current_op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 8001314:	7f3b      	ldrb	r3, [r7, #28]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d00a      	beq.n	8001330 <bme68x_set_conf+0x1f8>
 800131a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d106      	bne.n	8001330 <bme68x_set_conf+0x1f8>
    {
        rslt = bme68x_set_op_mode(current_op_mode, dev);
 8001322:	7f3b      	ldrb	r3, [r7, #28]
 8001324:	6839      	ldr	r1, [r7, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f000 f80a 	bl	8001340 <bme68x_set_op_mode>
 800132c:	4603      	mov	r3, r0
 800132e:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8001330:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001334:	4618      	mov	r0, r3
 8001336:	3720      	adds	r7, #32
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	08009aa8 	.word	0x08009aa8

08001340 <bme68x_set_op_mode>:

/*
 * @brief This API is used to set the operation mode of the sensor
 */
int8_t bme68x_set_op_mode(const uint8_t op_mode, struct bme68x_dev *dev)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	6039      	str	r1, [r7, #0]
 800134a:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t tmp_pow_mode;
    uint8_t pow_mode = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	73bb      	strb	r3, [r7, #14]
    uint8_t reg_addr = BME68X_REG_CTRL_MEAS;
 8001350:	2374      	movs	r3, #116	; 0x74
 8001352:	733b      	strb	r3, [r7, #12]

    /* Call until in sleep */
    do
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &tmp_pow_mode, 1, dev);
 8001354:	f107 010d 	add.w	r1, r7, #13
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	2201      	movs	r2, #1
 800135c:	2074      	movs	r0, #116	; 0x74
 800135e:	f7ff fe63 	bl	8001028 <bme68x_get_regs>
 8001362:	4603      	mov	r3, r0
 8001364:	73fb      	strb	r3, [r7, #15]
        if (rslt == BME68X_OK)
 8001366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d11d      	bne.n	80013aa <bme68x_set_op_mode+0x6a>
        {
            /* Put to sleep before changing mode */
            pow_mode = (tmp_pow_mode & BME68X_MODE_MSK);
 800136e:	7b7b      	ldrb	r3, [r7, #13]
 8001370:	f003 0303 	and.w	r3, r3, #3
 8001374:	73bb      	strb	r3, [r7, #14]
            if (pow_mode != BME68X_SLEEP_MODE)
 8001376:	7bbb      	ldrb	r3, [r7, #14]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d016      	beq.n	80013aa <bme68x_set_op_mode+0x6a>
            {
                tmp_pow_mode &= ~BME68X_MODE_MSK; /* Set to sleep */
 800137c:	7b7b      	ldrb	r3, [r7, #13]
 800137e:	f023 0303 	bic.w	r3, r3, #3
 8001382:	b2db      	uxtb	r3, r3
 8001384:	737b      	strb	r3, [r7, #13]
                rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8001386:	f107 010d 	add.w	r1, r7, #13
 800138a:	f107 000c 	add.w	r0, r7, #12
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	2201      	movs	r2, #1
 8001392:	f7ff fdb9 	bl	8000f08 <bme68x_set_regs>
 8001396:	4603      	mov	r3, r0
 8001398:	73fb      	strb	r3, [r7, #15]
                dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800139e:	683a      	ldr	r2, [r7, #0]
 80013a0:	6852      	ldr	r2, [r2, #4]
 80013a2:	4611      	mov	r1, r2
 80013a4:	f242 7010 	movw	r0, #10000	; 0x2710
 80013a8:	4798      	blx	r3
            }
        }
    } while ((pow_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK));
 80013aa:	7bbb      	ldrb	r3, [r7, #14]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <bme68x_set_op_mode+0x78>
 80013b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d0cd      	beq.n	8001354 <bme68x_set_op_mode+0x14>

    /* Already in sleep */
    if ((op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d01b      	beq.n	80013f6 <bme68x_set_op_mode+0xb6>
 80013be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d117      	bne.n	80013f6 <bme68x_set_op_mode+0xb6>
    {
        tmp_pow_mode = (tmp_pow_mode & ~BME68X_MODE_MSK) | (op_mode & BME68X_MODE_MSK);
 80013c6:	7b7b      	ldrb	r3, [r7, #13]
 80013c8:	b25b      	sxtb	r3, r3
 80013ca:	f023 0303 	bic.w	r3, r3, #3
 80013ce:	b25a      	sxtb	r2, r3
 80013d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d4:	f003 0303 	and.w	r3, r3, #3
 80013d8:	b25b      	sxtb	r3, r3
 80013da:	4313      	orrs	r3, r2
 80013dc:	b25b      	sxtb	r3, r3
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	737b      	strb	r3, [r7, #13]
        rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80013e2:	f107 010d 	add.w	r1, r7, #13
 80013e6:	f107 000c 	add.w	r0, r7, #12
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	2201      	movs	r2, #1
 80013ee:	f7ff fd8b 	bl	8000f08 <bme68x_set_regs>
 80013f2:	4603      	mov	r3, r0
 80013f4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80013f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <bme68x_get_op_mode>:

/*
 * @brief This API is used to get the operation mode of the sensor.
 */
int8_t bme68x_get_op_mode(uint8_t *op_mode, struct bme68x_dev *dev)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b084      	sub	sp, #16
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
 800140a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t mode;

    if (op_mode)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d00f      	beq.n	8001432 <bme68x_get_op_mode+0x30>
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &mode, 1, dev);
 8001412:	f107 010e 	add.w	r1, r7, #14
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	2201      	movs	r2, #1
 800141a:	2074      	movs	r0, #116	; 0x74
 800141c:	f7ff fe04 	bl	8001028 <bme68x_get_regs>
 8001420:	4603      	mov	r3, r0
 8001422:	73fb      	strb	r3, [r7, #15]

        /* Masking the other register bit info*/
        *op_mode = mode & BME68X_MODE_MSK;
 8001424:	7bbb      	ldrb	r3, [r7, #14]
 8001426:	f003 0303 	and.w	r3, r3, #3
 800142a:	b2da      	uxtb	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	701a      	strb	r2, [r3, #0]
 8001430:	e001      	b.n	8001436 <bme68x_get_op_mode+0x34>
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8001432:	23ff      	movs	r3, #255	; 0xff
 8001434:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001436:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800143a:	4618      	mov	r0, r3
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <bme68x_get_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme68x_data
 * structure instance passed by the user.
 */
int8_t bme68x_get_data(uint8_t op_mode, struct bme68x_data *data, uint8_t *n_data, struct bme68x_dev *dev)
{
 8001442:	b5b0      	push	{r4, r5, r7, lr}
 8001444:	b09a      	sub	sp, #104	; 0x68
 8001446:	af00      	add	r7, sp, #0
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
 800144c:	603b      	str	r3, [r7, #0]
 800144e:	4603      	mov	r3, r0
 8001450:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t i = 0, j = 0, new_fields = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8001458:	2300      	movs	r3, #0
 800145a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 800145e:	2300      	movs	r3, #0
 8001460:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
    struct bme68x_data *field_ptr[3] = { 0 };
 8001464:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
    struct bme68x_data field_data[3] = { { 0 } };
 8001470:	f107 0310 	add.w	r3, r7, #16
 8001474:	2248      	movs	r2, #72	; 0x48
 8001476:	2100      	movs	r1, #0
 8001478:	4618      	mov	r0, r3
 800147a:	f005 fc0b 	bl	8006c94 <memset>

    field_ptr[0] = &field_data[0];
 800147e:	f107 0310 	add.w	r3, r7, #16
 8001482:	65bb      	str	r3, [r7, #88]	; 0x58
    field_ptr[1] = &field_data[1];
 8001484:	f107 0310 	add.w	r3, r7, #16
 8001488:	3318      	adds	r3, #24
 800148a:	65fb      	str	r3, [r7, #92]	; 0x5c
    field_ptr[2] = &field_data[2];
 800148c:	f107 0310 	add.w	r3, r7, #16
 8001490:	3330      	adds	r3, #48	; 0x30
 8001492:	663b      	str	r3, [r7, #96]	; 0x60

    rslt = null_ptr_check(dev);
 8001494:	6838      	ldr	r0, [r7, #0]
 8001496:	f001 f9dd 	bl	8002854 <null_ptr_check>
 800149a:	4603      	mov	r3, r0
 800149c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if ((rslt == BME68X_OK) && (data != NULL))
 80014a0:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f040 80c1 	bne.w	800162c <bme68x_get_data+0x1ea>
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f000 80bd 	beq.w	800162c <bme68x_get_data+0x1ea>
    {
        /* Reading the sensor data in forced mode only */
        if (op_mode == BME68X_FORCED_MODE)
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d11c      	bne.n	80014f2 <bme68x_get_data+0xb0>
        {
            rslt = read_field_data(0, data, dev);
 80014b8:	683a      	ldr	r2, [r7, #0]
 80014ba:	68b9      	ldr	r1, [r7, #8]
 80014bc:	2000      	movs	r0, #0
 80014be:	f000 fd8c 	bl	8001fda <read_field_data>
 80014c2:	4603      	mov	r3, r0
 80014c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            if (rslt == BME68X_OK)
 80014c8:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	f040 80a1 	bne.w	8001614 <bme68x_get_data+0x1d2>
            {
                if (data->status & BME68X_NEW_DATA_MSK)
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	b25b      	sxtb	r3, r3
 80014d8:	2b00      	cmp	r3, #0
 80014da:	da03      	bge.n	80014e4 <bme68x_get_data+0xa2>
                {
                    new_fields = 1;
 80014dc:	2301      	movs	r3, #1
 80014de:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 80014e2:	e097      	b.n	8001614 <bme68x_get_data+0x1d2>
                }
                else
                {
                    new_fields = 0;
 80014e4:	2300      	movs	r3, #0
 80014e6:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    rslt = BME68X_W_NO_NEW_DATA;
 80014ea:	2302      	movs	r3, #2
 80014ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80014f0:	e090      	b.n	8001614 <bme68x_get_data+0x1d2>
                }
            }
        }
        else if ((op_mode == BME68X_PARALLEL_MODE) || (op_mode == BME68X_SEQUENTIAL_MODE))
 80014f2:	7bfb      	ldrb	r3, [r7, #15]
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d003      	beq.n	8001500 <bme68x_get_data+0xbe>
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	f040 8087 	bne.w	800160e <bme68x_get_data+0x1cc>
        {
            /* Read the 3 fields and count the number of new data fields */
            rslt = read_all_field_data(field_ptr, dev);
 8001500:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001504:	6839      	ldr	r1, [r7, #0]
 8001506:	4618      	mov	r0, r3
 8001508:	f000 feb1 	bl	800226e <read_all_field_data>
 800150c:	4603      	mov	r3, r0
 800150e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

            new_fields = 0;
 8001512:	2300      	movs	r3, #0
 8001514:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 8001518:	2300      	movs	r3, #0
 800151a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800151e:	e014      	b.n	800154a <bme68x_get_data+0x108>
            {
                if (field_ptr[i]->status & BME68X_NEW_DATA_MSK)
 8001520:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	3368      	adds	r3, #104	; 0x68
 8001528:	443b      	add	r3, r7
 800152a:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	b25b      	sxtb	r3, r3
 8001532:	2b00      	cmp	r3, #0
 8001534:	da04      	bge.n	8001540 <bme68x_get_data+0xfe>
                {
                    new_fields++;
 8001536:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800153a:	3301      	adds	r3, #1
 800153c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 8001540:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001544:	3301      	adds	r3, #1
 8001546:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800154a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800154e:	2b02      	cmp	r3, #2
 8001550:	d803      	bhi.n	800155a <bme68x_get_data+0x118>
 8001552:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8001556:	2b00      	cmp	r3, #0
 8001558:	d0e2      	beq.n	8001520 <bme68x_get_data+0xde>
                }
            }

            /* Sort the sensor data in parallel & sequential modes*/
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
 800155a:	2300      	movs	r3, #0
 800155c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8001560:	e01c      	b.n	800159c <bme68x_get_data+0x15a>
            {
                for (j = i + 1; j < 3; j++)
 8001562:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001566:	3301      	adds	r3, #1
 8001568:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 800156c:	e00d      	b.n	800158a <bme68x_get_data+0x148>
                {
                    sort_sensor_data(i, j, field_ptr);
 800156e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001572:	f897 1065 	ldrb.w	r1, [r7, #101]	; 0x65
 8001576:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800157a:	4618      	mov	r0, r3
 800157c:	f001 fb16 	bl	8002bac <sort_sensor_data>
                for (j = i + 1; j < 3; j++)
 8001580:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001584:	3301      	adds	r3, #1
 8001586:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 800158a:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800158e:	2b02      	cmp	r3, #2
 8001590:	d9ed      	bls.n	800156e <bme68x_get_data+0x12c>
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
 8001592:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001596:	3301      	adds	r3, #1
 8001598:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800159c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d803      	bhi.n	80015ac <bme68x_get_data+0x16a>
 80015a4:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d0da      	beq.n	8001562 <bme68x_get_data+0x120>
                }
            }

            /* Copy the sorted data */
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 80015ac:	2300      	movs	r3, #0
 80015ae:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80015b2:	e01c      	b.n	80015ee <bme68x_get_data+0x1ac>
            {
                data[i] = *field_ptr[i];
 80015b4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	3368      	adds	r3, #104	; 0x68
 80015bc:	443b      	add	r3, r7
 80015be:	f853 1c10 	ldr.w	r1, [r3, #-16]
 80015c2:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 80015c6:	4613      	mov	r3, r2
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	4413      	add	r3, r2
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	461a      	mov	r2, r3
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	4413      	add	r3, r2
 80015d4:	461c      	mov	r4, r3
 80015d6:	460d      	mov	r5, r1
 80015d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015dc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80015e0:	e884 0003 	stmia.w	r4, {r0, r1}
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 80015e4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80015e8:	3301      	adds	r3, #1
 80015ea:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80015ee:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d803      	bhi.n	80015fe <bme68x_get_data+0x1bc>
 80015f6:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d0da      	beq.n	80015b4 <bme68x_get_data+0x172>
            }

            if (new_fields == 0)
 80015fe:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001602:	2b00      	cmp	r3, #0
 8001604:	d106      	bne.n	8001614 <bme68x_get_data+0x1d2>
            {
                rslt = BME68X_W_NO_NEW_DATA;
 8001606:	2302      	movs	r3, #2
 8001608:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            if (new_fields == 0)
 800160c:	e002      	b.n	8001614 <bme68x_get_data+0x1d2>
            }
        }
        else
        {
            rslt = BME68X_W_DEFINE_OP_MODE;
 800160e:	2301      	movs	r3, #1
 8001610:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        }

        if (n_data == NULL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d103      	bne.n	8001622 <bme68x_get_data+0x1e0>
        {
            rslt = BME68X_E_NULL_PTR;
 800161a:	23ff      	movs	r3, #255	; 0xff
 800161c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        if (n_data == NULL)
 8001620:	e007      	b.n	8001632 <bme68x_get_data+0x1f0>
        }
        else
        {
            *n_data = new_fields;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8001628:	701a      	strb	r2, [r3, #0]
        if (n_data == NULL)
 800162a:	e002      	b.n	8001632 <bme68x_get_data+0x1f0>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 800162c:	23ff      	movs	r3, #255	; 0xff
 800162e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    }

    return rslt;
 8001632:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 8001636:	4618      	mov	r0, r3
 8001638:	3768      	adds	r7, #104	; 0x68
 800163a:	46bd      	mov	sp, r7
 800163c:	bdb0      	pop	{r4, r5, r7, pc}

0800163e <bme68x_set_heatr_conf>:

/*
 * @brief This API is used to set the gas configuration of the sensor.
 */
int8_t bme68x_set_heatr_conf(uint8_t op_mode, const struct bme68x_heatr_conf *conf, struct bme68x_dev *dev)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b088      	sub	sp, #32
 8001642:	af00      	add	r7, sp, #0
 8001644:	4603      	mov	r3, r0
 8001646:	60b9      	str	r1, [r7, #8]
 8001648:	607a      	str	r2, [r7, #4]
 800164a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t nb_conv = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	773b      	strb	r3, [r7, #28]
    uint8_t hctrl, run_gas = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	777b      	strb	r3, [r7, #29]
    uint8_t ctrl_gas_data[2];
    uint8_t ctrl_gas_addr[2] = { BME68X_REG_CTRL_GAS_0, BME68X_REG_CTRL_GAS_1 };
 8001654:	f247 1370 	movw	r3, #29040	; 0x7170
 8001658:	82bb      	strh	r3, [r7, #20]

    if (conf != NULL)
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d06e      	beq.n	800173e <bme68x_set_heatr_conf+0x100>
    {
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 8001660:	6879      	ldr	r1, [r7, #4]
 8001662:	2000      	movs	r0, #0
 8001664:	f7ff fe6c 	bl	8001340 <bme68x_set_op_mode>
 8001668:	4603      	mov	r3, r0
 800166a:	77fb      	strb	r3, [r7, #31]
        if (rslt == BME68X_OK)
 800166c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d108      	bne.n	8001686 <bme68x_set_heatr_conf+0x48>
        {
            rslt = set_conf(conf, op_mode, &nb_conv, dev);
 8001674:	f107 021c 	add.w	r2, r7, #28
 8001678:	7bf9      	ldrb	r1, [r7, #15]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	68b8      	ldr	r0, [r7, #8]
 800167e:	f001 f909 	bl	8002894 <set_conf>
 8001682:	4603      	mov	r3, r0
 8001684:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8001686:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d159      	bne.n	8001742 <bme68x_set_heatr_conf+0x104>
        {
            rslt = bme68x_get_regs(BME68X_REG_CTRL_GAS_0, ctrl_gas_data, 2, dev);
 800168e:	f107 0118 	add.w	r1, r7, #24
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2202      	movs	r2, #2
 8001696:	2070      	movs	r0, #112	; 0x70
 8001698:	f7ff fcc6 	bl	8001028 <bme68x_get_regs>
 800169c:	4603      	mov	r3, r0
 800169e:	77fb      	strb	r3, [r7, #31]
            if (rslt == BME68X_OK)
 80016a0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d14c      	bne.n	8001742 <bme68x_set_heatr_conf+0x104>
            {
                if (conf->enable == BME68X_ENABLE)
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d10b      	bne.n	80016c8 <bme68x_set_heatr_conf+0x8a>
                {
                    hctrl = BME68X_ENABLE_HEATER;
 80016b0:	2300      	movs	r3, #0
 80016b2:	77bb      	strb	r3, [r7, #30]
                    if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d102      	bne.n	80016c2 <bme68x_set_heatr_conf+0x84>
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_H;
 80016bc:	2302      	movs	r3, #2
 80016be:	777b      	strb	r3, [r7, #29]
 80016c0:	e006      	b.n	80016d0 <bme68x_set_heatr_conf+0x92>
                    }
                    else
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_L;
 80016c2:	2301      	movs	r3, #1
 80016c4:	777b      	strb	r3, [r7, #29]
 80016c6:	e003      	b.n	80016d0 <bme68x_set_heatr_conf+0x92>
                    }
                }
                else
                {
                    hctrl = BME68X_DISABLE_HEATER;
 80016c8:	2301      	movs	r3, #1
 80016ca:	77bb      	strb	r3, [r7, #30]
                    run_gas = BME68X_DISABLE_GAS_MEAS;
 80016cc:	2300      	movs	r3, #0
 80016ce:	777b      	strb	r3, [r7, #29]
                }

                ctrl_gas_data[0] = BME68X_SET_BITS(ctrl_gas_data[0], BME68X_HCTRL, hctrl);
 80016d0:	7e3b      	ldrb	r3, [r7, #24]
 80016d2:	b25b      	sxtb	r3, r3
 80016d4:	f023 0308 	bic.w	r3, r3, #8
 80016d8:	b25a      	sxtb	r2, r3
 80016da:	7fbb      	ldrb	r3, [r7, #30]
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	b25b      	sxtb	r3, r3
 80016e0:	f003 0308 	and.w	r3, r3, #8
 80016e4:	b25b      	sxtb	r3, r3
 80016e6:	4313      	orrs	r3, r2
 80016e8:	b25b      	sxtb	r3, r3
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	763b      	strb	r3, [r7, #24]
                ctrl_gas_data[1] = BME68X_SET_BITS_POS_0(ctrl_gas_data[1], BME68X_NBCONV, nb_conv);
 80016ee:	7e7b      	ldrb	r3, [r7, #25]
 80016f0:	b25b      	sxtb	r3, r3
 80016f2:	f023 030f 	bic.w	r3, r3, #15
 80016f6:	b25a      	sxtb	r2, r3
 80016f8:	7f3b      	ldrb	r3, [r7, #28]
 80016fa:	b25b      	sxtb	r3, r3
 80016fc:	f003 030f 	and.w	r3, r3, #15
 8001700:	b25b      	sxtb	r3, r3
 8001702:	4313      	orrs	r3, r2
 8001704:	b25b      	sxtb	r3, r3
 8001706:	b2db      	uxtb	r3, r3
 8001708:	767b      	strb	r3, [r7, #25]
                ctrl_gas_data[1] = BME68X_SET_BITS(ctrl_gas_data[1], BME68X_RUN_GAS, run_gas);
 800170a:	7e7b      	ldrb	r3, [r7, #25]
 800170c:	b25b      	sxtb	r3, r3
 800170e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001712:	b25a      	sxtb	r2, r3
 8001714:	7f7b      	ldrb	r3, [r7, #29]
 8001716:	011b      	lsls	r3, r3, #4
 8001718:	b25b      	sxtb	r3, r3
 800171a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800171e:	b25b      	sxtb	r3, r3
 8001720:	4313      	orrs	r3, r2
 8001722:	b25b      	sxtb	r3, r3
 8001724:	b2db      	uxtb	r3, r3
 8001726:	767b      	strb	r3, [r7, #25]
                rslt = bme68x_set_regs(ctrl_gas_addr, ctrl_gas_data, 2, dev);
 8001728:	f107 0118 	add.w	r1, r7, #24
 800172c:	f107 0014 	add.w	r0, r7, #20
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2202      	movs	r2, #2
 8001734:	f7ff fbe8 	bl	8000f08 <bme68x_set_regs>
 8001738:	4603      	mov	r3, r0
 800173a:	77fb      	strb	r3, [r7, #31]
 800173c:	e001      	b.n	8001742 <bme68x_set_heatr_conf+0x104>
            }
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 800173e:	23ff      	movs	r3, #255	; 0xff
 8001740:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8001742:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3720      	adds	r7, #32
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <calc_temperature>:

#else

/* @brief This internal API is used to calculate the temperature value. */
static float calc_temperature(uint32_t temp_adc, struct bme68x_dev *dev)
{
 8001750:	b480      	push	{r7}
 8001752:	b087      	sub	sp, #28
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
    float var1;
    float var2;
    float calc_temp;

    /* calculate var1 data */
    var1 = ((((float)temp_adc / 16384.0f) - ((float)dev->calib.par_t1 / 1024.0f)) * ((float)dev->calib.par_t2));
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	ee07 3a90 	vmov	s15, r3
 8001760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001764:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001848 <calc_temperature+0xf8>
 8001768:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	8bdb      	ldrh	r3, [r3, #30]
 8001770:	ee07 3a90 	vmov	s15, r3
 8001774:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001778:	ed9f 6a34 	vldr	s12, [pc, #208]	; 800184c <calc_temperature+0xfc>
 800177c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001780:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800178a:	ee07 3a90 	vmov	s15, r3
 800178e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001796:	edc7 7a05 	vstr	s15, [r7, #20]

    /* calculate var2 data */
    var2 =
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	ee07 3a90 	vmov	s15, r3
 80017a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017a4:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8001850 <calc_temperature+0x100>
 80017a8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	8bdb      	ldrh	r3, [r3, #30]
 80017b0:	ee07 3a90 	vmov	s15, r3
 80017b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80017b8:	ed9f 6a26 	vldr	s12, [pc, #152]	; 8001854 <calc_temperature+0x104>
 80017bc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80017c0:	ee37 7a67 	vsub.f32	s14, s14, s15
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	ee07 3a90 	vmov	s15, r3
 80017ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017ce:	ed9f 6a20 	vldr	s12, [pc, #128]	; 8001850 <calc_temperature+0x100>
 80017d2:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	8bdb      	ldrh	r3, [r3, #30]
 80017da:	ee07 3a90 	vmov	s15, r3
 80017de:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 80017e2:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8001854 <calc_temperature+0x104>
 80017e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80017ea:	ee76 7ae7 	vsub.f32	s15, s13, s15
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 80017ee:	ee27 7a27 	vmul.f32	s14, s14, s15
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 80017f8:	ee07 3a90 	vmov	s15, r3
 80017fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001800:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001804:	ee67 7aa6 	vmul.f32	s15, s15, s13
    var2 =
 8001808:	ee67 7a27 	vmul.f32	s15, s14, s15
 800180c:	edc7 7a04 	vstr	s15, [r7, #16]

    /* t_fine value*/
    dev->calib.t_fine = (var1 + var2);
 8001810:	ed97 7a05 	vldr	s14, [r7, #20]
 8001814:	edd7 7a04 	vldr	s15, [r7, #16]
 8001818:	ee77 7a27 	vadd.f32	s15, s14, s15
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

    /* compensated temperature data*/
    calc_temp = ((dev->calib.t_fine) / 5120.0f);
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8001828:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001858 <calc_temperature+0x108>
 800182c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001830:	edc7 7a03 	vstr	s15, [r7, #12]

    return calc_temp;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	ee07 3a90 	vmov	s15, r3
}
 800183a:	eeb0 0a67 	vmov.f32	s0, s15
 800183e:	371c      	adds	r7, #28
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	46800000 	.word	0x46800000
 800184c:	44800000 	.word	0x44800000
 8001850:	48000000 	.word	0x48000000
 8001854:	46000000 	.word	0x46000000
 8001858:	45a00000 	.word	0x45a00000

0800185c <calc_pressure>:

/* @brief This internal API is used to calculate the pressure value. */
static float calc_pressure(uint32_t pres_adc, const struct bme68x_dev *dev)
{
 800185c:	b480      	push	{r7}
 800185e:	b087      	sub	sp, #28
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
    float var1;
    float var2;
    float var3;
    float calc_pres;

    var1 = (((float)dev->calib.t_fine / 2.0f) - 64000.0f);
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800186c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001870:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001874:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8001ab0 <calc_pressure+0x254>
 8001878:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800187c:	edc7 7a04 	vstr	s15, [r7, #16]
    var2 = var1 * var1 * (((float)dev->calib.par_p6) / (131072.0f));
 8001880:	edd7 7a04 	vldr	s15, [r7, #16]
 8001884:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	f993 302e 	ldrsb.w	r3, [r3, #46]	; 0x2e
 800188e:	ee07 3a90 	vmov	s15, r3
 8001892:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001896:	ed9f 6a87 	vldr	s12, [pc, #540]	; 8001ab4 <calc_pressure+0x258>
 800189a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800189e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018a2:	edc7 7a03 	vstr	s15, [r7, #12]
    var2 = var2 + (var1 * ((float)dev->calib.par_p5) * 2.0f);
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80018ac:	ee07 3a90 	vmov	s15, r3
 80018b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80018b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018bc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80018c0:	ed97 7a03 	vldr	s14, [r7, #12]
 80018c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018c8:	edc7 7a03 	vstr	s15, [r7, #12]
    var2 = (var2 / 4.0f) + (((float)dev->calib.par_p4) * 65536.0f);
 80018cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80018d0:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80018d4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80018de:	ee07 3a90 	vmov	s15, r3
 80018e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018e6:	eddf 6a74 	vldr	s13, [pc, #464]	; 8001ab8 <calc_pressure+0x25c>
 80018ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80018ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018f2:	edc7 7a03 	vstr	s15, [r7, #12]
    var1 = (((((float)dev->calib.par_p3 * var1 * var1) / 16384.0f) + ((float)dev->calib.par_p2 * var1)) / 524288.0f);
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
 80018fc:	ee07 3a90 	vmov	s15, r3
 8001900:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001904:	edd7 7a04 	vldr	s15, [r7, #16]
 8001908:	ee27 7a27 	vmul.f32	s14, s14, s15
 800190c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001910:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001914:	eddf 6a69 	vldr	s13, [pc, #420]	; 8001abc <calc_pressure+0x260>
 8001918:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8001922:	ee07 3a90 	vmov	s15, r3
 8001926:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800192a:	edd7 7a04 	vldr	s15, [r7, #16]
 800192e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001932:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001936:	eddf 6a62 	vldr	s13, [pc, #392]	; 8001ac0 <calc_pressure+0x264>
 800193a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800193e:	edc7 7a04 	vstr	s15, [r7, #16]
    var1 = ((1.0f + (var1 / 32768.0f)) * ((float)dev->calib.par_p1));
 8001942:	ed97 7a04 	vldr	s14, [r7, #16]
 8001946:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8001ac4 <calc_pressure+0x268>
 800194a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800194e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001952:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800195a:	ee07 3a90 	vmov	s15, r3
 800195e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001966:	edc7 7a04 	vstr	s15, [r7, #16]
    calc_pres = (1048576.0f - ((float)pres_adc));
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	ee07 3a90 	vmov	s15, r3
 8001970:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001974:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001ac8 <calc_pressure+0x26c>
 8001978:	ee77 7a67 	vsub.f32	s15, s14, s15
 800197c:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Avoid exception caused by division by zero */
    if ((int)var1 != 0)
 8001980:	edd7 7a04 	vldr	s15, [r7, #16]
 8001984:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001988:	ee17 3a90 	vmov	r3, s15
 800198c:	2b00      	cmp	r3, #0
 800198e:	f000 8081 	beq.w	8001a94 <calc_pressure+0x238>
    {
        calc_pres = (((calc_pres - (var2 / 4096.0f)) * 6250.0f) / var1);
 8001992:	ed97 7a03 	vldr	s14, [r7, #12]
 8001996:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8001acc <calc_pressure+0x270>
 800199a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800199e:	ed97 7a05 	vldr	s14, [r7, #20]
 80019a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019a6:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001ad0 <calc_pressure+0x274>
 80019aa:	ee67 6a87 	vmul.f32	s13, s15, s14
 80019ae:	ed97 7a04 	vldr	s14, [r7, #16]
 80019b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019b6:	edc7 7a05 	vstr	s15, [r7, #20]
        var1 = (((float)dev->calib.par_p9) * calc_pres * calc_pres) / 2147483648.0f;
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80019c0:	ee07 3a90 	vmov	s15, r3
 80019c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80019cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80019d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019d8:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8001ad4 <calc_pressure+0x278>
 80019dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019e0:	edc7 7a04 	vstr	s15, [r7, #16]
        var2 = calc_pres * (((float)dev->calib.par_p8) / 32768.0f);
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80019ea:	ee07 3a90 	vmov	s15, r3
 80019ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019f2:	eddf 6a34 	vldr	s13, [pc, #208]	; 8001ac4 <calc_pressure+0x268>
 80019f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019fa:	ed97 7a05 	vldr	s14, [r7, #20]
 80019fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a02:	edc7 7a03 	vstr	s15, [r7, #12]
        var3 = ((calc_pres / 256.0f) * (calc_pres / 256.0f) * (calc_pres / 256.0f) * (dev->calib.par_p10 / 131072.0f));
 8001a06:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a0a:	eddf 6a33 	vldr	s13, [pc, #204]	; 8001ad8 <calc_pressure+0x27c>
 8001a0e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a12:	edd7 6a05 	vldr	s13, [r7, #20]
 8001a16:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8001ad8 <calc_pressure+0x27c>
 8001a1a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001a1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a22:	edd7 6a05 	vldr	s13, [r7, #20]
 8001a26:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8001ad8 <calc_pressure+0x27c>
 8001a2a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001a2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a38:	ee07 3a90 	vmov	s15, r3
 8001a3c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a40:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8001ab4 <calc_pressure+0x258>
 8001a44:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001a48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a4c:	edc7 7a02 	vstr	s15, [r7, #8]
        calc_pres = (calc_pres + (var1 + var2 + var3 + ((float)dev->calib.par_p7 * 128.0f)) / 16.0f);
 8001a50:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a54:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	f993 302f 	ldrsb.w	r3, [r3, #47]	; 0x2f
 8001a6a:	ee07 3a90 	vmov	s15, r3
 8001a6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a72:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001adc <calc_pressure+0x280>
 8001a76:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a7e:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001a82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a86:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a8e:	edc7 7a05 	vstr	s15, [r7, #20]
 8001a92:	e002      	b.n	8001a9a <calc_pressure+0x23e>
    }
    else
    {
        calc_pres = 0;
 8001a94:	f04f 0300 	mov.w	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
    }

    return calc_pres;
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	ee07 3a90 	vmov	s15, r3
}
 8001aa0:	eeb0 0a67 	vmov.f32	s0, s15
 8001aa4:	371c      	adds	r7, #28
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	477a0000 	.word	0x477a0000
 8001ab4:	48000000 	.word	0x48000000
 8001ab8:	47800000 	.word	0x47800000
 8001abc:	46800000 	.word	0x46800000
 8001ac0:	49000000 	.word	0x49000000
 8001ac4:	47000000 	.word	0x47000000
 8001ac8:	49800000 	.word	0x49800000
 8001acc:	45800000 	.word	0x45800000
 8001ad0:	45c35000 	.word	0x45c35000
 8001ad4:	4f000000 	.word	0x4f000000
 8001ad8:	43800000 	.word	0x43800000
 8001adc:	43000000 	.word	0x43000000

08001ae0 <calc_humidity>:

/* This internal API is used to calculate the humidity in integer */
static float calc_humidity(uint16_t hum_adc, const struct bme68x_dev *dev)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b089      	sub	sp, #36	; 0x24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	6039      	str	r1, [r7, #0]
 8001aea:	80fb      	strh	r3, [r7, #6]
    float var3;
    float var4;
    float temp_comp;

    /* compensated temperature data*/
    temp_comp = ((dev->calib.t_fine) / 5120.0f);
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8001af2:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8001c5c <calc_humidity+0x17c>
 8001af6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001afa:	edc7 7a06 	vstr	s15, [r7, #24]
    var1 = (float)((float)hum_adc) -
 8001afe:	88fb      	ldrh	r3, [r7, #6]
 8001b00:	ee07 3a90 	vmov	s15, r3
 8001b04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
           (((float)dev->calib.par_h1 * 16.0f) + (((float)dev->calib.par_h3 / 2.0f) * temp_comp));
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	8a1b      	ldrh	r3, [r3, #16]
 8001b0c:	ee07 3a90 	vmov	s15, r3
 8001b10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b14:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001b18:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8001b22:	ee07 3a90 	vmov	s15, r3
 8001b26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b2a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001b2e:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8001b32:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b36:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
    var1 = (float)((float)hum_adc) -
 8001b3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b42:	edc7 7a05 	vstr	s15, [r7, #20]
    var2 = var1 *
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	8a5b      	ldrh	r3, [r3, #18]
 8001b4a:	ee07 3a90 	vmov	s15, r3
 8001b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b52:	eddf 6a43 	vldr	s13, [pc, #268]	; 8001c60 <calc_humidity+0x180>
 8001b56:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8001b60:	ee07 3a90 	vmov	s15, r3
 8001b64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b68:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8001c64 <calc_humidity+0x184>
 8001b6c:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001b70:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b7c:	ee77 6aa6 	vadd.f32	s13, s15, s13
                     (((float)dev->calib.par_h5 / 1048576.0f) * temp_comp * temp_comp))));
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001b86:	ee07 3a90 	vmov	s15, r3
 8001b8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b8e:	eddf 5a36 	vldr	s11, [pc, #216]	; 8001c68 <calc_humidity+0x188>
 8001b92:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8001b96:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b9a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001b9e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ba2:	ee66 7a27 	vmul.f32	s15, s12, s15
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
 8001ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
 8001baa:	ee67 7a27 	vmul.f32	s15, s14, s15
    var2 = var1 *
 8001bae:	ed97 7a05 	vldr	s14, [r7, #20]
 8001bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bb6:	edc7 7a04 	vstr	s15, [r7, #16]
    var3 = (float)dev->calib.par_h6 / 16384.0f;
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	7ddb      	ldrb	r3, [r3, #23]
 8001bbe:	ee07 3a90 	vmov	s15, r3
 8001bc2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bc6:	eddf 6a27 	vldr	s13, [pc, #156]	; 8001c64 <calc_humidity+0x184>
 8001bca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bce:	edc7 7a03 	vstr	s15, [r7, #12]
    var4 = (float)dev->calib.par_h7 / 2097152.0f;
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8001bd8:	ee07 3a90 	vmov	s15, r3
 8001bdc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001be0:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001c6c <calc_humidity+0x18c>
 8001be4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001be8:	edc7 7a02 	vstr	s15, [r7, #8]
    calc_hum = var2 + ((var3 + (var4 * temp_comp)) * var2 * var2);
 8001bec:	ed97 7a02 	vldr	s14, [r7, #8]
 8001bf0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bf8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bfc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c00:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c08:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c10:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c18:	edc7 7a07 	vstr	s15, [r7, #28]
    if (calc_hum > 100.0f)
 8001c1c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c20:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001c70 <calc_humidity+0x190>
 8001c24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c2c:	dd02      	ble.n	8001c34 <calc_humidity+0x154>
    {
        calc_hum = 100.0f;
 8001c2e:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <calc_humidity+0x194>)
 8001c30:	61fb      	str	r3, [r7, #28]
 8001c32:	e009      	b.n	8001c48 <calc_humidity+0x168>
    }
    else if (calc_hum < 0.0f)
 8001c34:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c40:	d502      	bpl.n	8001c48 <calc_humidity+0x168>
    {
        calc_hum = 0.0f;
 8001c42:	f04f 0300 	mov.w	r3, #0
 8001c46:	61fb      	str	r3, [r7, #28]
    }

    return calc_hum;
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	ee07 3a90 	vmov	s15, r3
}
 8001c4e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c52:	3724      	adds	r7, #36	; 0x24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	45a00000 	.word	0x45a00000
 8001c60:	48800000 	.word	0x48800000
 8001c64:	46800000 	.word	0x46800000
 8001c68:	49800000 	.word	0x49800000
 8001c6c:	4a000000 	.word	0x4a000000
 8001c70:	42c80000 	.word	0x42c80000
 8001c74:	42c80000 	.word	0x42c80000

08001c78 <calc_gas_resistance_low>:

/* This internal API is used to calculate the gas resistance low value in float */
static float calc_gas_resistance_low(uint16_t gas_res_adc, uint8_t gas_range, const struct bme68x_dev *dev)
{
 8001c78:	b4b0      	push	{r4, r5, r7}
 8001c7a:	b0a9      	sub	sp, #164	; 0xa4
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	603a      	str	r2, [r7, #0]
 8001c82:	80fb      	strh	r3, [r7, #6]
 8001c84:	460b      	mov	r3, r1
 8001c86:	717b      	strb	r3, [r7, #5]
    float calc_gas_res;
    float var1;
    float var2;
    float var3;
    float gas_res_f = gas_res_adc;
 8001c88:	88fb      	ldrh	r3, [r7, #6]
 8001c8a:	ee07 3a90 	vmov	s15, r3
 8001c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c92:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
    float gas_range_f = (1U << gas_range); /*lint !e790 / Suspicious truncation, integral to float */
 8001c96:	797b      	ldrb	r3, [r7, #5]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	ee07 3a90 	vmov	s15, r3
 8001ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ca6:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
    const float lookup_k1_range[16] = {
 8001caa:	4b3e      	ldr	r3, [pc, #248]	; (8001da4 <calc_gas_resistance_low+0x12c>)
 8001cac:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8001cb0:	461d      	mov	r5, r3
 8001cb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cbe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001cc2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, -1.0f, 0.0f, -0.8f, 0.0f, 0.0f, -0.2f, -0.5f, 0.0f, -1.0f, 0.0f, 0.0f
    };
    const float lookup_k2_range[16] = {
 8001cc6:	4b38      	ldr	r3, [pc, #224]	; (8001da8 <calc_gas_resistance_low+0x130>)
 8001cc8:	f107 0408 	add.w	r4, r7, #8
 8001ccc:	461d      	mov	r5, r3
 8001cce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cda:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001cde:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0.0f, 0.0f, 0.0f, 0.0f, 0.1f, 0.7f, 0.0f, -0.8f, -0.1f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f
    };

    var1 = (1340.0f + (5.0f * dev->calib.range_sw_err));
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	f993 303e 	ldrsb.w	r3, [r3, #62]	; 0x3e
 8001ce8:	ee07 3a90 	vmov	s15, r3
 8001cec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cf0:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001cf4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cf8:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001dac <calc_gas_resistance_low+0x134>
 8001cfc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d00:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
    var2 = (var1) * (1.0f + lookup_k1_range[gas_range] / 100.0f);
 8001d04:	797b      	ldrb	r3, [r7, #5]
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	33a0      	adds	r3, #160	; 0xa0
 8001d0a:	443b      	add	r3, r7
 8001d0c:	3b58      	subs	r3, #88	; 0x58
 8001d0e:	ed93 7a00 	vldr	s14, [r3]
 8001d12:	eddf 6a27 	vldr	s13, [pc, #156]	; 8001db0 <calc_gas_resistance_low+0x138>
 8001d16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d22:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8001d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d2a:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
    var3 = 1.0f + (lookup_k2_range[gas_range] / 100.0f);
 8001d2e:	797b      	ldrb	r3, [r7, #5]
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	33a0      	adds	r3, #160	; 0xa0
 8001d34:	443b      	add	r3, r7
 8001d36:	3b98      	subs	r3, #152	; 0x98
 8001d38:	ed93 7a00 	vldr	s14, [r3]
 8001d3c:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001db0 <calc_gas_resistance_low+0x138>
 8001d40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d4c:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
    calc_gas_res = 1.0f / (float)(var3 * (0.000000125f) * gas_range_f * (((gas_res_f - 512.0f) / var2) + 1.0f));
 8001d50:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001d54:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001db4 <calc_gas_resistance_low+0x13c>
 8001d58:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d5c:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001d60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d64:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001d68:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001db8 <calc_gas_resistance_low+0x140>
 8001d6c:	ee37 6ae6 	vsub.f32	s12, s15, s13
 8001d70:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 8001d74:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001d78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d8c:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88

    return calc_gas_res;
 8001d90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d94:	ee07 3a90 	vmov	s15, r3
}
 8001d98:	eeb0 0a67 	vmov.f32	s0, s15
 8001d9c:	37a4      	adds	r7, #164	; 0xa4
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bcb0      	pop	{r4, r5, r7}
 8001da2:	4770      	bx	lr
 8001da4:	08009ab8 	.word	0x08009ab8
 8001da8:	08009af8 	.word	0x08009af8
 8001dac:	44a78000 	.word	0x44a78000
 8001db0:	42c80000 	.word	0x42c80000
 8001db4:	340637bd 	.word	0x340637bd
 8001db8:	44000000 	.word	0x44000000

08001dbc <calc_gas_resistance_high>:

/* This internal API is used to calculate the gas resistance value in float */
static float calc_gas_resistance_high(uint16_t gas_res_adc, uint8_t gas_range)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b087      	sub	sp, #28
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	460a      	mov	r2, r1
 8001dc6:	80fb      	strh	r3, [r7, #6]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	717b      	strb	r3, [r7, #5]
    float calc_gas_res;
    uint32_t var1 = UINT32_C(262144) >> gas_range;
 8001dcc:	797b      	ldrb	r3, [r7, #5]
 8001dce:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd6:	617b      	str	r3, [r7, #20]
    int32_t var2 = (int32_t)gas_res_adc - INT32_C(512);
 8001dd8:	88fb      	ldrh	r3, [r7, #6]
 8001dda:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001dde:	613b      	str	r3, [r7, #16]

    var2 *= INT32_C(3);
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	4613      	mov	r3, r2
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	4413      	add	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
    var2 = INT32_C(4096) + var2;
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001df0:	613b      	str	r3, [r7, #16]

    calc_gas_res = 1000000.0f * (float)var1 / (float)var2;
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	ee07 3a90 	vmov	s15, r3
 8001df8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dfc:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001e2c <calc_gas_resistance_high+0x70>
 8001e00:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	ee07 3a90 	vmov	s15, r3
 8001e0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e12:	edc7 7a03 	vstr	s15, [r7, #12]

    return calc_gas_res;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	ee07 3a90 	vmov	s15, r3
}
 8001e1c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e20:	371c      	adds	r7, #28
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	49742400 	.word	0x49742400

08001e30 <calc_res_heat>:

/* This internal API is used to calculate the heater resistance value using float */
static uint8_t calc_res_heat(uint16_t temp, const struct bme68x_dev *dev)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b08b      	sub	sp, #44	; 0x2c
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	81fb      	strh	r3, [r7, #14]
    float var3;
    float var4;
    float var5;
    uint8_t res_heat;

    if (temp > 400) /* Cap temperature */
 8001e3c:	89fb      	ldrh	r3, [r7, #14]
 8001e3e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001e42:	d902      	bls.n	8001e4a <calc_res_heat+0x1a>
    {
        temp = 400;
 8001e44:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001e48:	81fb      	strh	r3, [r7, #14]
    }

    var1 = (((float)dev->calib.par_gh1 / (16.0f)) + 49.0f);
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	f993 3019 	ldrsb.w	r3, [r3, #25]
 8001e50:	ee07 3a90 	vmov	s15, r3
 8001e54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e58:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001e5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e60:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8001f74 <calc_res_heat+0x144>
 8001e64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e68:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    var2 = ((((float)dev->calib.par_gh2 / (32768.0f)) * (0.0005f)) + 0.00235f);
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001e72:	ee07 3a90 	vmov	s15, r3
 8001e76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e7a:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8001f78 <calc_res_heat+0x148>
 8001e7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e82:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8001f7c <calc_res_heat+0x14c>
 8001e86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e8a:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001f80 <calc_res_heat+0x150>
 8001e8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e92:	edc7 7a08 	vstr	s15, [r7, #32]
    var3 = ((float)dev->calib.par_gh3 / (1024.0f));
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	f993 301c 	ldrsb.w	r3, [r3, #28]
 8001e9c:	ee07 3a90 	vmov	s15, r3
 8001ea0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ea4:	eddf 6a37 	vldr	s13, [pc, #220]	; 8001f84 <calc_res_heat+0x154>
 8001ea8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eac:	edc7 7a07 	vstr	s15, [r7, #28]
    var4 = (var1 * (1.0f + (var2 * (float)temp)));
 8001eb0:	89fb      	ldrh	r3, [r7, #14]
 8001eb2:	ee07 3a90 	vmov	s15, r3
 8001eb6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001eba:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ec2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ec6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001eca:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ed2:	edc7 7a06 	vstr	s15, [r7, #24]
    var5 = (var4 + (var3 * (float)dev->amb_temp));
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8001edc:	ee07 3a90 	vmov	s15, r3
 8001ee0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ee4:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eec:	ed97 7a06 	vldr	s14, [r7, #24]
 8001ef0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ef4:	edc7 7a05 	vstr	s15, [r7, #20]
    res_heat =
        (uint8_t)(3.4f *
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001efe:	ee07 3a90 	vmov	s15, r3
 8001f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f06:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001f0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f0e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f16:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f1a:	ee27 7a27 	vmul.f32	s14, s14, s15
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	f993 303d 	ldrsb.w	r3, [r3, #61]	; 0x3d
 8001f24:	ee07 3a90 	vmov	s15, r3
 8001f28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f2c:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001f88 <calc_res_heat+0x158>
 8001f30:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f38:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8001f3c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001f40:	eec6 7a26 	vdiv.f32	s15, s12, s13
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 8001f44:	ee67 7a27 	vmul.f32	s15, s14, s15
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 8001f48:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001f4c:	ee77 7ac7 	vsub.f32	s15, s15, s14
        (uint8_t)(3.4f *
 8001f50:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001f8c <calc_res_heat+0x15c>
 8001f54:	ee67 7a87 	vmul.f32	s15, s15, s14
    res_heat =
 8001f58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f5c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001f60:	793b      	ldrb	r3, [r7, #4]
 8001f62:	74fb      	strb	r3, [r7, #19]
                   25));

    return res_heat;
 8001f64:	7cfb      	ldrb	r3, [r7, #19]
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	372c      	adds	r7, #44	; 0x2c
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	42440000 	.word	0x42440000
 8001f78:	47000000 	.word	0x47000000
 8001f7c:	3a03126f 	.word	0x3a03126f
 8001f80:	3b1a0275 	.word	0x3b1a0275
 8001f84:	44800000 	.word	0x44800000
 8001f88:	3b03126f 	.word	0x3b03126f
 8001f8c:	4059999a 	.word	0x4059999a

08001f90 <calc_gas_wait>:

#endif

/* This internal API is used to calculate the gas wait */
static uint8_t calc_gas_wait(uint16_t dur)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	80fb      	strh	r3, [r7, #6]
    uint8_t factor = 0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	73fb      	strb	r3, [r7, #15]
    uint8_t durval;

    if (dur >= 0xfc0)
 8001f9e:	88fb      	ldrh	r3, [r7, #6]
 8001fa0:	f5b3 6f7c 	cmp.w	r3, #4032	; 0xfc0
 8001fa4:	d308      	bcc.n	8001fb8 <calc_gas_wait+0x28>
    {
        durval = 0xff; /* Max duration*/
 8001fa6:	23ff      	movs	r3, #255	; 0xff
 8001fa8:	73bb      	strb	r3, [r7, #14]
 8001faa:	e00f      	b.n	8001fcc <calc_gas_wait+0x3c>
    }
    else
    {
        while (dur > 0x3F)
        {
            dur = dur / 4;
 8001fac:	88fb      	ldrh	r3, [r7, #6]
 8001fae:	089b      	lsrs	r3, r3, #2
 8001fb0:	80fb      	strh	r3, [r7, #6]
            factor += 1;
 8001fb2:	7bfb      	ldrb	r3, [r7, #15]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	73fb      	strb	r3, [r7, #15]
        while (dur > 0x3F)
 8001fb8:	88fb      	ldrh	r3, [r7, #6]
 8001fba:	2b3f      	cmp	r3, #63	; 0x3f
 8001fbc:	d8f6      	bhi.n	8001fac <calc_gas_wait+0x1c>
        }

        durval = (uint8_t)(dur + (factor * 64));
 8001fbe:	88fb      	ldrh	r3, [r7, #6]
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	7bfb      	ldrb	r3, [r7, #15]
 8001fc4:	019b      	lsls	r3, r3, #6
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	4413      	add	r3, r2
 8001fca:	73bb      	strb	r3, [r7, #14]
    }

    return durval;
 8001fcc:	7bbb      	ldrb	r3, [r7, #14]
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <read_field_data>:

/* This internal API is used to read a single data of the sensor */
static int8_t read_field_data(uint8_t index, struct bme68x_data *data, struct bme68x_dev *dev)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b08e      	sub	sp, #56	; 0x38
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	60b9      	str	r1, [r7, #8]
 8001fe4:	607a      	str	r2, [r7, #4]
 8001fe6:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME68X_OK;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint8_t buff[BME68X_LEN_FIELD] = { 0 };
 8001fee:	2300      	movs	r3, #0
 8001ff0:	613b      	str	r3, [r7, #16]
 8001ff2:	f107 0314 	add.w	r3, r7, #20
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	605a      	str	r2, [r3, #4]
 8001ffc:	609a      	str	r2, [r3, #8]
 8001ffe:	731a      	strb	r2, [r3, #12]
    uint8_t gas_range_l, gas_range_h;
    uint32_t adc_temp;
    uint32_t adc_pres;
    uint16_t adc_hum;
    uint16_t adc_gas_res_low, adc_gas_res_high;
    uint8_t tries = 5;
 8002000:	2305      	movs	r3, #5
 8002002:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    while ((tries) && (rslt == BME68X_OK))
 8002006:	e123      	b.n	8002250 <read_field_data+0x276>
    {
        rslt = bme68x_get_regs(((uint8_t)(BME68X_REG_FIELD0 + (index * BME68X_LEN_FIELD_OFFSET))),
 8002008:	7bfb      	ldrb	r3, [r7, #15]
 800200a:	461a      	mov	r2, r3
 800200c:	0112      	lsls	r2, r2, #4
 800200e:	4413      	add	r3, r2
 8002010:	b2db      	uxtb	r3, r3
 8002012:	331d      	adds	r3, #29
 8002014:	b2d8      	uxtb	r0, r3
 8002016:	f107 0110 	add.w	r1, r7, #16
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2211      	movs	r2, #17
 800201e:	f7ff f803 	bl	8001028 <bme68x_get_regs>
 8002022:	4603      	mov	r3, r0
 8002024:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                               buff,
                               (uint16_t)BME68X_LEN_FIELD,
                               dev);
        if (!data)
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d103      	bne.n	8002036 <read_field_data+0x5c>
        {
            rslt = BME68X_E_NULL_PTR;
 800202e:	23ff      	movs	r3, #255	; 0xff
 8002030:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            break;
 8002034:	e115      	b.n	8002262 <read_field_data+0x288>
        }

        data->status = buff[0] & BME68X_NEW_DATA_MSK;
 8002036:	7c3b      	ldrb	r3, [r7, #16]
 8002038:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800203c:	b2da      	uxtb	r2, r3
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	701a      	strb	r2, [r3, #0]
        data->gas_index = buff[0] & BME68X_GAS_INDEX_MSK;
 8002042:	7c3b      	ldrb	r3, [r7, #16]
 8002044:	f003 030f 	and.w	r3, r3, #15
 8002048:	b2da      	uxtb	r2, r3
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	705a      	strb	r2, [r3, #1]
        data->meas_index = buff[1];
 800204e:	7c7a      	ldrb	r2, [r7, #17]
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	709a      	strb	r2, [r3, #2]

        /* read the raw data from the sensor */
        adc_pres = (uint32_t)(((uint32_t)buff[2] * 4096) | ((uint32_t)buff[3] * 16) | ((uint32_t)buff[4] / 16));
 8002054:	7cbb      	ldrb	r3, [r7, #18]
 8002056:	031a      	lsls	r2, r3, #12
 8002058:	7cfb      	ldrb	r3, [r7, #19]
 800205a:	011b      	lsls	r3, r3, #4
 800205c:	4313      	orrs	r3, r2
 800205e:	7d3a      	ldrb	r2, [r7, #20]
 8002060:	0912      	lsrs	r2, r2, #4
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	4313      	orrs	r3, r2
 8002066:	633b      	str	r3, [r7, #48]	; 0x30
        adc_temp = (uint32_t)(((uint32_t)buff[5] * 4096) | ((uint32_t)buff[6] * 16) | ((uint32_t)buff[7] / 16));
 8002068:	7d7b      	ldrb	r3, [r7, #21]
 800206a:	031a      	lsls	r2, r3, #12
 800206c:	7dbb      	ldrb	r3, [r7, #22]
 800206e:	011b      	lsls	r3, r3, #4
 8002070:	4313      	orrs	r3, r2
 8002072:	7dfa      	ldrb	r2, [r7, #23]
 8002074:	0912      	lsrs	r2, r2, #4
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	4313      	orrs	r3, r2
 800207a:	62fb      	str	r3, [r7, #44]	; 0x2c
        adc_hum = (uint16_t)(((uint32_t)buff[8] * 256) | (uint32_t)buff[9]);
 800207c:	7e3b      	ldrb	r3, [r7, #24]
 800207e:	b29b      	uxth	r3, r3
 8002080:	021b      	lsls	r3, r3, #8
 8002082:	b29a      	uxth	r2, r3
 8002084:	7e7b      	ldrb	r3, [r7, #25]
 8002086:	b29b      	uxth	r3, r3
 8002088:	4313      	orrs	r3, r2
 800208a:	857b      	strh	r3, [r7, #42]	; 0x2a
        adc_gas_res_low = (uint16_t)((uint32_t)buff[13] * 4 | (((uint32_t)buff[14]) / 64));
 800208c:	7f7b      	ldrb	r3, [r7, #29]
 800208e:	b29b      	uxth	r3, r3
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	b29a      	uxth	r2, r3
 8002094:	7fbb      	ldrb	r3, [r7, #30]
 8002096:	099b      	lsrs	r3, r3, #6
 8002098:	b2db      	uxtb	r3, r3
 800209a:	b29b      	uxth	r3, r3
 800209c:	4313      	orrs	r3, r2
 800209e:	853b      	strh	r3, [r7, #40]	; 0x28
        adc_gas_res_high = (uint16_t)((uint32_t)buff[15] * 4 | (((uint32_t)buff[16]) / 64));
 80020a0:	7ffb      	ldrb	r3, [r7, #31]
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80020ac:	099b      	lsrs	r3, r3, #6
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	4313      	orrs	r3, r2
 80020b4:	84fb      	strh	r3, [r7, #38]	; 0x26
        gas_range_l = buff[14] & BME68X_GAS_RANGE_MSK;
 80020b6:	7fbb      	ldrb	r3, [r7, #30]
 80020b8:	f003 030f 	and.w	r3, r3, #15
 80020bc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        gas_range_h = buff[16] & BME68X_GAS_RANGE_MSK;
 80020c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80020c4:	f003 030f 	and.w	r3, r3, #15
 80020c8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d11c      	bne.n	800210e <read_field_data+0x134>
        {
            data->status |= buff[16] & BME68X_GASM_VALID_MSK;
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	b25a      	sxtb	r2, r3
 80020da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80020de:	b25b      	sxtb	r3, r3
 80020e0:	f003 0320 	and.w	r3, r3, #32
 80020e4:	b25b      	sxtb	r3, r3
 80020e6:	4313      	orrs	r3, r2
 80020e8:	b25b      	sxtb	r3, r3
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	701a      	strb	r2, [r3, #0]
            data->status |= buff[16] & BME68X_HEAT_STAB_MSK;
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	b25a      	sxtb	r2, r3
 80020f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80020fa:	b25b      	sxtb	r3, r3
 80020fc:	f003 0310 	and.w	r3, r3, #16
 8002100:	b25b      	sxtb	r3, r3
 8002102:	4313      	orrs	r3, r2
 8002104:	b25b      	sxtb	r3, r3
 8002106:	b2da      	uxtb	r2, r3
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	701a      	strb	r2, [r3, #0]
 800210c:	e019      	b.n	8002142 <read_field_data+0x168>
        }
        else
        {
            data->status |= buff[14] & BME68X_GASM_VALID_MSK;
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	b25a      	sxtb	r2, r3
 8002114:	7fbb      	ldrb	r3, [r7, #30]
 8002116:	b25b      	sxtb	r3, r3
 8002118:	f003 0320 	and.w	r3, r3, #32
 800211c:	b25b      	sxtb	r3, r3
 800211e:	4313      	orrs	r3, r2
 8002120:	b25b      	sxtb	r3, r3
 8002122:	b2da      	uxtb	r2, r3
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	701a      	strb	r2, [r3, #0]
            data->status |= buff[14] & BME68X_HEAT_STAB_MSK;
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	b25a      	sxtb	r2, r3
 800212e:	7fbb      	ldrb	r3, [r7, #30]
 8002130:	b25b      	sxtb	r3, r3
 8002132:	f003 0310 	and.w	r3, r3, #16
 8002136:	b25b      	sxtb	r3, r3
 8002138:	4313      	orrs	r3, r2
 800213a:	b25b      	sxtb	r3, r3
 800213c:	b2da      	uxtb	r2, r3
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	701a      	strb	r2, [r3, #0]
        }

        if ((data->status & BME68X_NEW_DATA_MSK) && (rslt == BME68X_OK))
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	b25b      	sxtb	r3, r3
 8002148:	2b00      	cmp	r3, #0
 800214a:	da70      	bge.n	800222e <read_field_data+0x254>
 800214c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002150:	2b00      	cmp	r3, #0
 8002152:	d16c      	bne.n	800222e <read_field_data+0x254>
        {
            rslt = bme68x_get_regs(BME68X_REG_RES_HEAT0 + data->gas_index, &data->res_heat, 1, dev);
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	785b      	ldrb	r3, [r3, #1]
 8002158:	335a      	adds	r3, #90	; 0x5a
 800215a:	b2d8      	uxtb	r0, r3
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	1cd9      	adds	r1, r3, #3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f7fe ff60 	bl	8001028 <bme68x_get_regs>
 8002168:	4603      	mov	r3, r0
 800216a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            if (rslt == BME68X_OK)
 800216e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10c      	bne.n	8002190 <read_field_data+0x1b6>
            {
                rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0 + data->gas_index, &data->idac, 1, dev);
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	785b      	ldrb	r3, [r3, #1]
 800217a:	3350      	adds	r3, #80	; 0x50
 800217c:	b2d8      	uxtb	r0, r3
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	1d19      	adds	r1, r3, #4
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2201      	movs	r2, #1
 8002186:	f7fe ff4f 	bl	8001028 <bme68x_get_regs>
 800218a:	4603      	mov	r3, r0
 800218c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            }

            if (rslt == BME68X_OK)
 8002190:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002194:	2b00      	cmp	r3, #0
 8002196:	d10c      	bne.n	80021b2 <read_field_data+0x1d8>
            {
                rslt = bme68x_get_regs(BME68X_REG_GAS_WAIT0 + data->gas_index, &data->gas_wait, 1, dev);
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	785b      	ldrb	r3, [r3, #1]
 800219c:	3364      	adds	r3, #100	; 0x64
 800219e:	b2d8      	uxtb	r0, r3
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	1d59      	adds	r1, r3, #5
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f7fe ff3e 	bl	8001028 <bme68x_get_regs>
 80021ac:	4603      	mov	r3, r0
 80021ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            }

            if (rslt == BME68X_OK)
 80021b2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d139      	bne.n	800222e <read_field_data+0x254>
            {
                data->temperature = calc_temperature(adc_temp, dev);
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80021be:	f7ff fac7 	bl	8001750 <calc_temperature>
 80021c2:	eef0 7a40 	vmov.f32	s15, s0
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	edc3 7a02 	vstr	s15, [r3, #8]
                data->pressure = calc_pressure(adc_pres, dev);
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021d0:	f7ff fb44 	bl	800185c <calc_pressure>
 80021d4:	eef0 7a40 	vmov.f32	s15, s0
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	edc3 7a03 	vstr	s15, [r3, #12]
                data->humidity = calc_humidity(adc_hum, dev);
 80021de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80021e0:	6879      	ldr	r1, [r7, #4]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff fc7c 	bl	8001ae0 <calc_humidity>
 80021e8:	eef0 7a40 	vmov.f32	s15, s0
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	edc3 7a04 	vstr	s15, [r3, #16]
                if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d10c      	bne.n	8002214 <read_field_data+0x23a>
                {
                    data->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
 80021fa:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80021fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002200:	4611      	mov	r1, r2
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff fdda 	bl	8001dbc <calc_gas_resistance_high>
 8002208:	eef0 7a40 	vmov.f32	s15, s0
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	edc3 7a05 	vstr	s15, [r3, #20]
                else
                {
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
                }

                break;
 8002212:	e026      	b.n	8002262 <read_field_data+0x288>
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 8002214:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8002218:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff fd2b 	bl	8001c78 <calc_gas_resistance_low>
 8002222:	eef0 7a40 	vmov.f32	s15, s0
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	edc3 7a05 	vstr	s15, [r3, #20]
                break;
 800222c:	e019      	b.n	8002262 <read_field_data+0x288>
            }
        }

        if (rslt == BME68X_OK)
 800222e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002232:	2b00      	cmp	r3, #0
 8002234:	d107      	bne.n	8002246 <read_field_data+0x26c>
        {
            dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6852      	ldr	r2, [r2, #4]
 800223e:	4611      	mov	r1, r2
 8002240:	f242 7010 	movw	r0, #10000	; 0x2710
 8002244:	4798      	blx	r3
        }

        tries--;
 8002246:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800224a:	3b01      	subs	r3, #1
 800224c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    while ((tries) && (rslt == BME68X_OK))
 8002250:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002254:	2b00      	cmp	r3, #0
 8002256:	d004      	beq.n	8002262 <read_field_data+0x288>
 8002258:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800225c:	2b00      	cmp	r3, #0
 800225e:	f43f aed3 	beq.w	8002008 <read_field_data+0x2e>
    }

    return rslt;
 8002262:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8002266:	4618      	mov	r0, r3
 8002268:	3738      	adds	r7, #56	; 0x38
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <read_all_field_data>:

/* This internal API is used to read all data fields of the sensor */
static int8_t read_all_field_data(struct bme68x_data * const data[], struct bme68x_dev *dev)
{
 800226e:	b590      	push	{r4, r7, lr}
 8002270:	b09d      	sub	sp, #116	; 0x74
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
 8002276:	6039      	str	r1, [r7, #0]
    int8_t rslt = BME68X_OK;
 8002278:	2300      	movs	r3, #0
 800227a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    uint8_t buff[BME68X_LEN_FIELD * 3] = { 0 };
 800227e:	2300      	movs	r3, #0
 8002280:	62bb      	str	r3, [r7, #40]	; 0x28
 8002282:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002286:	222f      	movs	r2, #47	; 0x2f
 8002288:	2100      	movs	r1, #0
 800228a:	4618      	mov	r0, r3
 800228c:	f004 fd02 	bl	8006c94 <memset>
    uint32_t adc_temp;
    uint32_t adc_pres;
    uint16_t adc_hum;
    uint16_t adc_gas_res_low, adc_gas_res_high;
    uint8_t off;
    uint8_t set_val[30] = { 0 }; /* idac, res_heat, gas_wait */
 8002290:	2300      	movs	r3, #0
 8002292:	60bb      	str	r3, [r7, #8]
 8002294:	f107 030c 	add.w	r3, r7, #12
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	605a      	str	r2, [r3, #4]
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	60da      	str	r2, [r3, #12]
 80022a2:	611a      	str	r2, [r3, #16]
 80022a4:	615a      	str	r2, [r3, #20]
 80022a6:	831a      	strh	r2, [r3, #24]
    uint8_t i;

    if (!data[0] && !data[1] && !data[2])
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d10c      	bne.n	80022ca <read_all_field_data+0x5c>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3304      	adds	r3, #4
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d107      	bne.n	80022ca <read_all_field_data+0x5c>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	3308      	adds	r3, #8
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d102      	bne.n	80022ca <read_all_field_data+0x5c>
    {
        rslt = BME68X_E_NULL_PTR;
 80022c4:	23ff      	movs	r3, #255	; 0xff
 80022c6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }

    if (rslt == BME68X_OK)
 80022ca:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d109      	bne.n	80022e6 <read_all_field_data+0x78>
    {
        rslt = bme68x_get_regs(BME68X_REG_FIELD0, buff, (uint32_t) BME68X_LEN_FIELD * 3, dev);
 80022d2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	2233      	movs	r2, #51	; 0x33
 80022da:	201d      	movs	r0, #29
 80022dc:	f7fe fea4 	bl	8001028 <bme68x_get_regs>
 80022e0:	4603      	mov	r3, r0
 80022e2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }

    if (rslt == BME68X_OK)
 80022e6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d109      	bne.n	8002302 <read_all_field_data+0x94>
    {
        rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0, set_val, 30, dev);
 80022ee:	f107 0108 	add.w	r1, r7, #8
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	221e      	movs	r2, #30
 80022f6:	2050      	movs	r0, #80	; 0x50
 80022f8:	f7fe fe96 	bl	8001028 <bme68x_get_regs>
 80022fc:	4603      	mov	r3, r0
 80022fe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }

    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8002302:	2300      	movs	r3, #0
 8002304:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8002308:	e1d4      	b.n	80026b4 <read_all_field_data+0x446>
    {
        off = (uint8_t)(i * BME68X_LEN_FIELD);
 800230a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800230e:	461a      	mov	r2, r3
 8002310:	0112      	lsls	r2, r2, #4
 8002312:	4413      	add	r3, r2
 8002314:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
        data[i]->status = buff[off] & BME68X_NEW_DATA_MSK;
 8002318:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800231c:	3370      	adds	r3, #112	; 0x70
 800231e:	443b      	add	r3, r7
 8002320:	f813 2c48 	ldrb.w	r2, [r3, #-72]
 8002324:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	440b      	add	r3, r1
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8002334:	b2d2      	uxtb	r2, r2
 8002336:	701a      	strb	r2, [r3, #0]
        data[i]->gas_index = buff[off] & BME68X_GAS_INDEX_MSK;
 8002338:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800233c:	3370      	adds	r3, #112	; 0x70
 800233e:	443b      	add	r3, r7
 8002340:	f813 2c48 	ldrb.w	r2, [r3, #-72]
 8002344:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	440b      	add	r3, r1
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f002 020f 	and.w	r2, r2, #15
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	705a      	strb	r2, [r3, #1]
        data[i]->meas_index = buff[off + 1];
 8002358:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800235c:	1c5a      	adds	r2, r3, #1
 800235e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	440b      	add	r3, r1
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	3270      	adds	r2, #112	; 0x70
 800236c:	443a      	add	r2, r7
 800236e:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8002372:	709a      	strb	r2, [r3, #2]

        /* read the raw data from the sensor */
        adc_pres =
            (uint32_t) (((uint32_t) buff[off + 2] * 4096) | ((uint32_t) buff[off + 3] * 16) |
 8002374:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002378:	3302      	adds	r3, #2
 800237a:	3370      	adds	r3, #112	; 0x70
 800237c:	443b      	add	r3, r7
 800237e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002382:	031a      	lsls	r2, r3, #12
 8002384:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002388:	3303      	adds	r3, #3
 800238a:	3370      	adds	r3, #112	; 0x70
 800238c:	443b      	add	r3, r7
 800238e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002392:	011b      	lsls	r3, r3, #4
 8002394:	4313      	orrs	r3, r2
                        ((uint32_t) buff[off + 4] / 16));
 8002396:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 800239a:	3204      	adds	r2, #4
 800239c:	3270      	adds	r2, #112	; 0x70
 800239e:	443a      	add	r2, r7
 80023a0:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 80023a4:	0912      	lsrs	r2, r2, #4
 80023a6:	b2d2      	uxtb	r2, r2
        adc_pres =
 80023a8:	4313      	orrs	r3, r2
 80023aa:	66bb      	str	r3, [r7, #104]	; 0x68
        adc_temp =
            (uint32_t) (((uint32_t) buff[off + 5] * 4096) | ((uint32_t) buff[off + 6] * 16) |
 80023ac:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80023b0:	3305      	adds	r3, #5
 80023b2:	3370      	adds	r3, #112	; 0x70
 80023b4:	443b      	add	r3, r7
 80023b6:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80023ba:	031a      	lsls	r2, r3, #12
 80023bc:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80023c0:	3306      	adds	r3, #6
 80023c2:	3370      	adds	r3, #112	; 0x70
 80023c4:	443b      	add	r3, r7
 80023c6:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	4313      	orrs	r3, r2
                        ((uint32_t) buff[off + 7] / 16));
 80023ce:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 80023d2:	3207      	adds	r2, #7
 80023d4:	3270      	adds	r2, #112	; 0x70
 80023d6:	443a      	add	r2, r7
 80023d8:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 80023dc:	0912      	lsrs	r2, r2, #4
 80023de:	b2d2      	uxtb	r2, r2
        adc_temp =
 80023e0:	4313      	orrs	r3, r2
 80023e2:	667b      	str	r3, [r7, #100]	; 0x64
        adc_hum = (uint16_t) (((uint32_t) buff[off + 8] * 256) | (uint32_t) buff[off + 9]);
 80023e4:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80023e8:	3308      	adds	r3, #8
 80023ea:	3370      	adds	r3, #112	; 0x70
 80023ec:	443b      	add	r3, r7
 80023ee:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	021b      	lsls	r3, r3, #8
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80023fc:	3309      	adds	r3, #9
 80023fe:	3370      	adds	r3, #112	; 0x70
 8002400:	443b      	add	r3, r7
 8002402:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002406:	b29b      	uxth	r3, r3
 8002408:	4313      	orrs	r3, r2
 800240a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        adc_gas_res_low = (uint16_t) ((uint32_t) buff[off + 13] * 4 | (((uint32_t) buff[off + 14]) / 64));
 800240e:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002412:	330d      	adds	r3, #13
 8002414:	3370      	adds	r3, #112	; 0x70
 8002416:	443b      	add	r3, r7
 8002418:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800241c:	b29b      	uxth	r3, r3
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	b29a      	uxth	r2, r3
 8002422:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002426:	330e      	adds	r3, #14
 8002428:	3370      	adds	r3, #112	; 0x70
 800242a:	443b      	add	r3, r7
 800242c:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002430:	099b      	lsrs	r3, r3, #6
 8002432:	b2db      	uxtb	r3, r3
 8002434:	b29b      	uxth	r3, r3
 8002436:	4313      	orrs	r3, r2
 8002438:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4 | (((uint32_t) buff[off + 16]) / 64));
 800243c:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002440:	330f      	adds	r3, #15
 8002442:	3370      	adds	r3, #112	; 0x70
 8002444:	443b      	add	r3, r7
 8002446:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800244a:	b29b      	uxth	r3, r3
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	b29a      	uxth	r2, r3
 8002450:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002454:	3310      	adds	r3, #16
 8002456:	3370      	adds	r3, #112	; 0x70
 8002458:	443b      	add	r3, r7
 800245a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800245e:	099b      	lsrs	r3, r3, #6
 8002460:	b2db      	uxtb	r3, r3
 8002462:	b29b      	uxth	r3, r3
 8002464:	4313      	orrs	r3, r2
 8002466:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
        gas_range_l = buff[off + 14] & BME68X_GAS_RANGE_MSK;
 800246a:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800246e:	330e      	adds	r3, #14
 8002470:	3370      	adds	r3, #112	; 0x70
 8002472:	443b      	add	r3, r7
 8002474:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002478:	f003 030f 	and.w	r3, r3, #15
 800247c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        gas_range_h = buff[off + 16] & BME68X_GAS_RANGE_MSK;
 8002480:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002484:	3310      	adds	r3, #16
 8002486:	3370      	adds	r3, #112	; 0x70
 8002488:	443b      	add	r3, r7
 800248a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d13a      	bne.n	8002514 <read_all_field_data+0x2a6>
        {
            data[i]->status |= buff[off + 16] & BME68X_GASM_VALID_MSK;
 800249e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	4413      	add	r3, r2
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	b25a      	sxtb	r2, r3
 80024ae:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80024b2:	3310      	adds	r3, #16
 80024b4:	3370      	adds	r3, #112	; 0x70
 80024b6:	443b      	add	r3, r7
 80024b8:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80024bc:	b25b      	sxtb	r3, r3
 80024be:	f003 0320 	and.w	r3, r3, #32
 80024c2:	b25b      	sxtb	r3, r3
 80024c4:	4313      	orrs	r3, r2
 80024c6:	b259      	sxtb	r1, r3
 80024c8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	4413      	add	r3, r2
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	b2ca      	uxtb	r2, r1
 80024d6:	701a      	strb	r2, [r3, #0]
            data[i]->status |= buff[off + 16] & BME68X_HEAT_STAB_MSK;
 80024d8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	4413      	add	r3, r2
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	b25a      	sxtb	r2, r3
 80024e8:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80024ec:	3310      	adds	r3, #16
 80024ee:	3370      	adds	r3, #112	; 0x70
 80024f0:	443b      	add	r3, r7
 80024f2:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80024f6:	b25b      	sxtb	r3, r3
 80024f8:	f003 0310 	and.w	r3, r3, #16
 80024fc:	b25b      	sxtb	r3, r3
 80024fe:	4313      	orrs	r3, r2
 8002500:	b259      	sxtb	r1, r3
 8002502:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	4413      	add	r3, r2
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	b2ca      	uxtb	r2, r1
 8002510:	701a      	strb	r2, [r3, #0]
 8002512:	e039      	b.n	8002588 <read_all_field_data+0x31a>
        }
        else
        {
            data[i]->status |= buff[off + 14] & BME68X_GASM_VALID_MSK;
 8002514:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	4413      	add	r3, r2
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	b25a      	sxtb	r2, r3
 8002524:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002528:	330e      	adds	r3, #14
 800252a:	3370      	adds	r3, #112	; 0x70
 800252c:	443b      	add	r3, r7
 800252e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002532:	b25b      	sxtb	r3, r3
 8002534:	f003 0320 	and.w	r3, r3, #32
 8002538:	b25b      	sxtb	r3, r3
 800253a:	4313      	orrs	r3, r2
 800253c:	b259      	sxtb	r1, r3
 800253e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	4413      	add	r3, r2
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	b2ca      	uxtb	r2, r1
 800254c:	701a      	strb	r2, [r3, #0]
            data[i]->status |= buff[off + 14] & BME68X_HEAT_STAB_MSK;
 800254e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	4413      	add	r3, r2
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	b25a      	sxtb	r2, r3
 800255e:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002562:	330e      	adds	r3, #14
 8002564:	3370      	adds	r3, #112	; 0x70
 8002566:	443b      	add	r3, r7
 8002568:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800256c:	b25b      	sxtb	r3, r3
 800256e:	f003 0310 	and.w	r3, r3, #16
 8002572:	b25b      	sxtb	r3, r3
 8002574:	4313      	orrs	r3, r2
 8002576:	b259      	sxtb	r1, r3
 8002578:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	4413      	add	r3, r2
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	b2ca      	uxtb	r2, r1
 8002586:	701a      	strb	r2, [r3, #0]
        }

        data[i]->idac = set_val[data[i]->gas_index];
 8002588:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	4413      	add	r3, r2
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	785b      	ldrb	r3, [r3, #1]
 8002596:	4619      	mov	r1, r3
 8002598:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	4413      	add	r3, r2
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f101 0270 	add.w	r2, r1, #112	; 0x70
 80025a8:	443a      	add	r2, r7
 80025aa:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 80025ae:	711a      	strb	r2, [r3, #4]
        data[i]->res_heat = set_val[10 + data[i]->gas_index];
 80025b0:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	4413      	add	r3, r2
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	785b      	ldrb	r3, [r3, #1]
 80025be:	f103 020a 	add.w	r2, r3, #10
 80025c2:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	6879      	ldr	r1, [r7, #4]
 80025ca:	440b      	add	r3, r1
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	3270      	adds	r2, #112	; 0x70
 80025d0:	443a      	add	r2, r7
 80025d2:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 80025d6:	70da      	strb	r2, [r3, #3]
        data[i]->gas_wait = set_val[20 + data[i]->gas_index];
 80025d8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	4413      	add	r3, r2
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	785b      	ldrb	r3, [r3, #1]
 80025e6:	f103 0214 	add.w	r2, r3, #20
 80025ea:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	6879      	ldr	r1, [r7, #4]
 80025f2:	440b      	add	r3, r1
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	3270      	adds	r2, #112	; 0x70
 80025f8:	443a      	add	r2, r7
 80025fa:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 80025fe:	715a      	strb	r2, [r3, #5]
        data[i]->temperature = calc_temperature(adc_temp, dev);
 8002600:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	4413      	add	r3, r2
 800260a:	681c      	ldr	r4, [r3, #0]
 800260c:	6839      	ldr	r1, [r7, #0]
 800260e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002610:	f7ff f89e 	bl	8001750 <calc_temperature>
 8002614:	eef0 7a40 	vmov.f32	s15, s0
 8002618:	edc4 7a02 	vstr	s15, [r4, #8]
        data[i]->pressure = calc_pressure(adc_pres, dev);
 800261c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	4413      	add	r3, r2
 8002626:	681c      	ldr	r4, [r3, #0]
 8002628:	6839      	ldr	r1, [r7, #0]
 800262a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800262c:	f7ff f916 	bl	800185c <calc_pressure>
 8002630:	eef0 7a40 	vmov.f32	s15, s0
 8002634:	edc4 7a03 	vstr	s15, [r4, #12]
        data[i]->humidity = calc_humidity(adc_hum, dev);
 8002638:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	4413      	add	r3, r2
 8002642:	681c      	ldr	r4, [r3, #0]
 8002644:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8002648:	6839      	ldr	r1, [r7, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff fa48 	bl	8001ae0 <calc_humidity>
 8002650:	eef0 7a40 	vmov.f32	s15, s0
 8002654:	edc4 7a04 	vstr	s15, [r4, #16]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d112      	bne.n	8002686 <read_all_field_data+0x418>
        {
            data[i]->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
 8002660:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	4413      	add	r3, r2
 800266a:	681c      	ldr	r4, [r3, #0]
 800266c:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8002670:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002674:	4611      	mov	r1, r2
 8002676:	4618      	mov	r0, r3
 8002678:	f7ff fba0 	bl	8001dbc <calc_gas_resistance_high>
 800267c:	eef0 7a40 	vmov.f32	s15, s0
 8002680:	edc4 7a05 	vstr	s15, [r4, #20]
 8002684:	e011      	b.n	80026aa <read_all_field_data+0x43c>
        }
        else
        {
            data[i]->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 8002686:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	4413      	add	r3, r2
 8002690:	681c      	ldr	r4, [r3, #0]
 8002692:	f897 105d 	ldrb.w	r1, [r7, #93]	; 0x5d
 8002696:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff faeb 	bl	8001c78 <calc_gas_resistance_low>
 80026a2:	eef0 7a40 	vmov.f32	s15, s0
 80026a6:	edc4 7a05 	vstr	s15, [r4, #20]
    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 80026aa:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80026ae:	3301      	adds	r3, #1
 80026b0:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 80026b4:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d804      	bhi.n	80026c6 <read_all_field_data+0x458>
 80026bc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f43f ae22 	beq.w	800230a <read_all_field_data+0x9c>
        }
    }

    return rslt;
 80026c6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3774      	adds	r7, #116	; 0x74
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd90      	pop	{r4, r7, pc}

080026d2 <set_mem_page>:

/* This internal API is used to switch between SPI memory pages */
static int8_t set_mem_page(uint8_t reg_addr, struct bme68x_dev *dev)
{
 80026d2:	b590      	push	{r4, r7, lr}
 80026d4:	b085      	sub	sp, #20
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	4603      	mov	r3, r0
 80026da:	6039      	str	r1, [r7, #0]
 80026dc:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg;
    uint8_t mem_page;

    /* Check for null pointers in the device structure*/
    rslt = null_ptr_check(dev);
 80026de:	6838      	ldr	r0, [r7, #0]
 80026e0:	f000 f8b8 	bl	8002854 <null_ptr_check>
 80026e4:	4603      	mov	r3, r0
 80026e6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 80026e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d14f      	bne.n	8002790 <set_mem_page+0xbe>
    {
        if (reg_addr > 0x7f)
 80026f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	da02      	bge.n	80026fe <set_mem_page+0x2c>
        {
            mem_page = BME68X_MEM_PAGE1;
 80026f8:	2300      	movs	r3, #0
 80026fa:	73bb      	strb	r3, [r7, #14]
 80026fc:	e001      	b.n	8002702 <set_mem_page+0x30>
        }
        else
        {
            mem_page = BME68X_MEM_PAGE0;
 80026fe:	2310      	movs	r3, #16
 8002700:	73bb      	strb	r3, [r7, #14]
        }

        if (mem_page != dev->mem_page)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	7b5b      	ldrb	r3, [r3, #13]
 8002706:	7bba      	ldrb	r2, [r7, #14]
 8002708:	429a      	cmp	r2, r3
 800270a:	d041      	beq.n	8002790 <set_mem_page+0xbe>
        {
            dev->mem_page = mem_page;
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	7bba      	ldrb	r2, [r7, #14]
 8002710:	735a      	strb	r2, [r3, #13]
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f107 010d 	add.w	r1, r7, #13
 800271e:	2201      	movs	r2, #1
 8002720:	20f3      	movs	r0, #243	; 0xf3
 8002722:	47a0      	blx	r4
 8002724:	4603      	mov	r3, r0
 8002726:	461a      	mov	r2, r3
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            if (dev->intf_rslt != 0)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <set_mem_page+0x6a>
            {
                rslt = BME68X_E_COM_FAIL;
 8002738:	23fe      	movs	r3, #254	; 0xfe
 800273a:	73fb      	strb	r3, [r7, #15]
            }

            if (rslt == BME68X_OK)
 800273c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d125      	bne.n	8002790 <set_mem_page+0xbe>
            {
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 8002744:	7b7b      	ldrb	r3, [r7, #13]
 8002746:	f023 0310 	bic.w	r3, r3, #16
 800274a:	b2db      	uxtb	r3, r3
 800274c:	737b      	strb	r3, [r7, #13]
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	7b5b      	ldrb	r3, [r3, #13]
 8002752:	b25b      	sxtb	r3, r3
 8002754:	f003 0310 	and.w	r3, r3, #16
 8002758:	b25a      	sxtb	r2, r3
 800275a:	7b7b      	ldrb	r3, [r7, #13]
 800275c:	b25b      	sxtb	r3, r3
 800275e:	4313      	orrs	r3, r2
 8002760:	b25b      	sxtb	r3, r3
 8002762:	b2db      	uxtb	r3, r3
 8002764:	737b      	strb	r3, [r7, #13]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f107 010d 	add.w	r1, r7, #13
 8002772:	2201      	movs	r2, #1
 8002774:	2073      	movs	r0, #115	; 0x73
 8002776:	47a0      	blx	r4
 8002778:	4603      	mov	r3, r0
 800277a:	461a      	mov	r2, r3
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
                if (dev->intf_rslt != 0)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <set_mem_page+0xbe>
                {
                    rslt = BME68X_E_COM_FAIL;
 800278c:	23fe      	movs	r3, #254	; 0xfe
 800278e:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8002790:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002794:	4618      	mov	r0, r3
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	bd90      	pop	{r4, r7, pc}

0800279c <get_mem_page>:

/* This internal API is used to get the current SPI memory page */
static int8_t get_mem_page(struct bme68x_dev *dev)
{
 800279c:	b590      	push	{r4, r7, lr}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 f855 	bl	8002854 <null_ptr_check>
 80027aa:	4603      	mov	r3, r0
 80027ac:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 80027ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d11b      	bne.n	80027ee <get_mem_page+0x52>
    {
        dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f107 010e 	add.w	r1, r7, #14
 80027c2:	2201      	movs	r2, #1
 80027c4:	20f3      	movs	r0, #243	; 0xf3
 80027c6:	47a0      	blx	r4
 80027c8:	4603      	mov	r3, r0
 80027ca:	461a      	mov	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (dev->intf_rslt != 0)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d002      	beq.n	80027e2 <get_mem_page+0x46>
        {
            rslt = BME68X_E_COM_FAIL;
 80027dc:	23fe      	movs	r3, #254	; 0xfe
 80027de:	73fb      	strb	r3, [r7, #15]
 80027e0:	e005      	b.n	80027ee <get_mem_page+0x52>
        }
        else
        {
            dev->mem_page = reg & BME68X_MEM_PAGE_MSK;
 80027e2:	7bbb      	ldrb	r3, [r7, #14]
 80027e4:	f003 0310 	and.w	r3, r3, #16
 80027e8:	b2da      	uxtb	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	735a      	strb	r2, [r3, #13]
        }
    }

    return rslt;
 80027ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd90      	pop	{r4, r7, pc}

080027fa <boundary_check>:

/* This internal API is used to limit the max value of a parameter */
static int8_t boundary_check(uint8_t *value, uint8_t max, struct bme68x_dev *dev)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b086      	sub	sp, #24
 80027fe:	af00      	add	r7, sp, #0
 8002800:	60f8      	str	r0, [r7, #12]
 8002802:	460b      	mov	r3, r1
 8002804:	607a      	str	r2, [r7, #4]
 8002806:	72fb      	strb	r3, [r7, #11]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 f823 	bl	8002854 <null_ptr_check>
 800280e:	4603      	mov	r3, r0
 8002810:	75fb      	strb	r3, [r7, #23]
    if ((value != NULL) && (rslt == BME68X_OK))
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d015      	beq.n	8002844 <boundary_check+0x4a>
 8002818:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d111      	bne.n	8002844 <boundary_check+0x4a>
    {
        /* Check if value is above maximum value */
        if (*value > max)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	7afa      	ldrb	r2, [r7, #11]
 8002826:	429a      	cmp	r2, r3
 8002828:	d20e      	bcs.n	8002848 <boundary_check+0x4e>
        {
            /* Auto correct the invalid value to maximum value */
            *value = max;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	7afa      	ldrb	r2, [r7, #11]
 800282e:	701a      	strb	r2, [r3, #0]
            dev->info_msg |= BME68X_I_PARAM_CORR;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002836:	f043 0301 	orr.w	r3, r3, #1
 800283a:	b2da      	uxtb	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        if (*value > max)
 8002842:	e001      	b.n	8002848 <boundary_check+0x4e>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8002844:	23ff      	movs	r3, #255	; 0xff
 8002846:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002848:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800284c:	4618      	mov	r0, r3
 800284e:	3718      	adds	r7, #24
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <null_ptr_check>:

/* This internal API is used to check the bme68x_dev for null pointers */
static int8_t null_ptr_check(const struct bme68x_dev *dev)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
    int8_t rslt = BME68X_OK;
 800285c:	2300      	movs	r3, #0
 800285e:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00b      	beq.n	800287e <null_ptr_check+0x2a>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	2b00      	cmp	r3, #0
 800286c:	d007      	beq.n	800287e <null_ptr_check+0x2a>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <null_ptr_check+0x2a>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <null_ptr_check+0x2e>
    {
        /* Device structure pointer is not valid */
        rslt = BME68X_E_NULL_PTR;
 800287e:	23ff      	movs	r3, #255	; 0xff
 8002880:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002882:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002886:	4618      	mov	r0, r3
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
	...

08002894 <set_conf>:

/* This internal API is used to set heater configurations */
static int8_t set_conf(const struct bme68x_heatr_conf *conf, uint8_t op_mode, uint8_t *nb_conv, struct bme68x_dev *dev)
{
 8002894:	b590      	push	{r4, r7, lr}
 8002896:	b093      	sub	sp, #76	; 0x4c
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	607a      	str	r2, [r7, #4]
 800289e:	603b      	str	r3, [r7, #0]
 80028a0:	460b      	mov	r3, r1
 80028a2:	72fb      	strb	r3, [r7, #11]
    int8_t rslt = BME68X_OK;
 80028a4:	2300      	movs	r3, #0
 80028a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t i;
    uint8_t shared_dur;
    uint8_t write_len = 0;
 80028aa:	2300      	movs	r3, #0
 80028ac:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    uint8_t heater_dur_shared_addr = BME68X_REG_SHD_HEATR_DUR;
 80028b0:	236e      	movs	r3, #110	; 0x6e
 80028b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80028b6:	4aa1      	ldr	r2, [pc, #644]	; (8002b3c <set_conf+0x2a8>)
 80028b8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80028bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80028be:	c303      	stmia	r3!, {r0, r1}
 80028c0:	801a      	strh	r2, [r3, #0]
    uint8_t rh_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80028c2:	4a9e      	ldr	r2, [pc, #632]	; (8002b3c <set_conf+0x2a8>)
 80028c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80028ca:	c303      	stmia	r3!, {r0, r1}
 80028cc:	801a      	strh	r2, [r3, #0]
    uint8_t gw_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80028ce:	4a9b      	ldr	r2, [pc, #620]	; (8002b3c <set_conf+0x2a8>)
 80028d0:	f107 0320 	add.w	r3, r7, #32
 80028d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80028d6:	c303      	stmia	r3!, {r0, r1}
 80028d8:	801a      	strh	r2, [r3, #0]
    uint8_t gw_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80028da:	4a98      	ldr	r2, [pc, #608]	; (8002b3c <set_conf+0x2a8>)
 80028dc:	f107 0314 	add.w	r3, r7, #20
 80028e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80028e2:	c303      	stmia	r3!, {r0, r1}
 80028e4:	801a      	strh	r2, [r3, #0]

    switch (op_mode)
 80028e6:	7afb      	ldrb	r3, [r7, #11]
 80028e8:	2b03      	cmp	r3, #3
 80028ea:	d024      	beq.n	8002936 <set_conf+0xa2>
 80028ec:	2b03      	cmp	r3, #3
 80028ee:	f300 80f9 	bgt.w	8002ae4 <set_conf+0x250>
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d002      	beq.n	80028fc <set_conf+0x68>
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d07c      	beq.n	80029f4 <set_conf+0x160>
 80028fa:	e0f3      	b.n	8002ae4 <set_conf+0x250>
    {
        case BME68X_FORCED_MODE:
            rh_reg_addr[0] = BME68X_REG_RES_HEAT0;
 80028fc:	235a      	movs	r3, #90	; 0x5a
 80028fe:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
            rh_reg_data[0] = calc_res_heat(conf->heatr_temp, dev);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	885b      	ldrh	r3, [r3, #2]
 8002906:	6839      	ldr	r1, [r7, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff fa91 	bl	8001e30 <calc_res_heat>
 800290e:	4603      	mov	r3, r0
 8002910:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
            gw_reg_addr[0] = BME68X_REG_GAS_WAIT0;
 8002914:	2364      	movs	r3, #100	; 0x64
 8002916:	f887 3020 	strb.w	r3, [r7, #32]
            gw_reg_data[0] = calc_gas_wait(conf->heatr_dur);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	889b      	ldrh	r3, [r3, #4]
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff fb36 	bl	8001f90 <calc_gas_wait>
 8002924:	4603      	mov	r3, r0
 8002926:	753b      	strb	r3, [r7, #20]
            (*nb_conv) = 0;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	701a      	strb	r2, [r3, #0]
            write_len = 1;
 800292e:	2301      	movs	r3, #1
 8002930:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
 8002934:	e0db      	b.n	8002aee <set_conf+0x25a>
        case BME68X_SEQUENTIAL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <set_conf+0xb2>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d103      	bne.n	800294e <set_conf+0xba>
            {
                rslt = BME68X_E_NULL_PTR;
 8002946:	23ff      	movs	r3, #255	; 0xff
 8002948:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                break;
 800294c:	e0cf      	b.n	8002aee <set_conf+0x25a>
            }

            for (i = 0; i < conf->profile_len; i++)
 800294e:	2300      	movs	r3, #0
 8002950:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002954:	e03f      	b.n	80029d6 <set_conf+0x142>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8002956:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800295a:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 800295e:	325a      	adds	r2, #90	; 0x5a
 8002960:	b2d2      	uxtb	r2, r2
 8002962:	3348      	adds	r3, #72	; 0x48
 8002964:	443b      	add	r3, r7
 8002966:	f803 2c10 	strb.w	r2, [r3, #-16]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	689a      	ldr	r2, [r3, #8]
 800296e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	4413      	add	r3, r2
 8002976:	881b      	ldrh	r3, [r3, #0]
 8002978:	f897 4046 	ldrb.w	r4, [r7, #70]	; 0x46
 800297c:	6839      	ldr	r1, [r7, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff fa56 	bl	8001e30 <calc_res_heat>
 8002984:	4603      	mov	r3, r0
 8002986:	461a      	mov	r2, r3
 8002988:	f104 0348 	add.w	r3, r4, #72	; 0x48
 800298c:	443b      	add	r3, r7
 800298e:	f803 2c1c 	strb.w	r2, [r3, #-28]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 8002992:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002996:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 800299a:	3264      	adds	r2, #100	; 0x64
 800299c:	b2d2      	uxtb	r2, r2
 800299e:	3348      	adds	r3, #72	; 0x48
 80029a0:	443b      	add	r3, r7
 80029a2:	f803 2c28 	strb.w	r2, [r3, #-40]
                gw_reg_data[i] = calc_gas_wait(conf->heatr_dur_prof[i]);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	68da      	ldr	r2, [r3, #12]
 80029aa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	4413      	add	r3, r2
 80029b2:	881b      	ldrh	r3, [r3, #0]
 80029b4:	f897 4046 	ldrb.w	r4, [r7, #70]	; 0x46
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff fae9 	bl	8001f90 <calc_gas_wait>
 80029be:	4603      	mov	r3, r0
 80029c0:	461a      	mov	r2, r3
 80029c2:	f104 0348 	add.w	r3, r4, #72	; 0x48
 80029c6:	443b      	add	r3, r7
 80029c8:	f803 2c34 	strb.w	r2, [r3, #-52]
            for (i = 0; i < conf->profile_len; i++)
 80029cc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80029d0:	3301      	adds	r3, #1
 80029d2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	7c1b      	ldrb	r3, [r3, #16]
 80029da:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80029de:	429a      	cmp	r2, r3
 80029e0:	d3b9      	bcc.n	8002956 <set_conf+0xc2>
            }

            (*nb_conv) = conf->profile_len;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	7c1a      	ldrb	r2, [r3, #16]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	7c1b      	ldrb	r3, [r3, #16]
 80029ee:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
 80029f2:	e07c      	b.n	8002aee <set_conf+0x25a>
        case BME68X_PARALLEL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d003      	beq.n	8002a04 <set_conf+0x170>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d103      	bne.n	8002a0c <set_conf+0x178>
            {
                rslt = BME68X_E_NULL_PTR;
 8002a04:	23ff      	movs	r3, #255	; 0xff
 8002a06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                break;
 8002a0a:	e070      	b.n	8002aee <set_conf+0x25a>
            }

            if (conf->shared_heatr_dur == 0)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8a5b      	ldrh	r3, [r3, #18]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d102      	bne.n	8002a1a <set_conf+0x186>
            {
                rslt = BME68X_W_DEFINE_SHD_HEATR_DUR;
 8002a14:	2303      	movs	r3, #3
 8002a16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            }

            for (i = 0; i < conf->profile_len; i++)
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002a20:	e03a      	b.n	8002a98 <set_conf+0x204>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8002a22:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002a26:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8002a2a:	325a      	adds	r2, #90	; 0x5a
 8002a2c:	b2d2      	uxtb	r2, r2
 8002a2e:	3348      	adds	r3, #72	; 0x48
 8002a30:	443b      	add	r3, r7
 8002a32:	f803 2c10 	strb.w	r2, [r3, #-16]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	689a      	ldr	r2, [r3, #8]
 8002a3a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	4413      	add	r3, r2
 8002a42:	881b      	ldrh	r3, [r3, #0]
 8002a44:	f897 4046 	ldrb.w	r4, [r7, #70]	; 0x46
 8002a48:	6839      	ldr	r1, [r7, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff f9f0 	bl	8001e30 <calc_res_heat>
 8002a50:	4603      	mov	r3, r0
 8002a52:	461a      	mov	r2, r3
 8002a54:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8002a58:	443b      	add	r3, r7
 8002a5a:	f803 2c1c 	strb.w	r2, [r3, #-28]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 8002a5e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002a62:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8002a66:	3264      	adds	r2, #100	; 0x64
 8002a68:	b2d2      	uxtb	r2, r2
 8002a6a:	3348      	adds	r3, #72	; 0x48
 8002a6c:	443b      	add	r3, r7
 8002a6e:	f803 2c28 	strb.w	r2, [r3, #-40]
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	4413      	add	r3, r2
 8002a7e:	881a      	ldrh	r2, [r3, #0]
 8002a80:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002a84:	b2d2      	uxtb	r2, r2
 8002a86:	3348      	adds	r3, #72	; 0x48
 8002a88:	443b      	add	r3, r7
 8002a8a:	f803 2c34 	strb.w	r2, [r3, #-52]
            for (i = 0; i < conf->profile_len; i++)
 8002a8e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002a92:	3301      	adds	r3, #1
 8002a94:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	7c1b      	ldrb	r3, [r3, #16]
 8002a9c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d3be      	bcc.n	8002a22 <set_conf+0x18e>
            }

            (*nb_conv) = conf->profile_len;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	7c1a      	ldrb	r2, [r3, #16]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	7c1b      	ldrb	r3, [r3, #16]
 8002ab0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            shared_dur = calc_heatr_dur_shared(conf->shared_heatr_dur);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	8a5b      	ldrh	r3, [r3, #18]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f000 f841 	bl	8002b40 <calc_heatr_dur_shared>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
            if (rslt == BME68X_OK)
 8002ac4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d10f      	bne.n	8002aec <set_conf+0x258>
            {
                rslt = bme68x_set_regs(&heater_dur_shared_addr, &shared_dur, 1, dev);
 8002acc:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8002ad0:	f107 0043 	add.w	r0, r7, #67	; 0x43
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f7fe fa16 	bl	8000f08 <bme68x_set_regs>
 8002adc:	4603      	mov	r3, r0
 8002ade:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            }

            break;
 8002ae2:	e003      	b.n	8002aec <set_conf+0x258>
        default:
            rslt = BME68X_W_DEFINE_OP_MODE;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002aea:	e000      	b.n	8002aee <set_conf+0x25a>
            break;
 8002aec:	bf00      	nop
    }

    if (rslt == BME68X_OK)
 8002aee:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10b      	bne.n	8002b0e <set_conf+0x27a>
    {
        rslt = bme68x_set_regs(rh_reg_addr, rh_reg_data, write_len, dev);
 8002af6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002afa:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002afe:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	f7fe fa00 	bl	8000f08 <bme68x_set_regs>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    if (rslt == BME68X_OK)
 8002b0e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d10b      	bne.n	8002b2e <set_conf+0x29a>
    {
        rslt = bme68x_set_regs(gw_reg_addr, gw_reg_data, write_len, dev);
 8002b16:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002b1a:	f107 0114 	add.w	r1, r7, #20
 8002b1e:	f107 0020 	add.w	r0, r7, #32
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	f7fe f9f0 	bl	8000f08 <bme68x_set_regs>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    return rslt;
 8002b2e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	374c      	adds	r7, #76	; 0x4c
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd90      	pop	{r4, r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	08009b38 	.word	0x08009b38

08002b40 <calc_heatr_dur_shared>:

/* This internal API is used to calculate the register value for
 * shared heater duration */
static uint8_t calc_heatr_dur_shared(uint16_t dur)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	80fb      	strh	r3, [r7, #6]
    uint8_t factor = 0;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	73fb      	strb	r3, [r7, #15]
    uint8_t heatdurval;

    if (dur >= 0x783)
 8002b4e:	88fb      	ldrh	r3, [r7, #6]
 8002b50:	f240 7282 	movw	r2, #1922	; 0x782
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d902      	bls.n	8002b5e <calc_heatr_dur_shared+0x1e>
    {
        heatdurval = 0xff; /* Max duration */
 8002b58:	23ff      	movs	r3, #255	; 0xff
 8002b5a:	73bb      	strb	r3, [r7, #14]
 8002b5c:	e01d      	b.n	8002b9a <calc_heatr_dur_shared+0x5a>
    }
    else
    {
        /* Step size of 0.477ms */
        dur = (uint16_t)(((uint32_t)dur * 1000) / 477);
 8002b5e:	88fb      	ldrh	r3, [r7, #6]
 8002b60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b64:	fb03 f202 	mul.w	r2, r3, r2
 8002b68:	4b0f      	ldr	r3, [pc, #60]	; (8002ba8 <calc_heatr_dur_shared+0x68>)
 8002b6a:	fba3 1302 	umull	r1, r3, r3, r2
 8002b6e:	1ad2      	subs	r2, r2, r3
 8002b70:	0852      	lsrs	r2, r2, #1
 8002b72:	4413      	add	r3, r2
 8002b74:	0a1b      	lsrs	r3, r3, #8
 8002b76:	80fb      	strh	r3, [r7, #6]
        while (dur > 0x3F)
 8002b78:	e005      	b.n	8002b86 <calc_heatr_dur_shared+0x46>
        {
            dur = dur >> 2;
 8002b7a:	88fb      	ldrh	r3, [r7, #6]
 8002b7c:	089b      	lsrs	r3, r3, #2
 8002b7e:	80fb      	strh	r3, [r7, #6]
            factor += 1;
 8002b80:	7bfb      	ldrb	r3, [r7, #15]
 8002b82:	3301      	adds	r3, #1
 8002b84:	73fb      	strb	r3, [r7, #15]
        while (dur > 0x3F)
 8002b86:	88fb      	ldrh	r3, [r7, #6]
 8002b88:	2b3f      	cmp	r3, #63	; 0x3f
 8002b8a:	d8f6      	bhi.n	8002b7a <calc_heatr_dur_shared+0x3a>
        }

        heatdurval = (uint8_t)(dur + (factor * 64));
 8002b8c:	88fb      	ldrh	r3, [r7, #6]
 8002b8e:	b2da      	uxtb	r2, r3
 8002b90:	7bfb      	ldrb	r3, [r7, #15]
 8002b92:	019b      	lsls	r3, r3, #6
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	4413      	add	r3, r2
 8002b98:	73bb      	strb	r3, [r7, #14]
    }

    return heatdurval;
 8002b9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3714      	adds	r7, #20
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr
 8002ba8:	12c8b89f 	.word	0x12c8b89f

08002bac <sort_sensor_data>:

/* This internal API is used sort the sensor data */
static void sort_sensor_data(uint8_t low_index, uint8_t high_index, struct bme68x_data *field[])
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	603a      	str	r2, [r7, #0]
 8002bb6:	71fb      	strb	r3, [r7, #7]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	71bb      	strb	r3, [r7, #6]
    int16_t meas_index1;
    int16_t meas_index2;

    meas_index1 = (int16_t)field[low_index]->meas_index;
 8002bbc:	79fb      	ldrb	r3, [r7, #7]
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	789b      	ldrb	r3, [r3, #2]
 8002bc8:	81fb      	strh	r3, [r7, #14]
    meas_index2 = (int16_t)field[high_index]->meas_index;
 8002bca:	79bb      	ldrb	r3, [r7, #6]
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	789b      	ldrb	r3, [r3, #2]
 8002bd6:	81bb      	strh	r3, [r7, #12]
    if ((field[low_index]->status & BME68X_NEW_DATA_MSK) && (field[high_index]->status & BME68X_NEW_DATA_MSK))
 8002bd8:	79fb      	ldrb	r3, [r7, #7]
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	4413      	add	r3, r2
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	b25b      	sxtb	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	da21      	bge.n	8002c2e <sort_sensor_data+0x82>
 8002bea:	79bb      	ldrb	r3, [r7, #6]
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	b25b      	sxtb	r3, r3
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	da18      	bge.n	8002c2e <sort_sensor_data+0x82>
    {
        int16_t diff = meas_index2 - meas_index1;
 8002bfc:	89ba      	ldrh	r2, [r7, #12]
 8002bfe:	89fb      	ldrh	r3, [r7, #14]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	817b      	strh	r3, [r7, #10]
        if (((diff > -3) && (diff < 0)) || (diff > 2))
 8002c06:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002c0a:	f113 0f02 	cmn.w	r3, #2
 8002c0e:	db03      	blt.n	8002c18 <sort_sensor_data+0x6c>
 8002c10:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	db03      	blt.n	8002c20 <sort_sensor_data+0x74>
 8002c18:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	dd16      	ble.n	8002c4e <sort_sensor_data+0xa2>
        {
            swap_fields(low_index, high_index, field);
 8002c20:	79b9      	ldrb	r1, [r7, #6]
 8002c22:	79fb      	ldrb	r3, [r7, #7]
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f000 f816 	bl	8002c58 <swap_fields>
    {
 8002c2c:	e00f      	b.n	8002c4e <sort_sensor_data+0xa2>
        }
    }
    else if (field[high_index]->status & BME68X_NEW_DATA_MSK)
 8002c2e:	79bb      	ldrb	r3, [r7, #6]
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	683a      	ldr	r2, [r7, #0]
 8002c34:	4413      	add	r3, r2
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	b25b      	sxtb	r3, r3
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	da07      	bge.n	8002c50 <sort_sensor_data+0xa4>
    {
        swap_fields(low_index, high_index, field);
 8002c40:	79b9      	ldrb	r1, [r7, #6]
 8002c42:	79fb      	ldrb	r3, [r7, #7]
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 f806 	bl	8002c58 <swap_fields>
     *         - diff > 2, case 4.
     *
     *     Here the limits of -3 and 2 derive from the fact that there are 3 fields.
     *     These values decrease or increase respectively if the number of fields increases.
     */
}
 8002c4c:	e000      	b.n	8002c50 <sort_sensor_data+0xa4>
    {
 8002c4e:	bf00      	nop
}
 8002c50:	bf00      	nop
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <swap_fields>:

/* This internal API is used sort the sensor data */
static void swap_fields(uint8_t index1, uint8_t index2, struct bme68x_data *field[])
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	4603      	mov	r3, r0
 8002c60:	603a      	str	r2, [r7, #0]
 8002c62:	71fb      	strb	r3, [r7, #7]
 8002c64:	460b      	mov	r3, r1
 8002c66:	71bb      	strb	r3, [r7, #6]
    struct bme68x_data *temp;

    temp = field[index1];
 8002c68:	79fb      	ldrb	r3, [r7, #7]
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	4413      	add	r3, r2
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	60fb      	str	r3, [r7, #12]
    field[index1] = field[index2];
 8002c74:	79bb      	ldrb	r3, [r7, #6]
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	441a      	add	r2, r3
 8002c7c:	79fb      	ldrb	r3, [r7, #7]
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	6839      	ldr	r1, [r7, #0]
 8002c82:	440b      	add	r3, r1
 8002c84:	6812      	ldr	r2, [r2, #0]
 8002c86:	601a      	str	r2, [r3, #0]
    field[index2] = temp;
 8002c88:	79bb      	ldrb	r3, [r7, #6]
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	4413      	add	r3, r2
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	601a      	str	r2, [r3, #0]
}
 8002c94:	bf00      	nop
 8002c96:	3714      	adds	r7, #20
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <get_calib_data>:
    return rslt;
}

/* This internal API is used to read the calibration coefficients */
static int8_t get_calib_data(struct bme68x_dev *dev)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08e      	sub	sp, #56	; 0x38
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t coeff_array[BME68X_LEN_COEFF_ALL];

    rslt = bme68x_get_regs(BME68X_REG_COEFF1, coeff_array, BME68X_LEN_COEFF1, dev);
 8002ca8:	f107 010c 	add.w	r1, r7, #12
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2217      	movs	r2, #23
 8002cb0:	208a      	movs	r0, #138	; 0x8a
 8002cb2:	f7fe f9b9 	bl	8001028 <bme68x_get_regs>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (rslt == BME68X_OK)
 8002cbc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10b      	bne.n	8002cdc <get_calib_data+0x3c>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF2, &coeff_array[BME68X_LEN_COEFF1], BME68X_LEN_COEFF2, dev);
 8002cc4:	f107 030c 	add.w	r3, r7, #12
 8002cc8:	f103 0117 	add.w	r1, r3, #23
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	220e      	movs	r2, #14
 8002cd0:	20e1      	movs	r0, #225	; 0xe1
 8002cd2:	f7fe f9a9 	bl	8001028 <bme68x_get_regs>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }

    if (rslt == BME68X_OK)
 8002cdc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d10b      	bne.n	8002cfc <get_calib_data+0x5c>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF3,
 8002ce4:	f107 030c 	add.w	r3, r7, #12
 8002ce8:	f103 0125 	add.w	r1, r3, #37	; 0x25
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2205      	movs	r2, #5
 8002cf0:	2000      	movs	r0, #0
 8002cf2:	f7fe f999 	bl	8001028 <bme68x_get_regs>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                               &coeff_array[BME68X_LEN_COEFF1 + BME68X_LEN_COEFF2],
                               BME68X_LEN_COEFF3,
                               dev);
    }

    if (rslt == BME68X_OK)
 8002cfc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f040 80cb 	bne.w	8002e9c <get_calib_data+0x1fc>
    {
        /* Temperature related coefficients */
        dev->calib.par_t1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T1_MSB], coeff_array[BME68X_IDX_T1_LSB]));
 8002d06:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002d0a:	021b      	lsls	r3, r3, #8
 8002d0c:	b21a      	sxth	r2, r3
 8002d0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002d12:	b21b      	sxth	r3, r3
 8002d14:	4313      	orrs	r3, r2
 8002d16:	b21b      	sxth	r3, r3
 8002d18:	b29a      	uxth	r2, r3
        dev->calib.par_t1 =
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	83da      	strh	r2, [r3, #30]
        dev->calib.par_t2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T2_MSB], coeff_array[BME68X_IDX_T2_LSB]));
 8002d1e:	7b7b      	ldrb	r3, [r7, #13]
 8002d20:	021b      	lsls	r3, r3, #8
 8002d22:	b21a      	sxth	r2, r3
 8002d24:	7b3b      	ldrb	r3, [r7, #12]
 8002d26:	b21b      	sxth	r3, r3
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	b21a      	sxth	r2, r3
        dev->calib.par_t2 =
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	841a      	strh	r2, [r3, #32]
        dev->calib.par_t3 = (int8_t)(coeff_array[BME68X_IDX_T3]);
 8002d30:	7bbb      	ldrb	r3, [r7, #14]
 8002d32:	b25a      	sxtb	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

        /* Pressure related coefficients */
        dev->calib.par_p1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P1_MSB], coeff_array[BME68X_IDX_P1_LSB]));
 8002d3a:	7c7b      	ldrb	r3, [r7, #17]
 8002d3c:	021b      	lsls	r3, r3, #8
 8002d3e:	b21a      	sxth	r2, r3
 8002d40:	7c3b      	ldrb	r3, [r7, #16]
 8002d42:	b21b      	sxth	r3, r3
 8002d44:	4313      	orrs	r3, r2
 8002d46:	b21b      	sxth	r3, r3
 8002d48:	b29a      	uxth	r2, r3
        dev->calib.par_p1 =
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	849a      	strh	r2, [r3, #36]	; 0x24
        dev->calib.par_p2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P2_MSB], coeff_array[BME68X_IDX_P2_LSB]));
 8002d4e:	7cfb      	ldrb	r3, [r7, #19]
 8002d50:	021b      	lsls	r3, r3, #8
 8002d52:	b21a      	sxth	r2, r3
 8002d54:	7cbb      	ldrb	r3, [r7, #18]
 8002d56:	b21b      	sxth	r3, r3
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	b21a      	sxth	r2, r3
        dev->calib.par_p2 =
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	84da      	strh	r2, [r3, #38]	; 0x26
        dev->calib.par_p3 = (int8_t)coeff_array[BME68X_IDX_P3];
 8002d60:	7d3b      	ldrb	r3, [r7, #20]
 8002d62:	b25a      	sxtb	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        dev->calib.par_p4 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P4_MSB], coeff_array[BME68X_IDX_P4_LSB]));
 8002d6a:	7dfb      	ldrb	r3, [r7, #23]
 8002d6c:	021b      	lsls	r3, r3, #8
 8002d6e:	b21a      	sxth	r2, r3
 8002d70:	7dbb      	ldrb	r3, [r7, #22]
 8002d72:	b21b      	sxth	r3, r3
 8002d74:	4313      	orrs	r3, r2
 8002d76:	b21a      	sxth	r2, r3
        dev->calib.par_p4 =
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	855a      	strh	r2, [r3, #42]	; 0x2a
        dev->calib.par_p5 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P5_MSB], coeff_array[BME68X_IDX_P5_LSB]));
 8002d7c:	7e7b      	ldrb	r3, [r7, #25]
 8002d7e:	021b      	lsls	r3, r3, #8
 8002d80:	b21a      	sxth	r2, r3
 8002d82:	7e3b      	ldrb	r3, [r7, #24]
 8002d84:	b21b      	sxth	r3, r3
 8002d86:	4313      	orrs	r3, r2
 8002d88:	b21a      	sxth	r2, r3
        dev->calib.par_p5 =
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	859a      	strh	r2, [r3, #44]	; 0x2c
        dev->calib.par_p6 = (int8_t)(coeff_array[BME68X_IDX_P6]);
 8002d8e:	7efb      	ldrb	r3, [r7, #27]
 8002d90:	b25a      	sxtb	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        dev->calib.par_p7 = (int8_t)(coeff_array[BME68X_IDX_P7]);
 8002d98:	7ebb      	ldrb	r3, [r7, #26]
 8002d9a:	b25a      	sxtb	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
        dev->calib.par_p8 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P8_MSB], coeff_array[BME68X_IDX_P8_LSB]));
 8002da2:	7ffb      	ldrb	r3, [r7, #31]
 8002da4:	021b      	lsls	r3, r3, #8
 8002da6:	b21a      	sxth	r2, r3
 8002da8:	7fbb      	ldrb	r3, [r7, #30]
 8002daa:	b21b      	sxth	r3, r3
 8002dac:	4313      	orrs	r3, r2
 8002dae:	b21a      	sxth	r2, r3
        dev->calib.par_p8 =
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	861a      	strh	r2, [r3, #48]	; 0x30
        dev->calib.par_p9 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P9_MSB], coeff_array[BME68X_IDX_P9_LSB]));
 8002db4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002db8:	021b      	lsls	r3, r3, #8
 8002dba:	b21a      	sxth	r2, r3
 8002dbc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002dc0:	b21b      	sxth	r3, r3
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	b21a      	sxth	r2, r3
        dev->calib.par_p9 =
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	865a      	strh	r2, [r3, #50]	; 0x32
        dev->calib.par_p10 = (uint8_t)(coeff_array[BME68X_IDX_P10]);
 8002dca:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Humidity related coefficients */
        dev->calib.par_h1 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 8002dd4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002dd8:	011b      	lsls	r3, r3, #4
 8002dda:	b21a      	sxth	r2, r3
                       (coeff_array[BME68X_IDX_H1_LSB] & BME68X_BIT_H1_DATA_MSK));
 8002ddc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002de0:	b21b      	sxth	r3, r3
 8002de2:	f003 030f 	and.w	r3, r3, #15
 8002de6:	b21b      	sxth	r3, r3
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 8002de8:	4313      	orrs	r3, r2
 8002dea:	b21b      	sxth	r3, r3
 8002dec:	b29a      	uxth	r2, r3
        dev->calib.par_h1 =
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	821a      	strh	r2, [r3, #16]
        dev->calib.par_h2 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H2_MSB] << 4) | ((coeff_array[BME68X_IDX_H2_LSB]) >> 4));
 8002df2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002df6:	011b      	lsls	r3, r3, #4
 8002df8:	b21a      	sxth	r2, r3
 8002dfa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002dfe:	091b      	lsrs	r3, r3, #4
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	b21b      	sxth	r3, r3
 8002e04:	4313      	orrs	r3, r2
 8002e06:	b21b      	sxth	r3, r3
 8002e08:	b29a      	uxth	r2, r3
        dev->calib.par_h2 =
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	825a      	strh	r2, [r3, #18]
        dev->calib.par_h3 = (int8_t)coeff_array[BME68X_IDX_H3];
 8002e0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002e12:	b25a      	sxtb	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	751a      	strb	r2, [r3, #20]
        dev->calib.par_h4 = (int8_t)coeff_array[BME68X_IDX_H4];
 8002e18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e1c:	b25a      	sxtb	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	755a      	strb	r2, [r3, #21]
        dev->calib.par_h5 = (int8_t)coeff_array[BME68X_IDX_H5];
 8002e22:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002e26:	b25a      	sxtb	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	759a      	strb	r2, [r3, #22]
        dev->calib.par_h6 = (uint8_t)coeff_array[BME68X_IDX_H6];
 8002e2c:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	75da      	strb	r2, [r3, #23]
        dev->calib.par_h7 = (int8_t)coeff_array[BME68X_IDX_H7];
 8002e34:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002e38:	b25a      	sxtb	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	761a      	strb	r2, [r3, #24]

        /* Gas heater related coefficients */
        dev->calib.par_gh1 = (int8_t)coeff_array[BME68X_IDX_GH1];
 8002e3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002e42:	b25a      	sxtb	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	765a      	strb	r2, [r3, #25]
        dev->calib.par_gh2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_GH2_MSB], coeff_array[BME68X_IDX_GH2_LSB]));
 8002e48:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002e4c:	021b      	lsls	r3, r3, #8
 8002e4e:	b21a      	sxth	r2, r3
 8002e50:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002e54:	b21b      	sxth	r3, r3
 8002e56:	4313      	orrs	r3, r2
 8002e58:	b21a      	sxth	r2, r3
        dev->calib.par_gh2 =
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	835a      	strh	r2, [r3, #26]
        dev->calib.par_gh3 = (int8_t)coeff_array[BME68X_IDX_GH3];
 8002e5e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002e62:	b25a      	sxtb	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	771a      	strb	r2, [r3, #28]

        /* Other coefficients */
        dev->calib.res_heat_range = ((coeff_array[BME68X_IDX_RES_HEAT_RANGE] & BME68X_RHRANGE_MSK) / 16);
 8002e68:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002e6c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	da00      	bge.n	8002e76 <get_calib_data+0x1d6>
 8002e74:	330f      	adds	r3, #15
 8002e76:	111b      	asrs	r3, r3, #4
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        dev->calib.res_heat_val = (int8_t)coeff_array[BME68X_IDX_RES_HEAT_VAL];
 8002e80:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002e84:	b25a      	sxtb	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        dev->calib.range_sw_err = ((int8_t)(coeff_array[BME68X_IDX_RANGE_SW_ERR] & BME68X_RSERROR_MSK)) / 16;
 8002e8c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002e90:	b25b      	sxtb	r3, r3
 8002e92:	111b      	asrs	r3, r3, #4
 8002e94:	b25a      	sxtb	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }

    return rslt;
 8002e9c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3738      	adds	r7, #56	; 0x38
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <read_variant_id>:

/* This internal API is used to read variant ID information from the register */
static int8_t read_variant_id(struct bme68x_dev *dev)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data = 0;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	73bb      	strb	r3, [r7, #14]

    /* Read variant ID information register */
    rslt = bme68x_get_regs(BME68X_REG_VARIANT_ID, &reg_data, 1, dev);
 8002eb4:	f107 010e 	add.w	r1, r7, #14
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	20f0      	movs	r0, #240	; 0xf0
 8002ebe:	f7fe f8b3 	bl	8001028 <bme68x_get_regs>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME68X_OK)
 8002ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d103      	bne.n	8002ed6 <read_variant_id+0x2e>
    {
        dev->variant_id = reg_data;
 8002ece:	7bbb      	ldrb	r3, [r7, #14]
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	609a      	str	r2, [r3, #8]
    }

    return rslt;
 8002ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
	...

08002ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ee4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ee8:	b0be      	sub	sp, #248	; 0xf8
 8002eea:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002eec:	f000 fe4c 	bl	8003b88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ef0:	f000 f908 	bl	8003104 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ef4:	f000 f9c8 	bl	8003288 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002ef8:	f000 f96e 	bl	80031d8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8002efc:	f000 f99a 	bl	8003234 <MX_USART2_UART_Init>
  char msg[100];
  uint8_t dev_addr;
  int len;
  int8_t result;

  dev_addr = BME68X_I2C_ADDR_HIGH;
 8002f00:	2377      	movs	r3, #119	; 0x77
 8002f02:	71fb      	strb	r3, [r7, #7]
  bme.intf = BME68X_I2C_INTF;
 8002f04:	2301      	movs	r3, #1
 8002f06:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
  bme.read = user_i2c_read;
 8002f0a:	4b6c      	ldr	r3, [pc, #432]	; (80030bc <main+0x1d8>)
 8002f0c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  bme.write = user_i2c_write;
 8002f10:	4b6b      	ldr	r3, [pc, #428]	; (80030c0 <main+0x1dc>)
 8002f12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  bme.delay_us = bme68x_delay_us;
 8002f16:	4b6b      	ldr	r3, [pc, #428]	; (80030c4 <main+0x1e0>)
 8002f18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  bme.intf_ptr = &dev_addr;
 8002f1c:	1dfb      	adds	r3, r7, #7
 8002f1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  bme.amb_temp = 25;
 8002f22:	2319      	movs	r3, #25
 8002f24:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
  printmsg(begin_msg);
 8002f28:	4b67      	ldr	r3, [pc, #412]	; (80030c8 <main+0x1e4>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f000 faf7 	bl	8003520 <printmsg>
  // initialize
  result = bme68x_init(&bme);
 8002f32:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7fd ffb8 	bl	8000eac <bme68x_init>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
	print_error(result);
 8002f42:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 fb94 	bl	8003674 <print_error>
	if(result != BME68X_OK)
 8002f4c:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d005      	beq.n	8002f60 <main+0x7c>
	{
		// print error using UART
		printmsg(init_fail);
 8002f54:	4b5d      	ldr	r3, [pc, #372]	; (80030cc <main+0x1e8>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f000 fae1 	bl	8003520 <printmsg>
 8002f5e:	e004      	b.n	8002f6a <main+0x86>
	}
	else
	{
		printmsg(init_suc);
 8002f60:	4b5b      	ldr	r3, [pc, #364]	; (80030d0 <main+0x1ec>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f000 fadb 	bl	8003520 <printmsg>
	}
  // configure oversampling
  result = bme680_config(&bme);
 8002f6a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f000 fb48 	bl	8003604 <bme680_config>
 8002f74:	4603      	mov	r3, r0
 8002f76:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  if(result != BME68X_OK)
 8002f7a:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d005      	beq.n	8002f8e <main+0xaa>
  {
  	// print error using UART
  	printmsg(conf_failt);
 8002f82:	4b54      	ldr	r3, [pc, #336]	; (80030d4 <main+0x1f0>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 faca 	bl	8003520 <printmsg>
 8002f8c:	e004      	b.n	8002f98 <main+0xb4>
  }
  else
  {
  	printmsg(conf_suc);
 8002f8e:	4b52      	ldr	r3, [pc, #328]	; (80030d8 <main+0x1f4>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f000 fac4 	bl	8003520 <printmsg>
  }
  // configure heater
  result = bme680_htr_config(&bme);
 8002f98:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f000 fb4d 	bl	800363c <bme680_htr_config>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  if(result != BME68X_OK)
 8002fa8:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d005      	beq.n	8002fbc <main+0xd8>
  {
  	// print error using UART
  	printmsg(htr_conf_fail);
 8002fb0:	4b4a      	ldr	r3, [pc, #296]	; (80030dc <main+0x1f8>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f000 fab3 	bl	8003520 <printmsg>
 8002fba:	e004      	b.n	8002fc6 <main+0xe2>
  }
  else
  {
  	printmsg(htr_conf_suc);
 8002fbc:	4b48      	ldr	r3, [pc, #288]	; (80030e0 <main+0x1fc>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f000 faad 	bl	8003520 <printmsg>
  }
  // set operation mode
  result = bme68x_set_op_mode(BME68X_FORCED_MODE, &bme);
 8002fc6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002fca:	4619      	mov	r1, r3
 8002fcc:	2001      	movs	r0, #1
 8002fce:	f7fe f9b7 	bl	8001340 <bme68x_set_op_mode>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  if(result != BME68X_OK)
 8002fd8:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d005      	beq.n	8002fec <main+0x108>
  {
  	printmsg(op_mode_fail);
 8002fe0:	4b40      	ldr	r3, [pc, #256]	; (80030e4 <main+0x200>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f000 fa9b 	bl	8003520 <printmsg>
 8002fea:	e004      	b.n	8002ff6 <main+0x112>
  }
  else
  {
  	printmsg(op_mode_suc);
 8002fec:	4b3e      	ldr	r3, [pc, #248]	; (80030e8 <main+0x204>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f000 fa95 	bl	8003520 <printmsg>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	// get data
  	result = bme68x_get_data(BME68X_FORCED_MODE, &data, &n_fields, &bme);
 8002ff6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002ffa:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8002ffe:	4a3b      	ldr	r2, [pc, #236]	; (80030ec <main+0x208>)
 8003000:	2001      	movs	r0, #1
 8003002:	f7fe fa1e 	bl	8001442 <bme68x_get_data>
 8003006:	4603      	mov	r3, r0
 8003008:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  	print_error(result);
 800300c:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8003010:	4618      	mov	r0, r3
 8003012:	f000 fb2f 	bl	8003674 <print_error>
  	if(result == 0)
 8003016:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 800301a:	2b00      	cmp	r3, #0
 800301c:	d12f      	bne.n	800307e <main+0x19a>
  	{
  		// print out data
  		printmsg(rd_dt_suc);
 800301e:	4b34      	ldr	r3, [pc, #208]	; (80030f0 <main+0x20c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4618      	mov	r0, r3
 8003024:	f000 fa7c 	bl	8003520 <printmsg>
  		int len = snprintf(msg, 100, "Temperature: %.2f, Pressure: %.2f, Humidity: %.2f", data.temperature, data.pressure, data.humidity);
 8003028:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800302a:	4618      	mov	r0, r3
 800302c:	f7fd fa8c 	bl	8000548 <__aeabi_f2d>
 8003030:	4604      	mov	r4, r0
 8003032:	460d      	mov	r5, r1
 8003034:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003036:	4618      	mov	r0, r3
 8003038:	f7fd fa86 	bl	8000548 <__aeabi_f2d>
 800303c:	4680      	mov	r8, r0
 800303e:	4689      	mov	r9, r1
 8003040:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003042:	4618      	mov	r0, r3
 8003044:	f7fd fa80 	bl	8000548 <__aeabi_f2d>
 8003048:	4602      	mov	r2, r0
 800304a:	460b      	mov	r3, r1
 800304c:	f107 0008 	add.w	r0, r7, #8
 8003050:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003054:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003058:	e9cd 4500 	strd	r4, r5, [sp]
 800305c:	4a25      	ldr	r2, [pc, #148]	; (80030f4 <main+0x210>)
 800305e:	2164      	movs	r1, #100	; 0x64
 8003060:	f004 fa8a 	bl	8007578 <sniprintf>
 8003064:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  		HAL_UART_Transmit(&huart2, (uint8_t *)msg, len, HAL_MAX_DELAY);
 8003068:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800306c:	b29a      	uxth	r2, r3
 800306e:	f107 0108 	add.w	r1, r7, #8
 8003072:	f04f 33ff 	mov.w	r3, #4294967295
 8003076:	4820      	ldr	r0, [pc, #128]	; (80030f8 <main+0x214>)
 8003078:	f002 fe1b 	bl	8005cb2 <HAL_UART_Transmit>
 800307c:	e018      	b.n	80030b0 <main+0x1cc>
  	}
  	else
  	{
  		// print out error
  		printmsg(rd_dt_fail);
 800307e:	4b1f      	ldr	r3, [pc, #124]	; (80030fc <main+0x218>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4618      	mov	r0, r3
 8003084:	f000 fa4c 	bl	8003520 <printmsg>
  		len = snprintf(msg, 50, "result of data getting: %d\n", result);
 8003088:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 800308c:	f107 0008 	add.w	r0, r7, #8
 8003090:	4a1b      	ldr	r2, [pc, #108]	; (8003100 <main+0x21c>)
 8003092:	2132      	movs	r1, #50	; 0x32
 8003094:	f004 fa70 	bl	8007578 <sniprintf>
 8003098:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
  		HAL_UART_Transmit(&huart2, (uint8_t *)msg, len, HAL_MAX_DELAY);
 800309c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	f107 0108 	add.w	r1, r7, #8
 80030a6:	f04f 33ff 	mov.w	r3, #4294967295
 80030aa:	4813      	ldr	r0, [pc, #76]	; (80030f8 <main+0x214>)
 80030ac:	f002 fe01 	bl	8005cb2 <HAL_UART_Transmit>
  	}
  	HAL_Delay(1000);
 80030b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030b4:	f000 fdda 	bl	8003c6c <HAL_Delay>
  	result = bme68x_get_data(BME68X_FORCED_MODE, &data, &n_fields, &bme);
 80030b8:	e79d      	b.n	8002ff6 <main+0x112>
 80030ba:	bf00      	nop
 80030bc:	0800354d 	.word	0x0800354d
 80030c0:	08003595 	.word	0x08003595
 80030c4:	080035dd 	.word	0x080035dd
 80030c8:	20000000 	.word	0x20000000
 80030cc:	20000004 	.word	0x20000004
 80030d0:	20000008 	.word	0x20000008
 80030d4:	2000000c 	.word	0x2000000c
 80030d8:	20000010 	.word	0x20000010
 80030dc:	20000014 	.word	0x20000014
 80030e0:	20000018 	.word	0x20000018
 80030e4:	2000001c 	.word	0x2000001c
 80030e8:	20000020 	.word	0x20000020
 80030ec:	200002bc 	.word	0x200002bc
 80030f0:	20000028 	.word	0x20000028
 80030f4:	08009c64 	.word	0x08009c64
 80030f8:	20000278 	.word	0x20000278
 80030fc:	20000024 	.word	0x20000024
 8003100:	08009c98 	.word	0x08009c98

08003104 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b094      	sub	sp, #80	; 0x50
 8003108:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800310a:	f107 0320 	add.w	r3, r7, #32
 800310e:	2230      	movs	r2, #48	; 0x30
 8003110:	2100      	movs	r1, #0
 8003112:	4618      	mov	r0, r3
 8003114:	f003 fdbe 	bl	8006c94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003118:	f107 030c 	add.w	r3, r7, #12
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]
 8003120:	605a      	str	r2, [r3, #4]
 8003122:	609a      	str	r2, [r3, #8]
 8003124:	60da      	str	r2, [r3, #12]
 8003126:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003128:	2300      	movs	r3, #0
 800312a:	60bb      	str	r3, [r7, #8]
 800312c:	4b28      	ldr	r3, [pc, #160]	; (80031d0 <SystemClock_Config+0xcc>)
 800312e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003130:	4a27      	ldr	r2, [pc, #156]	; (80031d0 <SystemClock_Config+0xcc>)
 8003132:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003136:	6413      	str	r3, [r2, #64]	; 0x40
 8003138:	4b25      	ldr	r3, [pc, #148]	; (80031d0 <SystemClock_Config+0xcc>)
 800313a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003140:	60bb      	str	r3, [r7, #8]
 8003142:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003144:	2300      	movs	r3, #0
 8003146:	607b      	str	r3, [r7, #4]
 8003148:	4b22      	ldr	r3, [pc, #136]	; (80031d4 <SystemClock_Config+0xd0>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a21      	ldr	r2, [pc, #132]	; (80031d4 <SystemClock_Config+0xd0>)
 800314e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003152:	6013      	str	r3, [r2, #0]
 8003154:	4b1f      	ldr	r3, [pc, #124]	; (80031d4 <SystemClock_Config+0xd0>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800315c:	607b      	str	r3, [r7, #4]
 800315e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003160:	2302      	movs	r3, #2
 8003162:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003164:	2301      	movs	r3, #1
 8003166:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003168:	2310      	movs	r3, #16
 800316a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800316c:	2302      	movs	r3, #2
 800316e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003170:	2300      	movs	r3, #0
 8003172:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003174:	2308      	movs	r3, #8
 8003176:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8003178:	2332      	movs	r3, #50	; 0x32
 800317a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800317c:	2304      	movs	r3, #4
 800317e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003180:	2307      	movs	r3, #7
 8003182:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003184:	f107 0320 	add.w	r3, r7, #32
 8003188:	4618      	mov	r0, r3
 800318a:	f002 f8ad 	bl	80052e8 <HAL_RCC_OscConfig>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003194:	f000 fafc 	bl	8003790 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003198:	230f      	movs	r3, #15
 800319a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800319c:	2302      	movs	r3, #2
 800319e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031a0:	2300      	movs	r3, #0
 80031a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80031a4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80031a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80031aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80031b0:	f107 030c 	add.w	r3, r7, #12
 80031b4:	2100      	movs	r1, #0
 80031b6:	4618      	mov	r0, r3
 80031b8:	f002 fb0e 	bl	80057d8 <HAL_RCC_ClockConfig>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80031c2:	f000 fae5 	bl	8003790 <Error_Handler>
  }
}
 80031c6:	bf00      	nop
 80031c8:	3750      	adds	r7, #80	; 0x50
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	40023800 	.word	0x40023800
 80031d4:	40007000 	.word	0x40007000

080031d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80031dc:	4b12      	ldr	r3, [pc, #72]	; (8003228 <MX_I2C1_Init+0x50>)
 80031de:	4a13      	ldr	r2, [pc, #76]	; (800322c <MX_I2C1_Init+0x54>)
 80031e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80031e2:	4b11      	ldr	r3, [pc, #68]	; (8003228 <MX_I2C1_Init+0x50>)
 80031e4:	4a12      	ldr	r2, [pc, #72]	; (8003230 <MX_I2C1_Init+0x58>)
 80031e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80031e8:	4b0f      	ldr	r3, [pc, #60]	; (8003228 <MX_I2C1_Init+0x50>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80031ee:	4b0e      	ldr	r3, [pc, #56]	; (8003228 <MX_I2C1_Init+0x50>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80031f4:	4b0c      	ldr	r3, [pc, #48]	; (8003228 <MX_I2C1_Init+0x50>)
 80031f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80031fc:	4b0a      	ldr	r3, [pc, #40]	; (8003228 <MX_I2C1_Init+0x50>)
 80031fe:	2200      	movs	r2, #0
 8003200:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003202:	4b09      	ldr	r3, [pc, #36]	; (8003228 <MX_I2C1_Init+0x50>)
 8003204:	2200      	movs	r2, #0
 8003206:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003208:	4b07      	ldr	r3, [pc, #28]	; (8003228 <MX_I2C1_Init+0x50>)
 800320a:	2200      	movs	r2, #0
 800320c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800320e:	4b06      	ldr	r3, [pc, #24]	; (8003228 <MX_I2C1_Init+0x50>)
 8003210:	2200      	movs	r2, #0
 8003212:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003214:	4804      	ldr	r0, [pc, #16]	; (8003228 <MX_I2C1_Init+0x50>)
 8003216:	f001 f8a7 	bl	8004368 <HAL_I2C_Init>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d001      	beq.n	8003224 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003220:	f000 fab6 	bl	8003790 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003224:	bf00      	nop
 8003226:	bd80      	pop	{r7, pc}
 8003228:	20000224 	.word	0x20000224
 800322c:	40005400 	.word	0x40005400
 8003230:	000186a0 	.word	0x000186a0

08003234 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003238:	4b11      	ldr	r3, [pc, #68]	; (8003280 <MX_USART2_UART_Init+0x4c>)
 800323a:	4a12      	ldr	r2, [pc, #72]	; (8003284 <MX_USART2_UART_Init+0x50>)
 800323c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800323e:	4b10      	ldr	r3, [pc, #64]	; (8003280 <MX_USART2_UART_Init+0x4c>)
 8003240:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003244:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003246:	4b0e      	ldr	r3, [pc, #56]	; (8003280 <MX_USART2_UART_Init+0x4c>)
 8003248:	2200      	movs	r2, #0
 800324a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800324c:	4b0c      	ldr	r3, [pc, #48]	; (8003280 <MX_USART2_UART_Init+0x4c>)
 800324e:	2200      	movs	r2, #0
 8003250:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003252:	4b0b      	ldr	r3, [pc, #44]	; (8003280 <MX_USART2_UART_Init+0x4c>)
 8003254:	2200      	movs	r2, #0
 8003256:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003258:	4b09      	ldr	r3, [pc, #36]	; (8003280 <MX_USART2_UART_Init+0x4c>)
 800325a:	220c      	movs	r2, #12
 800325c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800325e:	4b08      	ldr	r3, [pc, #32]	; (8003280 <MX_USART2_UART_Init+0x4c>)
 8003260:	2200      	movs	r2, #0
 8003262:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003264:	4b06      	ldr	r3, [pc, #24]	; (8003280 <MX_USART2_UART_Init+0x4c>)
 8003266:	2200      	movs	r2, #0
 8003268:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800326a:	4805      	ldr	r0, [pc, #20]	; (8003280 <MX_USART2_UART_Init+0x4c>)
 800326c:	f002 fcd4 	bl	8005c18 <HAL_UART_Init>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003276:	f000 fa8b 	bl	8003790 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800327a:	bf00      	nop
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	20000278 	.word	0x20000278
 8003284:	40004400 	.word	0x40004400

08003288 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b08c      	sub	sp, #48	; 0x30
 800328c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800328e:	f107 031c 	add.w	r3, r7, #28
 8003292:	2200      	movs	r2, #0
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	605a      	str	r2, [r3, #4]
 8003298:	609a      	str	r2, [r3, #8]
 800329a:	60da      	str	r2, [r3, #12]
 800329c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800329e:	2300      	movs	r3, #0
 80032a0:	61bb      	str	r3, [r7, #24]
 80032a2:	4b99      	ldr	r3, [pc, #612]	; (8003508 <MX_GPIO_Init+0x280>)
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a6:	4a98      	ldr	r2, [pc, #608]	; (8003508 <MX_GPIO_Init+0x280>)
 80032a8:	f043 0310 	orr.w	r3, r3, #16
 80032ac:	6313      	str	r3, [r2, #48]	; 0x30
 80032ae:	4b96      	ldr	r3, [pc, #600]	; (8003508 <MX_GPIO_Init+0x280>)
 80032b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b2:	f003 0310 	and.w	r3, r3, #16
 80032b6:	61bb      	str	r3, [r7, #24]
 80032b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032ba:	2300      	movs	r3, #0
 80032bc:	617b      	str	r3, [r7, #20]
 80032be:	4b92      	ldr	r3, [pc, #584]	; (8003508 <MX_GPIO_Init+0x280>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	4a91      	ldr	r2, [pc, #580]	; (8003508 <MX_GPIO_Init+0x280>)
 80032c4:	f043 0304 	orr.w	r3, r3, #4
 80032c8:	6313      	str	r3, [r2, #48]	; 0x30
 80032ca:	4b8f      	ldr	r3, [pc, #572]	; (8003508 <MX_GPIO_Init+0x280>)
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	f003 0304 	and.w	r3, r3, #4
 80032d2:	617b      	str	r3, [r7, #20]
 80032d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80032d6:	2300      	movs	r3, #0
 80032d8:	613b      	str	r3, [r7, #16]
 80032da:	4b8b      	ldr	r3, [pc, #556]	; (8003508 <MX_GPIO_Init+0x280>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032de:	4a8a      	ldr	r2, [pc, #552]	; (8003508 <MX_GPIO_Init+0x280>)
 80032e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032e4:	6313      	str	r3, [r2, #48]	; 0x30
 80032e6:	4b88      	ldr	r3, [pc, #544]	; (8003508 <MX_GPIO_Init+0x280>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ee:	613b      	str	r3, [r7, #16]
 80032f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032f2:	2300      	movs	r3, #0
 80032f4:	60fb      	str	r3, [r7, #12]
 80032f6:	4b84      	ldr	r3, [pc, #528]	; (8003508 <MX_GPIO_Init+0x280>)
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	4a83      	ldr	r2, [pc, #524]	; (8003508 <MX_GPIO_Init+0x280>)
 80032fc:	f043 0301 	orr.w	r3, r3, #1
 8003300:	6313      	str	r3, [r2, #48]	; 0x30
 8003302:	4b81      	ldr	r3, [pc, #516]	; (8003508 <MX_GPIO_Init+0x280>)
 8003304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	60fb      	str	r3, [r7, #12]
 800330c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800330e:	2300      	movs	r3, #0
 8003310:	60bb      	str	r3, [r7, #8]
 8003312:	4b7d      	ldr	r3, [pc, #500]	; (8003508 <MX_GPIO_Init+0x280>)
 8003314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003316:	4a7c      	ldr	r2, [pc, #496]	; (8003508 <MX_GPIO_Init+0x280>)
 8003318:	f043 0302 	orr.w	r3, r3, #2
 800331c:	6313      	str	r3, [r2, #48]	; 0x30
 800331e:	4b7a      	ldr	r3, [pc, #488]	; (8003508 <MX_GPIO_Init+0x280>)
 8003320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	60bb      	str	r3, [r7, #8]
 8003328:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800332a:	2300      	movs	r3, #0
 800332c:	607b      	str	r3, [r7, #4]
 800332e:	4b76      	ldr	r3, [pc, #472]	; (8003508 <MX_GPIO_Init+0x280>)
 8003330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003332:	4a75      	ldr	r2, [pc, #468]	; (8003508 <MX_GPIO_Init+0x280>)
 8003334:	f043 0308 	orr.w	r3, r3, #8
 8003338:	6313      	str	r3, [r2, #48]	; 0x30
 800333a:	4b73      	ldr	r3, [pc, #460]	; (8003508 <MX_GPIO_Init+0x280>)
 800333c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333e:	f003 0308 	and.w	r3, r3, #8
 8003342:	607b      	str	r3, [r7, #4]
 8003344:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8003346:	2200      	movs	r2, #0
 8003348:	2108      	movs	r1, #8
 800334a:	4870      	ldr	r0, [pc, #448]	; (800350c <MX_GPIO_Init+0x284>)
 800334c:	f000 fff2 	bl	8004334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8003350:	2201      	movs	r2, #1
 8003352:	2101      	movs	r1, #1
 8003354:	486e      	ldr	r0, [pc, #440]	; (8003510 <MX_GPIO_Init+0x288>)
 8003356:	f000 ffed 	bl	8004334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800335a:	2200      	movs	r2, #0
 800335c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8003360:	486c      	ldr	r0, [pc, #432]	; (8003514 <MX_GPIO_Init+0x28c>)
 8003362:	f000 ffe7 	bl	8004334 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8003366:	2308      	movs	r3, #8
 8003368:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800336a:	2301      	movs	r3, #1
 800336c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336e:	2300      	movs	r3, #0
 8003370:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003372:	2300      	movs	r3, #0
 8003374:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8003376:	f107 031c 	add.w	r3, r7, #28
 800337a:	4619      	mov	r1, r3
 800337c:	4863      	ldr	r0, [pc, #396]	; (800350c <MX_GPIO_Init+0x284>)
 800337e:	f000 fe3d 	bl	8003ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8003382:	2301      	movs	r3, #1
 8003384:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003386:	2301      	movs	r3, #1
 8003388:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338a:	2300      	movs	r3, #0
 800338c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800338e:	2300      	movs	r3, #0
 8003390:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003392:	f107 031c 	add.w	r3, r7, #28
 8003396:	4619      	mov	r1, r3
 8003398:	485d      	ldr	r0, [pc, #372]	; (8003510 <MX_GPIO_Init+0x288>)
 800339a:	f000 fe2f 	bl	8003ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800339e:	2308      	movs	r3, #8
 80033a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a2:	2302      	movs	r3, #2
 80033a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a6:	2300      	movs	r3, #0
 80033a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033aa:	2300      	movs	r3, #0
 80033ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80033ae:	2305      	movs	r3, #5
 80033b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80033b2:	f107 031c 	add.w	r3, r7, #28
 80033b6:	4619      	mov	r1, r3
 80033b8:	4855      	ldr	r0, [pc, #340]	; (8003510 <MX_GPIO_Init+0x288>)
 80033ba:	f000 fe1f 	bl	8003ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80033be:	2301      	movs	r3, #1
 80033c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80033c2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80033c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c8:	2300      	movs	r3, #0
 80033ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80033cc:	f107 031c 	add.w	r3, r7, #28
 80033d0:	4619      	mov	r1, r3
 80033d2:	4851      	ldr	r0, [pc, #324]	; (8003518 <MX_GPIO_Init+0x290>)
 80033d4:	f000 fe12 	bl	8003ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80033d8:	2310      	movs	r3, #16
 80033da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033dc:	2302      	movs	r3, #2
 80033de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e0:	2300      	movs	r3, #0
 80033e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033e4:	2300      	movs	r3, #0
 80033e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80033e8:	2306      	movs	r3, #6
 80033ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80033ec:	f107 031c 	add.w	r3, r7, #28
 80033f0:	4619      	mov	r1, r3
 80033f2:	4849      	ldr	r0, [pc, #292]	; (8003518 <MX_GPIO_Init+0x290>)
 80033f4:	f000 fe02 	bl	8003ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80033f8:	23e0      	movs	r3, #224	; 0xe0
 80033fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033fc:	2302      	movs	r3, #2
 80033fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003400:	2300      	movs	r3, #0
 8003402:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003404:	2300      	movs	r3, #0
 8003406:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003408:	2305      	movs	r3, #5
 800340a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800340c:	f107 031c 	add.w	r3, r7, #28
 8003410:	4619      	mov	r1, r3
 8003412:	4841      	ldr	r0, [pc, #260]	; (8003518 <MX_GPIO_Init+0x290>)
 8003414:	f000 fdf2 	bl	8003ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8003418:	2304      	movs	r3, #4
 800341a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800341c:	2300      	movs	r3, #0
 800341e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003420:	2300      	movs	r3, #0
 8003422:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8003424:	f107 031c 	add.w	r3, r7, #28
 8003428:	4619      	mov	r1, r3
 800342a:	483c      	ldr	r0, [pc, #240]	; (800351c <MX_GPIO_Init+0x294>)
 800342c:	f000 fde6 	bl	8003ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8003430:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003434:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003436:	2302      	movs	r3, #2
 8003438:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343a:	2300      	movs	r3, #0
 800343c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800343e:	2300      	movs	r3, #0
 8003440:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003442:	2305      	movs	r3, #5
 8003444:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8003446:	f107 031c 	add.w	r3, r7, #28
 800344a:	4619      	mov	r1, r3
 800344c:	4833      	ldr	r0, [pc, #204]	; (800351c <MX_GPIO_Init+0x294>)
 800344e:	f000 fdd5 	bl	8003ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8003452:	f24f 0310 	movw	r3, #61456	; 0xf010
 8003456:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003458:	2301      	movs	r3, #1
 800345a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800345c:	2300      	movs	r3, #0
 800345e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003460:	2300      	movs	r3, #0
 8003462:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003464:	f107 031c 	add.w	r3, r7, #28
 8003468:	4619      	mov	r1, r3
 800346a:	482a      	ldr	r0, [pc, #168]	; (8003514 <MX_GPIO_Init+0x28c>)
 800346c:	f000 fdc6 	bl	8003ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8003470:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8003474:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003476:	2302      	movs	r3, #2
 8003478:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347a:	2300      	movs	r3, #0
 800347c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800347e:	2300      	movs	r3, #0
 8003480:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003482:	2306      	movs	r3, #6
 8003484:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003486:	f107 031c 	add.w	r3, r7, #28
 800348a:	4619      	mov	r1, r3
 800348c:	4820      	ldr	r0, [pc, #128]	; (8003510 <MX_GPIO_Init+0x288>)
 800348e:	f000 fdb5 	bl	8003ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8003492:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003496:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003498:	2300      	movs	r3, #0
 800349a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349c:	2300      	movs	r3, #0
 800349e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80034a0:	f107 031c 	add.w	r3, r7, #28
 80034a4:	4619      	mov	r1, r3
 80034a6:	481c      	ldr	r0, [pc, #112]	; (8003518 <MX_GPIO_Init+0x290>)
 80034a8:	f000 fda8 	bl	8003ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80034ac:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80034b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b2:	2302      	movs	r3, #2
 80034b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b6:	2300      	movs	r3, #0
 80034b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ba:	2300      	movs	r3, #0
 80034bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80034be:	230a      	movs	r3, #10
 80034c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034c2:	f107 031c 	add.w	r3, r7, #28
 80034c6:	4619      	mov	r1, r3
 80034c8:	4813      	ldr	r0, [pc, #76]	; (8003518 <MX_GPIO_Init+0x290>)
 80034ca:	f000 fd97 	bl	8003ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80034ce:	2320      	movs	r3, #32
 80034d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034d2:	2300      	movs	r3, #0
 80034d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d6:	2300      	movs	r3, #0
 80034d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80034da:	f107 031c 	add.w	r3, r7, #28
 80034de:	4619      	mov	r1, r3
 80034e0:	480c      	ldr	r0, [pc, #48]	; (8003514 <MX_GPIO_Init+0x28c>)
 80034e2:	f000 fd8b 	bl	8003ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80034e6:	2302      	movs	r3, #2
 80034e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80034ea:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80034ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f0:	2300      	movs	r3, #0
 80034f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80034f4:	f107 031c 	add.w	r3, r7, #28
 80034f8:	4619      	mov	r1, r3
 80034fa:	4804      	ldr	r0, [pc, #16]	; (800350c <MX_GPIO_Init+0x284>)
 80034fc:	f000 fd7e 	bl	8003ffc <HAL_GPIO_Init>

}
 8003500:	bf00      	nop
 8003502:	3730      	adds	r7, #48	; 0x30
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	40023800 	.word	0x40023800
 800350c:	40021000 	.word	0x40021000
 8003510:	40020800 	.word	0x40020800
 8003514:	40020c00 	.word	0x40020c00
 8003518:	40020000 	.word	0x40020000
 800351c:	40020400 	.word	0x40020400

08003520 <printmsg>:

/* USER CODE BEGIN 4 */
void printmsg(const char* msg)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f7fc fe51 	bl	80001d0 <strlen>
 800352e:	4603      	mov	r3, r0
 8003530:	b29a      	uxth	r2, r3
 8003532:	f04f 33ff 	mov.w	r3, #4294967295
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	4803      	ldr	r0, [pc, #12]	; (8003548 <printmsg+0x28>)
 800353a:	f002 fbba 	bl	8005cb2 <HAL_UART_Transmit>
}
 800353e:	bf00      	nop
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	20000278 	.word	0x20000278

0800354c <user_i2c_read>:

BME68X_INTF_RET_TYPE user_i2c_read(uint8_t reg_addr, uint8_t *data, uint32_t len, void *intf_ptr)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b08a      	sub	sp, #40	; 0x28
 8003550:	af04      	add	r7, sp, #16
 8003552:	60b9      	str	r1, [r7, #8]
 8003554:	607a      	str	r2, [r7, #4]
 8003556:	603b      	str	r3, [r7, #0]
 8003558:	4603      	mov	r3, r0
 800355a:	73fb      	strb	r3, [r7, #15]
	uint8_t dev_addr = *(uint8_t*)intf_ptr;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	75fb      	strb	r3, [r7, #23]
	uint16_t DevAddress = dev_addr <<1;
 8003562:	7dfb      	ldrb	r3, [r7, #23]
 8003564:	b29b      	uxth	r3, r3
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	82bb      	strh	r3, [r7, #20]
//  HAL_I2C_Master_Transmit(&hi2c1, DevAddress, &reg_addr, 1, 1000);
//  HAL_I2C_Master_Receive(&hi2c1, DevAddress, data, len, 1000);
	HAL_I2C_Mem_Read(&hi2c1, DevAddress, reg_addr, 1, data, len, 15);
 800356a:	7bfb      	ldrb	r3, [r7, #15]
 800356c:	b29a      	uxth	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	b29b      	uxth	r3, r3
 8003572:	8ab9      	ldrh	r1, [r7, #20]
 8003574:	200f      	movs	r0, #15
 8003576:	9002      	str	r0, [sp, #8]
 8003578:	9301      	str	r3, [sp, #4]
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	2301      	movs	r3, #1
 8003580:	4803      	ldr	r0, [pc, #12]	; (8003590 <user_i2c_read+0x44>)
 8003582:	f001 f92f 	bl	80047e4 <HAL_I2C_Mem_Read>
  return 0; // Success
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3718      	adds	r7, #24
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	20000224 	.word	0x20000224

08003594 <user_i2c_write>:

BME68X_INTF_RET_TYPE user_i2c_write(uint8_t reg_addr, const uint8_t *data, uint32_t len, void *intf_ptr)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b08a      	sub	sp, #40	; 0x28
 8003598:	af04      	add	r7, sp, #16
 800359a:	60b9      	str	r1, [r7, #8]
 800359c:	607a      	str	r2, [r7, #4]
 800359e:	603b      	str	r3, [r7, #0]
 80035a0:	4603      	mov	r3, r0
 80035a2:	73fb      	strb	r3, [r7, #15]
	uint8_t dev_addr = *(uint8_t*)intf_ptr;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	75fb      	strb	r3, [r7, #23]
	uint16_t DevAddress = dev_addr <<1;
 80035aa:	7dfb      	ldrb	r3, [r7, #23]
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	82bb      	strh	r3, [r7, #20]
//	HAL_I2C_Master_Transmit(&hi2c1, DevAddress, &reg_addr, len+1, 1000);
	HAL_I2C_Mem_Write(&hi2c1, DevAddress, reg_addr, 1, (uint8_t*)data, len, 15);
 80035b2:	7bfb      	ldrb	r3, [r7, #15]
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	8ab9      	ldrh	r1, [r7, #20]
 80035bc:	200f      	movs	r0, #15
 80035be:	9002      	str	r0, [sp, #8]
 80035c0:	9301      	str	r3, [sp, #4]
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	2301      	movs	r3, #1
 80035c8:	4803      	ldr	r0, [pc, #12]	; (80035d8 <user_i2c_write+0x44>)
 80035ca:	f001 f811 	bl	80045f0 <HAL_I2C_Mem_Write>
  return 0; // Success
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3718      	adds	r7, #24
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	20000224 	.word	0x20000224

080035dc <bme68x_delay_us>:

void bme68x_delay_us(uint32_t period, void *ntf_ptr)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
	HAL_Delay(period/1000);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a05      	ldr	r2, [pc, #20]	; (8003600 <bme68x_delay_us+0x24>)
 80035ea:	fba2 2303 	umull	r2, r3, r2, r3
 80035ee:	099b      	lsrs	r3, r3, #6
 80035f0:	4618      	mov	r0, r3
 80035f2:	f000 fb3b 	bl	8003c6c <HAL_Delay>
}
 80035f6:	bf00      	nop
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	10624dd3 	.word	0x10624dd3

08003604 <bme680_config>:

static int8_t bme680_config(struct bme68x_dev* bme680_ptr)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
	struct bme68x_conf sensor_conf;
	sensor_conf.filter = iir_filter;
 800360c:	2300      	movs	r3, #0
 800360e:	72fb      	strb	r3, [r7, #11]
	sensor_conf.odr = odr_time;
 8003610:	2308      	movs	r3, #8
 8003612:	733b      	strb	r3, [r7, #12]
	sensor_conf.os_hum = hum_os;
 8003614:	2305      	movs	r3, #5
 8003616:	723b      	strb	r3, [r7, #8]
	sensor_conf.os_pres = pres_os;
 8003618:	2301      	movs	r3, #1
 800361a:	72bb      	strb	r3, [r7, #10]
	sensor_conf.os_temp = temp_os;
 800361c:	2302      	movs	r3, #2
 800361e:	727b      	strb	r3, [r7, #9]

	int8_t rslt = bme68x_set_conf(&sensor_conf, bme680_ptr);
 8003620:	f107 0308 	add.w	r3, r7, #8
 8003624:	6879      	ldr	r1, [r7, #4]
 8003626:	4618      	mov	r0, r3
 8003628:	f7fd fd86 	bl	8001138 <bme68x_set_conf>
 800362c:	4603      	mov	r3, r0
 800362e:	73fb      	strb	r3, [r7, #15]
	return rslt;
 8003630:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003634:	4618      	mov	r0, r3
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <bme680_htr_config>:

static int8_t bme680_htr_config(struct bme68x_dev* bme680_ptr)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b088      	sub	sp, #32
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
	struct bme68x_heatr_conf htr_conf;
	htr_conf.enable = htr_enable;
 8003644:	2301      	movs	r3, #1
 8003646:	723b      	strb	r3, [r7, #8]
	htr_conf.heatr_dur = htr_dur;
 8003648:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800364c:	81bb      	strh	r3, [r7, #12]
	htr_conf.heatr_temp = htr_temp;
 800364e:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8003652:	817b      	strh	r3, [r7, #10]

	int8_t rslt = bme68x_set_heatr_conf(BME68X_FORCED_MODE, &htr_conf, bme680_ptr);
 8003654:	f107 0308 	add.w	r3, r7, #8
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	4619      	mov	r1, r3
 800365c:	2001      	movs	r0, #1
 800365e:	f7fd ffee 	bl	800163e <bme68x_set_heatr_conf>
 8003662:	4603      	mov	r3, r0
 8003664:	77fb      	strb	r3, [r7, #31]
	return rslt;
 8003666:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800366a:	4618      	mov	r0, r3
 800366c:	3720      	adds	r7, #32
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
	...

08003674 <print_error>:

void print_error(int8_t result)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	4603      	mov	r3, r0
 800367c:	71fb      	strb	r3, [r7, #7]
	const char *return_msg;
	if(result == BME68X_OK)
 800367e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d105      	bne.n	8003692 <print_error+0x1e>
	{
		return_msg = "Init Result: BME68X_OK\n";
 8003686:	4b37      	ldr	r3, [pc, #220]	; (8003764 <print_error+0xf0>)
 8003688:	60fb      	str	r3, [r7, #12]
		printmsg(return_msg);
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f7ff ff48 	bl	8003520 <printmsg>
	else
	{
		return_msg = "Init Result: Not identified\n";
		printmsg(return_msg);
	}
}
 8003690:	e063      	b.n	800375a <print_error+0xe6>
	else if(result == BME68X_E_NULL_PTR)
 8003692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800369a:	d105      	bne.n	80036a8 <print_error+0x34>
		return_msg = "Init Result: BME68X_E_NULL_PTR\n";
 800369c:	4b32      	ldr	r3, [pc, #200]	; (8003768 <print_error+0xf4>)
 800369e:	60fb      	str	r3, [r7, #12]
		printmsg(return_msg);
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f7ff ff3d 	bl	8003520 <printmsg>
}
 80036a6:	e058      	b.n	800375a <print_error+0xe6>
	else if(result == BME68X_E_COM_FAIL)
 80036a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ac:	f113 0f02 	cmn.w	r3, #2
 80036b0:	d105      	bne.n	80036be <print_error+0x4a>
		return_msg = "Init Result: BME68X_E_COM_FAIL\n";
 80036b2:	4b2e      	ldr	r3, [pc, #184]	; (800376c <print_error+0xf8>)
 80036b4:	60fb      	str	r3, [r7, #12]
		printmsg(return_msg);
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f7ff ff32 	bl	8003520 <printmsg>
}
 80036bc:	e04d      	b.n	800375a <print_error+0xe6>
	else if(result == BME68X_E_DEV_NOT_FOUND)
 80036be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c2:	f113 0f03 	cmn.w	r3, #3
 80036c6:	d105      	bne.n	80036d4 <print_error+0x60>
		return_msg = "Init Result: BME68X_E_DEV_NOT_FOUND\n";
 80036c8:	4b29      	ldr	r3, [pc, #164]	; (8003770 <print_error+0xfc>)
 80036ca:	60fb      	str	r3, [r7, #12]
		printmsg(return_msg);
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f7ff ff27 	bl	8003520 <printmsg>
}
 80036d2:	e042      	b.n	800375a <print_error+0xe6>
	else if(result == BME68X_E_INVALID_LENGTH)
 80036d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d8:	f113 0f04 	cmn.w	r3, #4
 80036dc:	d105      	bne.n	80036ea <print_error+0x76>
		return_msg = "Init Result: BME68X_E_INVALID_LENGTH\n";
 80036de:	4b25      	ldr	r3, [pc, #148]	; (8003774 <print_error+0x100>)
 80036e0:	60fb      	str	r3, [r7, #12]
		printmsg(return_msg);
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f7ff ff1c 	bl	8003520 <printmsg>
}
 80036e8:	e037      	b.n	800375a <print_error+0xe6>
	else if(result == BME68X_E_SELF_TEST)
 80036ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ee:	f113 0f05 	cmn.w	r3, #5
 80036f2:	d105      	bne.n	8003700 <print_error+0x8c>
		return_msg = "Init Result: BME68X_E_SELF_TEST\n";
 80036f4:	4b20      	ldr	r3, [pc, #128]	; (8003778 <print_error+0x104>)
 80036f6:	60fb      	str	r3, [r7, #12]
		printmsg(return_msg);
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f7ff ff11 	bl	8003520 <printmsg>
}
 80036fe:	e02c      	b.n	800375a <print_error+0xe6>
	else if(result == BME68X_W_DEFINE_OP_MODE)
 8003700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d105      	bne.n	8003714 <print_error+0xa0>
		return_msg = "Init Result: BME68X_W_DEFINE_OP_MODE\n";
 8003708:	4b1c      	ldr	r3, [pc, #112]	; (800377c <print_error+0x108>)
 800370a:	60fb      	str	r3, [r7, #12]
		printmsg(return_msg);
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f7ff ff07 	bl	8003520 <printmsg>
}
 8003712:	e022      	b.n	800375a <print_error+0xe6>
	else if(result == BME68X_W_NO_NEW_DATA)
 8003714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003718:	2b02      	cmp	r3, #2
 800371a:	d105      	bne.n	8003728 <print_error+0xb4>
		return_msg = "Init Result: BME68X_W_NO_NEW_DATA\n";
 800371c:	4b18      	ldr	r3, [pc, #96]	; (8003780 <print_error+0x10c>)
 800371e:	60fb      	str	r3, [r7, #12]
		printmsg(return_msg);
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f7ff fefd 	bl	8003520 <printmsg>
}
 8003726:	e018      	b.n	800375a <print_error+0xe6>
	else if(result == BME68X_W_DEFINE_SHD_HEATR_DUR)
 8003728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800372c:	2b03      	cmp	r3, #3
 800372e:	d105      	bne.n	800373c <print_error+0xc8>
		return_msg = "Init Result: BME68X_W_DEFINE_SHD_HEATR_DUR\n";
 8003730:	4b14      	ldr	r3, [pc, #80]	; (8003784 <print_error+0x110>)
 8003732:	60fb      	str	r3, [r7, #12]
		printmsg(return_msg);
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f7ff fef3 	bl	8003520 <printmsg>
}
 800373a:	e00e      	b.n	800375a <print_error+0xe6>
	else if(result == BME68X_I_PARAM_CORR)
 800373c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d105      	bne.n	8003750 <print_error+0xdc>
		return_msg = "Init Result: BME68X_I_PARAM_CORR\n";
 8003744:	4b10      	ldr	r3, [pc, #64]	; (8003788 <print_error+0x114>)
 8003746:	60fb      	str	r3, [r7, #12]
		printmsg(return_msg);
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f7ff fee9 	bl	8003520 <printmsg>
}
 800374e:	e004      	b.n	800375a <print_error+0xe6>
		return_msg = "Init Result: Not identified\n";
 8003750:	4b0e      	ldr	r3, [pc, #56]	; (800378c <print_error+0x118>)
 8003752:	60fb      	str	r3, [r7, #12]
		printmsg(return_msg);
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f7ff fee3 	bl	8003520 <printmsg>
}
 800375a:	bf00      	nop
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	08009cb4 	.word	0x08009cb4
 8003768:	08009ccc 	.word	0x08009ccc
 800376c:	08009cec 	.word	0x08009cec
 8003770:	08009d0c 	.word	0x08009d0c
 8003774:	08009d34 	.word	0x08009d34
 8003778:	08009d5c 	.word	0x08009d5c
 800377c:	08009d80 	.word	0x08009d80
 8003780:	08009da8 	.word	0x08009da8
 8003784:	08009dcc 	.word	0x08009dcc
 8003788:	08009df8 	.word	0x08009df8
 800378c:	08009e1c 	.word	0x08009e1c

08003790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003794:	b672      	cpsid	i
}
 8003796:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003798:	e7fe      	b.n	8003798 <Error_Handler+0x8>
	...

0800379c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037a2:	2300      	movs	r3, #0
 80037a4:	607b      	str	r3, [r7, #4]
 80037a6:	4b10      	ldr	r3, [pc, #64]	; (80037e8 <HAL_MspInit+0x4c>)
 80037a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037aa:	4a0f      	ldr	r2, [pc, #60]	; (80037e8 <HAL_MspInit+0x4c>)
 80037ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037b0:	6453      	str	r3, [r2, #68]	; 0x44
 80037b2:	4b0d      	ldr	r3, [pc, #52]	; (80037e8 <HAL_MspInit+0x4c>)
 80037b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037ba:	607b      	str	r3, [r7, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037be:	2300      	movs	r3, #0
 80037c0:	603b      	str	r3, [r7, #0]
 80037c2:	4b09      	ldr	r3, [pc, #36]	; (80037e8 <HAL_MspInit+0x4c>)
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	4a08      	ldr	r2, [pc, #32]	; (80037e8 <HAL_MspInit+0x4c>)
 80037c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037cc:	6413      	str	r3, [r2, #64]	; 0x40
 80037ce:	4b06      	ldr	r3, [pc, #24]	; (80037e8 <HAL_MspInit+0x4c>)
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d6:	603b      	str	r3, [r7, #0]
 80037d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80037da:	2007      	movs	r0, #7
 80037dc:	f000 fb3a 	bl	8003e54 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037e0:	bf00      	nop
 80037e2:	3708      	adds	r7, #8
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	40023800 	.word	0x40023800

080037ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b08a      	sub	sp, #40	; 0x28
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037f4:	f107 0314 	add.w	r3, r7, #20
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	605a      	str	r2, [r3, #4]
 80037fe:	609a      	str	r2, [r3, #8]
 8003800:	60da      	str	r2, [r3, #12]
 8003802:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a19      	ldr	r2, [pc, #100]	; (8003870 <HAL_I2C_MspInit+0x84>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d12c      	bne.n	8003868 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800380e:	2300      	movs	r3, #0
 8003810:	613b      	str	r3, [r7, #16]
 8003812:	4b18      	ldr	r3, [pc, #96]	; (8003874 <HAL_I2C_MspInit+0x88>)
 8003814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003816:	4a17      	ldr	r2, [pc, #92]	; (8003874 <HAL_I2C_MspInit+0x88>)
 8003818:	f043 0302 	orr.w	r3, r3, #2
 800381c:	6313      	str	r3, [r2, #48]	; 0x30
 800381e:	4b15      	ldr	r3, [pc, #84]	; (8003874 <HAL_I2C_MspInit+0x88>)
 8003820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	613b      	str	r3, [r7, #16]
 8003828:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800382a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800382e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003830:	2312      	movs	r3, #18
 8003832:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003834:	2301      	movs	r3, #1
 8003836:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003838:	2300      	movs	r3, #0
 800383a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800383c:	2304      	movs	r3, #4
 800383e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003840:	f107 0314 	add.w	r3, r7, #20
 8003844:	4619      	mov	r1, r3
 8003846:	480c      	ldr	r0, [pc, #48]	; (8003878 <HAL_I2C_MspInit+0x8c>)
 8003848:	f000 fbd8 	bl	8003ffc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800384c:	2300      	movs	r3, #0
 800384e:	60fb      	str	r3, [r7, #12]
 8003850:	4b08      	ldr	r3, [pc, #32]	; (8003874 <HAL_I2C_MspInit+0x88>)
 8003852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003854:	4a07      	ldr	r2, [pc, #28]	; (8003874 <HAL_I2C_MspInit+0x88>)
 8003856:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800385a:	6413      	str	r3, [r2, #64]	; 0x40
 800385c:	4b05      	ldr	r3, [pc, #20]	; (8003874 <HAL_I2C_MspInit+0x88>)
 800385e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003860:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003864:	60fb      	str	r3, [r7, #12]
 8003866:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003868:	bf00      	nop
 800386a:	3728      	adds	r7, #40	; 0x28
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	40005400 	.word	0x40005400
 8003874:	40023800 	.word	0x40023800
 8003878:	40020400 	.word	0x40020400

0800387c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b08a      	sub	sp, #40	; 0x28
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003884:	f107 0314 	add.w	r3, r7, #20
 8003888:	2200      	movs	r2, #0
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	605a      	str	r2, [r3, #4]
 800388e:	609a      	str	r2, [r3, #8]
 8003890:	60da      	str	r2, [r3, #12]
 8003892:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a1d      	ldr	r2, [pc, #116]	; (8003910 <HAL_UART_MspInit+0x94>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d133      	bne.n	8003906 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800389e:	2300      	movs	r3, #0
 80038a0:	613b      	str	r3, [r7, #16]
 80038a2:	4b1c      	ldr	r3, [pc, #112]	; (8003914 <HAL_UART_MspInit+0x98>)
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	4a1b      	ldr	r2, [pc, #108]	; (8003914 <HAL_UART_MspInit+0x98>)
 80038a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038ac:	6413      	str	r3, [r2, #64]	; 0x40
 80038ae:	4b19      	ldr	r3, [pc, #100]	; (8003914 <HAL_UART_MspInit+0x98>)
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b6:	613b      	str	r3, [r7, #16]
 80038b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038ba:	2300      	movs	r3, #0
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	4b15      	ldr	r3, [pc, #84]	; (8003914 <HAL_UART_MspInit+0x98>)
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c2:	4a14      	ldr	r2, [pc, #80]	; (8003914 <HAL_UART_MspInit+0x98>)
 80038c4:	f043 0301 	orr.w	r3, r3, #1
 80038c8:	6313      	str	r3, [r2, #48]	; 0x30
 80038ca:	4b12      	ldr	r3, [pc, #72]	; (8003914 <HAL_UART_MspInit+0x98>)
 80038cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	60fb      	str	r3, [r7, #12]
 80038d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80038d6:	230c      	movs	r3, #12
 80038d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038da:	2302      	movs	r3, #2
 80038dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038de:	2300      	movs	r3, #0
 80038e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038e2:	2303      	movs	r3, #3
 80038e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80038e6:	2307      	movs	r3, #7
 80038e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038ea:	f107 0314 	add.w	r3, r7, #20
 80038ee:	4619      	mov	r1, r3
 80038f0:	4809      	ldr	r0, [pc, #36]	; (8003918 <HAL_UART_MspInit+0x9c>)
 80038f2:	f000 fb83 	bl	8003ffc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80038f6:	2200      	movs	r2, #0
 80038f8:	2100      	movs	r1, #0
 80038fa:	2026      	movs	r0, #38	; 0x26
 80038fc:	f000 fab5 	bl	8003e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003900:	2026      	movs	r0, #38	; 0x26
 8003902:	f000 face 	bl	8003ea2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003906:	bf00      	nop
 8003908:	3728      	adds	r7, #40	; 0x28
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	40004400 	.word	0x40004400
 8003914:	40023800 	.word	0x40023800
 8003918:	40020000 	.word	0x40020000

0800391c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003920:	e7fe      	b.n	8003920 <NMI_Handler+0x4>

08003922 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003922:	b480      	push	{r7}
 8003924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003926:	e7fe      	b.n	8003926 <HardFault_Handler+0x4>

08003928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800392c:	e7fe      	b.n	800392c <MemManage_Handler+0x4>

0800392e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800392e:	b480      	push	{r7}
 8003930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003932:	e7fe      	b.n	8003932 <BusFault_Handler+0x4>

08003934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003938:	e7fe      	b.n	8003938 <UsageFault_Handler+0x4>

0800393a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800393a:	b480      	push	{r7}
 800393c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800393e:	bf00      	nop
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800394c:	bf00      	nop
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003956:	b480      	push	{r7}
 8003958:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800395a:	bf00      	nop
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003968:	f000 f960 	bl	8003c2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800396c:	bf00      	nop
 800396e:	bd80      	pop	{r7, pc}

08003970 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003974:	4802      	ldr	r0, [pc, #8]	; (8003980 <USART2_IRQHandler+0x10>)
 8003976:	f002 fa2f 	bl	8005dd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800397a:	bf00      	nop
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	20000278 	.word	0x20000278

08003984 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
	return 1;
 8003988:	2301      	movs	r3, #1
}
 800398a:	4618      	mov	r0, r3
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <_kill>:

int _kill(int pid, int sig)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800399e:	f003 f94f 	bl	8006c40 <__errno>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2216      	movs	r2, #22
 80039a6:	601a      	str	r2, [r3, #0]
	return -1;
 80039a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3708      	adds	r7, #8
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <_exit>:

void _exit (int status)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80039bc:	f04f 31ff 	mov.w	r1, #4294967295
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f7ff ffe7 	bl	8003994 <_kill>
	while (1) {}		/* Make sure we hang here */
 80039c6:	e7fe      	b.n	80039c6 <_exit+0x12>

080039c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039d4:	2300      	movs	r3, #0
 80039d6:	617b      	str	r3, [r7, #20]
 80039d8:	e00a      	b.n	80039f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80039da:	f3af 8000 	nop.w
 80039de:	4601      	mov	r1, r0
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	1c5a      	adds	r2, r3, #1
 80039e4:	60ba      	str	r2, [r7, #8]
 80039e6:	b2ca      	uxtb	r2, r1
 80039e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	3301      	adds	r3, #1
 80039ee:	617b      	str	r3, [r7, #20]
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	dbf0      	blt.n	80039da <_read+0x12>
	}

return len;
 80039f8:	687b      	ldr	r3, [r7, #4]
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3718      	adds	r7, #24
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b086      	sub	sp, #24
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	60f8      	str	r0, [r7, #12]
 8003a0a:	60b9      	str	r1, [r7, #8]
 8003a0c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a0e:	2300      	movs	r3, #0
 8003a10:	617b      	str	r3, [r7, #20]
 8003a12:	e009      	b.n	8003a28 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	1c5a      	adds	r2, r3, #1
 8003a18:	60ba      	str	r2, [r7, #8]
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	3301      	adds	r3, #1
 8003a26:	617b      	str	r3, [r7, #20]
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	dbf1      	blt.n	8003a14 <_write+0x12>
	}
	return len;
 8003a30:	687b      	ldr	r3, [r7, #4]
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3718      	adds	r7, #24
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <_close>:

int _close(int file)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b083      	sub	sp, #12
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
	return -1;
 8003a42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b083      	sub	sp, #12
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
 8003a5a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a62:	605a      	str	r2, [r3, #4]
	return 0;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr

08003a72 <_isatty>:

int _isatty(int file)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b083      	sub	sp, #12
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
	return 1;
 8003a7a:	2301      	movs	r3, #1
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
	return 0;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3714      	adds	r7, #20
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
	...

08003aa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003aac:	4a14      	ldr	r2, [pc, #80]	; (8003b00 <_sbrk+0x5c>)
 8003aae:	4b15      	ldr	r3, [pc, #84]	; (8003b04 <_sbrk+0x60>)
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ab8:	4b13      	ldr	r3, [pc, #76]	; (8003b08 <_sbrk+0x64>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d102      	bne.n	8003ac6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ac0:	4b11      	ldr	r3, [pc, #68]	; (8003b08 <_sbrk+0x64>)
 8003ac2:	4a12      	ldr	r2, [pc, #72]	; (8003b0c <_sbrk+0x68>)
 8003ac4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ac6:	4b10      	ldr	r3, [pc, #64]	; (8003b08 <_sbrk+0x64>)
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4413      	add	r3, r2
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d207      	bcs.n	8003ae4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ad4:	f003 f8b4 	bl	8006c40 <__errno>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	220c      	movs	r2, #12
 8003adc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ade:	f04f 33ff 	mov.w	r3, #4294967295
 8003ae2:	e009      	b.n	8003af8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ae4:	4b08      	ldr	r3, [pc, #32]	; (8003b08 <_sbrk+0x64>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003aea:	4b07      	ldr	r3, [pc, #28]	; (8003b08 <_sbrk+0x64>)
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4413      	add	r3, r2
 8003af2:	4a05      	ldr	r2, [pc, #20]	; (8003b08 <_sbrk+0x64>)
 8003af4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003af6:	68fb      	ldr	r3, [r7, #12]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3718      	adds	r7, #24
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	20020000 	.word	0x20020000
 8003b04:	00000400 	.word	0x00000400
 8003b08:	200002c0 	.word	0x200002c0
 8003b0c:	200002d8 	.word	0x200002d8

08003b10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b14:	4b06      	ldr	r3, [pc, #24]	; (8003b30 <SystemInit+0x20>)
 8003b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1a:	4a05      	ldr	r2, [pc, #20]	; (8003b30 <SystemInit+0x20>)
 8003b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b24:	bf00      	nop
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	e000ed00 	.word	0xe000ed00

08003b34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003b34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003b38:	480d      	ldr	r0, [pc, #52]	; (8003b70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003b3a:	490e      	ldr	r1, [pc, #56]	; (8003b74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003b3c:	4a0e      	ldr	r2, [pc, #56]	; (8003b78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b40:	e002      	b.n	8003b48 <LoopCopyDataInit>

08003b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b46:	3304      	adds	r3, #4

08003b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b4c:	d3f9      	bcc.n	8003b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b4e:	4a0b      	ldr	r2, [pc, #44]	; (8003b7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003b50:	4c0b      	ldr	r4, [pc, #44]	; (8003b80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b54:	e001      	b.n	8003b5a <LoopFillZerobss>

08003b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b58:	3204      	adds	r2, #4

08003b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b5c:	d3fb      	bcc.n	8003b56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003b5e:	f7ff ffd7 	bl	8003b10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b62:	f003 f873 	bl	8006c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b66:	f7ff f9bd 	bl	8002ee4 <main>
  bx  lr    
 8003b6a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003b6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b74:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8003b78:	0800a23c 	.word	0x0800a23c
  ldr r2, =_sbss
 8003b7c:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8003b80:	200002d8 	.word	0x200002d8

08003b84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b84:	e7fe      	b.n	8003b84 <ADC_IRQHandler>
	...

08003b88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b8c:	4b0e      	ldr	r3, [pc, #56]	; (8003bc8 <HAL_Init+0x40>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a0d      	ldr	r2, [pc, #52]	; (8003bc8 <HAL_Init+0x40>)
 8003b92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b98:	4b0b      	ldr	r3, [pc, #44]	; (8003bc8 <HAL_Init+0x40>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a0a      	ldr	r2, [pc, #40]	; (8003bc8 <HAL_Init+0x40>)
 8003b9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ba2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ba4:	4b08      	ldr	r3, [pc, #32]	; (8003bc8 <HAL_Init+0x40>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a07      	ldr	r2, [pc, #28]	; (8003bc8 <HAL_Init+0x40>)
 8003baa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bb0:	2003      	movs	r0, #3
 8003bb2:	f000 f94f 	bl	8003e54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003bb6:	2000      	movs	r0, #0
 8003bb8:	f000 f808 	bl	8003bcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003bbc:	f7ff fdee 	bl	800379c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	40023c00 	.word	0x40023c00

08003bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003bd4:	4b12      	ldr	r3, [pc, #72]	; (8003c20 <HAL_InitTick+0x54>)
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	4b12      	ldr	r3, [pc, #72]	; (8003c24 <HAL_InitTick+0x58>)
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	4619      	mov	r1, r3
 8003bde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bea:	4618      	mov	r0, r3
 8003bec:	f000 f967 	bl	8003ebe <HAL_SYSTICK_Config>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e00e      	b.n	8003c18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b0f      	cmp	r3, #15
 8003bfe:	d80a      	bhi.n	8003c16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c00:	2200      	movs	r2, #0
 8003c02:	6879      	ldr	r1, [r7, #4]
 8003c04:	f04f 30ff 	mov.w	r0, #4294967295
 8003c08:	f000 f92f 	bl	8003e6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c0c:	4a06      	ldr	r2, [pc, #24]	; (8003c28 <HAL_InitTick+0x5c>)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
 8003c14:	e000      	b.n	8003c18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3708      	adds	r7, #8
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	2000002c 	.word	0x2000002c
 8003c24:	20000034 	.word	0x20000034
 8003c28:	20000030 	.word	0x20000030

08003c2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c30:	4b06      	ldr	r3, [pc, #24]	; (8003c4c <HAL_IncTick+0x20>)
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	461a      	mov	r2, r3
 8003c36:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <HAL_IncTick+0x24>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	4a04      	ldr	r2, [pc, #16]	; (8003c50 <HAL_IncTick+0x24>)
 8003c3e:	6013      	str	r3, [r2, #0]
}
 8003c40:	bf00      	nop
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	20000034 	.word	0x20000034
 8003c50:	200002c4 	.word	0x200002c4

08003c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c54:	b480      	push	{r7}
 8003c56:	af00      	add	r7, sp, #0
  return uwTick;
 8003c58:	4b03      	ldr	r3, [pc, #12]	; (8003c68 <HAL_GetTick+0x14>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	200002c4 	.word	0x200002c4

08003c6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c74:	f7ff ffee 	bl	8003c54 <HAL_GetTick>
 8003c78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c84:	d005      	beq.n	8003c92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c86:	4b0a      	ldr	r3, [pc, #40]	; (8003cb0 <HAL_Delay+0x44>)
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4413      	add	r3, r2
 8003c90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c92:	bf00      	nop
 8003c94:	f7ff ffde 	bl	8003c54 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d8f7      	bhi.n	8003c94 <HAL_Delay+0x28>
  {
  }
}
 8003ca4:	bf00      	nop
 8003ca6:	bf00      	nop
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	20000034 	.word	0x20000034

08003cb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f003 0307 	and.w	r3, r3, #7
 8003cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cc4:	4b0c      	ldr	r3, [pc, #48]	; (8003cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ce6:	4a04      	ldr	r2, [pc, #16]	; (8003cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	60d3      	str	r3, [r2, #12]
}
 8003cec:	bf00      	nop
 8003cee:	3714      	adds	r7, #20
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	e000ed00 	.word	0xe000ed00

08003cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d00:	4b04      	ldr	r3, [pc, #16]	; (8003d14 <__NVIC_GetPriorityGrouping+0x18>)
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	0a1b      	lsrs	r3, r3, #8
 8003d06:	f003 0307 	and.w	r3, r3, #7
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	e000ed00 	.word	0xe000ed00

08003d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	4603      	mov	r3, r0
 8003d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	db0b      	blt.n	8003d42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d2a:	79fb      	ldrb	r3, [r7, #7]
 8003d2c:	f003 021f 	and.w	r2, r3, #31
 8003d30:	4907      	ldr	r1, [pc, #28]	; (8003d50 <__NVIC_EnableIRQ+0x38>)
 8003d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d36:	095b      	lsrs	r3, r3, #5
 8003d38:	2001      	movs	r0, #1
 8003d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d42:	bf00      	nop
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	e000e100 	.word	0xe000e100

08003d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	6039      	str	r1, [r7, #0]
 8003d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	db0a      	blt.n	8003d7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	b2da      	uxtb	r2, r3
 8003d6c:	490c      	ldr	r1, [pc, #48]	; (8003da0 <__NVIC_SetPriority+0x4c>)
 8003d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d72:	0112      	lsls	r2, r2, #4
 8003d74:	b2d2      	uxtb	r2, r2
 8003d76:	440b      	add	r3, r1
 8003d78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d7c:	e00a      	b.n	8003d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	b2da      	uxtb	r2, r3
 8003d82:	4908      	ldr	r1, [pc, #32]	; (8003da4 <__NVIC_SetPriority+0x50>)
 8003d84:	79fb      	ldrb	r3, [r7, #7]
 8003d86:	f003 030f 	and.w	r3, r3, #15
 8003d8a:	3b04      	subs	r3, #4
 8003d8c:	0112      	lsls	r2, r2, #4
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	440b      	add	r3, r1
 8003d92:	761a      	strb	r2, [r3, #24]
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr
 8003da0:	e000e100 	.word	0xe000e100
 8003da4:	e000ed00 	.word	0xe000ed00

08003da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b089      	sub	sp, #36	; 0x24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f003 0307 	and.w	r3, r3, #7
 8003dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	f1c3 0307 	rsb	r3, r3, #7
 8003dc2:	2b04      	cmp	r3, #4
 8003dc4:	bf28      	it	cs
 8003dc6:	2304      	movcs	r3, #4
 8003dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	3304      	adds	r3, #4
 8003dce:	2b06      	cmp	r3, #6
 8003dd0:	d902      	bls.n	8003dd8 <NVIC_EncodePriority+0x30>
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	3b03      	subs	r3, #3
 8003dd6:	e000      	b.n	8003dda <NVIC_EncodePriority+0x32>
 8003dd8:	2300      	movs	r3, #0
 8003dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	fa02 f303 	lsl.w	r3, r2, r3
 8003de6:	43da      	mvns	r2, r3
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	401a      	ands	r2, r3
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003df0:	f04f 31ff 	mov.w	r1, #4294967295
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dfa:	43d9      	mvns	r1, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e00:	4313      	orrs	r3, r2
         );
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3724      	adds	r7, #36	; 0x24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
	...

08003e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e20:	d301      	bcc.n	8003e26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e22:	2301      	movs	r3, #1
 8003e24:	e00f      	b.n	8003e46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e26:	4a0a      	ldr	r2, [pc, #40]	; (8003e50 <SysTick_Config+0x40>)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e2e:	210f      	movs	r1, #15
 8003e30:	f04f 30ff 	mov.w	r0, #4294967295
 8003e34:	f7ff ff8e 	bl	8003d54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e38:	4b05      	ldr	r3, [pc, #20]	; (8003e50 <SysTick_Config+0x40>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e3e:	4b04      	ldr	r3, [pc, #16]	; (8003e50 <SysTick_Config+0x40>)
 8003e40:	2207      	movs	r2, #7
 8003e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	e000e010 	.word	0xe000e010

08003e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f7ff ff29 	bl	8003cb4 <__NVIC_SetPriorityGrouping>
}
 8003e62:	bf00      	nop
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b086      	sub	sp, #24
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	4603      	mov	r3, r0
 8003e72:	60b9      	str	r1, [r7, #8]
 8003e74:	607a      	str	r2, [r7, #4]
 8003e76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e7c:	f7ff ff3e 	bl	8003cfc <__NVIC_GetPriorityGrouping>
 8003e80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	68b9      	ldr	r1, [r7, #8]
 8003e86:	6978      	ldr	r0, [r7, #20]
 8003e88:	f7ff ff8e 	bl	8003da8 <NVIC_EncodePriority>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e92:	4611      	mov	r1, r2
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7ff ff5d 	bl	8003d54 <__NVIC_SetPriority>
}
 8003e9a:	bf00      	nop
 8003e9c:	3718      	adds	r7, #24
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b082      	sub	sp, #8
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7ff ff31 	bl	8003d18 <__NVIC_EnableIRQ>
}
 8003eb6:	bf00      	nop
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b082      	sub	sp, #8
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7ff ffa2 	bl	8003e10 <SysTick_Config>
 8003ecc:	4603      	mov	r3, r0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b084      	sub	sp, #16
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003ee4:	f7ff feb6 	bl	8003c54 <HAL_GetTick>
 8003ee8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d008      	beq.n	8003f08 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2280      	movs	r2, #128	; 0x80
 8003efa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e052      	b.n	8003fae <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 0216 	bic.w	r2, r2, #22
 8003f16:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	695a      	ldr	r2, [r3, #20]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f26:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d103      	bne.n	8003f38 <HAL_DMA_Abort+0x62>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d007      	beq.n	8003f48 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 0208 	bic.w	r2, r2, #8
 8003f46:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f022 0201 	bic.w	r2, r2, #1
 8003f56:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f58:	e013      	b.n	8003f82 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f5a:	f7ff fe7b 	bl	8003c54 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b05      	cmp	r3, #5
 8003f66:	d90c      	bls.n	8003f82 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2203      	movs	r2, #3
 8003f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e015      	b.n	8003fae <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0301 	and.w	r3, r3, #1
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1e4      	bne.n	8003f5a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f94:	223f      	movs	r2, #63	; 0x3f
 8003f96:	409a      	lsls	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b083      	sub	sp, #12
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d004      	beq.n	8003fd4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2280      	movs	r2, #128	; 0x80
 8003fce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e00c      	b.n	8003fee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2205      	movs	r2, #5
 8003fd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f022 0201 	bic.w	r2, r2, #1
 8003fea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
	...

08003ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b089      	sub	sp, #36	; 0x24
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004006:	2300      	movs	r3, #0
 8004008:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800400a:	2300      	movs	r3, #0
 800400c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800400e:	2300      	movs	r3, #0
 8004010:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004012:	2300      	movs	r3, #0
 8004014:	61fb      	str	r3, [r7, #28]
 8004016:	e16b      	b.n	80042f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004018:	2201      	movs	r2, #1
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	4013      	ands	r3, r2
 800402a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	429a      	cmp	r2, r3
 8004032:	f040 815a 	bne.w	80042ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f003 0303 	and.w	r3, r3, #3
 800403e:	2b01      	cmp	r3, #1
 8004040:	d005      	beq.n	800404e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800404a:	2b02      	cmp	r3, #2
 800404c:	d130      	bne.n	80040b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	2203      	movs	r2, #3
 800405a:	fa02 f303 	lsl.w	r3, r2, r3
 800405e:	43db      	mvns	r3, r3
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	4013      	ands	r3, r2
 8004064:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	68da      	ldr	r2, [r3, #12]
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	fa02 f303 	lsl.w	r3, r2, r3
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	4313      	orrs	r3, r2
 8004076:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	69ba      	ldr	r2, [r7, #24]
 800407c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004084:	2201      	movs	r2, #1
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	fa02 f303 	lsl.w	r3, r2, r3
 800408c:	43db      	mvns	r3, r3
 800408e:	69ba      	ldr	r2, [r7, #24]
 8004090:	4013      	ands	r3, r2
 8004092:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	091b      	lsrs	r3, r3, #4
 800409a:	f003 0201 	and.w	r2, r3, #1
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	fa02 f303 	lsl.w	r3, r2, r3
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f003 0303 	and.w	r3, r3, #3
 80040b8:	2b03      	cmp	r3, #3
 80040ba:	d017      	beq.n	80040ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	2203      	movs	r2, #3
 80040c8:	fa02 f303 	lsl.w	r3, r2, r3
 80040cc:	43db      	mvns	r3, r3
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	4013      	ands	r3, r2
 80040d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	005b      	lsls	r3, r3, #1
 80040dc:	fa02 f303 	lsl.w	r3, r2, r3
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f003 0303 	and.w	r3, r3, #3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d123      	bne.n	8004140 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	08da      	lsrs	r2, r3, #3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	3208      	adds	r2, #8
 8004100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004104:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	f003 0307 	and.w	r3, r3, #7
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	220f      	movs	r2, #15
 8004110:	fa02 f303 	lsl.w	r3, r2, r3
 8004114:	43db      	mvns	r3, r3
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	4013      	ands	r3, r2
 800411a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	691a      	ldr	r2, [r3, #16]
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	f003 0307 	and.w	r3, r3, #7
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	fa02 f303 	lsl.w	r3, r2, r3
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	4313      	orrs	r3, r2
 8004130:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	08da      	lsrs	r2, r3, #3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	3208      	adds	r2, #8
 800413a:	69b9      	ldr	r1, [r7, #24]
 800413c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	2203      	movs	r2, #3
 800414c:	fa02 f303 	lsl.w	r3, r2, r3
 8004150:	43db      	mvns	r3, r3
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	4013      	ands	r3, r2
 8004156:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f003 0203 	and.w	r2, r3, #3
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	fa02 f303 	lsl.w	r3, r2, r3
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	4313      	orrs	r3, r2
 800416c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800417c:	2b00      	cmp	r3, #0
 800417e:	f000 80b4 	beq.w	80042ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004182:	2300      	movs	r3, #0
 8004184:	60fb      	str	r3, [r7, #12]
 8004186:	4b60      	ldr	r3, [pc, #384]	; (8004308 <HAL_GPIO_Init+0x30c>)
 8004188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418a:	4a5f      	ldr	r2, [pc, #380]	; (8004308 <HAL_GPIO_Init+0x30c>)
 800418c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004190:	6453      	str	r3, [r2, #68]	; 0x44
 8004192:	4b5d      	ldr	r3, [pc, #372]	; (8004308 <HAL_GPIO_Init+0x30c>)
 8004194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004196:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800419e:	4a5b      	ldr	r2, [pc, #364]	; (800430c <HAL_GPIO_Init+0x310>)
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	089b      	lsrs	r3, r3, #2
 80041a4:	3302      	adds	r3, #2
 80041a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	f003 0303 	and.w	r3, r3, #3
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	220f      	movs	r2, #15
 80041b6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ba:	43db      	mvns	r3, r3
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	4013      	ands	r3, r2
 80041c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a52      	ldr	r2, [pc, #328]	; (8004310 <HAL_GPIO_Init+0x314>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d02b      	beq.n	8004222 <HAL_GPIO_Init+0x226>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a51      	ldr	r2, [pc, #324]	; (8004314 <HAL_GPIO_Init+0x318>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d025      	beq.n	800421e <HAL_GPIO_Init+0x222>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a50      	ldr	r2, [pc, #320]	; (8004318 <HAL_GPIO_Init+0x31c>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d01f      	beq.n	800421a <HAL_GPIO_Init+0x21e>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a4f      	ldr	r2, [pc, #316]	; (800431c <HAL_GPIO_Init+0x320>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d019      	beq.n	8004216 <HAL_GPIO_Init+0x21a>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a4e      	ldr	r2, [pc, #312]	; (8004320 <HAL_GPIO_Init+0x324>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d013      	beq.n	8004212 <HAL_GPIO_Init+0x216>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a4d      	ldr	r2, [pc, #308]	; (8004324 <HAL_GPIO_Init+0x328>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d00d      	beq.n	800420e <HAL_GPIO_Init+0x212>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a4c      	ldr	r2, [pc, #304]	; (8004328 <HAL_GPIO_Init+0x32c>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d007      	beq.n	800420a <HAL_GPIO_Init+0x20e>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a4b      	ldr	r2, [pc, #300]	; (800432c <HAL_GPIO_Init+0x330>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d101      	bne.n	8004206 <HAL_GPIO_Init+0x20a>
 8004202:	2307      	movs	r3, #7
 8004204:	e00e      	b.n	8004224 <HAL_GPIO_Init+0x228>
 8004206:	2308      	movs	r3, #8
 8004208:	e00c      	b.n	8004224 <HAL_GPIO_Init+0x228>
 800420a:	2306      	movs	r3, #6
 800420c:	e00a      	b.n	8004224 <HAL_GPIO_Init+0x228>
 800420e:	2305      	movs	r3, #5
 8004210:	e008      	b.n	8004224 <HAL_GPIO_Init+0x228>
 8004212:	2304      	movs	r3, #4
 8004214:	e006      	b.n	8004224 <HAL_GPIO_Init+0x228>
 8004216:	2303      	movs	r3, #3
 8004218:	e004      	b.n	8004224 <HAL_GPIO_Init+0x228>
 800421a:	2302      	movs	r3, #2
 800421c:	e002      	b.n	8004224 <HAL_GPIO_Init+0x228>
 800421e:	2301      	movs	r3, #1
 8004220:	e000      	b.n	8004224 <HAL_GPIO_Init+0x228>
 8004222:	2300      	movs	r3, #0
 8004224:	69fa      	ldr	r2, [r7, #28]
 8004226:	f002 0203 	and.w	r2, r2, #3
 800422a:	0092      	lsls	r2, r2, #2
 800422c:	4093      	lsls	r3, r2
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	4313      	orrs	r3, r2
 8004232:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004234:	4935      	ldr	r1, [pc, #212]	; (800430c <HAL_GPIO_Init+0x310>)
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	089b      	lsrs	r3, r3, #2
 800423a:	3302      	adds	r3, #2
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004242:	4b3b      	ldr	r3, [pc, #236]	; (8004330 <HAL_GPIO_Init+0x334>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	43db      	mvns	r3, r3
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	4013      	ands	r3, r2
 8004250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d003      	beq.n	8004266 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	4313      	orrs	r3, r2
 8004264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004266:	4a32      	ldr	r2, [pc, #200]	; (8004330 <HAL_GPIO_Init+0x334>)
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800426c:	4b30      	ldr	r3, [pc, #192]	; (8004330 <HAL_GPIO_Init+0x334>)
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	43db      	mvns	r3, r3
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	4013      	ands	r3, r2
 800427a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d003      	beq.n	8004290 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	4313      	orrs	r3, r2
 800428e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004290:	4a27      	ldr	r2, [pc, #156]	; (8004330 <HAL_GPIO_Init+0x334>)
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004296:	4b26      	ldr	r3, [pc, #152]	; (8004330 <HAL_GPIO_Init+0x334>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	43db      	mvns	r3, r3
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	4013      	ands	r3, r2
 80042a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80042ba:	4a1d      	ldr	r2, [pc, #116]	; (8004330 <HAL_GPIO_Init+0x334>)
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042c0:	4b1b      	ldr	r3, [pc, #108]	; (8004330 <HAL_GPIO_Init+0x334>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	43db      	mvns	r3, r3
 80042ca:	69ba      	ldr	r2, [r7, #24]
 80042cc:	4013      	ands	r3, r2
 80042ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d003      	beq.n	80042e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042e4:	4a12      	ldr	r2, [pc, #72]	; (8004330 <HAL_GPIO_Init+0x334>)
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	3301      	adds	r3, #1
 80042ee:	61fb      	str	r3, [r7, #28]
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	2b0f      	cmp	r3, #15
 80042f4:	f67f ae90 	bls.w	8004018 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042f8:	bf00      	nop
 80042fa:	bf00      	nop
 80042fc:	3724      	adds	r7, #36	; 0x24
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	40023800 	.word	0x40023800
 800430c:	40013800 	.word	0x40013800
 8004310:	40020000 	.word	0x40020000
 8004314:	40020400 	.word	0x40020400
 8004318:	40020800 	.word	0x40020800
 800431c:	40020c00 	.word	0x40020c00
 8004320:	40021000 	.word	0x40021000
 8004324:	40021400 	.word	0x40021400
 8004328:	40021800 	.word	0x40021800
 800432c:	40021c00 	.word	0x40021c00
 8004330:	40013c00 	.word	0x40013c00

08004334 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	460b      	mov	r3, r1
 800433e:	807b      	strh	r3, [r7, #2]
 8004340:	4613      	mov	r3, r2
 8004342:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004344:	787b      	ldrb	r3, [r7, #1]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800434a:	887a      	ldrh	r2, [r7, #2]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004350:	e003      	b.n	800435a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004352:	887b      	ldrh	r3, [r7, #2]
 8004354:	041a      	lsls	r2, r3, #16
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	619a      	str	r2, [r3, #24]
}
 800435a:	bf00      	nop
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
	...

08004368 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e12b      	b.n	80045d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d106      	bne.n	8004394 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7ff fa2c 	bl	80037ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2224      	movs	r2, #36	; 0x24
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f022 0201 	bic.w	r2, r2, #1
 80043aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80043cc:	f001 fbfc 	bl	8005bc8 <HAL_RCC_GetPCLK1Freq>
 80043d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	4a81      	ldr	r2, [pc, #516]	; (80045dc <HAL_I2C_Init+0x274>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d807      	bhi.n	80043ec <HAL_I2C_Init+0x84>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	4a80      	ldr	r2, [pc, #512]	; (80045e0 <HAL_I2C_Init+0x278>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	bf94      	ite	ls
 80043e4:	2301      	movls	r3, #1
 80043e6:	2300      	movhi	r3, #0
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	e006      	b.n	80043fa <HAL_I2C_Init+0x92>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	4a7d      	ldr	r2, [pc, #500]	; (80045e4 <HAL_I2C_Init+0x27c>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	bf94      	ite	ls
 80043f4:	2301      	movls	r3, #1
 80043f6:	2300      	movhi	r3, #0
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e0e7      	b.n	80045d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	4a78      	ldr	r2, [pc, #480]	; (80045e8 <HAL_I2C_Init+0x280>)
 8004406:	fba2 2303 	umull	r2, r3, r2, r3
 800440a:	0c9b      	lsrs	r3, r3, #18
 800440c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68ba      	ldr	r2, [r7, #8]
 800441e:	430a      	orrs	r2, r1
 8004420:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6a1b      	ldr	r3, [r3, #32]
 8004428:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	4a6a      	ldr	r2, [pc, #424]	; (80045dc <HAL_I2C_Init+0x274>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d802      	bhi.n	800443c <HAL_I2C_Init+0xd4>
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	3301      	adds	r3, #1
 800443a:	e009      	b.n	8004450 <HAL_I2C_Init+0xe8>
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004442:	fb02 f303 	mul.w	r3, r2, r3
 8004446:	4a69      	ldr	r2, [pc, #420]	; (80045ec <HAL_I2C_Init+0x284>)
 8004448:	fba2 2303 	umull	r2, r3, r2, r3
 800444c:	099b      	lsrs	r3, r3, #6
 800444e:	3301      	adds	r3, #1
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	6812      	ldr	r2, [r2, #0]
 8004454:	430b      	orrs	r3, r1
 8004456:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	69db      	ldr	r3, [r3, #28]
 800445e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004462:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	495c      	ldr	r1, [pc, #368]	; (80045dc <HAL_I2C_Init+0x274>)
 800446c:	428b      	cmp	r3, r1
 800446e:	d819      	bhi.n	80044a4 <HAL_I2C_Init+0x13c>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	1e59      	subs	r1, r3, #1
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	fbb1 f3f3 	udiv	r3, r1, r3
 800447e:	1c59      	adds	r1, r3, #1
 8004480:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004484:	400b      	ands	r3, r1
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00a      	beq.n	80044a0 <HAL_I2C_Init+0x138>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	1e59      	subs	r1, r3, #1
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	005b      	lsls	r3, r3, #1
 8004494:	fbb1 f3f3 	udiv	r3, r1, r3
 8004498:	3301      	adds	r3, #1
 800449a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800449e:	e051      	b.n	8004544 <HAL_I2C_Init+0x1dc>
 80044a0:	2304      	movs	r3, #4
 80044a2:	e04f      	b.n	8004544 <HAL_I2C_Init+0x1dc>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d111      	bne.n	80044d0 <HAL_I2C_Init+0x168>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	1e58      	subs	r0, r3, #1
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6859      	ldr	r1, [r3, #4]
 80044b4:	460b      	mov	r3, r1
 80044b6:	005b      	lsls	r3, r3, #1
 80044b8:	440b      	add	r3, r1
 80044ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80044be:	3301      	adds	r3, #1
 80044c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	bf0c      	ite	eq
 80044c8:	2301      	moveq	r3, #1
 80044ca:	2300      	movne	r3, #0
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	e012      	b.n	80044f6 <HAL_I2C_Init+0x18e>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	1e58      	subs	r0, r3, #1
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6859      	ldr	r1, [r3, #4]
 80044d8:	460b      	mov	r3, r1
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	440b      	add	r3, r1
 80044de:	0099      	lsls	r1, r3, #2
 80044e0:	440b      	add	r3, r1
 80044e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80044e6:	3301      	adds	r3, #1
 80044e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	bf0c      	ite	eq
 80044f0:	2301      	moveq	r3, #1
 80044f2:	2300      	movne	r3, #0
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d001      	beq.n	80044fe <HAL_I2C_Init+0x196>
 80044fa:	2301      	movs	r3, #1
 80044fc:	e022      	b.n	8004544 <HAL_I2C_Init+0x1dc>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10e      	bne.n	8004524 <HAL_I2C_Init+0x1bc>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	1e58      	subs	r0, r3, #1
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6859      	ldr	r1, [r3, #4]
 800450e:	460b      	mov	r3, r1
 8004510:	005b      	lsls	r3, r3, #1
 8004512:	440b      	add	r3, r1
 8004514:	fbb0 f3f3 	udiv	r3, r0, r3
 8004518:	3301      	adds	r3, #1
 800451a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800451e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004522:	e00f      	b.n	8004544 <HAL_I2C_Init+0x1dc>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	1e58      	subs	r0, r3, #1
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6859      	ldr	r1, [r3, #4]
 800452c:	460b      	mov	r3, r1
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	440b      	add	r3, r1
 8004532:	0099      	lsls	r1, r3, #2
 8004534:	440b      	add	r3, r1
 8004536:	fbb0 f3f3 	udiv	r3, r0, r3
 800453a:	3301      	adds	r3, #1
 800453c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004540:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004544:	6879      	ldr	r1, [r7, #4]
 8004546:	6809      	ldr	r1, [r1, #0]
 8004548:	4313      	orrs	r3, r2
 800454a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	69da      	ldr	r2, [r3, #28]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	431a      	orrs	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	430a      	orrs	r2, r1
 8004566:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004572:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	6911      	ldr	r1, [r2, #16]
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	68d2      	ldr	r2, [r2, #12]
 800457e:	4311      	orrs	r1, r2
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	6812      	ldr	r2, [r2, #0]
 8004584:	430b      	orrs	r3, r1
 8004586:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	695a      	ldr	r2, [r3, #20]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	431a      	orrs	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	430a      	orrs	r2, r1
 80045a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f042 0201 	orr.w	r2, r2, #1
 80045b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2220      	movs	r2, #32
 80045be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	000186a0 	.word	0x000186a0
 80045e0:	001e847f 	.word	0x001e847f
 80045e4:	003d08ff 	.word	0x003d08ff
 80045e8:	431bde83 	.word	0x431bde83
 80045ec:	10624dd3 	.word	0x10624dd3

080045f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b088      	sub	sp, #32
 80045f4:	af02      	add	r7, sp, #8
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	4608      	mov	r0, r1
 80045fa:	4611      	mov	r1, r2
 80045fc:	461a      	mov	r2, r3
 80045fe:	4603      	mov	r3, r0
 8004600:	817b      	strh	r3, [r7, #10]
 8004602:	460b      	mov	r3, r1
 8004604:	813b      	strh	r3, [r7, #8]
 8004606:	4613      	mov	r3, r2
 8004608:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800460a:	f7ff fb23 	bl	8003c54 <HAL_GetTick>
 800460e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004616:	b2db      	uxtb	r3, r3
 8004618:	2b20      	cmp	r3, #32
 800461a:	f040 80d9 	bne.w	80047d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	9300      	str	r3, [sp, #0]
 8004622:	2319      	movs	r3, #25
 8004624:	2201      	movs	r2, #1
 8004626:	496d      	ldr	r1, [pc, #436]	; (80047dc <HAL_I2C_Mem_Write+0x1ec>)
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f000 fc7f 	bl	8004f2c <I2C_WaitOnFlagUntilTimeout>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d001      	beq.n	8004638 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004634:	2302      	movs	r3, #2
 8004636:	e0cc      	b.n	80047d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800463e:	2b01      	cmp	r3, #1
 8004640:	d101      	bne.n	8004646 <HAL_I2C_Mem_Write+0x56>
 8004642:	2302      	movs	r3, #2
 8004644:	e0c5      	b.n	80047d2 <HAL_I2C_Mem_Write+0x1e2>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	2b01      	cmp	r3, #1
 800465a:	d007      	beq.n	800466c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f042 0201 	orr.w	r2, r2, #1
 800466a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800467a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2221      	movs	r2, #33	; 0x21
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2240      	movs	r2, #64	; 0x40
 8004688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6a3a      	ldr	r2, [r7, #32]
 8004696:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800469c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	4a4d      	ldr	r2, [pc, #308]	; (80047e0 <HAL_I2C_Mem_Write+0x1f0>)
 80046ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046ae:	88f8      	ldrh	r0, [r7, #6]
 80046b0:	893a      	ldrh	r2, [r7, #8]
 80046b2:	8979      	ldrh	r1, [r7, #10]
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	9301      	str	r3, [sp, #4]
 80046b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ba:	9300      	str	r3, [sp, #0]
 80046bc:	4603      	mov	r3, r0
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f000 fab6 	bl	8004c30 <I2C_RequestMemoryWrite>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d052      	beq.n	8004770 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e081      	b.n	80047d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f000 fd00 	bl	80050d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00d      	beq.n	80046fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e2:	2b04      	cmp	r3, #4
 80046e4:	d107      	bne.n	80046f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e06b      	b.n	80047d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fe:	781a      	ldrb	r2, [r3, #0]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470a:	1c5a      	adds	r2, r3, #1
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004714:	3b01      	subs	r3, #1
 8004716:	b29a      	uxth	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004720:	b29b      	uxth	r3, r3
 8004722:	3b01      	subs	r3, #1
 8004724:	b29a      	uxth	r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	f003 0304 	and.w	r3, r3, #4
 8004734:	2b04      	cmp	r3, #4
 8004736:	d11b      	bne.n	8004770 <HAL_I2C_Mem_Write+0x180>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800473c:	2b00      	cmp	r3, #0
 800473e:	d017      	beq.n	8004770 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004744:	781a      	ldrb	r2, [r3, #0]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004750:	1c5a      	adds	r2, r3, #1
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800475a:	3b01      	subs	r3, #1
 800475c:	b29a      	uxth	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004766:	b29b      	uxth	r3, r3
 8004768:	3b01      	subs	r3, #1
 800476a:	b29a      	uxth	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1aa      	bne.n	80046ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004778:	697a      	ldr	r2, [r7, #20]
 800477a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f000 fcec 	bl	800515a <I2C_WaitOnBTFFlagUntilTimeout>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00d      	beq.n	80047a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478c:	2b04      	cmp	r3, #4
 800478e:	d107      	bne.n	80047a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800479e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e016      	b.n	80047d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2220      	movs	r2, #32
 80047b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80047cc:	2300      	movs	r3, #0
 80047ce:	e000      	b.n	80047d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80047d0:	2302      	movs	r3, #2
  }
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3718      	adds	r7, #24
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	00100002 	.word	0x00100002
 80047e0:	ffff0000 	.word	0xffff0000

080047e4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b08c      	sub	sp, #48	; 0x30
 80047e8:	af02      	add	r7, sp, #8
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	4608      	mov	r0, r1
 80047ee:	4611      	mov	r1, r2
 80047f0:	461a      	mov	r2, r3
 80047f2:	4603      	mov	r3, r0
 80047f4:	817b      	strh	r3, [r7, #10]
 80047f6:	460b      	mov	r3, r1
 80047f8:	813b      	strh	r3, [r7, #8]
 80047fa:	4613      	mov	r3, r2
 80047fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80047fe:	f7ff fa29 	bl	8003c54 <HAL_GetTick>
 8004802:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800480a:	b2db      	uxtb	r3, r3
 800480c:	2b20      	cmp	r3, #32
 800480e:	f040 8208 	bne.w	8004c22 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004814:	9300      	str	r3, [sp, #0]
 8004816:	2319      	movs	r3, #25
 8004818:	2201      	movs	r2, #1
 800481a:	497b      	ldr	r1, [pc, #492]	; (8004a08 <HAL_I2C_Mem_Read+0x224>)
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f000 fb85 	bl	8004f2c <I2C_WaitOnFlagUntilTimeout>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d001      	beq.n	800482c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004828:	2302      	movs	r3, #2
 800482a:	e1fb      	b.n	8004c24 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004832:	2b01      	cmp	r3, #1
 8004834:	d101      	bne.n	800483a <HAL_I2C_Mem_Read+0x56>
 8004836:	2302      	movs	r3, #2
 8004838:	e1f4      	b.n	8004c24 <HAL_I2C_Mem_Read+0x440>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0301 	and.w	r3, r3, #1
 800484c:	2b01      	cmp	r3, #1
 800484e:	d007      	beq.n	8004860 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f042 0201 	orr.w	r2, r2, #1
 800485e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800486e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2222      	movs	r2, #34	; 0x22
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2240      	movs	r2, #64	; 0x40
 800487c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800488a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004890:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004896:	b29a      	uxth	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	4a5b      	ldr	r2, [pc, #364]	; (8004a0c <HAL_I2C_Mem_Read+0x228>)
 80048a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80048a2:	88f8      	ldrh	r0, [r7, #6]
 80048a4:	893a      	ldrh	r2, [r7, #8]
 80048a6:	8979      	ldrh	r1, [r7, #10]
 80048a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048aa:	9301      	str	r3, [sp, #4]
 80048ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ae:	9300      	str	r3, [sp, #0]
 80048b0:	4603      	mov	r3, r0
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	f000 fa52 	bl	8004d5c <I2C_RequestMemoryRead>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d001      	beq.n	80048c2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e1b0      	b.n	8004c24 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d113      	bne.n	80048f2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048ca:	2300      	movs	r3, #0
 80048cc:	623b      	str	r3, [r7, #32]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	623b      	str	r3, [r7, #32]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	623b      	str	r3, [r7, #32]
 80048de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048ee:	601a      	str	r2, [r3, #0]
 80048f0:	e184      	b.n	8004bfc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d11b      	bne.n	8004932 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004908:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800490a:	2300      	movs	r3, #0
 800490c:	61fb      	str	r3, [r7, #28]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	695b      	ldr	r3, [r3, #20]
 8004914:	61fb      	str	r3, [r7, #28]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	61fb      	str	r3, [r7, #28]
 800491e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800492e:	601a      	str	r2, [r3, #0]
 8004930:	e164      	b.n	8004bfc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004936:	2b02      	cmp	r3, #2
 8004938:	d11b      	bne.n	8004972 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004948:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004958:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800495a:	2300      	movs	r3, #0
 800495c:	61bb      	str	r3, [r7, #24]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	61bb      	str	r3, [r7, #24]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	61bb      	str	r3, [r7, #24]
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	e144      	b.n	8004bfc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004972:	2300      	movs	r3, #0
 8004974:	617b      	str	r3, [r7, #20]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	695b      	ldr	r3, [r3, #20]
 800497c:	617b      	str	r3, [r7, #20]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	617b      	str	r3, [r7, #20]
 8004986:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004988:	e138      	b.n	8004bfc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800498e:	2b03      	cmp	r3, #3
 8004990:	f200 80f1 	bhi.w	8004b76 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004998:	2b01      	cmp	r3, #1
 800499a:	d123      	bne.n	80049e4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800499c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800499e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f000 fc1b 	bl	80051dc <I2C_WaitOnRXNEFlagUntilTimeout>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d001      	beq.n	80049b0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e139      	b.n	8004c24 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	691a      	ldr	r2, [r3, #16]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ba:	b2d2      	uxtb	r2, r2
 80049bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c2:	1c5a      	adds	r2, r3, #1
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049cc:	3b01      	subs	r3, #1
 80049ce:	b29a      	uxth	r2, r3
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d8:	b29b      	uxth	r3, r3
 80049da:	3b01      	subs	r3, #1
 80049dc:	b29a      	uxth	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049e2:	e10b      	b.n	8004bfc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d14e      	bne.n	8004a8a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ee:	9300      	str	r3, [sp, #0]
 80049f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f2:	2200      	movs	r2, #0
 80049f4:	4906      	ldr	r1, [pc, #24]	; (8004a10 <HAL_I2C_Mem_Read+0x22c>)
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f000 fa98 	bl	8004f2c <I2C_WaitOnFlagUntilTimeout>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d008      	beq.n	8004a14 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e10e      	b.n	8004c24 <HAL_I2C_Mem_Read+0x440>
 8004a06:	bf00      	nop
 8004a08:	00100002 	.word	0x00100002
 8004a0c:	ffff0000 	.word	0xffff0000
 8004a10:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	691a      	ldr	r2, [r3, #16]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2e:	b2d2      	uxtb	r2, r2
 8004a30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a36:	1c5a      	adds	r2, r3, #1
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a40:	3b01      	subs	r3, #1
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	691a      	ldr	r2, [r3, #16]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a60:	b2d2      	uxtb	r2, r2
 8004a62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a68:	1c5a      	adds	r2, r3, #1
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a72:	3b01      	subs	r3, #1
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	3b01      	subs	r3, #1
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a88:	e0b8      	b.n	8004bfc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8c:	9300      	str	r3, [sp, #0]
 8004a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a90:	2200      	movs	r2, #0
 8004a92:	4966      	ldr	r1, [pc, #408]	; (8004c2c <HAL_I2C_Mem_Read+0x448>)
 8004a94:	68f8      	ldr	r0, [r7, #12]
 8004a96:	f000 fa49 	bl	8004f2c <I2C_WaitOnFlagUntilTimeout>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d001      	beq.n	8004aa4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e0bf      	b.n	8004c24 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ab2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	691a      	ldr	r2, [r3, #16]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abe:	b2d2      	uxtb	r2, r2
 8004ac0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac6:	1c5a      	adds	r2, r3, #1
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	b29a      	uxth	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae8:	9300      	str	r3, [sp, #0]
 8004aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aec:	2200      	movs	r2, #0
 8004aee:	494f      	ldr	r1, [pc, #316]	; (8004c2c <HAL_I2C_Mem_Read+0x448>)
 8004af0:	68f8      	ldr	r0, [r7, #12]
 8004af2:	f000 fa1b 	bl	8004f2c <I2C_WaitOnFlagUntilTimeout>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d001      	beq.n	8004b00 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e091      	b.n	8004c24 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	691a      	ldr	r2, [r3, #16]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1a:	b2d2      	uxtb	r2, r2
 8004b1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b22:	1c5a      	adds	r2, r3, #1
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	b29a      	uxth	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	691a      	ldr	r2, [r3, #16]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4c:	b2d2      	uxtb	r2, r2
 8004b4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b54:	1c5a      	adds	r2, r3, #1
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b74:	e042      	b.n	8004bfc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f000 fb2e 	bl	80051dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d001      	beq.n	8004b8a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e04c      	b.n	8004c24 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	691a      	ldr	r2, [r3, #16]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b94:	b2d2      	uxtb	r2, r2
 8004b96:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9c:	1c5a      	adds	r2, r3, #1
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	f003 0304 	and.w	r3, r3, #4
 8004bc6:	2b04      	cmp	r3, #4
 8004bc8:	d118      	bne.n	8004bfc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	691a      	ldr	r2, [r3, #16]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd4:	b2d2      	uxtb	r2, r2
 8004bd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bdc:	1c5a      	adds	r2, r3, #1
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004be6:	3b01      	subs	r3, #1
 8004be8:	b29a      	uxth	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f47f aec2 	bne.w	800498a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2220      	movs	r2, #32
 8004c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	e000      	b.n	8004c24 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004c22:	2302      	movs	r3, #2
  }
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3728      	adds	r7, #40	; 0x28
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	00010004 	.word	0x00010004

08004c30 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b088      	sub	sp, #32
 8004c34:	af02      	add	r7, sp, #8
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	4608      	mov	r0, r1
 8004c3a:	4611      	mov	r1, r2
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	4603      	mov	r3, r0
 8004c40:	817b      	strh	r3, [r7, #10]
 8004c42:	460b      	mov	r3, r1
 8004c44:	813b      	strh	r3, [r7, #8]
 8004c46:	4613      	mov	r3, r2
 8004c48:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	6a3b      	ldr	r3, [r7, #32]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f000 f960 	bl	8004f2c <I2C_WaitOnFlagUntilTimeout>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00d      	beq.n	8004c8e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c80:	d103      	bne.n	8004c8a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c88:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e05f      	b.n	8004d4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c8e:	897b      	ldrh	r3, [r7, #10]
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	461a      	mov	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c9c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca0:	6a3a      	ldr	r2, [r7, #32]
 8004ca2:	492d      	ldr	r1, [pc, #180]	; (8004d58 <I2C_RequestMemoryWrite+0x128>)
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	f000 f998 	bl	8004fda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d001      	beq.n	8004cb4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e04c      	b.n	8004d4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	617b      	str	r3, [r7, #20]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	617b      	str	r3, [r7, #20]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	617b      	str	r3, [r7, #20]
 8004cc8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ccc:	6a39      	ldr	r1, [r7, #32]
 8004cce:	68f8      	ldr	r0, [r7, #12]
 8004cd0:	f000 fa02 	bl	80050d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00d      	beq.n	8004cf6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cde:	2b04      	cmp	r3, #4
 8004ce0:	d107      	bne.n	8004cf2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cf0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e02b      	b.n	8004d4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004cf6:	88fb      	ldrh	r3, [r7, #6]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d105      	bne.n	8004d08 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cfc:	893b      	ldrh	r3, [r7, #8]
 8004cfe:	b2da      	uxtb	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	611a      	str	r2, [r3, #16]
 8004d06:	e021      	b.n	8004d4c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004d08:	893b      	ldrh	r3, [r7, #8]
 8004d0a:	0a1b      	lsrs	r3, r3, #8
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	b2da      	uxtb	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d18:	6a39      	ldr	r1, [r7, #32]
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f000 f9dc 	bl	80050d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00d      	beq.n	8004d42 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2a:	2b04      	cmp	r3, #4
 8004d2c:	d107      	bne.n	8004d3e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d3c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e005      	b.n	8004d4e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d42:	893b      	ldrh	r3, [r7, #8]
 8004d44:	b2da      	uxtb	r2, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3718      	adds	r7, #24
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	00010002 	.word	0x00010002

08004d5c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b088      	sub	sp, #32
 8004d60:	af02      	add	r7, sp, #8
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	4608      	mov	r0, r1
 8004d66:	4611      	mov	r1, r2
 8004d68:	461a      	mov	r2, r3
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	817b      	strh	r3, [r7, #10]
 8004d6e:	460b      	mov	r3, r1
 8004d70:	813b      	strh	r3, [r7, #8]
 8004d72:	4613      	mov	r3, r2
 8004d74:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d84:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d98:	9300      	str	r3, [sp, #0]
 8004d9a:	6a3b      	ldr	r3, [r7, #32]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	f000 f8c2 	bl	8004f2c <I2C_WaitOnFlagUntilTimeout>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00d      	beq.n	8004dca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dbc:	d103      	bne.n	8004dc6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dc4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e0aa      	b.n	8004f20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004dca:	897b      	ldrh	r3, [r7, #10]
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	461a      	mov	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004dd8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ddc:	6a3a      	ldr	r2, [r7, #32]
 8004dde:	4952      	ldr	r1, [pc, #328]	; (8004f28 <I2C_RequestMemoryRead+0x1cc>)
 8004de0:	68f8      	ldr	r0, [r7, #12]
 8004de2:	f000 f8fa 	bl	8004fda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d001      	beq.n	8004df0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e097      	b.n	8004f20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004df0:	2300      	movs	r3, #0
 8004df2:	617b      	str	r3, [r7, #20]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	617b      	str	r3, [r7, #20]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	617b      	str	r3, [r7, #20]
 8004e04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e08:	6a39      	ldr	r1, [r7, #32]
 8004e0a:	68f8      	ldr	r0, [r7, #12]
 8004e0c:	f000 f964 	bl	80050d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00d      	beq.n	8004e32 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1a:	2b04      	cmp	r3, #4
 8004e1c:	d107      	bne.n	8004e2e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e076      	b.n	8004f20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e32:	88fb      	ldrh	r3, [r7, #6]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d105      	bne.n	8004e44 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e38:	893b      	ldrh	r3, [r7, #8]
 8004e3a:	b2da      	uxtb	r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	611a      	str	r2, [r3, #16]
 8004e42:	e021      	b.n	8004e88 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e44:	893b      	ldrh	r3, [r7, #8]
 8004e46:	0a1b      	lsrs	r3, r3, #8
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	b2da      	uxtb	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e54:	6a39      	ldr	r1, [r7, #32]
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	f000 f93e 	bl	80050d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00d      	beq.n	8004e7e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	2b04      	cmp	r3, #4
 8004e68:	d107      	bne.n	8004e7a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e050      	b.n	8004f20 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e7e:	893b      	ldrh	r3, [r7, #8]
 8004e80:	b2da      	uxtb	r2, r3
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e8a:	6a39      	ldr	r1, [r7, #32]
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f000 f923 	bl	80050d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d00d      	beq.n	8004eb4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9c:	2b04      	cmp	r3, #4
 8004e9e:	d107      	bne.n	8004eb0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e035      	b.n	8004f20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ec2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec6:	9300      	str	r3, [sp, #0]
 8004ec8:	6a3b      	ldr	r3, [r7, #32]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f000 f82b 	bl	8004f2c <I2C_WaitOnFlagUntilTimeout>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00d      	beq.n	8004ef8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ee6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eea:	d103      	bne.n	8004ef4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ef2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e013      	b.n	8004f20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004ef8:	897b      	ldrh	r3, [r7, #10]
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	f043 0301 	orr.w	r3, r3, #1
 8004f00:	b2da      	uxtb	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0a:	6a3a      	ldr	r2, [r7, #32]
 8004f0c:	4906      	ldr	r1, [pc, #24]	; (8004f28 <I2C_RequestMemoryRead+0x1cc>)
 8004f0e:	68f8      	ldr	r0, [r7, #12]
 8004f10:	f000 f863 	bl	8004fda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d001      	beq.n	8004f1e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e000      	b.n	8004f20 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3718      	adds	r7, #24
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	00010002 	.word	0x00010002

08004f2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	603b      	str	r3, [r7, #0]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f3c:	e025      	b.n	8004f8a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f44:	d021      	beq.n	8004f8a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f46:	f7fe fe85 	bl	8003c54 <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	683a      	ldr	r2, [r7, #0]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d302      	bcc.n	8004f5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d116      	bne.n	8004f8a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2220      	movs	r2, #32
 8004f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f76:	f043 0220 	orr.w	r2, r3, #32
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e023      	b.n	8004fd2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	0c1b      	lsrs	r3, r3, #16
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d10d      	bne.n	8004fb0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	43da      	mvns	r2, r3
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	bf0c      	ite	eq
 8004fa6:	2301      	moveq	r3, #1
 8004fa8:	2300      	movne	r3, #0
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	461a      	mov	r2, r3
 8004fae:	e00c      	b.n	8004fca <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	43da      	mvns	r2, r3
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	4013      	ands	r3, r2
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	bf0c      	ite	eq
 8004fc2:	2301      	moveq	r3, #1
 8004fc4:	2300      	movne	r3, #0
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	461a      	mov	r2, r3
 8004fca:	79fb      	ldrb	r3, [r7, #7]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d0b6      	beq.n	8004f3e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b084      	sub	sp, #16
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	60f8      	str	r0, [r7, #12]
 8004fe2:	60b9      	str	r1, [r7, #8]
 8004fe4:	607a      	str	r2, [r7, #4]
 8004fe6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004fe8:	e051      	b.n	800508e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	695b      	ldr	r3, [r3, #20]
 8004ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ff8:	d123      	bne.n	8005042 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005008:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005012:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2220      	movs	r2, #32
 800501e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502e:	f043 0204 	orr.w	r2, r3, #4
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e046      	b.n	80050d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005048:	d021      	beq.n	800508e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800504a:	f7fe fe03 	bl	8003c54 <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	429a      	cmp	r2, r3
 8005058:	d302      	bcc.n	8005060 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d116      	bne.n	800508e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2200      	movs	r2, #0
 8005064:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2220      	movs	r2, #32
 800506a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507a:	f043 0220 	orr.w	r2, r3, #32
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e020      	b.n	80050d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	0c1b      	lsrs	r3, r3, #16
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b01      	cmp	r3, #1
 8005096:	d10c      	bne.n	80050b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	43da      	mvns	r2, r3
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	4013      	ands	r3, r2
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	bf14      	ite	ne
 80050aa:	2301      	movne	r3, #1
 80050ac:	2300      	moveq	r3, #0
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	e00b      	b.n	80050ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	43da      	mvns	r2, r3
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	4013      	ands	r3, r2
 80050be:	b29b      	uxth	r3, r3
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	bf14      	ite	ne
 80050c4:	2301      	movne	r3, #1
 80050c6:	2300      	moveq	r3, #0
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d18d      	bne.n	8004fea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3710      	adds	r7, #16
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050e4:	e02d      	b.n	8005142 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f000 f8ce 	bl	8005288 <I2C_IsAcknowledgeFailed>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d001      	beq.n	80050f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e02d      	b.n	8005152 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050fc:	d021      	beq.n	8005142 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050fe:	f7fe fda9 	bl	8003c54 <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	429a      	cmp	r2, r3
 800510c:	d302      	bcc.n	8005114 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d116      	bne.n	8005142 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2200      	movs	r2, #0
 8005118:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2220      	movs	r2, #32
 800511e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512e:	f043 0220 	orr.w	r2, r3, #32
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e007      	b.n	8005152 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	695b      	ldr	r3, [r3, #20]
 8005148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800514c:	2b80      	cmp	r3, #128	; 0x80
 800514e:	d1ca      	bne.n	80050e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}

0800515a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800515a:	b580      	push	{r7, lr}
 800515c:	b084      	sub	sp, #16
 800515e:	af00      	add	r7, sp, #0
 8005160:	60f8      	str	r0, [r7, #12]
 8005162:	60b9      	str	r1, [r7, #8]
 8005164:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005166:	e02d      	b.n	80051c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005168:	68f8      	ldr	r0, [r7, #12]
 800516a:	f000 f88d 	bl	8005288 <I2C_IsAcknowledgeFailed>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d001      	beq.n	8005178 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e02d      	b.n	80051d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800517e:	d021      	beq.n	80051c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005180:	f7fe fd68 	bl	8003c54 <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	429a      	cmp	r2, r3
 800518e:	d302      	bcc.n	8005196 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d116      	bne.n	80051c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2220      	movs	r2, #32
 80051a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b0:	f043 0220 	orr.w	r2, r3, #32
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e007      	b.n	80051d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	f003 0304 	and.w	r3, r3, #4
 80051ce:	2b04      	cmp	r3, #4
 80051d0:	d1ca      	bne.n	8005168 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051e8:	e042      	b.n	8005270 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	695b      	ldr	r3, [r3, #20]
 80051f0:	f003 0310 	and.w	r3, r3, #16
 80051f4:	2b10      	cmp	r3, #16
 80051f6:	d119      	bne.n	800522c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f06f 0210 	mvn.w	r2, #16
 8005200:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2200      	movs	r2, #0
 8005206:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2220      	movs	r2, #32
 800520c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2200      	movs	r2, #0
 8005214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e029      	b.n	8005280 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800522c:	f7fe fd12 	bl	8003c54 <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	68ba      	ldr	r2, [r7, #8]
 8005238:	429a      	cmp	r2, r3
 800523a:	d302      	bcc.n	8005242 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d116      	bne.n	8005270 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2220      	movs	r2, #32
 800524c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525c:	f043 0220 	orr.w	r2, r3, #32
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e007      	b.n	8005280 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800527a:	2b40      	cmp	r3, #64	; 0x40
 800527c:	d1b5      	bne.n	80051ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800529a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800529e:	d11b      	bne.n	80052d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80052a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2220      	movs	r2, #32
 80052b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c4:	f043 0204 	orr.w	r2, r3, #4
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e000      	b.n	80052da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	370c      	adds	r7, #12
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
	...

080052e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b086      	sub	sp, #24
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d101      	bne.n	80052fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e267      	b.n	80057ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0301 	and.w	r3, r3, #1
 8005302:	2b00      	cmp	r3, #0
 8005304:	d075      	beq.n	80053f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005306:	4b88      	ldr	r3, [pc, #544]	; (8005528 <HAL_RCC_OscConfig+0x240>)
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f003 030c 	and.w	r3, r3, #12
 800530e:	2b04      	cmp	r3, #4
 8005310:	d00c      	beq.n	800532c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005312:	4b85      	ldr	r3, [pc, #532]	; (8005528 <HAL_RCC_OscConfig+0x240>)
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800531a:	2b08      	cmp	r3, #8
 800531c:	d112      	bne.n	8005344 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800531e:	4b82      	ldr	r3, [pc, #520]	; (8005528 <HAL_RCC_OscConfig+0x240>)
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005326:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800532a:	d10b      	bne.n	8005344 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800532c:	4b7e      	ldr	r3, [pc, #504]	; (8005528 <HAL_RCC_OscConfig+0x240>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d05b      	beq.n	80053f0 <HAL_RCC_OscConfig+0x108>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d157      	bne.n	80053f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e242      	b.n	80057ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800534c:	d106      	bne.n	800535c <HAL_RCC_OscConfig+0x74>
 800534e:	4b76      	ldr	r3, [pc, #472]	; (8005528 <HAL_RCC_OscConfig+0x240>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a75      	ldr	r2, [pc, #468]	; (8005528 <HAL_RCC_OscConfig+0x240>)
 8005354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005358:	6013      	str	r3, [r2, #0]
 800535a:	e01d      	b.n	8005398 <HAL_RCC_OscConfig+0xb0>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005364:	d10c      	bne.n	8005380 <HAL_RCC_OscConfig+0x98>
 8005366:	4b70      	ldr	r3, [pc, #448]	; (8005528 <HAL_RCC_OscConfig+0x240>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a6f      	ldr	r2, [pc, #444]	; (8005528 <HAL_RCC_OscConfig+0x240>)
 800536c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005370:	6013      	str	r3, [r2, #0]
 8005372:	4b6d      	ldr	r3, [pc, #436]	; (8005528 <HAL_RCC_OscConfig+0x240>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a6c      	ldr	r2, [pc, #432]	; (8005528 <HAL_RCC_OscConfig+0x240>)
 8005378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800537c:	6013      	str	r3, [r2, #0]
 800537e:	e00b      	b.n	8005398 <HAL_RCC_OscConfig+0xb0>
 8005380:	4b69      	ldr	r3, [pc, #420]	; (8005528 <HAL_RCC_OscConfig+0x240>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a68      	ldr	r2, [pc, #416]	; (8005528 <HAL_RCC_OscConfig+0x240>)
 8005386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800538a:	6013      	str	r3, [r2, #0]
 800538c:	4b66      	ldr	r3, [pc, #408]	; (8005528 <HAL_RCC_OscConfig+0x240>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a65      	ldr	r2, [pc, #404]	; (8005528 <HAL_RCC_OscConfig+0x240>)
 8005392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005396:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d013      	beq.n	80053c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053a0:	f7fe fc58 	bl	8003c54 <HAL_GetTick>
 80053a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053a6:	e008      	b.n	80053ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053a8:	f7fe fc54 	bl	8003c54 <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	2b64      	cmp	r3, #100	; 0x64
 80053b4:	d901      	bls.n	80053ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e207      	b.n	80057ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ba:	4b5b      	ldr	r3, [pc, #364]	; (8005528 <HAL_RCC_OscConfig+0x240>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d0f0      	beq.n	80053a8 <HAL_RCC_OscConfig+0xc0>
 80053c6:	e014      	b.n	80053f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053c8:	f7fe fc44 	bl	8003c54 <HAL_GetTick>
 80053cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053ce:	e008      	b.n	80053e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053d0:	f7fe fc40 	bl	8003c54 <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	2b64      	cmp	r3, #100	; 0x64
 80053dc:	d901      	bls.n	80053e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e1f3      	b.n	80057ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053e2:	4b51      	ldr	r3, [pc, #324]	; (8005528 <HAL_RCC_OscConfig+0x240>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1f0      	bne.n	80053d0 <HAL_RCC_OscConfig+0xe8>
 80053ee:	e000      	b.n	80053f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0302 	and.w	r3, r3, #2
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d063      	beq.n	80054c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053fe:	4b4a      	ldr	r3, [pc, #296]	; (8005528 <HAL_RCC_OscConfig+0x240>)
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f003 030c 	and.w	r3, r3, #12
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00b      	beq.n	8005422 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800540a:	4b47      	ldr	r3, [pc, #284]	; (8005528 <HAL_RCC_OscConfig+0x240>)
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005412:	2b08      	cmp	r3, #8
 8005414:	d11c      	bne.n	8005450 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005416:	4b44      	ldr	r3, [pc, #272]	; (8005528 <HAL_RCC_OscConfig+0x240>)
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d116      	bne.n	8005450 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005422:	4b41      	ldr	r3, [pc, #260]	; (8005528 <HAL_RCC_OscConfig+0x240>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0302 	and.w	r3, r3, #2
 800542a:	2b00      	cmp	r3, #0
 800542c:	d005      	beq.n	800543a <HAL_RCC_OscConfig+0x152>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d001      	beq.n	800543a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e1c7      	b.n	80057ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800543a:	4b3b      	ldr	r3, [pc, #236]	; (8005528 <HAL_RCC_OscConfig+0x240>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	00db      	lsls	r3, r3, #3
 8005448:	4937      	ldr	r1, [pc, #220]	; (8005528 <HAL_RCC_OscConfig+0x240>)
 800544a:	4313      	orrs	r3, r2
 800544c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800544e:	e03a      	b.n	80054c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d020      	beq.n	800549a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005458:	4b34      	ldr	r3, [pc, #208]	; (800552c <HAL_RCC_OscConfig+0x244>)
 800545a:	2201      	movs	r2, #1
 800545c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800545e:	f7fe fbf9 	bl	8003c54 <HAL_GetTick>
 8005462:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005464:	e008      	b.n	8005478 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005466:	f7fe fbf5 	bl	8003c54 <HAL_GetTick>
 800546a:	4602      	mov	r2, r0
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	2b02      	cmp	r3, #2
 8005472:	d901      	bls.n	8005478 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e1a8      	b.n	80057ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005478:	4b2b      	ldr	r3, [pc, #172]	; (8005528 <HAL_RCC_OscConfig+0x240>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0302 	and.w	r3, r3, #2
 8005480:	2b00      	cmp	r3, #0
 8005482:	d0f0      	beq.n	8005466 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005484:	4b28      	ldr	r3, [pc, #160]	; (8005528 <HAL_RCC_OscConfig+0x240>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	00db      	lsls	r3, r3, #3
 8005492:	4925      	ldr	r1, [pc, #148]	; (8005528 <HAL_RCC_OscConfig+0x240>)
 8005494:	4313      	orrs	r3, r2
 8005496:	600b      	str	r3, [r1, #0]
 8005498:	e015      	b.n	80054c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800549a:	4b24      	ldr	r3, [pc, #144]	; (800552c <HAL_RCC_OscConfig+0x244>)
 800549c:	2200      	movs	r2, #0
 800549e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a0:	f7fe fbd8 	bl	8003c54 <HAL_GetTick>
 80054a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054a6:	e008      	b.n	80054ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054a8:	f7fe fbd4 	bl	8003c54 <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d901      	bls.n	80054ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e187      	b.n	80057ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054ba:	4b1b      	ldr	r3, [pc, #108]	; (8005528 <HAL_RCC_OscConfig+0x240>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0302 	and.w	r3, r3, #2
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1f0      	bne.n	80054a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0308 	and.w	r3, r3, #8
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d036      	beq.n	8005540 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d016      	beq.n	8005508 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054da:	4b15      	ldr	r3, [pc, #84]	; (8005530 <HAL_RCC_OscConfig+0x248>)
 80054dc:	2201      	movs	r2, #1
 80054de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054e0:	f7fe fbb8 	bl	8003c54 <HAL_GetTick>
 80054e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054e6:	e008      	b.n	80054fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054e8:	f7fe fbb4 	bl	8003c54 <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d901      	bls.n	80054fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e167      	b.n	80057ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054fa:	4b0b      	ldr	r3, [pc, #44]	; (8005528 <HAL_RCC_OscConfig+0x240>)
 80054fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d0f0      	beq.n	80054e8 <HAL_RCC_OscConfig+0x200>
 8005506:	e01b      	b.n	8005540 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005508:	4b09      	ldr	r3, [pc, #36]	; (8005530 <HAL_RCC_OscConfig+0x248>)
 800550a:	2200      	movs	r2, #0
 800550c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800550e:	f7fe fba1 	bl	8003c54 <HAL_GetTick>
 8005512:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005514:	e00e      	b.n	8005534 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005516:	f7fe fb9d 	bl	8003c54 <HAL_GetTick>
 800551a:	4602      	mov	r2, r0
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	2b02      	cmp	r3, #2
 8005522:	d907      	bls.n	8005534 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e150      	b.n	80057ca <HAL_RCC_OscConfig+0x4e2>
 8005528:	40023800 	.word	0x40023800
 800552c:	42470000 	.word	0x42470000
 8005530:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005534:	4b88      	ldr	r3, [pc, #544]	; (8005758 <HAL_RCC_OscConfig+0x470>)
 8005536:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005538:	f003 0302 	and.w	r3, r3, #2
 800553c:	2b00      	cmp	r3, #0
 800553e:	d1ea      	bne.n	8005516 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0304 	and.w	r3, r3, #4
 8005548:	2b00      	cmp	r3, #0
 800554a:	f000 8097 	beq.w	800567c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800554e:	2300      	movs	r3, #0
 8005550:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005552:	4b81      	ldr	r3, [pc, #516]	; (8005758 <HAL_RCC_OscConfig+0x470>)
 8005554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d10f      	bne.n	800557e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800555e:	2300      	movs	r3, #0
 8005560:	60bb      	str	r3, [r7, #8]
 8005562:	4b7d      	ldr	r3, [pc, #500]	; (8005758 <HAL_RCC_OscConfig+0x470>)
 8005564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005566:	4a7c      	ldr	r2, [pc, #496]	; (8005758 <HAL_RCC_OscConfig+0x470>)
 8005568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800556c:	6413      	str	r3, [r2, #64]	; 0x40
 800556e:	4b7a      	ldr	r3, [pc, #488]	; (8005758 <HAL_RCC_OscConfig+0x470>)
 8005570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005576:	60bb      	str	r3, [r7, #8]
 8005578:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800557a:	2301      	movs	r3, #1
 800557c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800557e:	4b77      	ldr	r3, [pc, #476]	; (800575c <HAL_RCC_OscConfig+0x474>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005586:	2b00      	cmp	r3, #0
 8005588:	d118      	bne.n	80055bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800558a:	4b74      	ldr	r3, [pc, #464]	; (800575c <HAL_RCC_OscConfig+0x474>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a73      	ldr	r2, [pc, #460]	; (800575c <HAL_RCC_OscConfig+0x474>)
 8005590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005594:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005596:	f7fe fb5d 	bl	8003c54 <HAL_GetTick>
 800559a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800559c:	e008      	b.n	80055b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800559e:	f7fe fb59 	bl	8003c54 <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d901      	bls.n	80055b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	e10c      	b.n	80057ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055b0:	4b6a      	ldr	r3, [pc, #424]	; (800575c <HAL_RCC_OscConfig+0x474>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d0f0      	beq.n	800559e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d106      	bne.n	80055d2 <HAL_RCC_OscConfig+0x2ea>
 80055c4:	4b64      	ldr	r3, [pc, #400]	; (8005758 <HAL_RCC_OscConfig+0x470>)
 80055c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c8:	4a63      	ldr	r2, [pc, #396]	; (8005758 <HAL_RCC_OscConfig+0x470>)
 80055ca:	f043 0301 	orr.w	r3, r3, #1
 80055ce:	6713      	str	r3, [r2, #112]	; 0x70
 80055d0:	e01c      	b.n	800560c <HAL_RCC_OscConfig+0x324>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	2b05      	cmp	r3, #5
 80055d8:	d10c      	bne.n	80055f4 <HAL_RCC_OscConfig+0x30c>
 80055da:	4b5f      	ldr	r3, [pc, #380]	; (8005758 <HAL_RCC_OscConfig+0x470>)
 80055dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055de:	4a5e      	ldr	r2, [pc, #376]	; (8005758 <HAL_RCC_OscConfig+0x470>)
 80055e0:	f043 0304 	orr.w	r3, r3, #4
 80055e4:	6713      	str	r3, [r2, #112]	; 0x70
 80055e6:	4b5c      	ldr	r3, [pc, #368]	; (8005758 <HAL_RCC_OscConfig+0x470>)
 80055e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ea:	4a5b      	ldr	r2, [pc, #364]	; (8005758 <HAL_RCC_OscConfig+0x470>)
 80055ec:	f043 0301 	orr.w	r3, r3, #1
 80055f0:	6713      	str	r3, [r2, #112]	; 0x70
 80055f2:	e00b      	b.n	800560c <HAL_RCC_OscConfig+0x324>
 80055f4:	4b58      	ldr	r3, [pc, #352]	; (8005758 <HAL_RCC_OscConfig+0x470>)
 80055f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055f8:	4a57      	ldr	r2, [pc, #348]	; (8005758 <HAL_RCC_OscConfig+0x470>)
 80055fa:	f023 0301 	bic.w	r3, r3, #1
 80055fe:	6713      	str	r3, [r2, #112]	; 0x70
 8005600:	4b55      	ldr	r3, [pc, #340]	; (8005758 <HAL_RCC_OscConfig+0x470>)
 8005602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005604:	4a54      	ldr	r2, [pc, #336]	; (8005758 <HAL_RCC_OscConfig+0x470>)
 8005606:	f023 0304 	bic.w	r3, r3, #4
 800560a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d015      	beq.n	8005640 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005614:	f7fe fb1e 	bl	8003c54 <HAL_GetTick>
 8005618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800561a:	e00a      	b.n	8005632 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800561c:	f7fe fb1a 	bl	8003c54 <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	f241 3288 	movw	r2, #5000	; 0x1388
 800562a:	4293      	cmp	r3, r2
 800562c:	d901      	bls.n	8005632 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e0cb      	b.n	80057ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005632:	4b49      	ldr	r3, [pc, #292]	; (8005758 <HAL_RCC_OscConfig+0x470>)
 8005634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005636:	f003 0302 	and.w	r3, r3, #2
 800563a:	2b00      	cmp	r3, #0
 800563c:	d0ee      	beq.n	800561c <HAL_RCC_OscConfig+0x334>
 800563e:	e014      	b.n	800566a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005640:	f7fe fb08 	bl	8003c54 <HAL_GetTick>
 8005644:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005646:	e00a      	b.n	800565e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005648:	f7fe fb04 	bl	8003c54 <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	f241 3288 	movw	r2, #5000	; 0x1388
 8005656:	4293      	cmp	r3, r2
 8005658:	d901      	bls.n	800565e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e0b5      	b.n	80057ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800565e:	4b3e      	ldr	r3, [pc, #248]	; (8005758 <HAL_RCC_OscConfig+0x470>)
 8005660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005662:	f003 0302 	and.w	r3, r3, #2
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1ee      	bne.n	8005648 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800566a:	7dfb      	ldrb	r3, [r7, #23]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d105      	bne.n	800567c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005670:	4b39      	ldr	r3, [pc, #228]	; (8005758 <HAL_RCC_OscConfig+0x470>)
 8005672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005674:	4a38      	ldr	r2, [pc, #224]	; (8005758 <HAL_RCC_OscConfig+0x470>)
 8005676:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800567a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	2b00      	cmp	r3, #0
 8005682:	f000 80a1 	beq.w	80057c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005686:	4b34      	ldr	r3, [pc, #208]	; (8005758 <HAL_RCC_OscConfig+0x470>)
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f003 030c 	and.w	r3, r3, #12
 800568e:	2b08      	cmp	r3, #8
 8005690:	d05c      	beq.n	800574c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	2b02      	cmp	r3, #2
 8005698:	d141      	bne.n	800571e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800569a:	4b31      	ldr	r3, [pc, #196]	; (8005760 <HAL_RCC_OscConfig+0x478>)
 800569c:	2200      	movs	r2, #0
 800569e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056a0:	f7fe fad8 	bl	8003c54 <HAL_GetTick>
 80056a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056a6:	e008      	b.n	80056ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056a8:	f7fe fad4 	bl	8003c54 <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d901      	bls.n	80056ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e087      	b.n	80057ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056ba:	4b27      	ldr	r3, [pc, #156]	; (8005758 <HAL_RCC_OscConfig+0x470>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1f0      	bne.n	80056a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	69da      	ldr	r2, [r3, #28]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a1b      	ldr	r3, [r3, #32]
 80056ce:	431a      	orrs	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d4:	019b      	lsls	r3, r3, #6
 80056d6:	431a      	orrs	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056dc:	085b      	lsrs	r3, r3, #1
 80056de:	3b01      	subs	r3, #1
 80056e0:	041b      	lsls	r3, r3, #16
 80056e2:	431a      	orrs	r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e8:	061b      	lsls	r3, r3, #24
 80056ea:	491b      	ldr	r1, [pc, #108]	; (8005758 <HAL_RCC_OscConfig+0x470>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056f0:	4b1b      	ldr	r3, [pc, #108]	; (8005760 <HAL_RCC_OscConfig+0x478>)
 80056f2:	2201      	movs	r2, #1
 80056f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056f6:	f7fe faad 	bl	8003c54 <HAL_GetTick>
 80056fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056fc:	e008      	b.n	8005710 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056fe:	f7fe faa9 	bl	8003c54 <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	2b02      	cmp	r3, #2
 800570a:	d901      	bls.n	8005710 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e05c      	b.n	80057ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005710:	4b11      	ldr	r3, [pc, #68]	; (8005758 <HAL_RCC_OscConfig+0x470>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d0f0      	beq.n	80056fe <HAL_RCC_OscConfig+0x416>
 800571c:	e054      	b.n	80057c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800571e:	4b10      	ldr	r3, [pc, #64]	; (8005760 <HAL_RCC_OscConfig+0x478>)
 8005720:	2200      	movs	r2, #0
 8005722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005724:	f7fe fa96 	bl	8003c54 <HAL_GetTick>
 8005728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800572a:	e008      	b.n	800573e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800572c:	f7fe fa92 	bl	8003c54 <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	2b02      	cmp	r3, #2
 8005738:	d901      	bls.n	800573e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e045      	b.n	80057ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800573e:	4b06      	ldr	r3, [pc, #24]	; (8005758 <HAL_RCC_OscConfig+0x470>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1f0      	bne.n	800572c <HAL_RCC_OscConfig+0x444>
 800574a:	e03d      	b.n	80057c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	699b      	ldr	r3, [r3, #24]
 8005750:	2b01      	cmp	r3, #1
 8005752:	d107      	bne.n	8005764 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e038      	b.n	80057ca <HAL_RCC_OscConfig+0x4e2>
 8005758:	40023800 	.word	0x40023800
 800575c:	40007000 	.word	0x40007000
 8005760:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005764:	4b1b      	ldr	r3, [pc, #108]	; (80057d4 <HAL_RCC_OscConfig+0x4ec>)
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	699b      	ldr	r3, [r3, #24]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d028      	beq.n	80057c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800577c:	429a      	cmp	r2, r3
 800577e:	d121      	bne.n	80057c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800578a:	429a      	cmp	r2, r3
 800578c:	d11a      	bne.n	80057c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005794:	4013      	ands	r3, r2
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800579a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800579c:	4293      	cmp	r3, r2
 800579e:	d111      	bne.n	80057c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057aa:	085b      	lsrs	r3, r3, #1
 80057ac:	3b01      	subs	r3, #1
 80057ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d107      	bne.n	80057c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d001      	beq.n	80057c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e000      	b.n	80057ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3718      	adds	r7, #24
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	40023800 	.word	0x40023800

080057d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d101      	bne.n	80057ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e0cc      	b.n	8005986 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80057ec:	4b68      	ldr	r3, [pc, #416]	; (8005990 <HAL_RCC_ClockConfig+0x1b8>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0307 	and.w	r3, r3, #7
 80057f4:	683a      	ldr	r2, [r7, #0]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d90c      	bls.n	8005814 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057fa:	4b65      	ldr	r3, [pc, #404]	; (8005990 <HAL_RCC_ClockConfig+0x1b8>)
 80057fc:	683a      	ldr	r2, [r7, #0]
 80057fe:	b2d2      	uxtb	r2, r2
 8005800:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005802:	4b63      	ldr	r3, [pc, #396]	; (8005990 <HAL_RCC_ClockConfig+0x1b8>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0307 	and.w	r3, r3, #7
 800580a:	683a      	ldr	r2, [r7, #0]
 800580c:	429a      	cmp	r2, r3
 800580e:	d001      	beq.n	8005814 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e0b8      	b.n	8005986 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0302 	and.w	r3, r3, #2
 800581c:	2b00      	cmp	r3, #0
 800581e:	d020      	beq.n	8005862 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0304 	and.w	r3, r3, #4
 8005828:	2b00      	cmp	r3, #0
 800582a:	d005      	beq.n	8005838 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800582c:	4b59      	ldr	r3, [pc, #356]	; (8005994 <HAL_RCC_ClockConfig+0x1bc>)
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	4a58      	ldr	r2, [pc, #352]	; (8005994 <HAL_RCC_ClockConfig+0x1bc>)
 8005832:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005836:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0308 	and.w	r3, r3, #8
 8005840:	2b00      	cmp	r3, #0
 8005842:	d005      	beq.n	8005850 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005844:	4b53      	ldr	r3, [pc, #332]	; (8005994 <HAL_RCC_ClockConfig+0x1bc>)
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	4a52      	ldr	r2, [pc, #328]	; (8005994 <HAL_RCC_ClockConfig+0x1bc>)
 800584a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800584e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005850:	4b50      	ldr	r3, [pc, #320]	; (8005994 <HAL_RCC_ClockConfig+0x1bc>)
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	494d      	ldr	r1, [pc, #308]	; (8005994 <HAL_RCC_ClockConfig+0x1bc>)
 800585e:	4313      	orrs	r3, r2
 8005860:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0301 	and.w	r3, r3, #1
 800586a:	2b00      	cmp	r3, #0
 800586c:	d044      	beq.n	80058f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	2b01      	cmp	r3, #1
 8005874:	d107      	bne.n	8005886 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005876:	4b47      	ldr	r3, [pc, #284]	; (8005994 <HAL_RCC_ClockConfig+0x1bc>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d119      	bne.n	80058b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e07f      	b.n	8005986 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	2b02      	cmp	r3, #2
 800588c:	d003      	beq.n	8005896 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005892:	2b03      	cmp	r3, #3
 8005894:	d107      	bne.n	80058a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005896:	4b3f      	ldr	r3, [pc, #252]	; (8005994 <HAL_RCC_ClockConfig+0x1bc>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d109      	bne.n	80058b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e06f      	b.n	8005986 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058a6:	4b3b      	ldr	r3, [pc, #236]	; (8005994 <HAL_RCC_ClockConfig+0x1bc>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0302 	and.w	r3, r3, #2
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d101      	bne.n	80058b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e067      	b.n	8005986 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058b6:	4b37      	ldr	r3, [pc, #220]	; (8005994 <HAL_RCC_ClockConfig+0x1bc>)
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f023 0203 	bic.w	r2, r3, #3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	4934      	ldr	r1, [pc, #208]	; (8005994 <HAL_RCC_ClockConfig+0x1bc>)
 80058c4:	4313      	orrs	r3, r2
 80058c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058c8:	f7fe f9c4 	bl	8003c54 <HAL_GetTick>
 80058cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058ce:	e00a      	b.n	80058e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058d0:	f7fe f9c0 	bl	8003c54 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	f241 3288 	movw	r2, #5000	; 0x1388
 80058de:	4293      	cmp	r3, r2
 80058e0:	d901      	bls.n	80058e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e04f      	b.n	8005986 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058e6:	4b2b      	ldr	r3, [pc, #172]	; (8005994 <HAL_RCC_ClockConfig+0x1bc>)
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f003 020c 	and.w	r2, r3, #12
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d1eb      	bne.n	80058d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80058f8:	4b25      	ldr	r3, [pc, #148]	; (8005990 <HAL_RCC_ClockConfig+0x1b8>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0307 	and.w	r3, r3, #7
 8005900:	683a      	ldr	r2, [r7, #0]
 8005902:	429a      	cmp	r2, r3
 8005904:	d20c      	bcs.n	8005920 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005906:	4b22      	ldr	r3, [pc, #136]	; (8005990 <HAL_RCC_ClockConfig+0x1b8>)
 8005908:	683a      	ldr	r2, [r7, #0]
 800590a:	b2d2      	uxtb	r2, r2
 800590c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800590e:	4b20      	ldr	r3, [pc, #128]	; (8005990 <HAL_RCC_ClockConfig+0x1b8>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 0307 	and.w	r3, r3, #7
 8005916:	683a      	ldr	r2, [r7, #0]
 8005918:	429a      	cmp	r2, r3
 800591a:	d001      	beq.n	8005920 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e032      	b.n	8005986 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0304 	and.w	r3, r3, #4
 8005928:	2b00      	cmp	r3, #0
 800592a:	d008      	beq.n	800593e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800592c:	4b19      	ldr	r3, [pc, #100]	; (8005994 <HAL_RCC_ClockConfig+0x1bc>)
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	4916      	ldr	r1, [pc, #88]	; (8005994 <HAL_RCC_ClockConfig+0x1bc>)
 800593a:	4313      	orrs	r3, r2
 800593c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0308 	and.w	r3, r3, #8
 8005946:	2b00      	cmp	r3, #0
 8005948:	d009      	beq.n	800595e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800594a:	4b12      	ldr	r3, [pc, #72]	; (8005994 <HAL_RCC_ClockConfig+0x1bc>)
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	00db      	lsls	r3, r3, #3
 8005958:	490e      	ldr	r1, [pc, #56]	; (8005994 <HAL_RCC_ClockConfig+0x1bc>)
 800595a:	4313      	orrs	r3, r2
 800595c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800595e:	f000 f821 	bl	80059a4 <HAL_RCC_GetSysClockFreq>
 8005962:	4602      	mov	r2, r0
 8005964:	4b0b      	ldr	r3, [pc, #44]	; (8005994 <HAL_RCC_ClockConfig+0x1bc>)
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	091b      	lsrs	r3, r3, #4
 800596a:	f003 030f 	and.w	r3, r3, #15
 800596e:	490a      	ldr	r1, [pc, #40]	; (8005998 <HAL_RCC_ClockConfig+0x1c0>)
 8005970:	5ccb      	ldrb	r3, [r1, r3]
 8005972:	fa22 f303 	lsr.w	r3, r2, r3
 8005976:	4a09      	ldr	r2, [pc, #36]	; (800599c <HAL_RCC_ClockConfig+0x1c4>)
 8005978:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800597a:	4b09      	ldr	r3, [pc, #36]	; (80059a0 <HAL_RCC_ClockConfig+0x1c8>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4618      	mov	r0, r3
 8005980:	f7fe f924 	bl	8003bcc <HAL_InitTick>

  return HAL_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3710      	adds	r7, #16
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	40023c00 	.word	0x40023c00
 8005994:	40023800 	.word	0x40023800
 8005998:	08009e3c 	.word	0x08009e3c
 800599c:	2000002c 	.word	0x2000002c
 80059a0:	20000030 	.word	0x20000030

080059a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059a8:	b094      	sub	sp, #80	; 0x50
 80059aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80059ac:	2300      	movs	r3, #0
 80059ae:	647b      	str	r3, [r7, #68]	; 0x44
 80059b0:	2300      	movs	r3, #0
 80059b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059b4:	2300      	movs	r3, #0
 80059b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80059b8:	2300      	movs	r3, #0
 80059ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059bc:	4b79      	ldr	r3, [pc, #484]	; (8005ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f003 030c 	and.w	r3, r3, #12
 80059c4:	2b08      	cmp	r3, #8
 80059c6:	d00d      	beq.n	80059e4 <HAL_RCC_GetSysClockFreq+0x40>
 80059c8:	2b08      	cmp	r3, #8
 80059ca:	f200 80e1 	bhi.w	8005b90 <HAL_RCC_GetSysClockFreq+0x1ec>
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d002      	beq.n	80059d8 <HAL_RCC_GetSysClockFreq+0x34>
 80059d2:	2b04      	cmp	r3, #4
 80059d4:	d003      	beq.n	80059de <HAL_RCC_GetSysClockFreq+0x3a>
 80059d6:	e0db      	b.n	8005b90 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80059d8:	4b73      	ldr	r3, [pc, #460]	; (8005ba8 <HAL_RCC_GetSysClockFreq+0x204>)
 80059da:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80059dc:	e0db      	b.n	8005b96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80059de:	4b73      	ldr	r3, [pc, #460]	; (8005bac <HAL_RCC_GetSysClockFreq+0x208>)
 80059e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80059e2:	e0d8      	b.n	8005b96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80059e4:	4b6f      	ldr	r3, [pc, #444]	; (8005ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059ec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059ee:	4b6d      	ldr	r3, [pc, #436]	; (8005ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d063      	beq.n	8005ac2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059fa:	4b6a      	ldr	r3, [pc, #424]	; (8005ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	099b      	lsrs	r3, r3, #6
 8005a00:	2200      	movs	r2, #0
 8005a02:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a04:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a0c:	633b      	str	r3, [r7, #48]	; 0x30
 8005a0e:	2300      	movs	r3, #0
 8005a10:	637b      	str	r3, [r7, #52]	; 0x34
 8005a12:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005a16:	4622      	mov	r2, r4
 8005a18:	462b      	mov	r3, r5
 8005a1a:	f04f 0000 	mov.w	r0, #0
 8005a1e:	f04f 0100 	mov.w	r1, #0
 8005a22:	0159      	lsls	r1, r3, #5
 8005a24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a28:	0150      	lsls	r0, r2, #5
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	4621      	mov	r1, r4
 8005a30:	1a51      	subs	r1, r2, r1
 8005a32:	6139      	str	r1, [r7, #16]
 8005a34:	4629      	mov	r1, r5
 8005a36:	eb63 0301 	sbc.w	r3, r3, r1
 8005a3a:	617b      	str	r3, [r7, #20]
 8005a3c:	f04f 0200 	mov.w	r2, #0
 8005a40:	f04f 0300 	mov.w	r3, #0
 8005a44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a48:	4659      	mov	r1, fp
 8005a4a:	018b      	lsls	r3, r1, #6
 8005a4c:	4651      	mov	r1, sl
 8005a4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005a52:	4651      	mov	r1, sl
 8005a54:	018a      	lsls	r2, r1, #6
 8005a56:	4651      	mov	r1, sl
 8005a58:	ebb2 0801 	subs.w	r8, r2, r1
 8005a5c:	4659      	mov	r1, fp
 8005a5e:	eb63 0901 	sbc.w	r9, r3, r1
 8005a62:	f04f 0200 	mov.w	r2, #0
 8005a66:	f04f 0300 	mov.w	r3, #0
 8005a6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a76:	4690      	mov	r8, r2
 8005a78:	4699      	mov	r9, r3
 8005a7a:	4623      	mov	r3, r4
 8005a7c:	eb18 0303 	adds.w	r3, r8, r3
 8005a80:	60bb      	str	r3, [r7, #8]
 8005a82:	462b      	mov	r3, r5
 8005a84:	eb49 0303 	adc.w	r3, r9, r3
 8005a88:	60fb      	str	r3, [r7, #12]
 8005a8a:	f04f 0200 	mov.w	r2, #0
 8005a8e:	f04f 0300 	mov.w	r3, #0
 8005a92:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005a96:	4629      	mov	r1, r5
 8005a98:	024b      	lsls	r3, r1, #9
 8005a9a:	4621      	mov	r1, r4
 8005a9c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005aa0:	4621      	mov	r1, r4
 8005aa2:	024a      	lsls	r2, r1, #9
 8005aa4:	4610      	mov	r0, r2
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005aaa:	2200      	movs	r2, #0
 8005aac:	62bb      	str	r3, [r7, #40]	; 0x28
 8005aae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ab0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005ab4:	f7fb f878 	bl	8000ba8 <__aeabi_uldivmod>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	460b      	mov	r3, r1
 8005abc:	4613      	mov	r3, r2
 8005abe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ac0:	e058      	b.n	8005b74 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ac2:	4b38      	ldr	r3, [pc, #224]	; (8005ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	099b      	lsrs	r3, r3, #6
 8005ac8:	2200      	movs	r2, #0
 8005aca:	4618      	mov	r0, r3
 8005acc:	4611      	mov	r1, r2
 8005ace:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005ad2:	623b      	str	r3, [r7, #32]
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ad8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005adc:	4642      	mov	r2, r8
 8005ade:	464b      	mov	r3, r9
 8005ae0:	f04f 0000 	mov.w	r0, #0
 8005ae4:	f04f 0100 	mov.w	r1, #0
 8005ae8:	0159      	lsls	r1, r3, #5
 8005aea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005aee:	0150      	lsls	r0, r2, #5
 8005af0:	4602      	mov	r2, r0
 8005af2:	460b      	mov	r3, r1
 8005af4:	4641      	mov	r1, r8
 8005af6:	ebb2 0a01 	subs.w	sl, r2, r1
 8005afa:	4649      	mov	r1, r9
 8005afc:	eb63 0b01 	sbc.w	fp, r3, r1
 8005b00:	f04f 0200 	mov.w	r2, #0
 8005b04:	f04f 0300 	mov.w	r3, #0
 8005b08:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005b0c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005b10:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005b14:	ebb2 040a 	subs.w	r4, r2, sl
 8005b18:	eb63 050b 	sbc.w	r5, r3, fp
 8005b1c:	f04f 0200 	mov.w	r2, #0
 8005b20:	f04f 0300 	mov.w	r3, #0
 8005b24:	00eb      	lsls	r3, r5, #3
 8005b26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b2a:	00e2      	lsls	r2, r4, #3
 8005b2c:	4614      	mov	r4, r2
 8005b2e:	461d      	mov	r5, r3
 8005b30:	4643      	mov	r3, r8
 8005b32:	18e3      	adds	r3, r4, r3
 8005b34:	603b      	str	r3, [r7, #0]
 8005b36:	464b      	mov	r3, r9
 8005b38:	eb45 0303 	adc.w	r3, r5, r3
 8005b3c:	607b      	str	r3, [r7, #4]
 8005b3e:	f04f 0200 	mov.w	r2, #0
 8005b42:	f04f 0300 	mov.w	r3, #0
 8005b46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005b4a:	4629      	mov	r1, r5
 8005b4c:	028b      	lsls	r3, r1, #10
 8005b4e:	4621      	mov	r1, r4
 8005b50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b54:	4621      	mov	r1, r4
 8005b56:	028a      	lsls	r2, r1, #10
 8005b58:	4610      	mov	r0, r2
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b5e:	2200      	movs	r2, #0
 8005b60:	61bb      	str	r3, [r7, #24]
 8005b62:	61fa      	str	r2, [r7, #28]
 8005b64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b68:	f7fb f81e 	bl	8000ba8 <__aeabi_uldivmod>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	460b      	mov	r3, r1
 8005b70:	4613      	mov	r3, r2
 8005b72:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b74:	4b0b      	ldr	r3, [pc, #44]	; (8005ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	0c1b      	lsrs	r3, r3, #16
 8005b7a:	f003 0303 	and.w	r3, r3, #3
 8005b7e:	3301      	adds	r3, #1
 8005b80:	005b      	lsls	r3, r3, #1
 8005b82:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005b84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b8e:	e002      	b.n	8005b96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b90:	4b05      	ldr	r3, [pc, #20]	; (8005ba8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005b92:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3750      	adds	r7, #80	; 0x50
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ba2:	bf00      	nop
 8005ba4:	40023800 	.word	0x40023800
 8005ba8:	00f42400 	.word	0x00f42400
 8005bac:	007a1200 	.word	0x007a1200

08005bb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bb4:	4b03      	ldr	r3, [pc, #12]	; (8005bc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	2000002c 	.word	0x2000002c

08005bc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005bcc:	f7ff fff0 	bl	8005bb0 <HAL_RCC_GetHCLKFreq>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	4b05      	ldr	r3, [pc, #20]	; (8005be8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	0a9b      	lsrs	r3, r3, #10
 8005bd8:	f003 0307 	and.w	r3, r3, #7
 8005bdc:	4903      	ldr	r1, [pc, #12]	; (8005bec <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bde:	5ccb      	ldrb	r3, [r1, r3]
 8005be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	40023800 	.word	0x40023800
 8005bec:	08009e4c 	.word	0x08009e4c

08005bf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005bf4:	f7ff ffdc 	bl	8005bb0 <HAL_RCC_GetHCLKFreq>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	4b05      	ldr	r3, [pc, #20]	; (8005c10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	0b5b      	lsrs	r3, r3, #13
 8005c00:	f003 0307 	and.w	r3, r3, #7
 8005c04:	4903      	ldr	r1, [pc, #12]	; (8005c14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c06:	5ccb      	ldrb	r3, [r1, r3]
 8005c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	40023800 	.word	0x40023800
 8005c14:	08009e4c 	.word	0x08009e4c

08005c18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d101      	bne.n	8005c2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e03f      	b.n	8005caa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d106      	bne.n	8005c44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f7fd fe1c 	bl	800387c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2224      	movs	r2, #36	; 0x24
 8005c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68da      	ldr	r2, [r3, #12]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 fd7b 	bl	8006758 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	691a      	ldr	r2, [r3, #16]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	695a      	ldr	r2, [r3, #20]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68da      	ldr	r2, [r3, #12]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2220      	movs	r2, #32
 8005c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2220      	movs	r2, #32
 8005ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ca8:	2300      	movs	r3, #0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3708      	adds	r7, #8
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b08a      	sub	sp, #40	; 0x28
 8005cb6:	af02      	add	r7, sp, #8
 8005cb8:	60f8      	str	r0, [r7, #12]
 8005cba:	60b9      	str	r1, [r7, #8]
 8005cbc:	603b      	str	r3, [r7, #0]
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	2b20      	cmp	r3, #32
 8005cd0:	d17c      	bne.n	8005dcc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d002      	beq.n	8005cde <HAL_UART_Transmit+0x2c>
 8005cd8:	88fb      	ldrh	r3, [r7, #6]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d101      	bne.n	8005ce2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e075      	b.n	8005dce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d101      	bne.n	8005cf0 <HAL_UART_Transmit+0x3e>
 8005cec:	2302      	movs	r3, #2
 8005cee:	e06e      	b.n	8005dce <HAL_UART_Transmit+0x11c>
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2221      	movs	r2, #33	; 0x21
 8005d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d06:	f7fd ffa5 	bl	8003c54 <HAL_GetTick>
 8005d0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	88fa      	ldrh	r2, [r7, #6]
 8005d10:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	88fa      	ldrh	r2, [r7, #6]
 8005d16:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d20:	d108      	bne.n	8005d34 <HAL_UART_Transmit+0x82>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d104      	bne.n	8005d34 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	61bb      	str	r3, [r7, #24]
 8005d32:	e003      	b.n	8005d3c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005d44:	e02a      	b.n	8005d9c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	9300      	str	r3, [sp, #0]
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	2180      	movs	r1, #128	; 0x80
 8005d50:	68f8      	ldr	r0, [r7, #12]
 8005d52:	f000 faf9 	bl	8006348 <UART_WaitOnFlagUntilTimeout>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d001      	beq.n	8005d60 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e036      	b.n	8005dce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d10b      	bne.n	8005d7e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	881b      	ldrh	r3, [r3, #0]
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	3302      	adds	r3, #2
 8005d7a:	61bb      	str	r3, [r7, #24]
 8005d7c:	e007      	b.n	8005d8e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	781a      	ldrb	r2, [r3, #0]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	3b01      	subs	r3, #1
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1cf      	bne.n	8005d46 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	9300      	str	r3, [sp, #0]
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	2200      	movs	r2, #0
 8005dae:	2140      	movs	r1, #64	; 0x40
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	f000 fac9 	bl	8006348 <UART_WaitOnFlagUntilTimeout>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d001      	beq.n	8005dc0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	e006      	b.n	8005dce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2220      	movs	r2, #32
 8005dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	e000      	b.n	8005dce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005dcc:	2302      	movs	r3, #2
  }
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3720      	adds	r7, #32
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
	...

08005dd8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b0ba      	sub	sp, #232	; 0xe8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	695b      	ldr	r3, [r3, #20]
 8005dfa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005e04:	2300      	movs	r3, #0
 8005e06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e0e:	f003 030f 	and.w	r3, r3, #15
 8005e12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005e16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d10f      	bne.n	8005e3e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e22:	f003 0320 	and.w	r3, r3, #32
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d009      	beq.n	8005e3e <HAL_UART_IRQHandler+0x66>
 8005e2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e2e:	f003 0320 	and.w	r3, r3, #32
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d003      	beq.n	8005e3e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 fbd3 	bl	80065e2 <UART_Receive_IT>
      return;
 8005e3c:	e256      	b.n	80062ec <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005e3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f000 80de 	beq.w	8006004 <HAL_UART_IRQHandler+0x22c>
 8005e48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e4c:	f003 0301 	and.w	r3, r3, #1
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d106      	bne.n	8005e62 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e58:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f000 80d1 	beq.w	8006004 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00b      	beq.n	8005e86 <HAL_UART_IRQHandler+0xae>
 8005e6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d005      	beq.n	8005e86 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7e:	f043 0201 	orr.w	r2, r3, #1
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e8a:	f003 0304 	and.w	r3, r3, #4
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00b      	beq.n	8005eaa <HAL_UART_IRQHandler+0xd2>
 8005e92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e96:	f003 0301 	and.w	r3, r3, #1
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d005      	beq.n	8005eaa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea2:	f043 0202 	orr.w	r2, r3, #2
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eae:	f003 0302 	and.w	r3, r3, #2
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00b      	beq.n	8005ece <HAL_UART_IRQHandler+0xf6>
 8005eb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d005      	beq.n	8005ece <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec6:	f043 0204 	orr.w	r2, r3, #4
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ed2:	f003 0308 	and.w	r3, r3, #8
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d011      	beq.n	8005efe <HAL_UART_IRQHandler+0x126>
 8005eda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ede:	f003 0320 	and.w	r3, r3, #32
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d105      	bne.n	8005ef2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005ee6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d005      	beq.n	8005efe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef6:	f043 0208 	orr.w	r2, r3, #8
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f000 81ed 	beq.w	80062e2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f0c:	f003 0320 	and.w	r3, r3, #32
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d008      	beq.n	8005f26 <HAL_UART_IRQHandler+0x14e>
 8005f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f18:	f003 0320 	and.w	r3, r3, #32
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d002      	beq.n	8005f26 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 fb5e 	bl	80065e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	695b      	ldr	r3, [r3, #20]
 8005f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f30:	2b40      	cmp	r3, #64	; 0x40
 8005f32:	bf0c      	ite	eq
 8005f34:	2301      	moveq	r3, #1
 8005f36:	2300      	movne	r3, #0
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f42:	f003 0308 	and.w	r3, r3, #8
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d103      	bne.n	8005f52 <HAL_UART_IRQHandler+0x17a>
 8005f4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d04f      	beq.n	8005ff2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 fa66 	bl	8006424 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f62:	2b40      	cmp	r3, #64	; 0x40
 8005f64:	d141      	bne.n	8005fea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	3314      	adds	r3, #20
 8005f6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f74:	e853 3f00 	ldrex	r3, [r3]
 8005f78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005f7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	3314      	adds	r3, #20
 8005f8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005f92:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005f96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005f9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005fa2:	e841 2300 	strex	r3, r2, [r1]
 8005fa6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005faa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1d9      	bne.n	8005f66 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d013      	beq.n	8005fe2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fbe:	4a7d      	ldr	r2, [pc, #500]	; (80061b4 <HAL_UART_IRQHandler+0x3dc>)
 8005fc0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7fd fff5 	bl	8003fb6 <HAL_DMA_Abort_IT>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d016      	beq.n	8006000 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005fdc:	4610      	mov	r0, r2
 8005fde:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fe0:	e00e      	b.n	8006000 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 f99a 	bl	800631c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fe8:	e00a      	b.n	8006000 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 f996 	bl	800631c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ff0:	e006      	b.n	8006000 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 f992 	bl	800631c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005ffe:	e170      	b.n	80062e2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006000:	bf00      	nop
    return;
 8006002:	e16e      	b.n	80062e2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006008:	2b01      	cmp	r3, #1
 800600a:	f040 814a 	bne.w	80062a2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800600e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006012:	f003 0310 	and.w	r3, r3, #16
 8006016:	2b00      	cmp	r3, #0
 8006018:	f000 8143 	beq.w	80062a2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800601c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006020:	f003 0310 	and.w	r3, r3, #16
 8006024:	2b00      	cmp	r3, #0
 8006026:	f000 813c 	beq.w	80062a2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800602a:	2300      	movs	r3, #0
 800602c:	60bb      	str	r3, [r7, #8]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	60bb      	str	r3, [r7, #8]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	60bb      	str	r3, [r7, #8]
 800603e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800604a:	2b40      	cmp	r3, #64	; 0x40
 800604c:	f040 80b4 	bne.w	80061b8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800605c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006060:	2b00      	cmp	r3, #0
 8006062:	f000 8140 	beq.w	80062e6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800606a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800606e:	429a      	cmp	r2, r3
 8006070:	f080 8139 	bcs.w	80062e6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800607a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006080:	69db      	ldr	r3, [r3, #28]
 8006082:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006086:	f000 8088 	beq.w	800619a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	330c      	adds	r3, #12
 8006090:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006094:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006098:	e853 3f00 	ldrex	r3, [r3]
 800609c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80060a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	330c      	adds	r3, #12
 80060b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80060b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80060ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80060c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80060c6:	e841 2300 	strex	r3, r2, [r1]
 80060ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80060ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d1d9      	bne.n	800608a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	3314      	adds	r3, #20
 80060dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060e0:	e853 3f00 	ldrex	r3, [r3]
 80060e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80060e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060e8:	f023 0301 	bic.w	r3, r3, #1
 80060ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	3314      	adds	r3, #20
 80060f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80060fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80060fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006100:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006102:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006106:	e841 2300 	strex	r3, r2, [r1]
 800610a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800610c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1e1      	bne.n	80060d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	3314      	adds	r3, #20
 8006118:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800611c:	e853 3f00 	ldrex	r3, [r3]
 8006120:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006122:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006124:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006128:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	3314      	adds	r3, #20
 8006132:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006136:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006138:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800613c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800613e:	e841 2300 	strex	r3, r2, [r1]
 8006142:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006144:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1e3      	bne.n	8006112 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2220      	movs	r2, #32
 800614e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	330c      	adds	r3, #12
 800615e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006162:	e853 3f00 	ldrex	r3, [r3]
 8006166:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006168:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800616a:	f023 0310 	bic.w	r3, r3, #16
 800616e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	330c      	adds	r3, #12
 8006178:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800617c:	65ba      	str	r2, [r7, #88]	; 0x58
 800617e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006180:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006182:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006184:	e841 2300 	strex	r3, r2, [r1]
 8006188:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800618a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800618c:	2b00      	cmp	r3, #0
 800618e:	d1e3      	bne.n	8006158 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006194:	4618      	mov	r0, r3
 8006196:	f7fd fe9e 	bl	8003ed6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	4619      	mov	r1, r3
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 f8c0 	bl	8006330 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80061b0:	e099      	b.n	80062e6 <HAL_UART_IRQHandler+0x50e>
 80061b2:	bf00      	nop
 80061b4:	080064eb 	.word	0x080064eb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	f000 808b 	beq.w	80062ea <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80061d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80061d8:	2b00      	cmp	r3, #0
 80061da:	f000 8086 	beq.w	80062ea <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	330c      	adds	r3, #12
 80061e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e8:	e853 3f00 	ldrex	r3, [r3]
 80061ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80061ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	330c      	adds	r3, #12
 80061fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006202:	647a      	str	r2, [r7, #68]	; 0x44
 8006204:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006206:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006208:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800620a:	e841 2300 	strex	r3, r2, [r1]
 800620e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1e3      	bne.n	80061de <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	3314      	adds	r3, #20
 800621c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006220:	e853 3f00 	ldrex	r3, [r3]
 8006224:	623b      	str	r3, [r7, #32]
   return(result);
 8006226:	6a3b      	ldr	r3, [r7, #32]
 8006228:	f023 0301 	bic.w	r3, r3, #1
 800622c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	3314      	adds	r3, #20
 8006236:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800623a:	633a      	str	r2, [r7, #48]	; 0x30
 800623c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006242:	e841 2300 	strex	r3, r2, [r1]
 8006246:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1e3      	bne.n	8006216 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2220      	movs	r2, #32
 8006252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	330c      	adds	r3, #12
 8006262:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	e853 3f00 	ldrex	r3, [r3]
 800626a:	60fb      	str	r3, [r7, #12]
   return(result);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f023 0310 	bic.w	r3, r3, #16
 8006272:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	330c      	adds	r3, #12
 800627c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006280:	61fa      	str	r2, [r7, #28]
 8006282:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006284:	69b9      	ldr	r1, [r7, #24]
 8006286:	69fa      	ldr	r2, [r7, #28]
 8006288:	e841 2300 	strex	r3, r2, [r1]
 800628c:	617b      	str	r3, [r7, #20]
   return(result);
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1e3      	bne.n	800625c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006294:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006298:	4619      	mov	r1, r3
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 f848 	bl	8006330 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80062a0:	e023      	b.n	80062ea <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80062a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d009      	beq.n	80062c2 <HAL_UART_IRQHandler+0x4ea>
 80062ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d003      	beq.n	80062c2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 f929 	bl	8006512 <UART_Transmit_IT>
    return;
 80062c0:	e014      	b.n	80062ec <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80062c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00e      	beq.n	80062ec <HAL_UART_IRQHandler+0x514>
 80062ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d008      	beq.n	80062ec <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f969 	bl	80065b2 <UART_EndTransmit_IT>
    return;
 80062e0:	e004      	b.n	80062ec <HAL_UART_IRQHandler+0x514>
    return;
 80062e2:	bf00      	nop
 80062e4:	e002      	b.n	80062ec <HAL_UART_IRQHandler+0x514>
      return;
 80062e6:	bf00      	nop
 80062e8:	e000      	b.n	80062ec <HAL_UART_IRQHandler+0x514>
      return;
 80062ea:	bf00      	nop
  }
}
 80062ec:	37e8      	adds	r7, #232	; 0xe8
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop

080062f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006310:	bf00      	nop
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	460b      	mov	r3, r1
 800633a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800633c:	bf00      	nop
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b090      	sub	sp, #64	; 0x40
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	603b      	str	r3, [r7, #0]
 8006354:	4613      	mov	r3, r2
 8006356:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006358:	e050      	b.n	80063fc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800635a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800635c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006360:	d04c      	beq.n	80063fc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006362:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006364:	2b00      	cmp	r3, #0
 8006366:	d007      	beq.n	8006378 <UART_WaitOnFlagUntilTimeout+0x30>
 8006368:	f7fd fc74 	bl	8003c54 <HAL_GetTick>
 800636c:	4602      	mov	r2, r0
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006374:	429a      	cmp	r2, r3
 8006376:	d241      	bcs.n	80063fc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	330c      	adds	r3, #12
 800637e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006382:	e853 3f00 	ldrex	r3, [r3]
 8006386:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800638e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	330c      	adds	r3, #12
 8006396:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006398:	637a      	str	r2, [r7, #52]	; 0x34
 800639a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800639e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063a0:	e841 2300 	strex	r3, r2, [r1]
 80063a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80063a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d1e5      	bne.n	8006378 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	3314      	adds	r3, #20
 80063b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	e853 3f00 	ldrex	r3, [r3]
 80063ba:	613b      	str	r3, [r7, #16]
   return(result);
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	f023 0301 	bic.w	r3, r3, #1
 80063c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	3314      	adds	r3, #20
 80063ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063cc:	623a      	str	r2, [r7, #32]
 80063ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d0:	69f9      	ldr	r1, [r7, #28]
 80063d2:	6a3a      	ldr	r2, [r7, #32]
 80063d4:	e841 2300 	strex	r3, r2, [r1]
 80063d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d1e5      	bne.n	80063ac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2220      	movs	r2, #32
 80063e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2220      	movs	r2, #32
 80063ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80063f8:	2303      	movs	r3, #3
 80063fa:	e00f      	b.n	800641c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	4013      	ands	r3, r2
 8006406:	68ba      	ldr	r2, [r7, #8]
 8006408:	429a      	cmp	r2, r3
 800640a:	bf0c      	ite	eq
 800640c:	2301      	moveq	r3, #1
 800640e:	2300      	movne	r3, #0
 8006410:	b2db      	uxtb	r3, r3
 8006412:	461a      	mov	r2, r3
 8006414:	79fb      	ldrb	r3, [r7, #7]
 8006416:	429a      	cmp	r2, r3
 8006418:	d09f      	beq.n	800635a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3740      	adds	r7, #64	; 0x40
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006424:	b480      	push	{r7}
 8006426:	b095      	sub	sp, #84	; 0x54
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	330c      	adds	r3, #12
 8006432:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006436:	e853 3f00 	ldrex	r3, [r3]
 800643a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800643c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006442:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	330c      	adds	r3, #12
 800644a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800644c:	643a      	str	r2, [r7, #64]	; 0x40
 800644e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006450:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006452:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006454:	e841 2300 	strex	r3, r2, [r1]
 8006458:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800645a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800645c:	2b00      	cmp	r3, #0
 800645e:	d1e5      	bne.n	800642c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	3314      	adds	r3, #20
 8006466:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006468:	6a3b      	ldr	r3, [r7, #32]
 800646a:	e853 3f00 	ldrex	r3, [r3]
 800646e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	f023 0301 	bic.w	r3, r3, #1
 8006476:	64bb      	str	r3, [r7, #72]	; 0x48
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	3314      	adds	r3, #20
 800647e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006480:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006482:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006484:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006486:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006488:	e841 2300 	strex	r3, r2, [r1]
 800648c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800648e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006490:	2b00      	cmp	r3, #0
 8006492:	d1e5      	bne.n	8006460 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006498:	2b01      	cmp	r3, #1
 800649a:	d119      	bne.n	80064d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	330c      	adds	r3, #12
 80064a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	e853 3f00 	ldrex	r3, [r3]
 80064aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	f023 0310 	bic.w	r3, r3, #16
 80064b2:	647b      	str	r3, [r7, #68]	; 0x44
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	330c      	adds	r3, #12
 80064ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064bc:	61ba      	str	r2, [r7, #24]
 80064be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c0:	6979      	ldr	r1, [r7, #20]
 80064c2:	69ba      	ldr	r2, [r7, #24]
 80064c4:	e841 2300 	strex	r3, r2, [r1]
 80064c8:	613b      	str	r3, [r7, #16]
   return(result);
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d1e5      	bne.n	800649c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2220      	movs	r2, #32
 80064d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80064de:	bf00      	nop
 80064e0:	3754      	adds	r7, #84	; 0x54
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr

080064ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b084      	sub	sp, #16
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2200      	movs	r2, #0
 80064fc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006504:	68f8      	ldr	r0, [r7, #12]
 8006506:	f7ff ff09 	bl	800631c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800650a:	bf00      	nop
 800650c:	3710      	adds	r7, #16
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}

08006512 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006512:	b480      	push	{r7}
 8006514:	b085      	sub	sp, #20
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2b21      	cmp	r3, #33	; 0x21
 8006524:	d13e      	bne.n	80065a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800652e:	d114      	bne.n	800655a <UART_Transmit_IT+0x48>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d110      	bne.n	800655a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a1b      	ldr	r3, [r3, #32]
 800653c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	881b      	ldrh	r3, [r3, #0]
 8006542:	461a      	mov	r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800654c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a1b      	ldr	r3, [r3, #32]
 8006552:	1c9a      	adds	r2, r3, #2
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	621a      	str	r2, [r3, #32]
 8006558:	e008      	b.n	800656c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a1b      	ldr	r3, [r3, #32]
 800655e:	1c59      	adds	r1, r3, #1
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	6211      	str	r1, [r2, #32]
 8006564:	781a      	ldrb	r2, [r3, #0]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006570:	b29b      	uxth	r3, r3
 8006572:	3b01      	subs	r3, #1
 8006574:	b29b      	uxth	r3, r3
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	4619      	mov	r1, r3
 800657a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800657c:	2b00      	cmp	r3, #0
 800657e:	d10f      	bne.n	80065a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68da      	ldr	r2, [r3, #12]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800658e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68da      	ldr	r2, [r3, #12]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800659e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80065a0:	2300      	movs	r3, #0
 80065a2:	e000      	b.n	80065a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80065a4:	2302      	movs	r3, #2
  }
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3714      	adds	r7, #20
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr

080065b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b082      	sub	sp, #8
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	68da      	ldr	r2, [r3, #12]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2220      	movs	r2, #32
 80065ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f7ff fe8e 	bl	80062f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3708      	adds	r7, #8
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}

080065e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80065e2:	b580      	push	{r7, lr}
 80065e4:	b08c      	sub	sp, #48	; 0x30
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	2b22      	cmp	r3, #34	; 0x22
 80065f4:	f040 80ab 	bne.w	800674e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006600:	d117      	bne.n	8006632 <UART_Receive_IT+0x50>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d113      	bne.n	8006632 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800660a:	2300      	movs	r3, #0
 800660c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006612:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	b29b      	uxth	r3, r3
 800661c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006620:	b29a      	uxth	r2, r3
 8006622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006624:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800662a:	1c9a      	adds	r2, r3, #2
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	629a      	str	r2, [r3, #40]	; 0x28
 8006630:	e026      	b.n	8006680 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006636:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006638:	2300      	movs	r3, #0
 800663a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006644:	d007      	beq.n	8006656 <UART_Receive_IT+0x74>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d10a      	bne.n	8006664 <UART_Receive_IT+0x82>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d106      	bne.n	8006664 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	b2da      	uxtb	r2, r3
 800665e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006660:	701a      	strb	r2, [r3, #0]
 8006662:	e008      	b.n	8006676 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	b2db      	uxtb	r3, r3
 800666c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006670:	b2da      	uxtb	r2, r3
 8006672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006674:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800667a:	1c5a      	adds	r2, r3, #1
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006684:	b29b      	uxth	r3, r3
 8006686:	3b01      	subs	r3, #1
 8006688:	b29b      	uxth	r3, r3
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	4619      	mov	r1, r3
 800668e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006690:	2b00      	cmp	r3, #0
 8006692:	d15a      	bne.n	800674a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	68da      	ldr	r2, [r3, #12]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f022 0220 	bic.w	r2, r2, #32
 80066a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68da      	ldr	r2, [r3, #12]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	695a      	ldr	r2, [r3, #20]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f022 0201 	bic.w	r2, r2, #1
 80066c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2220      	movs	r2, #32
 80066c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d135      	bne.n	8006740 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	330c      	adds	r3, #12
 80066e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	e853 3f00 	ldrex	r3, [r3]
 80066e8:	613b      	str	r3, [r7, #16]
   return(result);
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	f023 0310 	bic.w	r3, r3, #16
 80066f0:	627b      	str	r3, [r7, #36]	; 0x24
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	330c      	adds	r3, #12
 80066f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066fa:	623a      	str	r2, [r7, #32]
 80066fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fe:	69f9      	ldr	r1, [r7, #28]
 8006700:	6a3a      	ldr	r2, [r7, #32]
 8006702:	e841 2300 	strex	r3, r2, [r1]
 8006706:	61bb      	str	r3, [r7, #24]
   return(result);
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d1e5      	bne.n	80066da <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0310 	and.w	r3, r3, #16
 8006718:	2b10      	cmp	r3, #16
 800671a:	d10a      	bne.n	8006732 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800671c:	2300      	movs	r3, #0
 800671e:	60fb      	str	r3, [r7, #12]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	60fb      	str	r3, [r7, #12]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	60fb      	str	r3, [r7, #12]
 8006730:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006736:	4619      	mov	r1, r3
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f7ff fdf9 	bl	8006330 <HAL_UARTEx_RxEventCallback>
 800673e:	e002      	b.n	8006746 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f7ff fde1 	bl	8006308 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006746:	2300      	movs	r3, #0
 8006748:	e002      	b.n	8006750 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800674a:	2300      	movs	r3, #0
 800674c:	e000      	b.n	8006750 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800674e:	2302      	movs	r3, #2
  }
}
 8006750:	4618      	mov	r0, r3
 8006752:	3730      	adds	r7, #48	; 0x30
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006758:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800675c:	b0c0      	sub	sp, #256	; 0x100
 800675e:	af00      	add	r7, sp, #0
 8006760:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006774:	68d9      	ldr	r1, [r3, #12]
 8006776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	ea40 0301 	orr.w	r3, r0, r1
 8006780:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006786:	689a      	ldr	r2, [r3, #8]
 8006788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	431a      	orrs	r2, r3
 8006790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	431a      	orrs	r2, r3
 8006798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800679c:	69db      	ldr	r3, [r3, #28]
 800679e:	4313      	orrs	r3, r2
 80067a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80067a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80067b0:	f021 010c 	bic.w	r1, r1, #12
 80067b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80067be:	430b      	orrs	r3, r1
 80067c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80067c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	695b      	ldr	r3, [r3, #20]
 80067ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80067ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067d2:	6999      	ldr	r1, [r3, #24]
 80067d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	ea40 0301 	orr.w	r3, r0, r1
 80067de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80067e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	4b8f      	ldr	r3, [pc, #572]	; (8006a24 <UART_SetConfig+0x2cc>)
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d005      	beq.n	80067f8 <UART_SetConfig+0xa0>
 80067ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	4b8d      	ldr	r3, [pc, #564]	; (8006a28 <UART_SetConfig+0x2d0>)
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d104      	bne.n	8006802 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80067f8:	f7ff f9fa 	bl	8005bf0 <HAL_RCC_GetPCLK2Freq>
 80067fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006800:	e003      	b.n	800680a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006802:	f7ff f9e1 	bl	8005bc8 <HAL_RCC_GetPCLK1Freq>
 8006806:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800680a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800680e:	69db      	ldr	r3, [r3, #28]
 8006810:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006814:	f040 810c 	bne.w	8006a30 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006818:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800681c:	2200      	movs	r2, #0
 800681e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006822:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006826:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800682a:	4622      	mov	r2, r4
 800682c:	462b      	mov	r3, r5
 800682e:	1891      	adds	r1, r2, r2
 8006830:	65b9      	str	r1, [r7, #88]	; 0x58
 8006832:	415b      	adcs	r3, r3
 8006834:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006836:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800683a:	4621      	mov	r1, r4
 800683c:	eb12 0801 	adds.w	r8, r2, r1
 8006840:	4629      	mov	r1, r5
 8006842:	eb43 0901 	adc.w	r9, r3, r1
 8006846:	f04f 0200 	mov.w	r2, #0
 800684a:	f04f 0300 	mov.w	r3, #0
 800684e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006852:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006856:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800685a:	4690      	mov	r8, r2
 800685c:	4699      	mov	r9, r3
 800685e:	4623      	mov	r3, r4
 8006860:	eb18 0303 	adds.w	r3, r8, r3
 8006864:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006868:	462b      	mov	r3, r5
 800686a:	eb49 0303 	adc.w	r3, r9, r3
 800686e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800687e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006882:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006886:	460b      	mov	r3, r1
 8006888:	18db      	adds	r3, r3, r3
 800688a:	653b      	str	r3, [r7, #80]	; 0x50
 800688c:	4613      	mov	r3, r2
 800688e:	eb42 0303 	adc.w	r3, r2, r3
 8006892:	657b      	str	r3, [r7, #84]	; 0x54
 8006894:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006898:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800689c:	f7fa f984 	bl	8000ba8 <__aeabi_uldivmod>
 80068a0:	4602      	mov	r2, r0
 80068a2:	460b      	mov	r3, r1
 80068a4:	4b61      	ldr	r3, [pc, #388]	; (8006a2c <UART_SetConfig+0x2d4>)
 80068a6:	fba3 2302 	umull	r2, r3, r3, r2
 80068aa:	095b      	lsrs	r3, r3, #5
 80068ac:	011c      	lsls	r4, r3, #4
 80068ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068b2:	2200      	movs	r2, #0
 80068b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80068b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80068bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80068c0:	4642      	mov	r2, r8
 80068c2:	464b      	mov	r3, r9
 80068c4:	1891      	adds	r1, r2, r2
 80068c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80068c8:	415b      	adcs	r3, r3
 80068ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80068d0:	4641      	mov	r1, r8
 80068d2:	eb12 0a01 	adds.w	sl, r2, r1
 80068d6:	4649      	mov	r1, r9
 80068d8:	eb43 0b01 	adc.w	fp, r3, r1
 80068dc:	f04f 0200 	mov.w	r2, #0
 80068e0:	f04f 0300 	mov.w	r3, #0
 80068e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80068e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80068ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068f0:	4692      	mov	sl, r2
 80068f2:	469b      	mov	fp, r3
 80068f4:	4643      	mov	r3, r8
 80068f6:	eb1a 0303 	adds.w	r3, sl, r3
 80068fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80068fe:	464b      	mov	r3, r9
 8006900:	eb4b 0303 	adc.w	r3, fp, r3
 8006904:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006914:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006918:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800691c:	460b      	mov	r3, r1
 800691e:	18db      	adds	r3, r3, r3
 8006920:	643b      	str	r3, [r7, #64]	; 0x40
 8006922:	4613      	mov	r3, r2
 8006924:	eb42 0303 	adc.w	r3, r2, r3
 8006928:	647b      	str	r3, [r7, #68]	; 0x44
 800692a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800692e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006932:	f7fa f939 	bl	8000ba8 <__aeabi_uldivmod>
 8006936:	4602      	mov	r2, r0
 8006938:	460b      	mov	r3, r1
 800693a:	4611      	mov	r1, r2
 800693c:	4b3b      	ldr	r3, [pc, #236]	; (8006a2c <UART_SetConfig+0x2d4>)
 800693e:	fba3 2301 	umull	r2, r3, r3, r1
 8006942:	095b      	lsrs	r3, r3, #5
 8006944:	2264      	movs	r2, #100	; 0x64
 8006946:	fb02 f303 	mul.w	r3, r2, r3
 800694a:	1acb      	subs	r3, r1, r3
 800694c:	00db      	lsls	r3, r3, #3
 800694e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006952:	4b36      	ldr	r3, [pc, #216]	; (8006a2c <UART_SetConfig+0x2d4>)
 8006954:	fba3 2302 	umull	r2, r3, r3, r2
 8006958:	095b      	lsrs	r3, r3, #5
 800695a:	005b      	lsls	r3, r3, #1
 800695c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006960:	441c      	add	r4, r3
 8006962:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006966:	2200      	movs	r2, #0
 8006968:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800696c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006970:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006974:	4642      	mov	r2, r8
 8006976:	464b      	mov	r3, r9
 8006978:	1891      	adds	r1, r2, r2
 800697a:	63b9      	str	r1, [r7, #56]	; 0x38
 800697c:	415b      	adcs	r3, r3
 800697e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006980:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006984:	4641      	mov	r1, r8
 8006986:	1851      	adds	r1, r2, r1
 8006988:	6339      	str	r1, [r7, #48]	; 0x30
 800698a:	4649      	mov	r1, r9
 800698c:	414b      	adcs	r3, r1
 800698e:	637b      	str	r3, [r7, #52]	; 0x34
 8006990:	f04f 0200 	mov.w	r2, #0
 8006994:	f04f 0300 	mov.w	r3, #0
 8006998:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800699c:	4659      	mov	r1, fp
 800699e:	00cb      	lsls	r3, r1, #3
 80069a0:	4651      	mov	r1, sl
 80069a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069a6:	4651      	mov	r1, sl
 80069a8:	00ca      	lsls	r2, r1, #3
 80069aa:	4610      	mov	r0, r2
 80069ac:	4619      	mov	r1, r3
 80069ae:	4603      	mov	r3, r0
 80069b0:	4642      	mov	r2, r8
 80069b2:	189b      	adds	r3, r3, r2
 80069b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80069b8:	464b      	mov	r3, r9
 80069ba:	460a      	mov	r2, r1
 80069bc:	eb42 0303 	adc.w	r3, r2, r3
 80069c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80069c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80069d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80069d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80069d8:	460b      	mov	r3, r1
 80069da:	18db      	adds	r3, r3, r3
 80069dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80069de:	4613      	mov	r3, r2
 80069e0:	eb42 0303 	adc.w	r3, r2, r3
 80069e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80069ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80069ee:	f7fa f8db 	bl	8000ba8 <__aeabi_uldivmod>
 80069f2:	4602      	mov	r2, r0
 80069f4:	460b      	mov	r3, r1
 80069f6:	4b0d      	ldr	r3, [pc, #52]	; (8006a2c <UART_SetConfig+0x2d4>)
 80069f8:	fba3 1302 	umull	r1, r3, r3, r2
 80069fc:	095b      	lsrs	r3, r3, #5
 80069fe:	2164      	movs	r1, #100	; 0x64
 8006a00:	fb01 f303 	mul.w	r3, r1, r3
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	00db      	lsls	r3, r3, #3
 8006a08:	3332      	adds	r3, #50	; 0x32
 8006a0a:	4a08      	ldr	r2, [pc, #32]	; (8006a2c <UART_SetConfig+0x2d4>)
 8006a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a10:	095b      	lsrs	r3, r3, #5
 8006a12:	f003 0207 	and.w	r2, r3, #7
 8006a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4422      	add	r2, r4
 8006a1e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a20:	e105      	b.n	8006c2e <UART_SetConfig+0x4d6>
 8006a22:	bf00      	nop
 8006a24:	40011000 	.word	0x40011000
 8006a28:	40011400 	.word	0x40011400
 8006a2c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a34:	2200      	movs	r2, #0
 8006a36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006a3a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006a3e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006a42:	4642      	mov	r2, r8
 8006a44:	464b      	mov	r3, r9
 8006a46:	1891      	adds	r1, r2, r2
 8006a48:	6239      	str	r1, [r7, #32]
 8006a4a:	415b      	adcs	r3, r3
 8006a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006a52:	4641      	mov	r1, r8
 8006a54:	1854      	adds	r4, r2, r1
 8006a56:	4649      	mov	r1, r9
 8006a58:	eb43 0501 	adc.w	r5, r3, r1
 8006a5c:	f04f 0200 	mov.w	r2, #0
 8006a60:	f04f 0300 	mov.w	r3, #0
 8006a64:	00eb      	lsls	r3, r5, #3
 8006a66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a6a:	00e2      	lsls	r2, r4, #3
 8006a6c:	4614      	mov	r4, r2
 8006a6e:	461d      	mov	r5, r3
 8006a70:	4643      	mov	r3, r8
 8006a72:	18e3      	adds	r3, r4, r3
 8006a74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006a78:	464b      	mov	r3, r9
 8006a7a:	eb45 0303 	adc.w	r3, r5, r3
 8006a7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006a8e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006a92:	f04f 0200 	mov.w	r2, #0
 8006a96:	f04f 0300 	mov.w	r3, #0
 8006a9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006a9e:	4629      	mov	r1, r5
 8006aa0:	008b      	lsls	r3, r1, #2
 8006aa2:	4621      	mov	r1, r4
 8006aa4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006aa8:	4621      	mov	r1, r4
 8006aaa:	008a      	lsls	r2, r1, #2
 8006aac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006ab0:	f7fa f87a 	bl	8000ba8 <__aeabi_uldivmod>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	4b60      	ldr	r3, [pc, #384]	; (8006c3c <UART_SetConfig+0x4e4>)
 8006aba:	fba3 2302 	umull	r2, r3, r3, r2
 8006abe:	095b      	lsrs	r3, r3, #5
 8006ac0:	011c      	lsls	r4, r3, #4
 8006ac2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006acc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006ad0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006ad4:	4642      	mov	r2, r8
 8006ad6:	464b      	mov	r3, r9
 8006ad8:	1891      	adds	r1, r2, r2
 8006ada:	61b9      	str	r1, [r7, #24]
 8006adc:	415b      	adcs	r3, r3
 8006ade:	61fb      	str	r3, [r7, #28]
 8006ae0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ae4:	4641      	mov	r1, r8
 8006ae6:	1851      	adds	r1, r2, r1
 8006ae8:	6139      	str	r1, [r7, #16]
 8006aea:	4649      	mov	r1, r9
 8006aec:	414b      	adcs	r3, r1
 8006aee:	617b      	str	r3, [r7, #20]
 8006af0:	f04f 0200 	mov.w	r2, #0
 8006af4:	f04f 0300 	mov.w	r3, #0
 8006af8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006afc:	4659      	mov	r1, fp
 8006afe:	00cb      	lsls	r3, r1, #3
 8006b00:	4651      	mov	r1, sl
 8006b02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b06:	4651      	mov	r1, sl
 8006b08:	00ca      	lsls	r2, r1, #3
 8006b0a:	4610      	mov	r0, r2
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	4603      	mov	r3, r0
 8006b10:	4642      	mov	r2, r8
 8006b12:	189b      	adds	r3, r3, r2
 8006b14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b18:	464b      	mov	r3, r9
 8006b1a:	460a      	mov	r2, r1
 8006b1c:	eb42 0303 	adc.w	r3, r2, r3
 8006b20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b2e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006b30:	f04f 0200 	mov.w	r2, #0
 8006b34:	f04f 0300 	mov.w	r3, #0
 8006b38:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006b3c:	4649      	mov	r1, r9
 8006b3e:	008b      	lsls	r3, r1, #2
 8006b40:	4641      	mov	r1, r8
 8006b42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b46:	4641      	mov	r1, r8
 8006b48:	008a      	lsls	r2, r1, #2
 8006b4a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006b4e:	f7fa f82b 	bl	8000ba8 <__aeabi_uldivmod>
 8006b52:	4602      	mov	r2, r0
 8006b54:	460b      	mov	r3, r1
 8006b56:	4b39      	ldr	r3, [pc, #228]	; (8006c3c <UART_SetConfig+0x4e4>)
 8006b58:	fba3 1302 	umull	r1, r3, r3, r2
 8006b5c:	095b      	lsrs	r3, r3, #5
 8006b5e:	2164      	movs	r1, #100	; 0x64
 8006b60:	fb01 f303 	mul.w	r3, r1, r3
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	011b      	lsls	r3, r3, #4
 8006b68:	3332      	adds	r3, #50	; 0x32
 8006b6a:	4a34      	ldr	r2, [pc, #208]	; (8006c3c <UART_SetConfig+0x4e4>)
 8006b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b70:	095b      	lsrs	r3, r3, #5
 8006b72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b76:	441c      	add	r4, r3
 8006b78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	673b      	str	r3, [r7, #112]	; 0x70
 8006b80:	677a      	str	r2, [r7, #116]	; 0x74
 8006b82:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006b86:	4642      	mov	r2, r8
 8006b88:	464b      	mov	r3, r9
 8006b8a:	1891      	adds	r1, r2, r2
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	415b      	adcs	r3, r3
 8006b90:	60fb      	str	r3, [r7, #12]
 8006b92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b96:	4641      	mov	r1, r8
 8006b98:	1851      	adds	r1, r2, r1
 8006b9a:	6039      	str	r1, [r7, #0]
 8006b9c:	4649      	mov	r1, r9
 8006b9e:	414b      	adcs	r3, r1
 8006ba0:	607b      	str	r3, [r7, #4]
 8006ba2:	f04f 0200 	mov.w	r2, #0
 8006ba6:	f04f 0300 	mov.w	r3, #0
 8006baa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006bae:	4659      	mov	r1, fp
 8006bb0:	00cb      	lsls	r3, r1, #3
 8006bb2:	4651      	mov	r1, sl
 8006bb4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bb8:	4651      	mov	r1, sl
 8006bba:	00ca      	lsls	r2, r1, #3
 8006bbc:	4610      	mov	r0, r2
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	4642      	mov	r2, r8
 8006bc4:	189b      	adds	r3, r3, r2
 8006bc6:	66bb      	str	r3, [r7, #104]	; 0x68
 8006bc8:	464b      	mov	r3, r9
 8006bca:	460a      	mov	r2, r1
 8006bcc:	eb42 0303 	adc.w	r3, r2, r3
 8006bd0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	663b      	str	r3, [r7, #96]	; 0x60
 8006bdc:	667a      	str	r2, [r7, #100]	; 0x64
 8006bde:	f04f 0200 	mov.w	r2, #0
 8006be2:	f04f 0300 	mov.w	r3, #0
 8006be6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006bea:	4649      	mov	r1, r9
 8006bec:	008b      	lsls	r3, r1, #2
 8006bee:	4641      	mov	r1, r8
 8006bf0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006bf4:	4641      	mov	r1, r8
 8006bf6:	008a      	lsls	r2, r1, #2
 8006bf8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006bfc:	f7f9 ffd4 	bl	8000ba8 <__aeabi_uldivmod>
 8006c00:	4602      	mov	r2, r0
 8006c02:	460b      	mov	r3, r1
 8006c04:	4b0d      	ldr	r3, [pc, #52]	; (8006c3c <UART_SetConfig+0x4e4>)
 8006c06:	fba3 1302 	umull	r1, r3, r3, r2
 8006c0a:	095b      	lsrs	r3, r3, #5
 8006c0c:	2164      	movs	r1, #100	; 0x64
 8006c0e:	fb01 f303 	mul.w	r3, r1, r3
 8006c12:	1ad3      	subs	r3, r2, r3
 8006c14:	011b      	lsls	r3, r3, #4
 8006c16:	3332      	adds	r3, #50	; 0x32
 8006c18:	4a08      	ldr	r2, [pc, #32]	; (8006c3c <UART_SetConfig+0x4e4>)
 8006c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c1e:	095b      	lsrs	r3, r3, #5
 8006c20:	f003 020f 	and.w	r2, r3, #15
 8006c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4422      	add	r2, r4
 8006c2c:	609a      	str	r2, [r3, #8]
}
 8006c2e:	bf00      	nop
 8006c30:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006c34:	46bd      	mov	sp, r7
 8006c36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c3a:	bf00      	nop
 8006c3c:	51eb851f 	.word	0x51eb851f

08006c40 <__errno>:
 8006c40:	4b01      	ldr	r3, [pc, #4]	; (8006c48 <__errno+0x8>)
 8006c42:	6818      	ldr	r0, [r3, #0]
 8006c44:	4770      	bx	lr
 8006c46:	bf00      	nop
 8006c48:	20000038 	.word	0x20000038

08006c4c <__libc_init_array>:
 8006c4c:	b570      	push	{r4, r5, r6, lr}
 8006c4e:	4d0d      	ldr	r5, [pc, #52]	; (8006c84 <__libc_init_array+0x38>)
 8006c50:	4c0d      	ldr	r4, [pc, #52]	; (8006c88 <__libc_init_array+0x3c>)
 8006c52:	1b64      	subs	r4, r4, r5
 8006c54:	10a4      	asrs	r4, r4, #2
 8006c56:	2600      	movs	r6, #0
 8006c58:	42a6      	cmp	r6, r4
 8006c5a:	d109      	bne.n	8006c70 <__libc_init_array+0x24>
 8006c5c:	4d0b      	ldr	r5, [pc, #44]	; (8006c8c <__libc_init_array+0x40>)
 8006c5e:	4c0c      	ldr	r4, [pc, #48]	; (8006c90 <__libc_init_array+0x44>)
 8006c60:	f002 ff16 	bl	8009a90 <_init>
 8006c64:	1b64      	subs	r4, r4, r5
 8006c66:	10a4      	asrs	r4, r4, #2
 8006c68:	2600      	movs	r6, #0
 8006c6a:	42a6      	cmp	r6, r4
 8006c6c:	d105      	bne.n	8006c7a <__libc_init_array+0x2e>
 8006c6e:	bd70      	pop	{r4, r5, r6, pc}
 8006c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c74:	4798      	blx	r3
 8006c76:	3601      	adds	r6, #1
 8006c78:	e7ee      	b.n	8006c58 <__libc_init_array+0xc>
 8006c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c7e:	4798      	blx	r3
 8006c80:	3601      	adds	r6, #1
 8006c82:	e7f2      	b.n	8006c6a <__libc_init_array+0x1e>
 8006c84:	0800a234 	.word	0x0800a234
 8006c88:	0800a234 	.word	0x0800a234
 8006c8c:	0800a234 	.word	0x0800a234
 8006c90:	0800a238 	.word	0x0800a238

08006c94 <memset>:
 8006c94:	4402      	add	r2, r0
 8006c96:	4603      	mov	r3, r0
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d100      	bne.n	8006c9e <memset+0xa>
 8006c9c:	4770      	bx	lr
 8006c9e:	f803 1b01 	strb.w	r1, [r3], #1
 8006ca2:	e7f9      	b.n	8006c98 <memset+0x4>

08006ca4 <__cvt>:
 8006ca4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ca8:	ec55 4b10 	vmov	r4, r5, d0
 8006cac:	2d00      	cmp	r5, #0
 8006cae:	460e      	mov	r6, r1
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	462b      	mov	r3, r5
 8006cb4:	bfbb      	ittet	lt
 8006cb6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006cba:	461d      	movlt	r5, r3
 8006cbc:	2300      	movge	r3, #0
 8006cbe:	232d      	movlt	r3, #45	; 0x2d
 8006cc0:	700b      	strb	r3, [r1, #0]
 8006cc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cc4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006cc8:	4691      	mov	r9, r2
 8006cca:	f023 0820 	bic.w	r8, r3, #32
 8006cce:	bfbc      	itt	lt
 8006cd0:	4622      	movlt	r2, r4
 8006cd2:	4614      	movlt	r4, r2
 8006cd4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006cd8:	d005      	beq.n	8006ce6 <__cvt+0x42>
 8006cda:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006cde:	d100      	bne.n	8006ce2 <__cvt+0x3e>
 8006ce0:	3601      	adds	r6, #1
 8006ce2:	2102      	movs	r1, #2
 8006ce4:	e000      	b.n	8006ce8 <__cvt+0x44>
 8006ce6:	2103      	movs	r1, #3
 8006ce8:	ab03      	add	r3, sp, #12
 8006cea:	9301      	str	r3, [sp, #4]
 8006cec:	ab02      	add	r3, sp, #8
 8006cee:	9300      	str	r3, [sp, #0]
 8006cf0:	ec45 4b10 	vmov	d0, r4, r5
 8006cf4:	4653      	mov	r3, sl
 8006cf6:	4632      	mov	r2, r6
 8006cf8:	f000 fcfe 	bl	80076f8 <_dtoa_r>
 8006cfc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006d00:	4607      	mov	r7, r0
 8006d02:	d102      	bne.n	8006d0a <__cvt+0x66>
 8006d04:	f019 0f01 	tst.w	r9, #1
 8006d08:	d022      	beq.n	8006d50 <__cvt+0xac>
 8006d0a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d0e:	eb07 0906 	add.w	r9, r7, r6
 8006d12:	d110      	bne.n	8006d36 <__cvt+0x92>
 8006d14:	783b      	ldrb	r3, [r7, #0]
 8006d16:	2b30      	cmp	r3, #48	; 0x30
 8006d18:	d10a      	bne.n	8006d30 <__cvt+0x8c>
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	4620      	mov	r0, r4
 8006d20:	4629      	mov	r1, r5
 8006d22:	f7f9 fed1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d26:	b918      	cbnz	r0, 8006d30 <__cvt+0x8c>
 8006d28:	f1c6 0601 	rsb	r6, r6, #1
 8006d2c:	f8ca 6000 	str.w	r6, [sl]
 8006d30:	f8da 3000 	ldr.w	r3, [sl]
 8006d34:	4499      	add	r9, r3
 8006d36:	2200      	movs	r2, #0
 8006d38:	2300      	movs	r3, #0
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	4629      	mov	r1, r5
 8006d3e:	f7f9 fec3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d42:	b108      	cbz	r0, 8006d48 <__cvt+0xa4>
 8006d44:	f8cd 900c 	str.w	r9, [sp, #12]
 8006d48:	2230      	movs	r2, #48	; 0x30
 8006d4a:	9b03      	ldr	r3, [sp, #12]
 8006d4c:	454b      	cmp	r3, r9
 8006d4e:	d307      	bcc.n	8006d60 <__cvt+0xbc>
 8006d50:	9b03      	ldr	r3, [sp, #12]
 8006d52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d54:	1bdb      	subs	r3, r3, r7
 8006d56:	4638      	mov	r0, r7
 8006d58:	6013      	str	r3, [r2, #0]
 8006d5a:	b004      	add	sp, #16
 8006d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d60:	1c59      	adds	r1, r3, #1
 8006d62:	9103      	str	r1, [sp, #12]
 8006d64:	701a      	strb	r2, [r3, #0]
 8006d66:	e7f0      	b.n	8006d4a <__cvt+0xa6>

08006d68 <__exponent>:
 8006d68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2900      	cmp	r1, #0
 8006d6e:	bfb8      	it	lt
 8006d70:	4249      	neglt	r1, r1
 8006d72:	f803 2b02 	strb.w	r2, [r3], #2
 8006d76:	bfb4      	ite	lt
 8006d78:	222d      	movlt	r2, #45	; 0x2d
 8006d7a:	222b      	movge	r2, #43	; 0x2b
 8006d7c:	2909      	cmp	r1, #9
 8006d7e:	7042      	strb	r2, [r0, #1]
 8006d80:	dd2a      	ble.n	8006dd8 <__exponent+0x70>
 8006d82:	f10d 0407 	add.w	r4, sp, #7
 8006d86:	46a4      	mov	ip, r4
 8006d88:	270a      	movs	r7, #10
 8006d8a:	46a6      	mov	lr, r4
 8006d8c:	460a      	mov	r2, r1
 8006d8e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006d92:	fb07 1516 	mls	r5, r7, r6, r1
 8006d96:	3530      	adds	r5, #48	; 0x30
 8006d98:	2a63      	cmp	r2, #99	; 0x63
 8006d9a:	f104 34ff 	add.w	r4, r4, #4294967295
 8006d9e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006da2:	4631      	mov	r1, r6
 8006da4:	dcf1      	bgt.n	8006d8a <__exponent+0x22>
 8006da6:	3130      	adds	r1, #48	; 0x30
 8006da8:	f1ae 0502 	sub.w	r5, lr, #2
 8006dac:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006db0:	1c44      	adds	r4, r0, #1
 8006db2:	4629      	mov	r1, r5
 8006db4:	4561      	cmp	r1, ip
 8006db6:	d30a      	bcc.n	8006dce <__exponent+0x66>
 8006db8:	f10d 0209 	add.w	r2, sp, #9
 8006dbc:	eba2 020e 	sub.w	r2, r2, lr
 8006dc0:	4565      	cmp	r5, ip
 8006dc2:	bf88      	it	hi
 8006dc4:	2200      	movhi	r2, #0
 8006dc6:	4413      	add	r3, r2
 8006dc8:	1a18      	subs	r0, r3, r0
 8006dca:	b003      	add	sp, #12
 8006dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006dd2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006dd6:	e7ed      	b.n	8006db4 <__exponent+0x4c>
 8006dd8:	2330      	movs	r3, #48	; 0x30
 8006dda:	3130      	adds	r1, #48	; 0x30
 8006ddc:	7083      	strb	r3, [r0, #2]
 8006dde:	70c1      	strb	r1, [r0, #3]
 8006de0:	1d03      	adds	r3, r0, #4
 8006de2:	e7f1      	b.n	8006dc8 <__exponent+0x60>

08006de4 <_printf_float>:
 8006de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006de8:	ed2d 8b02 	vpush	{d8}
 8006dec:	b08d      	sub	sp, #52	; 0x34
 8006dee:	460c      	mov	r4, r1
 8006df0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006df4:	4616      	mov	r6, r2
 8006df6:	461f      	mov	r7, r3
 8006df8:	4605      	mov	r5, r0
 8006dfa:	f001 fa6b 	bl	80082d4 <_localeconv_r>
 8006dfe:	f8d0 a000 	ldr.w	sl, [r0]
 8006e02:	4650      	mov	r0, sl
 8006e04:	f7f9 f9e4 	bl	80001d0 <strlen>
 8006e08:	2300      	movs	r3, #0
 8006e0a:	930a      	str	r3, [sp, #40]	; 0x28
 8006e0c:	6823      	ldr	r3, [r4, #0]
 8006e0e:	9305      	str	r3, [sp, #20]
 8006e10:	f8d8 3000 	ldr.w	r3, [r8]
 8006e14:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006e18:	3307      	adds	r3, #7
 8006e1a:	f023 0307 	bic.w	r3, r3, #7
 8006e1e:	f103 0208 	add.w	r2, r3, #8
 8006e22:	f8c8 2000 	str.w	r2, [r8]
 8006e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006e2e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006e32:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006e36:	9307      	str	r3, [sp, #28]
 8006e38:	f8cd 8018 	str.w	r8, [sp, #24]
 8006e3c:	ee08 0a10 	vmov	s16, r0
 8006e40:	4b9f      	ldr	r3, [pc, #636]	; (80070c0 <_printf_float+0x2dc>)
 8006e42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e46:	f04f 32ff 	mov.w	r2, #4294967295
 8006e4a:	f7f9 fe6f 	bl	8000b2c <__aeabi_dcmpun>
 8006e4e:	bb88      	cbnz	r0, 8006eb4 <_printf_float+0xd0>
 8006e50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e54:	4b9a      	ldr	r3, [pc, #616]	; (80070c0 <_printf_float+0x2dc>)
 8006e56:	f04f 32ff 	mov.w	r2, #4294967295
 8006e5a:	f7f9 fe49 	bl	8000af0 <__aeabi_dcmple>
 8006e5e:	bb48      	cbnz	r0, 8006eb4 <_printf_float+0xd0>
 8006e60:	2200      	movs	r2, #0
 8006e62:	2300      	movs	r3, #0
 8006e64:	4640      	mov	r0, r8
 8006e66:	4649      	mov	r1, r9
 8006e68:	f7f9 fe38 	bl	8000adc <__aeabi_dcmplt>
 8006e6c:	b110      	cbz	r0, 8006e74 <_printf_float+0x90>
 8006e6e:	232d      	movs	r3, #45	; 0x2d
 8006e70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e74:	4b93      	ldr	r3, [pc, #588]	; (80070c4 <_printf_float+0x2e0>)
 8006e76:	4894      	ldr	r0, [pc, #592]	; (80070c8 <_printf_float+0x2e4>)
 8006e78:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006e7c:	bf94      	ite	ls
 8006e7e:	4698      	movls	r8, r3
 8006e80:	4680      	movhi	r8, r0
 8006e82:	2303      	movs	r3, #3
 8006e84:	6123      	str	r3, [r4, #16]
 8006e86:	9b05      	ldr	r3, [sp, #20]
 8006e88:	f023 0204 	bic.w	r2, r3, #4
 8006e8c:	6022      	str	r2, [r4, #0]
 8006e8e:	f04f 0900 	mov.w	r9, #0
 8006e92:	9700      	str	r7, [sp, #0]
 8006e94:	4633      	mov	r3, r6
 8006e96:	aa0b      	add	r2, sp, #44	; 0x2c
 8006e98:	4621      	mov	r1, r4
 8006e9a:	4628      	mov	r0, r5
 8006e9c:	f000 f9d8 	bl	8007250 <_printf_common>
 8006ea0:	3001      	adds	r0, #1
 8006ea2:	f040 8090 	bne.w	8006fc6 <_printf_float+0x1e2>
 8006ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8006eaa:	b00d      	add	sp, #52	; 0x34
 8006eac:	ecbd 8b02 	vpop	{d8}
 8006eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eb4:	4642      	mov	r2, r8
 8006eb6:	464b      	mov	r3, r9
 8006eb8:	4640      	mov	r0, r8
 8006eba:	4649      	mov	r1, r9
 8006ebc:	f7f9 fe36 	bl	8000b2c <__aeabi_dcmpun>
 8006ec0:	b140      	cbz	r0, 8006ed4 <_printf_float+0xf0>
 8006ec2:	464b      	mov	r3, r9
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	bfbc      	itt	lt
 8006ec8:	232d      	movlt	r3, #45	; 0x2d
 8006eca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006ece:	487f      	ldr	r0, [pc, #508]	; (80070cc <_printf_float+0x2e8>)
 8006ed0:	4b7f      	ldr	r3, [pc, #508]	; (80070d0 <_printf_float+0x2ec>)
 8006ed2:	e7d1      	b.n	8006e78 <_printf_float+0x94>
 8006ed4:	6863      	ldr	r3, [r4, #4]
 8006ed6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006eda:	9206      	str	r2, [sp, #24]
 8006edc:	1c5a      	adds	r2, r3, #1
 8006ede:	d13f      	bne.n	8006f60 <_printf_float+0x17c>
 8006ee0:	2306      	movs	r3, #6
 8006ee2:	6063      	str	r3, [r4, #4]
 8006ee4:	9b05      	ldr	r3, [sp, #20]
 8006ee6:	6861      	ldr	r1, [r4, #4]
 8006ee8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006eec:	2300      	movs	r3, #0
 8006eee:	9303      	str	r3, [sp, #12]
 8006ef0:	ab0a      	add	r3, sp, #40	; 0x28
 8006ef2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006ef6:	ab09      	add	r3, sp, #36	; 0x24
 8006ef8:	ec49 8b10 	vmov	d0, r8, r9
 8006efc:	9300      	str	r3, [sp, #0]
 8006efe:	6022      	str	r2, [r4, #0]
 8006f00:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006f04:	4628      	mov	r0, r5
 8006f06:	f7ff fecd 	bl	8006ca4 <__cvt>
 8006f0a:	9b06      	ldr	r3, [sp, #24]
 8006f0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f0e:	2b47      	cmp	r3, #71	; 0x47
 8006f10:	4680      	mov	r8, r0
 8006f12:	d108      	bne.n	8006f26 <_printf_float+0x142>
 8006f14:	1cc8      	adds	r0, r1, #3
 8006f16:	db02      	blt.n	8006f1e <_printf_float+0x13a>
 8006f18:	6863      	ldr	r3, [r4, #4]
 8006f1a:	4299      	cmp	r1, r3
 8006f1c:	dd41      	ble.n	8006fa2 <_printf_float+0x1be>
 8006f1e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006f22:	fa5f fb8b 	uxtb.w	fp, fp
 8006f26:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006f2a:	d820      	bhi.n	8006f6e <_printf_float+0x18a>
 8006f2c:	3901      	subs	r1, #1
 8006f2e:	465a      	mov	r2, fp
 8006f30:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006f34:	9109      	str	r1, [sp, #36]	; 0x24
 8006f36:	f7ff ff17 	bl	8006d68 <__exponent>
 8006f3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f3c:	1813      	adds	r3, r2, r0
 8006f3e:	2a01      	cmp	r2, #1
 8006f40:	4681      	mov	r9, r0
 8006f42:	6123      	str	r3, [r4, #16]
 8006f44:	dc02      	bgt.n	8006f4c <_printf_float+0x168>
 8006f46:	6822      	ldr	r2, [r4, #0]
 8006f48:	07d2      	lsls	r2, r2, #31
 8006f4a:	d501      	bpl.n	8006f50 <_printf_float+0x16c>
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	6123      	str	r3, [r4, #16]
 8006f50:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d09c      	beq.n	8006e92 <_printf_float+0xae>
 8006f58:	232d      	movs	r3, #45	; 0x2d
 8006f5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f5e:	e798      	b.n	8006e92 <_printf_float+0xae>
 8006f60:	9a06      	ldr	r2, [sp, #24]
 8006f62:	2a47      	cmp	r2, #71	; 0x47
 8006f64:	d1be      	bne.n	8006ee4 <_printf_float+0x100>
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1bc      	bne.n	8006ee4 <_printf_float+0x100>
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e7b9      	b.n	8006ee2 <_printf_float+0xfe>
 8006f6e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006f72:	d118      	bne.n	8006fa6 <_printf_float+0x1c2>
 8006f74:	2900      	cmp	r1, #0
 8006f76:	6863      	ldr	r3, [r4, #4]
 8006f78:	dd0b      	ble.n	8006f92 <_printf_float+0x1ae>
 8006f7a:	6121      	str	r1, [r4, #16]
 8006f7c:	b913      	cbnz	r3, 8006f84 <_printf_float+0x1a0>
 8006f7e:	6822      	ldr	r2, [r4, #0]
 8006f80:	07d0      	lsls	r0, r2, #31
 8006f82:	d502      	bpl.n	8006f8a <_printf_float+0x1a6>
 8006f84:	3301      	adds	r3, #1
 8006f86:	440b      	add	r3, r1
 8006f88:	6123      	str	r3, [r4, #16]
 8006f8a:	65a1      	str	r1, [r4, #88]	; 0x58
 8006f8c:	f04f 0900 	mov.w	r9, #0
 8006f90:	e7de      	b.n	8006f50 <_printf_float+0x16c>
 8006f92:	b913      	cbnz	r3, 8006f9a <_printf_float+0x1b6>
 8006f94:	6822      	ldr	r2, [r4, #0]
 8006f96:	07d2      	lsls	r2, r2, #31
 8006f98:	d501      	bpl.n	8006f9e <_printf_float+0x1ba>
 8006f9a:	3302      	adds	r3, #2
 8006f9c:	e7f4      	b.n	8006f88 <_printf_float+0x1a4>
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e7f2      	b.n	8006f88 <_printf_float+0x1a4>
 8006fa2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006fa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fa8:	4299      	cmp	r1, r3
 8006faa:	db05      	blt.n	8006fb8 <_printf_float+0x1d4>
 8006fac:	6823      	ldr	r3, [r4, #0]
 8006fae:	6121      	str	r1, [r4, #16]
 8006fb0:	07d8      	lsls	r0, r3, #31
 8006fb2:	d5ea      	bpl.n	8006f8a <_printf_float+0x1a6>
 8006fb4:	1c4b      	adds	r3, r1, #1
 8006fb6:	e7e7      	b.n	8006f88 <_printf_float+0x1a4>
 8006fb8:	2900      	cmp	r1, #0
 8006fba:	bfd4      	ite	le
 8006fbc:	f1c1 0202 	rsble	r2, r1, #2
 8006fc0:	2201      	movgt	r2, #1
 8006fc2:	4413      	add	r3, r2
 8006fc4:	e7e0      	b.n	8006f88 <_printf_float+0x1a4>
 8006fc6:	6823      	ldr	r3, [r4, #0]
 8006fc8:	055a      	lsls	r2, r3, #21
 8006fca:	d407      	bmi.n	8006fdc <_printf_float+0x1f8>
 8006fcc:	6923      	ldr	r3, [r4, #16]
 8006fce:	4642      	mov	r2, r8
 8006fd0:	4631      	mov	r1, r6
 8006fd2:	4628      	mov	r0, r5
 8006fd4:	47b8      	blx	r7
 8006fd6:	3001      	adds	r0, #1
 8006fd8:	d12c      	bne.n	8007034 <_printf_float+0x250>
 8006fda:	e764      	b.n	8006ea6 <_printf_float+0xc2>
 8006fdc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006fe0:	f240 80e0 	bls.w	80071a4 <_printf_float+0x3c0>
 8006fe4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006fe8:	2200      	movs	r2, #0
 8006fea:	2300      	movs	r3, #0
 8006fec:	f7f9 fd6c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ff0:	2800      	cmp	r0, #0
 8006ff2:	d034      	beq.n	800705e <_printf_float+0x27a>
 8006ff4:	4a37      	ldr	r2, [pc, #220]	; (80070d4 <_printf_float+0x2f0>)
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	4631      	mov	r1, r6
 8006ffa:	4628      	mov	r0, r5
 8006ffc:	47b8      	blx	r7
 8006ffe:	3001      	adds	r0, #1
 8007000:	f43f af51 	beq.w	8006ea6 <_printf_float+0xc2>
 8007004:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007008:	429a      	cmp	r2, r3
 800700a:	db02      	blt.n	8007012 <_printf_float+0x22e>
 800700c:	6823      	ldr	r3, [r4, #0]
 800700e:	07d8      	lsls	r0, r3, #31
 8007010:	d510      	bpl.n	8007034 <_printf_float+0x250>
 8007012:	ee18 3a10 	vmov	r3, s16
 8007016:	4652      	mov	r2, sl
 8007018:	4631      	mov	r1, r6
 800701a:	4628      	mov	r0, r5
 800701c:	47b8      	blx	r7
 800701e:	3001      	adds	r0, #1
 8007020:	f43f af41 	beq.w	8006ea6 <_printf_float+0xc2>
 8007024:	f04f 0800 	mov.w	r8, #0
 8007028:	f104 091a 	add.w	r9, r4, #26
 800702c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800702e:	3b01      	subs	r3, #1
 8007030:	4543      	cmp	r3, r8
 8007032:	dc09      	bgt.n	8007048 <_printf_float+0x264>
 8007034:	6823      	ldr	r3, [r4, #0]
 8007036:	079b      	lsls	r3, r3, #30
 8007038:	f100 8105 	bmi.w	8007246 <_printf_float+0x462>
 800703c:	68e0      	ldr	r0, [r4, #12]
 800703e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007040:	4298      	cmp	r0, r3
 8007042:	bfb8      	it	lt
 8007044:	4618      	movlt	r0, r3
 8007046:	e730      	b.n	8006eaa <_printf_float+0xc6>
 8007048:	2301      	movs	r3, #1
 800704a:	464a      	mov	r2, r9
 800704c:	4631      	mov	r1, r6
 800704e:	4628      	mov	r0, r5
 8007050:	47b8      	blx	r7
 8007052:	3001      	adds	r0, #1
 8007054:	f43f af27 	beq.w	8006ea6 <_printf_float+0xc2>
 8007058:	f108 0801 	add.w	r8, r8, #1
 800705c:	e7e6      	b.n	800702c <_printf_float+0x248>
 800705e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007060:	2b00      	cmp	r3, #0
 8007062:	dc39      	bgt.n	80070d8 <_printf_float+0x2f4>
 8007064:	4a1b      	ldr	r2, [pc, #108]	; (80070d4 <_printf_float+0x2f0>)
 8007066:	2301      	movs	r3, #1
 8007068:	4631      	mov	r1, r6
 800706a:	4628      	mov	r0, r5
 800706c:	47b8      	blx	r7
 800706e:	3001      	adds	r0, #1
 8007070:	f43f af19 	beq.w	8006ea6 <_printf_float+0xc2>
 8007074:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007078:	4313      	orrs	r3, r2
 800707a:	d102      	bne.n	8007082 <_printf_float+0x29e>
 800707c:	6823      	ldr	r3, [r4, #0]
 800707e:	07d9      	lsls	r1, r3, #31
 8007080:	d5d8      	bpl.n	8007034 <_printf_float+0x250>
 8007082:	ee18 3a10 	vmov	r3, s16
 8007086:	4652      	mov	r2, sl
 8007088:	4631      	mov	r1, r6
 800708a:	4628      	mov	r0, r5
 800708c:	47b8      	blx	r7
 800708e:	3001      	adds	r0, #1
 8007090:	f43f af09 	beq.w	8006ea6 <_printf_float+0xc2>
 8007094:	f04f 0900 	mov.w	r9, #0
 8007098:	f104 0a1a 	add.w	sl, r4, #26
 800709c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800709e:	425b      	negs	r3, r3
 80070a0:	454b      	cmp	r3, r9
 80070a2:	dc01      	bgt.n	80070a8 <_printf_float+0x2c4>
 80070a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070a6:	e792      	b.n	8006fce <_printf_float+0x1ea>
 80070a8:	2301      	movs	r3, #1
 80070aa:	4652      	mov	r2, sl
 80070ac:	4631      	mov	r1, r6
 80070ae:	4628      	mov	r0, r5
 80070b0:	47b8      	blx	r7
 80070b2:	3001      	adds	r0, #1
 80070b4:	f43f aef7 	beq.w	8006ea6 <_printf_float+0xc2>
 80070b8:	f109 0901 	add.w	r9, r9, #1
 80070bc:	e7ee      	b.n	800709c <_printf_float+0x2b8>
 80070be:	bf00      	nop
 80070c0:	7fefffff 	.word	0x7fefffff
 80070c4:	08009e58 	.word	0x08009e58
 80070c8:	08009e5c 	.word	0x08009e5c
 80070cc:	08009e64 	.word	0x08009e64
 80070d0:	08009e60 	.word	0x08009e60
 80070d4:	08009e68 	.word	0x08009e68
 80070d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80070dc:	429a      	cmp	r2, r3
 80070de:	bfa8      	it	ge
 80070e0:	461a      	movge	r2, r3
 80070e2:	2a00      	cmp	r2, #0
 80070e4:	4691      	mov	r9, r2
 80070e6:	dc37      	bgt.n	8007158 <_printf_float+0x374>
 80070e8:	f04f 0b00 	mov.w	fp, #0
 80070ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80070f0:	f104 021a 	add.w	r2, r4, #26
 80070f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80070f6:	9305      	str	r3, [sp, #20]
 80070f8:	eba3 0309 	sub.w	r3, r3, r9
 80070fc:	455b      	cmp	r3, fp
 80070fe:	dc33      	bgt.n	8007168 <_printf_float+0x384>
 8007100:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007104:	429a      	cmp	r2, r3
 8007106:	db3b      	blt.n	8007180 <_printf_float+0x39c>
 8007108:	6823      	ldr	r3, [r4, #0]
 800710a:	07da      	lsls	r2, r3, #31
 800710c:	d438      	bmi.n	8007180 <_printf_float+0x39c>
 800710e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007110:	9a05      	ldr	r2, [sp, #20]
 8007112:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007114:	1a9a      	subs	r2, r3, r2
 8007116:	eba3 0901 	sub.w	r9, r3, r1
 800711a:	4591      	cmp	r9, r2
 800711c:	bfa8      	it	ge
 800711e:	4691      	movge	r9, r2
 8007120:	f1b9 0f00 	cmp.w	r9, #0
 8007124:	dc35      	bgt.n	8007192 <_printf_float+0x3ae>
 8007126:	f04f 0800 	mov.w	r8, #0
 800712a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800712e:	f104 0a1a 	add.w	sl, r4, #26
 8007132:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007136:	1a9b      	subs	r3, r3, r2
 8007138:	eba3 0309 	sub.w	r3, r3, r9
 800713c:	4543      	cmp	r3, r8
 800713e:	f77f af79 	ble.w	8007034 <_printf_float+0x250>
 8007142:	2301      	movs	r3, #1
 8007144:	4652      	mov	r2, sl
 8007146:	4631      	mov	r1, r6
 8007148:	4628      	mov	r0, r5
 800714a:	47b8      	blx	r7
 800714c:	3001      	adds	r0, #1
 800714e:	f43f aeaa 	beq.w	8006ea6 <_printf_float+0xc2>
 8007152:	f108 0801 	add.w	r8, r8, #1
 8007156:	e7ec      	b.n	8007132 <_printf_float+0x34e>
 8007158:	4613      	mov	r3, r2
 800715a:	4631      	mov	r1, r6
 800715c:	4642      	mov	r2, r8
 800715e:	4628      	mov	r0, r5
 8007160:	47b8      	blx	r7
 8007162:	3001      	adds	r0, #1
 8007164:	d1c0      	bne.n	80070e8 <_printf_float+0x304>
 8007166:	e69e      	b.n	8006ea6 <_printf_float+0xc2>
 8007168:	2301      	movs	r3, #1
 800716a:	4631      	mov	r1, r6
 800716c:	4628      	mov	r0, r5
 800716e:	9205      	str	r2, [sp, #20]
 8007170:	47b8      	blx	r7
 8007172:	3001      	adds	r0, #1
 8007174:	f43f ae97 	beq.w	8006ea6 <_printf_float+0xc2>
 8007178:	9a05      	ldr	r2, [sp, #20]
 800717a:	f10b 0b01 	add.w	fp, fp, #1
 800717e:	e7b9      	b.n	80070f4 <_printf_float+0x310>
 8007180:	ee18 3a10 	vmov	r3, s16
 8007184:	4652      	mov	r2, sl
 8007186:	4631      	mov	r1, r6
 8007188:	4628      	mov	r0, r5
 800718a:	47b8      	blx	r7
 800718c:	3001      	adds	r0, #1
 800718e:	d1be      	bne.n	800710e <_printf_float+0x32a>
 8007190:	e689      	b.n	8006ea6 <_printf_float+0xc2>
 8007192:	9a05      	ldr	r2, [sp, #20]
 8007194:	464b      	mov	r3, r9
 8007196:	4442      	add	r2, r8
 8007198:	4631      	mov	r1, r6
 800719a:	4628      	mov	r0, r5
 800719c:	47b8      	blx	r7
 800719e:	3001      	adds	r0, #1
 80071a0:	d1c1      	bne.n	8007126 <_printf_float+0x342>
 80071a2:	e680      	b.n	8006ea6 <_printf_float+0xc2>
 80071a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071a6:	2a01      	cmp	r2, #1
 80071a8:	dc01      	bgt.n	80071ae <_printf_float+0x3ca>
 80071aa:	07db      	lsls	r3, r3, #31
 80071ac:	d538      	bpl.n	8007220 <_printf_float+0x43c>
 80071ae:	2301      	movs	r3, #1
 80071b0:	4642      	mov	r2, r8
 80071b2:	4631      	mov	r1, r6
 80071b4:	4628      	mov	r0, r5
 80071b6:	47b8      	blx	r7
 80071b8:	3001      	adds	r0, #1
 80071ba:	f43f ae74 	beq.w	8006ea6 <_printf_float+0xc2>
 80071be:	ee18 3a10 	vmov	r3, s16
 80071c2:	4652      	mov	r2, sl
 80071c4:	4631      	mov	r1, r6
 80071c6:	4628      	mov	r0, r5
 80071c8:	47b8      	blx	r7
 80071ca:	3001      	adds	r0, #1
 80071cc:	f43f ae6b 	beq.w	8006ea6 <_printf_float+0xc2>
 80071d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80071d4:	2200      	movs	r2, #0
 80071d6:	2300      	movs	r3, #0
 80071d8:	f7f9 fc76 	bl	8000ac8 <__aeabi_dcmpeq>
 80071dc:	b9d8      	cbnz	r0, 8007216 <_printf_float+0x432>
 80071de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071e0:	f108 0201 	add.w	r2, r8, #1
 80071e4:	3b01      	subs	r3, #1
 80071e6:	4631      	mov	r1, r6
 80071e8:	4628      	mov	r0, r5
 80071ea:	47b8      	blx	r7
 80071ec:	3001      	adds	r0, #1
 80071ee:	d10e      	bne.n	800720e <_printf_float+0x42a>
 80071f0:	e659      	b.n	8006ea6 <_printf_float+0xc2>
 80071f2:	2301      	movs	r3, #1
 80071f4:	4652      	mov	r2, sl
 80071f6:	4631      	mov	r1, r6
 80071f8:	4628      	mov	r0, r5
 80071fa:	47b8      	blx	r7
 80071fc:	3001      	adds	r0, #1
 80071fe:	f43f ae52 	beq.w	8006ea6 <_printf_float+0xc2>
 8007202:	f108 0801 	add.w	r8, r8, #1
 8007206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007208:	3b01      	subs	r3, #1
 800720a:	4543      	cmp	r3, r8
 800720c:	dcf1      	bgt.n	80071f2 <_printf_float+0x40e>
 800720e:	464b      	mov	r3, r9
 8007210:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007214:	e6dc      	b.n	8006fd0 <_printf_float+0x1ec>
 8007216:	f04f 0800 	mov.w	r8, #0
 800721a:	f104 0a1a 	add.w	sl, r4, #26
 800721e:	e7f2      	b.n	8007206 <_printf_float+0x422>
 8007220:	2301      	movs	r3, #1
 8007222:	4642      	mov	r2, r8
 8007224:	e7df      	b.n	80071e6 <_printf_float+0x402>
 8007226:	2301      	movs	r3, #1
 8007228:	464a      	mov	r2, r9
 800722a:	4631      	mov	r1, r6
 800722c:	4628      	mov	r0, r5
 800722e:	47b8      	blx	r7
 8007230:	3001      	adds	r0, #1
 8007232:	f43f ae38 	beq.w	8006ea6 <_printf_float+0xc2>
 8007236:	f108 0801 	add.w	r8, r8, #1
 800723a:	68e3      	ldr	r3, [r4, #12]
 800723c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800723e:	1a5b      	subs	r3, r3, r1
 8007240:	4543      	cmp	r3, r8
 8007242:	dcf0      	bgt.n	8007226 <_printf_float+0x442>
 8007244:	e6fa      	b.n	800703c <_printf_float+0x258>
 8007246:	f04f 0800 	mov.w	r8, #0
 800724a:	f104 0919 	add.w	r9, r4, #25
 800724e:	e7f4      	b.n	800723a <_printf_float+0x456>

08007250 <_printf_common>:
 8007250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007254:	4616      	mov	r6, r2
 8007256:	4699      	mov	r9, r3
 8007258:	688a      	ldr	r2, [r1, #8]
 800725a:	690b      	ldr	r3, [r1, #16]
 800725c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007260:	4293      	cmp	r3, r2
 8007262:	bfb8      	it	lt
 8007264:	4613      	movlt	r3, r2
 8007266:	6033      	str	r3, [r6, #0]
 8007268:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800726c:	4607      	mov	r7, r0
 800726e:	460c      	mov	r4, r1
 8007270:	b10a      	cbz	r2, 8007276 <_printf_common+0x26>
 8007272:	3301      	adds	r3, #1
 8007274:	6033      	str	r3, [r6, #0]
 8007276:	6823      	ldr	r3, [r4, #0]
 8007278:	0699      	lsls	r1, r3, #26
 800727a:	bf42      	ittt	mi
 800727c:	6833      	ldrmi	r3, [r6, #0]
 800727e:	3302      	addmi	r3, #2
 8007280:	6033      	strmi	r3, [r6, #0]
 8007282:	6825      	ldr	r5, [r4, #0]
 8007284:	f015 0506 	ands.w	r5, r5, #6
 8007288:	d106      	bne.n	8007298 <_printf_common+0x48>
 800728a:	f104 0a19 	add.w	sl, r4, #25
 800728e:	68e3      	ldr	r3, [r4, #12]
 8007290:	6832      	ldr	r2, [r6, #0]
 8007292:	1a9b      	subs	r3, r3, r2
 8007294:	42ab      	cmp	r3, r5
 8007296:	dc26      	bgt.n	80072e6 <_printf_common+0x96>
 8007298:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800729c:	1e13      	subs	r3, r2, #0
 800729e:	6822      	ldr	r2, [r4, #0]
 80072a0:	bf18      	it	ne
 80072a2:	2301      	movne	r3, #1
 80072a4:	0692      	lsls	r2, r2, #26
 80072a6:	d42b      	bmi.n	8007300 <_printf_common+0xb0>
 80072a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072ac:	4649      	mov	r1, r9
 80072ae:	4638      	mov	r0, r7
 80072b0:	47c0      	blx	r8
 80072b2:	3001      	adds	r0, #1
 80072b4:	d01e      	beq.n	80072f4 <_printf_common+0xa4>
 80072b6:	6823      	ldr	r3, [r4, #0]
 80072b8:	68e5      	ldr	r5, [r4, #12]
 80072ba:	6832      	ldr	r2, [r6, #0]
 80072bc:	f003 0306 	and.w	r3, r3, #6
 80072c0:	2b04      	cmp	r3, #4
 80072c2:	bf08      	it	eq
 80072c4:	1aad      	subeq	r5, r5, r2
 80072c6:	68a3      	ldr	r3, [r4, #8]
 80072c8:	6922      	ldr	r2, [r4, #16]
 80072ca:	bf0c      	ite	eq
 80072cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072d0:	2500      	movne	r5, #0
 80072d2:	4293      	cmp	r3, r2
 80072d4:	bfc4      	itt	gt
 80072d6:	1a9b      	subgt	r3, r3, r2
 80072d8:	18ed      	addgt	r5, r5, r3
 80072da:	2600      	movs	r6, #0
 80072dc:	341a      	adds	r4, #26
 80072de:	42b5      	cmp	r5, r6
 80072e0:	d11a      	bne.n	8007318 <_printf_common+0xc8>
 80072e2:	2000      	movs	r0, #0
 80072e4:	e008      	b.n	80072f8 <_printf_common+0xa8>
 80072e6:	2301      	movs	r3, #1
 80072e8:	4652      	mov	r2, sl
 80072ea:	4649      	mov	r1, r9
 80072ec:	4638      	mov	r0, r7
 80072ee:	47c0      	blx	r8
 80072f0:	3001      	adds	r0, #1
 80072f2:	d103      	bne.n	80072fc <_printf_common+0xac>
 80072f4:	f04f 30ff 	mov.w	r0, #4294967295
 80072f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072fc:	3501      	adds	r5, #1
 80072fe:	e7c6      	b.n	800728e <_printf_common+0x3e>
 8007300:	18e1      	adds	r1, r4, r3
 8007302:	1c5a      	adds	r2, r3, #1
 8007304:	2030      	movs	r0, #48	; 0x30
 8007306:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800730a:	4422      	add	r2, r4
 800730c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007310:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007314:	3302      	adds	r3, #2
 8007316:	e7c7      	b.n	80072a8 <_printf_common+0x58>
 8007318:	2301      	movs	r3, #1
 800731a:	4622      	mov	r2, r4
 800731c:	4649      	mov	r1, r9
 800731e:	4638      	mov	r0, r7
 8007320:	47c0      	blx	r8
 8007322:	3001      	adds	r0, #1
 8007324:	d0e6      	beq.n	80072f4 <_printf_common+0xa4>
 8007326:	3601      	adds	r6, #1
 8007328:	e7d9      	b.n	80072de <_printf_common+0x8e>
	...

0800732c <_printf_i>:
 800732c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007330:	7e0f      	ldrb	r7, [r1, #24]
 8007332:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007334:	2f78      	cmp	r7, #120	; 0x78
 8007336:	4691      	mov	r9, r2
 8007338:	4680      	mov	r8, r0
 800733a:	460c      	mov	r4, r1
 800733c:	469a      	mov	sl, r3
 800733e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007342:	d807      	bhi.n	8007354 <_printf_i+0x28>
 8007344:	2f62      	cmp	r7, #98	; 0x62
 8007346:	d80a      	bhi.n	800735e <_printf_i+0x32>
 8007348:	2f00      	cmp	r7, #0
 800734a:	f000 80d8 	beq.w	80074fe <_printf_i+0x1d2>
 800734e:	2f58      	cmp	r7, #88	; 0x58
 8007350:	f000 80a3 	beq.w	800749a <_printf_i+0x16e>
 8007354:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007358:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800735c:	e03a      	b.n	80073d4 <_printf_i+0xa8>
 800735e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007362:	2b15      	cmp	r3, #21
 8007364:	d8f6      	bhi.n	8007354 <_printf_i+0x28>
 8007366:	a101      	add	r1, pc, #4	; (adr r1, 800736c <_printf_i+0x40>)
 8007368:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800736c:	080073c5 	.word	0x080073c5
 8007370:	080073d9 	.word	0x080073d9
 8007374:	08007355 	.word	0x08007355
 8007378:	08007355 	.word	0x08007355
 800737c:	08007355 	.word	0x08007355
 8007380:	08007355 	.word	0x08007355
 8007384:	080073d9 	.word	0x080073d9
 8007388:	08007355 	.word	0x08007355
 800738c:	08007355 	.word	0x08007355
 8007390:	08007355 	.word	0x08007355
 8007394:	08007355 	.word	0x08007355
 8007398:	080074e5 	.word	0x080074e5
 800739c:	08007409 	.word	0x08007409
 80073a0:	080074c7 	.word	0x080074c7
 80073a4:	08007355 	.word	0x08007355
 80073a8:	08007355 	.word	0x08007355
 80073ac:	08007507 	.word	0x08007507
 80073b0:	08007355 	.word	0x08007355
 80073b4:	08007409 	.word	0x08007409
 80073b8:	08007355 	.word	0x08007355
 80073bc:	08007355 	.word	0x08007355
 80073c0:	080074cf 	.word	0x080074cf
 80073c4:	682b      	ldr	r3, [r5, #0]
 80073c6:	1d1a      	adds	r2, r3, #4
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	602a      	str	r2, [r5, #0]
 80073cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073d4:	2301      	movs	r3, #1
 80073d6:	e0a3      	b.n	8007520 <_printf_i+0x1f4>
 80073d8:	6820      	ldr	r0, [r4, #0]
 80073da:	6829      	ldr	r1, [r5, #0]
 80073dc:	0606      	lsls	r6, r0, #24
 80073de:	f101 0304 	add.w	r3, r1, #4
 80073e2:	d50a      	bpl.n	80073fa <_printf_i+0xce>
 80073e4:	680e      	ldr	r6, [r1, #0]
 80073e6:	602b      	str	r3, [r5, #0]
 80073e8:	2e00      	cmp	r6, #0
 80073ea:	da03      	bge.n	80073f4 <_printf_i+0xc8>
 80073ec:	232d      	movs	r3, #45	; 0x2d
 80073ee:	4276      	negs	r6, r6
 80073f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073f4:	485e      	ldr	r0, [pc, #376]	; (8007570 <_printf_i+0x244>)
 80073f6:	230a      	movs	r3, #10
 80073f8:	e019      	b.n	800742e <_printf_i+0x102>
 80073fa:	680e      	ldr	r6, [r1, #0]
 80073fc:	602b      	str	r3, [r5, #0]
 80073fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007402:	bf18      	it	ne
 8007404:	b236      	sxthne	r6, r6
 8007406:	e7ef      	b.n	80073e8 <_printf_i+0xbc>
 8007408:	682b      	ldr	r3, [r5, #0]
 800740a:	6820      	ldr	r0, [r4, #0]
 800740c:	1d19      	adds	r1, r3, #4
 800740e:	6029      	str	r1, [r5, #0]
 8007410:	0601      	lsls	r1, r0, #24
 8007412:	d501      	bpl.n	8007418 <_printf_i+0xec>
 8007414:	681e      	ldr	r6, [r3, #0]
 8007416:	e002      	b.n	800741e <_printf_i+0xf2>
 8007418:	0646      	lsls	r6, r0, #25
 800741a:	d5fb      	bpl.n	8007414 <_printf_i+0xe8>
 800741c:	881e      	ldrh	r6, [r3, #0]
 800741e:	4854      	ldr	r0, [pc, #336]	; (8007570 <_printf_i+0x244>)
 8007420:	2f6f      	cmp	r7, #111	; 0x6f
 8007422:	bf0c      	ite	eq
 8007424:	2308      	moveq	r3, #8
 8007426:	230a      	movne	r3, #10
 8007428:	2100      	movs	r1, #0
 800742a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800742e:	6865      	ldr	r5, [r4, #4]
 8007430:	60a5      	str	r5, [r4, #8]
 8007432:	2d00      	cmp	r5, #0
 8007434:	bfa2      	ittt	ge
 8007436:	6821      	ldrge	r1, [r4, #0]
 8007438:	f021 0104 	bicge.w	r1, r1, #4
 800743c:	6021      	strge	r1, [r4, #0]
 800743e:	b90e      	cbnz	r6, 8007444 <_printf_i+0x118>
 8007440:	2d00      	cmp	r5, #0
 8007442:	d04d      	beq.n	80074e0 <_printf_i+0x1b4>
 8007444:	4615      	mov	r5, r2
 8007446:	fbb6 f1f3 	udiv	r1, r6, r3
 800744a:	fb03 6711 	mls	r7, r3, r1, r6
 800744e:	5dc7      	ldrb	r7, [r0, r7]
 8007450:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007454:	4637      	mov	r7, r6
 8007456:	42bb      	cmp	r3, r7
 8007458:	460e      	mov	r6, r1
 800745a:	d9f4      	bls.n	8007446 <_printf_i+0x11a>
 800745c:	2b08      	cmp	r3, #8
 800745e:	d10b      	bne.n	8007478 <_printf_i+0x14c>
 8007460:	6823      	ldr	r3, [r4, #0]
 8007462:	07de      	lsls	r6, r3, #31
 8007464:	d508      	bpl.n	8007478 <_printf_i+0x14c>
 8007466:	6923      	ldr	r3, [r4, #16]
 8007468:	6861      	ldr	r1, [r4, #4]
 800746a:	4299      	cmp	r1, r3
 800746c:	bfde      	ittt	le
 800746e:	2330      	movle	r3, #48	; 0x30
 8007470:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007474:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007478:	1b52      	subs	r2, r2, r5
 800747a:	6122      	str	r2, [r4, #16]
 800747c:	f8cd a000 	str.w	sl, [sp]
 8007480:	464b      	mov	r3, r9
 8007482:	aa03      	add	r2, sp, #12
 8007484:	4621      	mov	r1, r4
 8007486:	4640      	mov	r0, r8
 8007488:	f7ff fee2 	bl	8007250 <_printf_common>
 800748c:	3001      	adds	r0, #1
 800748e:	d14c      	bne.n	800752a <_printf_i+0x1fe>
 8007490:	f04f 30ff 	mov.w	r0, #4294967295
 8007494:	b004      	add	sp, #16
 8007496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800749a:	4835      	ldr	r0, [pc, #212]	; (8007570 <_printf_i+0x244>)
 800749c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80074a0:	6829      	ldr	r1, [r5, #0]
 80074a2:	6823      	ldr	r3, [r4, #0]
 80074a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80074a8:	6029      	str	r1, [r5, #0]
 80074aa:	061d      	lsls	r5, r3, #24
 80074ac:	d514      	bpl.n	80074d8 <_printf_i+0x1ac>
 80074ae:	07df      	lsls	r7, r3, #31
 80074b0:	bf44      	itt	mi
 80074b2:	f043 0320 	orrmi.w	r3, r3, #32
 80074b6:	6023      	strmi	r3, [r4, #0]
 80074b8:	b91e      	cbnz	r6, 80074c2 <_printf_i+0x196>
 80074ba:	6823      	ldr	r3, [r4, #0]
 80074bc:	f023 0320 	bic.w	r3, r3, #32
 80074c0:	6023      	str	r3, [r4, #0]
 80074c2:	2310      	movs	r3, #16
 80074c4:	e7b0      	b.n	8007428 <_printf_i+0xfc>
 80074c6:	6823      	ldr	r3, [r4, #0]
 80074c8:	f043 0320 	orr.w	r3, r3, #32
 80074cc:	6023      	str	r3, [r4, #0]
 80074ce:	2378      	movs	r3, #120	; 0x78
 80074d0:	4828      	ldr	r0, [pc, #160]	; (8007574 <_printf_i+0x248>)
 80074d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074d6:	e7e3      	b.n	80074a0 <_printf_i+0x174>
 80074d8:	0659      	lsls	r1, r3, #25
 80074da:	bf48      	it	mi
 80074dc:	b2b6      	uxthmi	r6, r6
 80074de:	e7e6      	b.n	80074ae <_printf_i+0x182>
 80074e0:	4615      	mov	r5, r2
 80074e2:	e7bb      	b.n	800745c <_printf_i+0x130>
 80074e4:	682b      	ldr	r3, [r5, #0]
 80074e6:	6826      	ldr	r6, [r4, #0]
 80074e8:	6961      	ldr	r1, [r4, #20]
 80074ea:	1d18      	adds	r0, r3, #4
 80074ec:	6028      	str	r0, [r5, #0]
 80074ee:	0635      	lsls	r5, r6, #24
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	d501      	bpl.n	80074f8 <_printf_i+0x1cc>
 80074f4:	6019      	str	r1, [r3, #0]
 80074f6:	e002      	b.n	80074fe <_printf_i+0x1d2>
 80074f8:	0670      	lsls	r0, r6, #25
 80074fa:	d5fb      	bpl.n	80074f4 <_printf_i+0x1c8>
 80074fc:	8019      	strh	r1, [r3, #0]
 80074fe:	2300      	movs	r3, #0
 8007500:	6123      	str	r3, [r4, #16]
 8007502:	4615      	mov	r5, r2
 8007504:	e7ba      	b.n	800747c <_printf_i+0x150>
 8007506:	682b      	ldr	r3, [r5, #0]
 8007508:	1d1a      	adds	r2, r3, #4
 800750a:	602a      	str	r2, [r5, #0]
 800750c:	681d      	ldr	r5, [r3, #0]
 800750e:	6862      	ldr	r2, [r4, #4]
 8007510:	2100      	movs	r1, #0
 8007512:	4628      	mov	r0, r5
 8007514:	f7f8 fe64 	bl	80001e0 <memchr>
 8007518:	b108      	cbz	r0, 800751e <_printf_i+0x1f2>
 800751a:	1b40      	subs	r0, r0, r5
 800751c:	6060      	str	r0, [r4, #4]
 800751e:	6863      	ldr	r3, [r4, #4]
 8007520:	6123      	str	r3, [r4, #16]
 8007522:	2300      	movs	r3, #0
 8007524:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007528:	e7a8      	b.n	800747c <_printf_i+0x150>
 800752a:	6923      	ldr	r3, [r4, #16]
 800752c:	462a      	mov	r2, r5
 800752e:	4649      	mov	r1, r9
 8007530:	4640      	mov	r0, r8
 8007532:	47d0      	blx	sl
 8007534:	3001      	adds	r0, #1
 8007536:	d0ab      	beq.n	8007490 <_printf_i+0x164>
 8007538:	6823      	ldr	r3, [r4, #0]
 800753a:	079b      	lsls	r3, r3, #30
 800753c:	d413      	bmi.n	8007566 <_printf_i+0x23a>
 800753e:	68e0      	ldr	r0, [r4, #12]
 8007540:	9b03      	ldr	r3, [sp, #12]
 8007542:	4298      	cmp	r0, r3
 8007544:	bfb8      	it	lt
 8007546:	4618      	movlt	r0, r3
 8007548:	e7a4      	b.n	8007494 <_printf_i+0x168>
 800754a:	2301      	movs	r3, #1
 800754c:	4632      	mov	r2, r6
 800754e:	4649      	mov	r1, r9
 8007550:	4640      	mov	r0, r8
 8007552:	47d0      	blx	sl
 8007554:	3001      	adds	r0, #1
 8007556:	d09b      	beq.n	8007490 <_printf_i+0x164>
 8007558:	3501      	adds	r5, #1
 800755a:	68e3      	ldr	r3, [r4, #12]
 800755c:	9903      	ldr	r1, [sp, #12]
 800755e:	1a5b      	subs	r3, r3, r1
 8007560:	42ab      	cmp	r3, r5
 8007562:	dcf2      	bgt.n	800754a <_printf_i+0x21e>
 8007564:	e7eb      	b.n	800753e <_printf_i+0x212>
 8007566:	2500      	movs	r5, #0
 8007568:	f104 0619 	add.w	r6, r4, #25
 800756c:	e7f5      	b.n	800755a <_printf_i+0x22e>
 800756e:	bf00      	nop
 8007570:	08009e6a 	.word	0x08009e6a
 8007574:	08009e7b 	.word	0x08009e7b

08007578 <sniprintf>:
 8007578:	b40c      	push	{r2, r3}
 800757a:	b530      	push	{r4, r5, lr}
 800757c:	4b17      	ldr	r3, [pc, #92]	; (80075dc <sniprintf+0x64>)
 800757e:	1e0c      	subs	r4, r1, #0
 8007580:	681d      	ldr	r5, [r3, #0]
 8007582:	b09d      	sub	sp, #116	; 0x74
 8007584:	da08      	bge.n	8007598 <sniprintf+0x20>
 8007586:	238b      	movs	r3, #139	; 0x8b
 8007588:	602b      	str	r3, [r5, #0]
 800758a:	f04f 30ff 	mov.w	r0, #4294967295
 800758e:	b01d      	add	sp, #116	; 0x74
 8007590:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007594:	b002      	add	sp, #8
 8007596:	4770      	bx	lr
 8007598:	f44f 7302 	mov.w	r3, #520	; 0x208
 800759c:	f8ad 3014 	strh.w	r3, [sp, #20]
 80075a0:	bf14      	ite	ne
 80075a2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80075a6:	4623      	moveq	r3, r4
 80075a8:	9304      	str	r3, [sp, #16]
 80075aa:	9307      	str	r3, [sp, #28]
 80075ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80075b0:	9002      	str	r0, [sp, #8]
 80075b2:	9006      	str	r0, [sp, #24]
 80075b4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80075b8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80075ba:	ab21      	add	r3, sp, #132	; 0x84
 80075bc:	a902      	add	r1, sp, #8
 80075be:	4628      	mov	r0, r5
 80075c0:	9301      	str	r3, [sp, #4]
 80075c2:	f001 fb77 	bl	8008cb4 <_svfiprintf_r>
 80075c6:	1c43      	adds	r3, r0, #1
 80075c8:	bfbc      	itt	lt
 80075ca:	238b      	movlt	r3, #139	; 0x8b
 80075cc:	602b      	strlt	r3, [r5, #0]
 80075ce:	2c00      	cmp	r4, #0
 80075d0:	d0dd      	beq.n	800758e <sniprintf+0x16>
 80075d2:	9b02      	ldr	r3, [sp, #8]
 80075d4:	2200      	movs	r2, #0
 80075d6:	701a      	strb	r2, [r3, #0]
 80075d8:	e7d9      	b.n	800758e <sniprintf+0x16>
 80075da:	bf00      	nop
 80075dc:	20000038 	.word	0x20000038

080075e0 <quorem>:
 80075e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075e4:	6903      	ldr	r3, [r0, #16]
 80075e6:	690c      	ldr	r4, [r1, #16]
 80075e8:	42a3      	cmp	r3, r4
 80075ea:	4607      	mov	r7, r0
 80075ec:	f2c0 8081 	blt.w	80076f2 <quorem+0x112>
 80075f0:	3c01      	subs	r4, #1
 80075f2:	f101 0814 	add.w	r8, r1, #20
 80075f6:	f100 0514 	add.w	r5, r0, #20
 80075fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80075fe:	9301      	str	r3, [sp, #4]
 8007600:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007604:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007608:	3301      	adds	r3, #1
 800760a:	429a      	cmp	r2, r3
 800760c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007610:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007614:	fbb2 f6f3 	udiv	r6, r2, r3
 8007618:	d331      	bcc.n	800767e <quorem+0x9e>
 800761a:	f04f 0e00 	mov.w	lr, #0
 800761e:	4640      	mov	r0, r8
 8007620:	46ac      	mov	ip, r5
 8007622:	46f2      	mov	sl, lr
 8007624:	f850 2b04 	ldr.w	r2, [r0], #4
 8007628:	b293      	uxth	r3, r2
 800762a:	fb06 e303 	mla	r3, r6, r3, lr
 800762e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007632:	b29b      	uxth	r3, r3
 8007634:	ebaa 0303 	sub.w	r3, sl, r3
 8007638:	f8dc a000 	ldr.w	sl, [ip]
 800763c:	0c12      	lsrs	r2, r2, #16
 800763e:	fa13 f38a 	uxtah	r3, r3, sl
 8007642:	fb06 e202 	mla	r2, r6, r2, lr
 8007646:	9300      	str	r3, [sp, #0]
 8007648:	9b00      	ldr	r3, [sp, #0]
 800764a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800764e:	b292      	uxth	r2, r2
 8007650:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007654:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007658:	f8bd 3000 	ldrh.w	r3, [sp]
 800765c:	4581      	cmp	r9, r0
 800765e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007662:	f84c 3b04 	str.w	r3, [ip], #4
 8007666:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800766a:	d2db      	bcs.n	8007624 <quorem+0x44>
 800766c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007670:	b92b      	cbnz	r3, 800767e <quorem+0x9e>
 8007672:	9b01      	ldr	r3, [sp, #4]
 8007674:	3b04      	subs	r3, #4
 8007676:	429d      	cmp	r5, r3
 8007678:	461a      	mov	r2, r3
 800767a:	d32e      	bcc.n	80076da <quorem+0xfa>
 800767c:	613c      	str	r4, [r7, #16]
 800767e:	4638      	mov	r0, r7
 8007680:	f001 f8c4 	bl	800880c <__mcmp>
 8007684:	2800      	cmp	r0, #0
 8007686:	db24      	blt.n	80076d2 <quorem+0xf2>
 8007688:	3601      	adds	r6, #1
 800768a:	4628      	mov	r0, r5
 800768c:	f04f 0c00 	mov.w	ip, #0
 8007690:	f858 2b04 	ldr.w	r2, [r8], #4
 8007694:	f8d0 e000 	ldr.w	lr, [r0]
 8007698:	b293      	uxth	r3, r2
 800769a:	ebac 0303 	sub.w	r3, ip, r3
 800769e:	0c12      	lsrs	r2, r2, #16
 80076a0:	fa13 f38e 	uxtah	r3, r3, lr
 80076a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80076a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076b2:	45c1      	cmp	r9, r8
 80076b4:	f840 3b04 	str.w	r3, [r0], #4
 80076b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80076bc:	d2e8      	bcs.n	8007690 <quorem+0xb0>
 80076be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80076c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076c6:	b922      	cbnz	r2, 80076d2 <quorem+0xf2>
 80076c8:	3b04      	subs	r3, #4
 80076ca:	429d      	cmp	r5, r3
 80076cc:	461a      	mov	r2, r3
 80076ce:	d30a      	bcc.n	80076e6 <quorem+0x106>
 80076d0:	613c      	str	r4, [r7, #16]
 80076d2:	4630      	mov	r0, r6
 80076d4:	b003      	add	sp, #12
 80076d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076da:	6812      	ldr	r2, [r2, #0]
 80076dc:	3b04      	subs	r3, #4
 80076de:	2a00      	cmp	r2, #0
 80076e0:	d1cc      	bne.n	800767c <quorem+0x9c>
 80076e2:	3c01      	subs	r4, #1
 80076e4:	e7c7      	b.n	8007676 <quorem+0x96>
 80076e6:	6812      	ldr	r2, [r2, #0]
 80076e8:	3b04      	subs	r3, #4
 80076ea:	2a00      	cmp	r2, #0
 80076ec:	d1f0      	bne.n	80076d0 <quorem+0xf0>
 80076ee:	3c01      	subs	r4, #1
 80076f0:	e7eb      	b.n	80076ca <quorem+0xea>
 80076f2:	2000      	movs	r0, #0
 80076f4:	e7ee      	b.n	80076d4 <quorem+0xf4>
	...

080076f8 <_dtoa_r>:
 80076f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076fc:	ed2d 8b04 	vpush	{d8-d9}
 8007700:	ec57 6b10 	vmov	r6, r7, d0
 8007704:	b093      	sub	sp, #76	; 0x4c
 8007706:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007708:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800770c:	9106      	str	r1, [sp, #24]
 800770e:	ee10 aa10 	vmov	sl, s0
 8007712:	4604      	mov	r4, r0
 8007714:	9209      	str	r2, [sp, #36]	; 0x24
 8007716:	930c      	str	r3, [sp, #48]	; 0x30
 8007718:	46bb      	mov	fp, r7
 800771a:	b975      	cbnz	r5, 800773a <_dtoa_r+0x42>
 800771c:	2010      	movs	r0, #16
 800771e:	f000 fddd 	bl	80082dc <malloc>
 8007722:	4602      	mov	r2, r0
 8007724:	6260      	str	r0, [r4, #36]	; 0x24
 8007726:	b920      	cbnz	r0, 8007732 <_dtoa_r+0x3a>
 8007728:	4ba7      	ldr	r3, [pc, #668]	; (80079c8 <_dtoa_r+0x2d0>)
 800772a:	21ea      	movs	r1, #234	; 0xea
 800772c:	48a7      	ldr	r0, [pc, #668]	; (80079cc <_dtoa_r+0x2d4>)
 800772e:	f001 fbd1 	bl	8008ed4 <__assert_func>
 8007732:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007736:	6005      	str	r5, [r0, #0]
 8007738:	60c5      	str	r5, [r0, #12]
 800773a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800773c:	6819      	ldr	r1, [r3, #0]
 800773e:	b151      	cbz	r1, 8007756 <_dtoa_r+0x5e>
 8007740:	685a      	ldr	r2, [r3, #4]
 8007742:	604a      	str	r2, [r1, #4]
 8007744:	2301      	movs	r3, #1
 8007746:	4093      	lsls	r3, r2
 8007748:	608b      	str	r3, [r1, #8]
 800774a:	4620      	mov	r0, r4
 800774c:	f000 fe1c 	bl	8008388 <_Bfree>
 8007750:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007752:	2200      	movs	r2, #0
 8007754:	601a      	str	r2, [r3, #0]
 8007756:	1e3b      	subs	r3, r7, #0
 8007758:	bfaa      	itet	ge
 800775a:	2300      	movge	r3, #0
 800775c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007760:	f8c8 3000 	strge.w	r3, [r8]
 8007764:	4b9a      	ldr	r3, [pc, #616]	; (80079d0 <_dtoa_r+0x2d8>)
 8007766:	bfbc      	itt	lt
 8007768:	2201      	movlt	r2, #1
 800776a:	f8c8 2000 	strlt.w	r2, [r8]
 800776e:	ea33 030b 	bics.w	r3, r3, fp
 8007772:	d11b      	bne.n	80077ac <_dtoa_r+0xb4>
 8007774:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007776:	f242 730f 	movw	r3, #9999	; 0x270f
 800777a:	6013      	str	r3, [r2, #0]
 800777c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007780:	4333      	orrs	r3, r6
 8007782:	f000 8592 	beq.w	80082aa <_dtoa_r+0xbb2>
 8007786:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007788:	b963      	cbnz	r3, 80077a4 <_dtoa_r+0xac>
 800778a:	4b92      	ldr	r3, [pc, #584]	; (80079d4 <_dtoa_r+0x2dc>)
 800778c:	e022      	b.n	80077d4 <_dtoa_r+0xdc>
 800778e:	4b92      	ldr	r3, [pc, #584]	; (80079d8 <_dtoa_r+0x2e0>)
 8007790:	9301      	str	r3, [sp, #4]
 8007792:	3308      	adds	r3, #8
 8007794:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007796:	6013      	str	r3, [r2, #0]
 8007798:	9801      	ldr	r0, [sp, #4]
 800779a:	b013      	add	sp, #76	; 0x4c
 800779c:	ecbd 8b04 	vpop	{d8-d9}
 80077a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077a4:	4b8b      	ldr	r3, [pc, #556]	; (80079d4 <_dtoa_r+0x2dc>)
 80077a6:	9301      	str	r3, [sp, #4]
 80077a8:	3303      	adds	r3, #3
 80077aa:	e7f3      	b.n	8007794 <_dtoa_r+0x9c>
 80077ac:	2200      	movs	r2, #0
 80077ae:	2300      	movs	r3, #0
 80077b0:	4650      	mov	r0, sl
 80077b2:	4659      	mov	r1, fp
 80077b4:	f7f9 f988 	bl	8000ac8 <__aeabi_dcmpeq>
 80077b8:	ec4b ab19 	vmov	d9, sl, fp
 80077bc:	4680      	mov	r8, r0
 80077be:	b158      	cbz	r0, 80077d8 <_dtoa_r+0xe0>
 80077c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077c2:	2301      	movs	r3, #1
 80077c4:	6013      	str	r3, [r2, #0]
 80077c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	f000 856b 	beq.w	80082a4 <_dtoa_r+0xbac>
 80077ce:	4883      	ldr	r0, [pc, #524]	; (80079dc <_dtoa_r+0x2e4>)
 80077d0:	6018      	str	r0, [r3, #0]
 80077d2:	1e43      	subs	r3, r0, #1
 80077d4:	9301      	str	r3, [sp, #4]
 80077d6:	e7df      	b.n	8007798 <_dtoa_r+0xa0>
 80077d8:	ec4b ab10 	vmov	d0, sl, fp
 80077dc:	aa10      	add	r2, sp, #64	; 0x40
 80077de:	a911      	add	r1, sp, #68	; 0x44
 80077e0:	4620      	mov	r0, r4
 80077e2:	f001 f8b9 	bl	8008958 <__d2b>
 80077e6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80077ea:	ee08 0a10 	vmov	s16, r0
 80077ee:	2d00      	cmp	r5, #0
 80077f0:	f000 8084 	beq.w	80078fc <_dtoa_r+0x204>
 80077f4:	ee19 3a90 	vmov	r3, s19
 80077f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077fc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007800:	4656      	mov	r6, sl
 8007802:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007806:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800780a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800780e:	4b74      	ldr	r3, [pc, #464]	; (80079e0 <_dtoa_r+0x2e8>)
 8007810:	2200      	movs	r2, #0
 8007812:	4630      	mov	r0, r6
 8007814:	4639      	mov	r1, r7
 8007816:	f7f8 fd37 	bl	8000288 <__aeabi_dsub>
 800781a:	a365      	add	r3, pc, #404	; (adr r3, 80079b0 <_dtoa_r+0x2b8>)
 800781c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007820:	f7f8 feea 	bl	80005f8 <__aeabi_dmul>
 8007824:	a364      	add	r3, pc, #400	; (adr r3, 80079b8 <_dtoa_r+0x2c0>)
 8007826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782a:	f7f8 fd2f 	bl	800028c <__adddf3>
 800782e:	4606      	mov	r6, r0
 8007830:	4628      	mov	r0, r5
 8007832:	460f      	mov	r7, r1
 8007834:	f7f8 fe76 	bl	8000524 <__aeabi_i2d>
 8007838:	a361      	add	r3, pc, #388	; (adr r3, 80079c0 <_dtoa_r+0x2c8>)
 800783a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783e:	f7f8 fedb 	bl	80005f8 <__aeabi_dmul>
 8007842:	4602      	mov	r2, r0
 8007844:	460b      	mov	r3, r1
 8007846:	4630      	mov	r0, r6
 8007848:	4639      	mov	r1, r7
 800784a:	f7f8 fd1f 	bl	800028c <__adddf3>
 800784e:	4606      	mov	r6, r0
 8007850:	460f      	mov	r7, r1
 8007852:	f7f9 f981 	bl	8000b58 <__aeabi_d2iz>
 8007856:	2200      	movs	r2, #0
 8007858:	9000      	str	r0, [sp, #0]
 800785a:	2300      	movs	r3, #0
 800785c:	4630      	mov	r0, r6
 800785e:	4639      	mov	r1, r7
 8007860:	f7f9 f93c 	bl	8000adc <__aeabi_dcmplt>
 8007864:	b150      	cbz	r0, 800787c <_dtoa_r+0x184>
 8007866:	9800      	ldr	r0, [sp, #0]
 8007868:	f7f8 fe5c 	bl	8000524 <__aeabi_i2d>
 800786c:	4632      	mov	r2, r6
 800786e:	463b      	mov	r3, r7
 8007870:	f7f9 f92a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007874:	b910      	cbnz	r0, 800787c <_dtoa_r+0x184>
 8007876:	9b00      	ldr	r3, [sp, #0]
 8007878:	3b01      	subs	r3, #1
 800787a:	9300      	str	r3, [sp, #0]
 800787c:	9b00      	ldr	r3, [sp, #0]
 800787e:	2b16      	cmp	r3, #22
 8007880:	d85a      	bhi.n	8007938 <_dtoa_r+0x240>
 8007882:	9a00      	ldr	r2, [sp, #0]
 8007884:	4b57      	ldr	r3, [pc, #348]	; (80079e4 <_dtoa_r+0x2ec>)
 8007886:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800788a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788e:	ec51 0b19 	vmov	r0, r1, d9
 8007892:	f7f9 f923 	bl	8000adc <__aeabi_dcmplt>
 8007896:	2800      	cmp	r0, #0
 8007898:	d050      	beq.n	800793c <_dtoa_r+0x244>
 800789a:	9b00      	ldr	r3, [sp, #0]
 800789c:	3b01      	subs	r3, #1
 800789e:	9300      	str	r3, [sp, #0]
 80078a0:	2300      	movs	r3, #0
 80078a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80078a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80078a6:	1b5d      	subs	r5, r3, r5
 80078a8:	1e6b      	subs	r3, r5, #1
 80078aa:	9305      	str	r3, [sp, #20]
 80078ac:	bf45      	ittet	mi
 80078ae:	f1c5 0301 	rsbmi	r3, r5, #1
 80078b2:	9304      	strmi	r3, [sp, #16]
 80078b4:	2300      	movpl	r3, #0
 80078b6:	2300      	movmi	r3, #0
 80078b8:	bf4c      	ite	mi
 80078ba:	9305      	strmi	r3, [sp, #20]
 80078bc:	9304      	strpl	r3, [sp, #16]
 80078be:	9b00      	ldr	r3, [sp, #0]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	db3d      	blt.n	8007940 <_dtoa_r+0x248>
 80078c4:	9b05      	ldr	r3, [sp, #20]
 80078c6:	9a00      	ldr	r2, [sp, #0]
 80078c8:	920a      	str	r2, [sp, #40]	; 0x28
 80078ca:	4413      	add	r3, r2
 80078cc:	9305      	str	r3, [sp, #20]
 80078ce:	2300      	movs	r3, #0
 80078d0:	9307      	str	r3, [sp, #28]
 80078d2:	9b06      	ldr	r3, [sp, #24]
 80078d4:	2b09      	cmp	r3, #9
 80078d6:	f200 8089 	bhi.w	80079ec <_dtoa_r+0x2f4>
 80078da:	2b05      	cmp	r3, #5
 80078dc:	bfc4      	itt	gt
 80078de:	3b04      	subgt	r3, #4
 80078e0:	9306      	strgt	r3, [sp, #24]
 80078e2:	9b06      	ldr	r3, [sp, #24]
 80078e4:	f1a3 0302 	sub.w	r3, r3, #2
 80078e8:	bfcc      	ite	gt
 80078ea:	2500      	movgt	r5, #0
 80078ec:	2501      	movle	r5, #1
 80078ee:	2b03      	cmp	r3, #3
 80078f0:	f200 8087 	bhi.w	8007a02 <_dtoa_r+0x30a>
 80078f4:	e8df f003 	tbb	[pc, r3]
 80078f8:	59383a2d 	.word	0x59383a2d
 80078fc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007900:	441d      	add	r5, r3
 8007902:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007906:	2b20      	cmp	r3, #32
 8007908:	bfc1      	itttt	gt
 800790a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800790e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007912:	fa0b f303 	lslgt.w	r3, fp, r3
 8007916:	fa26 f000 	lsrgt.w	r0, r6, r0
 800791a:	bfda      	itte	le
 800791c:	f1c3 0320 	rsble	r3, r3, #32
 8007920:	fa06 f003 	lslle.w	r0, r6, r3
 8007924:	4318      	orrgt	r0, r3
 8007926:	f7f8 fded 	bl	8000504 <__aeabi_ui2d>
 800792a:	2301      	movs	r3, #1
 800792c:	4606      	mov	r6, r0
 800792e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007932:	3d01      	subs	r5, #1
 8007934:	930e      	str	r3, [sp, #56]	; 0x38
 8007936:	e76a      	b.n	800780e <_dtoa_r+0x116>
 8007938:	2301      	movs	r3, #1
 800793a:	e7b2      	b.n	80078a2 <_dtoa_r+0x1aa>
 800793c:	900b      	str	r0, [sp, #44]	; 0x2c
 800793e:	e7b1      	b.n	80078a4 <_dtoa_r+0x1ac>
 8007940:	9b04      	ldr	r3, [sp, #16]
 8007942:	9a00      	ldr	r2, [sp, #0]
 8007944:	1a9b      	subs	r3, r3, r2
 8007946:	9304      	str	r3, [sp, #16]
 8007948:	4253      	negs	r3, r2
 800794a:	9307      	str	r3, [sp, #28]
 800794c:	2300      	movs	r3, #0
 800794e:	930a      	str	r3, [sp, #40]	; 0x28
 8007950:	e7bf      	b.n	80078d2 <_dtoa_r+0x1da>
 8007952:	2300      	movs	r3, #0
 8007954:	9308      	str	r3, [sp, #32]
 8007956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007958:	2b00      	cmp	r3, #0
 800795a:	dc55      	bgt.n	8007a08 <_dtoa_r+0x310>
 800795c:	2301      	movs	r3, #1
 800795e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007962:	461a      	mov	r2, r3
 8007964:	9209      	str	r2, [sp, #36]	; 0x24
 8007966:	e00c      	b.n	8007982 <_dtoa_r+0x28a>
 8007968:	2301      	movs	r3, #1
 800796a:	e7f3      	b.n	8007954 <_dtoa_r+0x25c>
 800796c:	2300      	movs	r3, #0
 800796e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007970:	9308      	str	r3, [sp, #32]
 8007972:	9b00      	ldr	r3, [sp, #0]
 8007974:	4413      	add	r3, r2
 8007976:	9302      	str	r3, [sp, #8]
 8007978:	3301      	adds	r3, #1
 800797a:	2b01      	cmp	r3, #1
 800797c:	9303      	str	r3, [sp, #12]
 800797e:	bfb8      	it	lt
 8007980:	2301      	movlt	r3, #1
 8007982:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007984:	2200      	movs	r2, #0
 8007986:	6042      	str	r2, [r0, #4]
 8007988:	2204      	movs	r2, #4
 800798a:	f102 0614 	add.w	r6, r2, #20
 800798e:	429e      	cmp	r6, r3
 8007990:	6841      	ldr	r1, [r0, #4]
 8007992:	d93d      	bls.n	8007a10 <_dtoa_r+0x318>
 8007994:	4620      	mov	r0, r4
 8007996:	f000 fcb7 	bl	8008308 <_Balloc>
 800799a:	9001      	str	r0, [sp, #4]
 800799c:	2800      	cmp	r0, #0
 800799e:	d13b      	bne.n	8007a18 <_dtoa_r+0x320>
 80079a0:	4b11      	ldr	r3, [pc, #68]	; (80079e8 <_dtoa_r+0x2f0>)
 80079a2:	4602      	mov	r2, r0
 80079a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80079a8:	e6c0      	b.n	800772c <_dtoa_r+0x34>
 80079aa:	2301      	movs	r3, #1
 80079ac:	e7df      	b.n	800796e <_dtoa_r+0x276>
 80079ae:	bf00      	nop
 80079b0:	636f4361 	.word	0x636f4361
 80079b4:	3fd287a7 	.word	0x3fd287a7
 80079b8:	8b60c8b3 	.word	0x8b60c8b3
 80079bc:	3fc68a28 	.word	0x3fc68a28
 80079c0:	509f79fb 	.word	0x509f79fb
 80079c4:	3fd34413 	.word	0x3fd34413
 80079c8:	08009e99 	.word	0x08009e99
 80079cc:	08009eb0 	.word	0x08009eb0
 80079d0:	7ff00000 	.word	0x7ff00000
 80079d4:	08009e95 	.word	0x08009e95
 80079d8:	08009e8c 	.word	0x08009e8c
 80079dc:	08009e69 	.word	0x08009e69
 80079e0:	3ff80000 	.word	0x3ff80000
 80079e4:	08009fa0 	.word	0x08009fa0
 80079e8:	08009f0b 	.word	0x08009f0b
 80079ec:	2501      	movs	r5, #1
 80079ee:	2300      	movs	r3, #0
 80079f0:	9306      	str	r3, [sp, #24]
 80079f2:	9508      	str	r5, [sp, #32]
 80079f4:	f04f 33ff 	mov.w	r3, #4294967295
 80079f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80079fc:	2200      	movs	r2, #0
 80079fe:	2312      	movs	r3, #18
 8007a00:	e7b0      	b.n	8007964 <_dtoa_r+0x26c>
 8007a02:	2301      	movs	r3, #1
 8007a04:	9308      	str	r3, [sp, #32]
 8007a06:	e7f5      	b.n	80079f4 <_dtoa_r+0x2fc>
 8007a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a0a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007a0e:	e7b8      	b.n	8007982 <_dtoa_r+0x28a>
 8007a10:	3101      	adds	r1, #1
 8007a12:	6041      	str	r1, [r0, #4]
 8007a14:	0052      	lsls	r2, r2, #1
 8007a16:	e7b8      	b.n	800798a <_dtoa_r+0x292>
 8007a18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a1a:	9a01      	ldr	r2, [sp, #4]
 8007a1c:	601a      	str	r2, [r3, #0]
 8007a1e:	9b03      	ldr	r3, [sp, #12]
 8007a20:	2b0e      	cmp	r3, #14
 8007a22:	f200 809d 	bhi.w	8007b60 <_dtoa_r+0x468>
 8007a26:	2d00      	cmp	r5, #0
 8007a28:	f000 809a 	beq.w	8007b60 <_dtoa_r+0x468>
 8007a2c:	9b00      	ldr	r3, [sp, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	dd32      	ble.n	8007a98 <_dtoa_r+0x3a0>
 8007a32:	4ab7      	ldr	r2, [pc, #732]	; (8007d10 <_dtoa_r+0x618>)
 8007a34:	f003 030f 	and.w	r3, r3, #15
 8007a38:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007a3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007a40:	9b00      	ldr	r3, [sp, #0]
 8007a42:	05d8      	lsls	r0, r3, #23
 8007a44:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007a48:	d516      	bpl.n	8007a78 <_dtoa_r+0x380>
 8007a4a:	4bb2      	ldr	r3, [pc, #712]	; (8007d14 <_dtoa_r+0x61c>)
 8007a4c:	ec51 0b19 	vmov	r0, r1, d9
 8007a50:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a54:	f7f8 fefa 	bl	800084c <__aeabi_ddiv>
 8007a58:	f007 070f 	and.w	r7, r7, #15
 8007a5c:	4682      	mov	sl, r0
 8007a5e:	468b      	mov	fp, r1
 8007a60:	2503      	movs	r5, #3
 8007a62:	4eac      	ldr	r6, [pc, #688]	; (8007d14 <_dtoa_r+0x61c>)
 8007a64:	b957      	cbnz	r7, 8007a7c <_dtoa_r+0x384>
 8007a66:	4642      	mov	r2, r8
 8007a68:	464b      	mov	r3, r9
 8007a6a:	4650      	mov	r0, sl
 8007a6c:	4659      	mov	r1, fp
 8007a6e:	f7f8 feed 	bl	800084c <__aeabi_ddiv>
 8007a72:	4682      	mov	sl, r0
 8007a74:	468b      	mov	fp, r1
 8007a76:	e028      	b.n	8007aca <_dtoa_r+0x3d2>
 8007a78:	2502      	movs	r5, #2
 8007a7a:	e7f2      	b.n	8007a62 <_dtoa_r+0x36a>
 8007a7c:	07f9      	lsls	r1, r7, #31
 8007a7e:	d508      	bpl.n	8007a92 <_dtoa_r+0x39a>
 8007a80:	4640      	mov	r0, r8
 8007a82:	4649      	mov	r1, r9
 8007a84:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007a88:	f7f8 fdb6 	bl	80005f8 <__aeabi_dmul>
 8007a8c:	3501      	adds	r5, #1
 8007a8e:	4680      	mov	r8, r0
 8007a90:	4689      	mov	r9, r1
 8007a92:	107f      	asrs	r7, r7, #1
 8007a94:	3608      	adds	r6, #8
 8007a96:	e7e5      	b.n	8007a64 <_dtoa_r+0x36c>
 8007a98:	f000 809b 	beq.w	8007bd2 <_dtoa_r+0x4da>
 8007a9c:	9b00      	ldr	r3, [sp, #0]
 8007a9e:	4f9d      	ldr	r7, [pc, #628]	; (8007d14 <_dtoa_r+0x61c>)
 8007aa0:	425e      	negs	r6, r3
 8007aa2:	4b9b      	ldr	r3, [pc, #620]	; (8007d10 <_dtoa_r+0x618>)
 8007aa4:	f006 020f 	and.w	r2, r6, #15
 8007aa8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab0:	ec51 0b19 	vmov	r0, r1, d9
 8007ab4:	f7f8 fda0 	bl	80005f8 <__aeabi_dmul>
 8007ab8:	1136      	asrs	r6, r6, #4
 8007aba:	4682      	mov	sl, r0
 8007abc:	468b      	mov	fp, r1
 8007abe:	2300      	movs	r3, #0
 8007ac0:	2502      	movs	r5, #2
 8007ac2:	2e00      	cmp	r6, #0
 8007ac4:	d17a      	bne.n	8007bbc <_dtoa_r+0x4c4>
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d1d3      	bne.n	8007a72 <_dtoa_r+0x37a>
 8007aca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	f000 8082 	beq.w	8007bd6 <_dtoa_r+0x4de>
 8007ad2:	4b91      	ldr	r3, [pc, #580]	; (8007d18 <_dtoa_r+0x620>)
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	4650      	mov	r0, sl
 8007ad8:	4659      	mov	r1, fp
 8007ada:	f7f8 ffff 	bl	8000adc <__aeabi_dcmplt>
 8007ade:	2800      	cmp	r0, #0
 8007ae0:	d079      	beq.n	8007bd6 <_dtoa_r+0x4de>
 8007ae2:	9b03      	ldr	r3, [sp, #12]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d076      	beq.n	8007bd6 <_dtoa_r+0x4de>
 8007ae8:	9b02      	ldr	r3, [sp, #8]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	dd36      	ble.n	8007b5c <_dtoa_r+0x464>
 8007aee:	9b00      	ldr	r3, [sp, #0]
 8007af0:	4650      	mov	r0, sl
 8007af2:	4659      	mov	r1, fp
 8007af4:	1e5f      	subs	r7, r3, #1
 8007af6:	2200      	movs	r2, #0
 8007af8:	4b88      	ldr	r3, [pc, #544]	; (8007d1c <_dtoa_r+0x624>)
 8007afa:	f7f8 fd7d 	bl	80005f8 <__aeabi_dmul>
 8007afe:	9e02      	ldr	r6, [sp, #8]
 8007b00:	4682      	mov	sl, r0
 8007b02:	468b      	mov	fp, r1
 8007b04:	3501      	adds	r5, #1
 8007b06:	4628      	mov	r0, r5
 8007b08:	f7f8 fd0c 	bl	8000524 <__aeabi_i2d>
 8007b0c:	4652      	mov	r2, sl
 8007b0e:	465b      	mov	r3, fp
 8007b10:	f7f8 fd72 	bl	80005f8 <__aeabi_dmul>
 8007b14:	4b82      	ldr	r3, [pc, #520]	; (8007d20 <_dtoa_r+0x628>)
 8007b16:	2200      	movs	r2, #0
 8007b18:	f7f8 fbb8 	bl	800028c <__adddf3>
 8007b1c:	46d0      	mov	r8, sl
 8007b1e:	46d9      	mov	r9, fp
 8007b20:	4682      	mov	sl, r0
 8007b22:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007b26:	2e00      	cmp	r6, #0
 8007b28:	d158      	bne.n	8007bdc <_dtoa_r+0x4e4>
 8007b2a:	4b7e      	ldr	r3, [pc, #504]	; (8007d24 <_dtoa_r+0x62c>)
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	4640      	mov	r0, r8
 8007b30:	4649      	mov	r1, r9
 8007b32:	f7f8 fba9 	bl	8000288 <__aeabi_dsub>
 8007b36:	4652      	mov	r2, sl
 8007b38:	465b      	mov	r3, fp
 8007b3a:	4680      	mov	r8, r0
 8007b3c:	4689      	mov	r9, r1
 8007b3e:	f7f8 ffeb 	bl	8000b18 <__aeabi_dcmpgt>
 8007b42:	2800      	cmp	r0, #0
 8007b44:	f040 8295 	bne.w	8008072 <_dtoa_r+0x97a>
 8007b48:	4652      	mov	r2, sl
 8007b4a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007b4e:	4640      	mov	r0, r8
 8007b50:	4649      	mov	r1, r9
 8007b52:	f7f8 ffc3 	bl	8000adc <__aeabi_dcmplt>
 8007b56:	2800      	cmp	r0, #0
 8007b58:	f040 8289 	bne.w	800806e <_dtoa_r+0x976>
 8007b5c:	ec5b ab19 	vmov	sl, fp, d9
 8007b60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	f2c0 8148 	blt.w	8007df8 <_dtoa_r+0x700>
 8007b68:	9a00      	ldr	r2, [sp, #0]
 8007b6a:	2a0e      	cmp	r2, #14
 8007b6c:	f300 8144 	bgt.w	8007df8 <_dtoa_r+0x700>
 8007b70:	4b67      	ldr	r3, [pc, #412]	; (8007d10 <_dtoa_r+0x618>)
 8007b72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b76:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007b7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f280 80d5 	bge.w	8007d2c <_dtoa_r+0x634>
 8007b82:	9b03      	ldr	r3, [sp, #12]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	f300 80d1 	bgt.w	8007d2c <_dtoa_r+0x634>
 8007b8a:	f040 826f 	bne.w	800806c <_dtoa_r+0x974>
 8007b8e:	4b65      	ldr	r3, [pc, #404]	; (8007d24 <_dtoa_r+0x62c>)
 8007b90:	2200      	movs	r2, #0
 8007b92:	4640      	mov	r0, r8
 8007b94:	4649      	mov	r1, r9
 8007b96:	f7f8 fd2f 	bl	80005f8 <__aeabi_dmul>
 8007b9a:	4652      	mov	r2, sl
 8007b9c:	465b      	mov	r3, fp
 8007b9e:	f7f8 ffb1 	bl	8000b04 <__aeabi_dcmpge>
 8007ba2:	9e03      	ldr	r6, [sp, #12]
 8007ba4:	4637      	mov	r7, r6
 8007ba6:	2800      	cmp	r0, #0
 8007ba8:	f040 8245 	bne.w	8008036 <_dtoa_r+0x93e>
 8007bac:	9d01      	ldr	r5, [sp, #4]
 8007bae:	2331      	movs	r3, #49	; 0x31
 8007bb0:	f805 3b01 	strb.w	r3, [r5], #1
 8007bb4:	9b00      	ldr	r3, [sp, #0]
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	9300      	str	r3, [sp, #0]
 8007bba:	e240      	b.n	800803e <_dtoa_r+0x946>
 8007bbc:	07f2      	lsls	r2, r6, #31
 8007bbe:	d505      	bpl.n	8007bcc <_dtoa_r+0x4d4>
 8007bc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bc4:	f7f8 fd18 	bl	80005f8 <__aeabi_dmul>
 8007bc8:	3501      	adds	r5, #1
 8007bca:	2301      	movs	r3, #1
 8007bcc:	1076      	asrs	r6, r6, #1
 8007bce:	3708      	adds	r7, #8
 8007bd0:	e777      	b.n	8007ac2 <_dtoa_r+0x3ca>
 8007bd2:	2502      	movs	r5, #2
 8007bd4:	e779      	b.n	8007aca <_dtoa_r+0x3d2>
 8007bd6:	9f00      	ldr	r7, [sp, #0]
 8007bd8:	9e03      	ldr	r6, [sp, #12]
 8007bda:	e794      	b.n	8007b06 <_dtoa_r+0x40e>
 8007bdc:	9901      	ldr	r1, [sp, #4]
 8007bde:	4b4c      	ldr	r3, [pc, #304]	; (8007d10 <_dtoa_r+0x618>)
 8007be0:	4431      	add	r1, r6
 8007be2:	910d      	str	r1, [sp, #52]	; 0x34
 8007be4:	9908      	ldr	r1, [sp, #32]
 8007be6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007bea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007bee:	2900      	cmp	r1, #0
 8007bf0:	d043      	beq.n	8007c7a <_dtoa_r+0x582>
 8007bf2:	494d      	ldr	r1, [pc, #308]	; (8007d28 <_dtoa_r+0x630>)
 8007bf4:	2000      	movs	r0, #0
 8007bf6:	f7f8 fe29 	bl	800084c <__aeabi_ddiv>
 8007bfa:	4652      	mov	r2, sl
 8007bfc:	465b      	mov	r3, fp
 8007bfe:	f7f8 fb43 	bl	8000288 <__aeabi_dsub>
 8007c02:	9d01      	ldr	r5, [sp, #4]
 8007c04:	4682      	mov	sl, r0
 8007c06:	468b      	mov	fp, r1
 8007c08:	4649      	mov	r1, r9
 8007c0a:	4640      	mov	r0, r8
 8007c0c:	f7f8 ffa4 	bl	8000b58 <__aeabi_d2iz>
 8007c10:	4606      	mov	r6, r0
 8007c12:	f7f8 fc87 	bl	8000524 <__aeabi_i2d>
 8007c16:	4602      	mov	r2, r0
 8007c18:	460b      	mov	r3, r1
 8007c1a:	4640      	mov	r0, r8
 8007c1c:	4649      	mov	r1, r9
 8007c1e:	f7f8 fb33 	bl	8000288 <__aeabi_dsub>
 8007c22:	3630      	adds	r6, #48	; 0x30
 8007c24:	f805 6b01 	strb.w	r6, [r5], #1
 8007c28:	4652      	mov	r2, sl
 8007c2a:	465b      	mov	r3, fp
 8007c2c:	4680      	mov	r8, r0
 8007c2e:	4689      	mov	r9, r1
 8007c30:	f7f8 ff54 	bl	8000adc <__aeabi_dcmplt>
 8007c34:	2800      	cmp	r0, #0
 8007c36:	d163      	bne.n	8007d00 <_dtoa_r+0x608>
 8007c38:	4642      	mov	r2, r8
 8007c3a:	464b      	mov	r3, r9
 8007c3c:	4936      	ldr	r1, [pc, #216]	; (8007d18 <_dtoa_r+0x620>)
 8007c3e:	2000      	movs	r0, #0
 8007c40:	f7f8 fb22 	bl	8000288 <__aeabi_dsub>
 8007c44:	4652      	mov	r2, sl
 8007c46:	465b      	mov	r3, fp
 8007c48:	f7f8 ff48 	bl	8000adc <__aeabi_dcmplt>
 8007c4c:	2800      	cmp	r0, #0
 8007c4e:	f040 80b5 	bne.w	8007dbc <_dtoa_r+0x6c4>
 8007c52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c54:	429d      	cmp	r5, r3
 8007c56:	d081      	beq.n	8007b5c <_dtoa_r+0x464>
 8007c58:	4b30      	ldr	r3, [pc, #192]	; (8007d1c <_dtoa_r+0x624>)
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	4650      	mov	r0, sl
 8007c5e:	4659      	mov	r1, fp
 8007c60:	f7f8 fcca 	bl	80005f8 <__aeabi_dmul>
 8007c64:	4b2d      	ldr	r3, [pc, #180]	; (8007d1c <_dtoa_r+0x624>)
 8007c66:	4682      	mov	sl, r0
 8007c68:	468b      	mov	fp, r1
 8007c6a:	4640      	mov	r0, r8
 8007c6c:	4649      	mov	r1, r9
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f7f8 fcc2 	bl	80005f8 <__aeabi_dmul>
 8007c74:	4680      	mov	r8, r0
 8007c76:	4689      	mov	r9, r1
 8007c78:	e7c6      	b.n	8007c08 <_dtoa_r+0x510>
 8007c7a:	4650      	mov	r0, sl
 8007c7c:	4659      	mov	r1, fp
 8007c7e:	f7f8 fcbb 	bl	80005f8 <__aeabi_dmul>
 8007c82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c84:	9d01      	ldr	r5, [sp, #4]
 8007c86:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c88:	4682      	mov	sl, r0
 8007c8a:	468b      	mov	fp, r1
 8007c8c:	4649      	mov	r1, r9
 8007c8e:	4640      	mov	r0, r8
 8007c90:	f7f8 ff62 	bl	8000b58 <__aeabi_d2iz>
 8007c94:	4606      	mov	r6, r0
 8007c96:	f7f8 fc45 	bl	8000524 <__aeabi_i2d>
 8007c9a:	3630      	adds	r6, #48	; 0x30
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	4640      	mov	r0, r8
 8007ca2:	4649      	mov	r1, r9
 8007ca4:	f7f8 faf0 	bl	8000288 <__aeabi_dsub>
 8007ca8:	f805 6b01 	strb.w	r6, [r5], #1
 8007cac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cae:	429d      	cmp	r5, r3
 8007cb0:	4680      	mov	r8, r0
 8007cb2:	4689      	mov	r9, r1
 8007cb4:	f04f 0200 	mov.w	r2, #0
 8007cb8:	d124      	bne.n	8007d04 <_dtoa_r+0x60c>
 8007cba:	4b1b      	ldr	r3, [pc, #108]	; (8007d28 <_dtoa_r+0x630>)
 8007cbc:	4650      	mov	r0, sl
 8007cbe:	4659      	mov	r1, fp
 8007cc0:	f7f8 fae4 	bl	800028c <__adddf3>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	4640      	mov	r0, r8
 8007cca:	4649      	mov	r1, r9
 8007ccc:	f7f8 ff24 	bl	8000b18 <__aeabi_dcmpgt>
 8007cd0:	2800      	cmp	r0, #0
 8007cd2:	d173      	bne.n	8007dbc <_dtoa_r+0x6c4>
 8007cd4:	4652      	mov	r2, sl
 8007cd6:	465b      	mov	r3, fp
 8007cd8:	4913      	ldr	r1, [pc, #76]	; (8007d28 <_dtoa_r+0x630>)
 8007cda:	2000      	movs	r0, #0
 8007cdc:	f7f8 fad4 	bl	8000288 <__aeabi_dsub>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	4640      	mov	r0, r8
 8007ce6:	4649      	mov	r1, r9
 8007ce8:	f7f8 fef8 	bl	8000adc <__aeabi_dcmplt>
 8007cec:	2800      	cmp	r0, #0
 8007cee:	f43f af35 	beq.w	8007b5c <_dtoa_r+0x464>
 8007cf2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007cf4:	1e6b      	subs	r3, r5, #1
 8007cf6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007cf8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007cfc:	2b30      	cmp	r3, #48	; 0x30
 8007cfe:	d0f8      	beq.n	8007cf2 <_dtoa_r+0x5fa>
 8007d00:	9700      	str	r7, [sp, #0]
 8007d02:	e049      	b.n	8007d98 <_dtoa_r+0x6a0>
 8007d04:	4b05      	ldr	r3, [pc, #20]	; (8007d1c <_dtoa_r+0x624>)
 8007d06:	f7f8 fc77 	bl	80005f8 <__aeabi_dmul>
 8007d0a:	4680      	mov	r8, r0
 8007d0c:	4689      	mov	r9, r1
 8007d0e:	e7bd      	b.n	8007c8c <_dtoa_r+0x594>
 8007d10:	08009fa0 	.word	0x08009fa0
 8007d14:	08009f78 	.word	0x08009f78
 8007d18:	3ff00000 	.word	0x3ff00000
 8007d1c:	40240000 	.word	0x40240000
 8007d20:	401c0000 	.word	0x401c0000
 8007d24:	40140000 	.word	0x40140000
 8007d28:	3fe00000 	.word	0x3fe00000
 8007d2c:	9d01      	ldr	r5, [sp, #4]
 8007d2e:	4656      	mov	r6, sl
 8007d30:	465f      	mov	r7, fp
 8007d32:	4642      	mov	r2, r8
 8007d34:	464b      	mov	r3, r9
 8007d36:	4630      	mov	r0, r6
 8007d38:	4639      	mov	r1, r7
 8007d3a:	f7f8 fd87 	bl	800084c <__aeabi_ddiv>
 8007d3e:	f7f8 ff0b 	bl	8000b58 <__aeabi_d2iz>
 8007d42:	4682      	mov	sl, r0
 8007d44:	f7f8 fbee 	bl	8000524 <__aeabi_i2d>
 8007d48:	4642      	mov	r2, r8
 8007d4a:	464b      	mov	r3, r9
 8007d4c:	f7f8 fc54 	bl	80005f8 <__aeabi_dmul>
 8007d50:	4602      	mov	r2, r0
 8007d52:	460b      	mov	r3, r1
 8007d54:	4630      	mov	r0, r6
 8007d56:	4639      	mov	r1, r7
 8007d58:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007d5c:	f7f8 fa94 	bl	8000288 <__aeabi_dsub>
 8007d60:	f805 6b01 	strb.w	r6, [r5], #1
 8007d64:	9e01      	ldr	r6, [sp, #4]
 8007d66:	9f03      	ldr	r7, [sp, #12]
 8007d68:	1bae      	subs	r6, r5, r6
 8007d6a:	42b7      	cmp	r7, r6
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	460b      	mov	r3, r1
 8007d70:	d135      	bne.n	8007dde <_dtoa_r+0x6e6>
 8007d72:	f7f8 fa8b 	bl	800028c <__adddf3>
 8007d76:	4642      	mov	r2, r8
 8007d78:	464b      	mov	r3, r9
 8007d7a:	4606      	mov	r6, r0
 8007d7c:	460f      	mov	r7, r1
 8007d7e:	f7f8 fecb 	bl	8000b18 <__aeabi_dcmpgt>
 8007d82:	b9d0      	cbnz	r0, 8007dba <_dtoa_r+0x6c2>
 8007d84:	4642      	mov	r2, r8
 8007d86:	464b      	mov	r3, r9
 8007d88:	4630      	mov	r0, r6
 8007d8a:	4639      	mov	r1, r7
 8007d8c:	f7f8 fe9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d90:	b110      	cbz	r0, 8007d98 <_dtoa_r+0x6a0>
 8007d92:	f01a 0f01 	tst.w	sl, #1
 8007d96:	d110      	bne.n	8007dba <_dtoa_r+0x6c2>
 8007d98:	4620      	mov	r0, r4
 8007d9a:	ee18 1a10 	vmov	r1, s16
 8007d9e:	f000 faf3 	bl	8008388 <_Bfree>
 8007da2:	2300      	movs	r3, #0
 8007da4:	9800      	ldr	r0, [sp, #0]
 8007da6:	702b      	strb	r3, [r5, #0]
 8007da8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007daa:	3001      	adds	r0, #1
 8007dac:	6018      	str	r0, [r3, #0]
 8007dae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	f43f acf1 	beq.w	8007798 <_dtoa_r+0xa0>
 8007db6:	601d      	str	r5, [r3, #0]
 8007db8:	e4ee      	b.n	8007798 <_dtoa_r+0xa0>
 8007dba:	9f00      	ldr	r7, [sp, #0]
 8007dbc:	462b      	mov	r3, r5
 8007dbe:	461d      	mov	r5, r3
 8007dc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007dc4:	2a39      	cmp	r2, #57	; 0x39
 8007dc6:	d106      	bne.n	8007dd6 <_dtoa_r+0x6de>
 8007dc8:	9a01      	ldr	r2, [sp, #4]
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d1f7      	bne.n	8007dbe <_dtoa_r+0x6c6>
 8007dce:	9901      	ldr	r1, [sp, #4]
 8007dd0:	2230      	movs	r2, #48	; 0x30
 8007dd2:	3701      	adds	r7, #1
 8007dd4:	700a      	strb	r2, [r1, #0]
 8007dd6:	781a      	ldrb	r2, [r3, #0]
 8007dd8:	3201      	adds	r2, #1
 8007dda:	701a      	strb	r2, [r3, #0]
 8007ddc:	e790      	b.n	8007d00 <_dtoa_r+0x608>
 8007dde:	4ba6      	ldr	r3, [pc, #664]	; (8008078 <_dtoa_r+0x980>)
 8007de0:	2200      	movs	r2, #0
 8007de2:	f7f8 fc09 	bl	80005f8 <__aeabi_dmul>
 8007de6:	2200      	movs	r2, #0
 8007de8:	2300      	movs	r3, #0
 8007dea:	4606      	mov	r6, r0
 8007dec:	460f      	mov	r7, r1
 8007dee:	f7f8 fe6b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007df2:	2800      	cmp	r0, #0
 8007df4:	d09d      	beq.n	8007d32 <_dtoa_r+0x63a>
 8007df6:	e7cf      	b.n	8007d98 <_dtoa_r+0x6a0>
 8007df8:	9a08      	ldr	r2, [sp, #32]
 8007dfa:	2a00      	cmp	r2, #0
 8007dfc:	f000 80d7 	beq.w	8007fae <_dtoa_r+0x8b6>
 8007e00:	9a06      	ldr	r2, [sp, #24]
 8007e02:	2a01      	cmp	r2, #1
 8007e04:	f300 80ba 	bgt.w	8007f7c <_dtoa_r+0x884>
 8007e08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e0a:	2a00      	cmp	r2, #0
 8007e0c:	f000 80b2 	beq.w	8007f74 <_dtoa_r+0x87c>
 8007e10:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007e14:	9e07      	ldr	r6, [sp, #28]
 8007e16:	9d04      	ldr	r5, [sp, #16]
 8007e18:	9a04      	ldr	r2, [sp, #16]
 8007e1a:	441a      	add	r2, r3
 8007e1c:	9204      	str	r2, [sp, #16]
 8007e1e:	9a05      	ldr	r2, [sp, #20]
 8007e20:	2101      	movs	r1, #1
 8007e22:	441a      	add	r2, r3
 8007e24:	4620      	mov	r0, r4
 8007e26:	9205      	str	r2, [sp, #20]
 8007e28:	f000 fb66 	bl	80084f8 <__i2b>
 8007e2c:	4607      	mov	r7, r0
 8007e2e:	2d00      	cmp	r5, #0
 8007e30:	dd0c      	ble.n	8007e4c <_dtoa_r+0x754>
 8007e32:	9b05      	ldr	r3, [sp, #20]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	dd09      	ble.n	8007e4c <_dtoa_r+0x754>
 8007e38:	42ab      	cmp	r3, r5
 8007e3a:	9a04      	ldr	r2, [sp, #16]
 8007e3c:	bfa8      	it	ge
 8007e3e:	462b      	movge	r3, r5
 8007e40:	1ad2      	subs	r2, r2, r3
 8007e42:	9204      	str	r2, [sp, #16]
 8007e44:	9a05      	ldr	r2, [sp, #20]
 8007e46:	1aed      	subs	r5, r5, r3
 8007e48:	1ad3      	subs	r3, r2, r3
 8007e4a:	9305      	str	r3, [sp, #20]
 8007e4c:	9b07      	ldr	r3, [sp, #28]
 8007e4e:	b31b      	cbz	r3, 8007e98 <_dtoa_r+0x7a0>
 8007e50:	9b08      	ldr	r3, [sp, #32]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	f000 80af 	beq.w	8007fb6 <_dtoa_r+0x8be>
 8007e58:	2e00      	cmp	r6, #0
 8007e5a:	dd13      	ble.n	8007e84 <_dtoa_r+0x78c>
 8007e5c:	4639      	mov	r1, r7
 8007e5e:	4632      	mov	r2, r6
 8007e60:	4620      	mov	r0, r4
 8007e62:	f000 fc09 	bl	8008678 <__pow5mult>
 8007e66:	ee18 2a10 	vmov	r2, s16
 8007e6a:	4601      	mov	r1, r0
 8007e6c:	4607      	mov	r7, r0
 8007e6e:	4620      	mov	r0, r4
 8007e70:	f000 fb58 	bl	8008524 <__multiply>
 8007e74:	ee18 1a10 	vmov	r1, s16
 8007e78:	4680      	mov	r8, r0
 8007e7a:	4620      	mov	r0, r4
 8007e7c:	f000 fa84 	bl	8008388 <_Bfree>
 8007e80:	ee08 8a10 	vmov	s16, r8
 8007e84:	9b07      	ldr	r3, [sp, #28]
 8007e86:	1b9a      	subs	r2, r3, r6
 8007e88:	d006      	beq.n	8007e98 <_dtoa_r+0x7a0>
 8007e8a:	ee18 1a10 	vmov	r1, s16
 8007e8e:	4620      	mov	r0, r4
 8007e90:	f000 fbf2 	bl	8008678 <__pow5mult>
 8007e94:	ee08 0a10 	vmov	s16, r0
 8007e98:	2101      	movs	r1, #1
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	f000 fb2c 	bl	80084f8 <__i2b>
 8007ea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	4606      	mov	r6, r0
 8007ea6:	f340 8088 	ble.w	8007fba <_dtoa_r+0x8c2>
 8007eaa:	461a      	mov	r2, r3
 8007eac:	4601      	mov	r1, r0
 8007eae:	4620      	mov	r0, r4
 8007eb0:	f000 fbe2 	bl	8008678 <__pow5mult>
 8007eb4:	9b06      	ldr	r3, [sp, #24]
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	4606      	mov	r6, r0
 8007eba:	f340 8081 	ble.w	8007fc0 <_dtoa_r+0x8c8>
 8007ebe:	f04f 0800 	mov.w	r8, #0
 8007ec2:	6933      	ldr	r3, [r6, #16]
 8007ec4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007ec8:	6918      	ldr	r0, [r3, #16]
 8007eca:	f000 fac5 	bl	8008458 <__hi0bits>
 8007ece:	f1c0 0020 	rsb	r0, r0, #32
 8007ed2:	9b05      	ldr	r3, [sp, #20]
 8007ed4:	4418      	add	r0, r3
 8007ed6:	f010 001f 	ands.w	r0, r0, #31
 8007eda:	f000 8092 	beq.w	8008002 <_dtoa_r+0x90a>
 8007ede:	f1c0 0320 	rsb	r3, r0, #32
 8007ee2:	2b04      	cmp	r3, #4
 8007ee4:	f340 808a 	ble.w	8007ffc <_dtoa_r+0x904>
 8007ee8:	f1c0 001c 	rsb	r0, r0, #28
 8007eec:	9b04      	ldr	r3, [sp, #16]
 8007eee:	4403      	add	r3, r0
 8007ef0:	9304      	str	r3, [sp, #16]
 8007ef2:	9b05      	ldr	r3, [sp, #20]
 8007ef4:	4403      	add	r3, r0
 8007ef6:	4405      	add	r5, r0
 8007ef8:	9305      	str	r3, [sp, #20]
 8007efa:	9b04      	ldr	r3, [sp, #16]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	dd07      	ble.n	8007f10 <_dtoa_r+0x818>
 8007f00:	ee18 1a10 	vmov	r1, s16
 8007f04:	461a      	mov	r2, r3
 8007f06:	4620      	mov	r0, r4
 8007f08:	f000 fc10 	bl	800872c <__lshift>
 8007f0c:	ee08 0a10 	vmov	s16, r0
 8007f10:	9b05      	ldr	r3, [sp, #20]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	dd05      	ble.n	8007f22 <_dtoa_r+0x82a>
 8007f16:	4631      	mov	r1, r6
 8007f18:	461a      	mov	r2, r3
 8007f1a:	4620      	mov	r0, r4
 8007f1c:	f000 fc06 	bl	800872c <__lshift>
 8007f20:	4606      	mov	r6, r0
 8007f22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d06e      	beq.n	8008006 <_dtoa_r+0x90e>
 8007f28:	ee18 0a10 	vmov	r0, s16
 8007f2c:	4631      	mov	r1, r6
 8007f2e:	f000 fc6d 	bl	800880c <__mcmp>
 8007f32:	2800      	cmp	r0, #0
 8007f34:	da67      	bge.n	8008006 <_dtoa_r+0x90e>
 8007f36:	9b00      	ldr	r3, [sp, #0]
 8007f38:	3b01      	subs	r3, #1
 8007f3a:	ee18 1a10 	vmov	r1, s16
 8007f3e:	9300      	str	r3, [sp, #0]
 8007f40:	220a      	movs	r2, #10
 8007f42:	2300      	movs	r3, #0
 8007f44:	4620      	mov	r0, r4
 8007f46:	f000 fa41 	bl	80083cc <__multadd>
 8007f4a:	9b08      	ldr	r3, [sp, #32]
 8007f4c:	ee08 0a10 	vmov	s16, r0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	f000 81b1 	beq.w	80082b8 <_dtoa_r+0xbc0>
 8007f56:	2300      	movs	r3, #0
 8007f58:	4639      	mov	r1, r7
 8007f5a:	220a      	movs	r2, #10
 8007f5c:	4620      	mov	r0, r4
 8007f5e:	f000 fa35 	bl	80083cc <__multadd>
 8007f62:	9b02      	ldr	r3, [sp, #8]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	4607      	mov	r7, r0
 8007f68:	f300 808e 	bgt.w	8008088 <_dtoa_r+0x990>
 8007f6c:	9b06      	ldr	r3, [sp, #24]
 8007f6e:	2b02      	cmp	r3, #2
 8007f70:	dc51      	bgt.n	8008016 <_dtoa_r+0x91e>
 8007f72:	e089      	b.n	8008088 <_dtoa_r+0x990>
 8007f74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007f7a:	e74b      	b.n	8007e14 <_dtoa_r+0x71c>
 8007f7c:	9b03      	ldr	r3, [sp, #12]
 8007f7e:	1e5e      	subs	r6, r3, #1
 8007f80:	9b07      	ldr	r3, [sp, #28]
 8007f82:	42b3      	cmp	r3, r6
 8007f84:	bfbf      	itttt	lt
 8007f86:	9b07      	ldrlt	r3, [sp, #28]
 8007f88:	9607      	strlt	r6, [sp, #28]
 8007f8a:	1af2      	sublt	r2, r6, r3
 8007f8c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007f8e:	bfb6      	itet	lt
 8007f90:	189b      	addlt	r3, r3, r2
 8007f92:	1b9e      	subge	r6, r3, r6
 8007f94:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007f96:	9b03      	ldr	r3, [sp, #12]
 8007f98:	bfb8      	it	lt
 8007f9a:	2600      	movlt	r6, #0
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	bfb7      	itett	lt
 8007fa0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007fa4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007fa8:	1a9d      	sublt	r5, r3, r2
 8007faa:	2300      	movlt	r3, #0
 8007fac:	e734      	b.n	8007e18 <_dtoa_r+0x720>
 8007fae:	9e07      	ldr	r6, [sp, #28]
 8007fb0:	9d04      	ldr	r5, [sp, #16]
 8007fb2:	9f08      	ldr	r7, [sp, #32]
 8007fb4:	e73b      	b.n	8007e2e <_dtoa_r+0x736>
 8007fb6:	9a07      	ldr	r2, [sp, #28]
 8007fb8:	e767      	b.n	8007e8a <_dtoa_r+0x792>
 8007fba:	9b06      	ldr	r3, [sp, #24]
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	dc18      	bgt.n	8007ff2 <_dtoa_r+0x8fa>
 8007fc0:	f1ba 0f00 	cmp.w	sl, #0
 8007fc4:	d115      	bne.n	8007ff2 <_dtoa_r+0x8fa>
 8007fc6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007fca:	b993      	cbnz	r3, 8007ff2 <_dtoa_r+0x8fa>
 8007fcc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007fd0:	0d1b      	lsrs	r3, r3, #20
 8007fd2:	051b      	lsls	r3, r3, #20
 8007fd4:	b183      	cbz	r3, 8007ff8 <_dtoa_r+0x900>
 8007fd6:	9b04      	ldr	r3, [sp, #16]
 8007fd8:	3301      	adds	r3, #1
 8007fda:	9304      	str	r3, [sp, #16]
 8007fdc:	9b05      	ldr	r3, [sp, #20]
 8007fde:	3301      	adds	r3, #1
 8007fe0:	9305      	str	r3, [sp, #20]
 8007fe2:	f04f 0801 	mov.w	r8, #1
 8007fe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	f47f af6a 	bne.w	8007ec2 <_dtoa_r+0x7ca>
 8007fee:	2001      	movs	r0, #1
 8007ff0:	e76f      	b.n	8007ed2 <_dtoa_r+0x7da>
 8007ff2:	f04f 0800 	mov.w	r8, #0
 8007ff6:	e7f6      	b.n	8007fe6 <_dtoa_r+0x8ee>
 8007ff8:	4698      	mov	r8, r3
 8007ffa:	e7f4      	b.n	8007fe6 <_dtoa_r+0x8ee>
 8007ffc:	f43f af7d 	beq.w	8007efa <_dtoa_r+0x802>
 8008000:	4618      	mov	r0, r3
 8008002:	301c      	adds	r0, #28
 8008004:	e772      	b.n	8007eec <_dtoa_r+0x7f4>
 8008006:	9b03      	ldr	r3, [sp, #12]
 8008008:	2b00      	cmp	r3, #0
 800800a:	dc37      	bgt.n	800807c <_dtoa_r+0x984>
 800800c:	9b06      	ldr	r3, [sp, #24]
 800800e:	2b02      	cmp	r3, #2
 8008010:	dd34      	ble.n	800807c <_dtoa_r+0x984>
 8008012:	9b03      	ldr	r3, [sp, #12]
 8008014:	9302      	str	r3, [sp, #8]
 8008016:	9b02      	ldr	r3, [sp, #8]
 8008018:	b96b      	cbnz	r3, 8008036 <_dtoa_r+0x93e>
 800801a:	4631      	mov	r1, r6
 800801c:	2205      	movs	r2, #5
 800801e:	4620      	mov	r0, r4
 8008020:	f000 f9d4 	bl	80083cc <__multadd>
 8008024:	4601      	mov	r1, r0
 8008026:	4606      	mov	r6, r0
 8008028:	ee18 0a10 	vmov	r0, s16
 800802c:	f000 fbee 	bl	800880c <__mcmp>
 8008030:	2800      	cmp	r0, #0
 8008032:	f73f adbb 	bgt.w	8007bac <_dtoa_r+0x4b4>
 8008036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008038:	9d01      	ldr	r5, [sp, #4]
 800803a:	43db      	mvns	r3, r3
 800803c:	9300      	str	r3, [sp, #0]
 800803e:	f04f 0800 	mov.w	r8, #0
 8008042:	4631      	mov	r1, r6
 8008044:	4620      	mov	r0, r4
 8008046:	f000 f99f 	bl	8008388 <_Bfree>
 800804a:	2f00      	cmp	r7, #0
 800804c:	f43f aea4 	beq.w	8007d98 <_dtoa_r+0x6a0>
 8008050:	f1b8 0f00 	cmp.w	r8, #0
 8008054:	d005      	beq.n	8008062 <_dtoa_r+0x96a>
 8008056:	45b8      	cmp	r8, r7
 8008058:	d003      	beq.n	8008062 <_dtoa_r+0x96a>
 800805a:	4641      	mov	r1, r8
 800805c:	4620      	mov	r0, r4
 800805e:	f000 f993 	bl	8008388 <_Bfree>
 8008062:	4639      	mov	r1, r7
 8008064:	4620      	mov	r0, r4
 8008066:	f000 f98f 	bl	8008388 <_Bfree>
 800806a:	e695      	b.n	8007d98 <_dtoa_r+0x6a0>
 800806c:	2600      	movs	r6, #0
 800806e:	4637      	mov	r7, r6
 8008070:	e7e1      	b.n	8008036 <_dtoa_r+0x93e>
 8008072:	9700      	str	r7, [sp, #0]
 8008074:	4637      	mov	r7, r6
 8008076:	e599      	b.n	8007bac <_dtoa_r+0x4b4>
 8008078:	40240000 	.word	0x40240000
 800807c:	9b08      	ldr	r3, [sp, #32]
 800807e:	2b00      	cmp	r3, #0
 8008080:	f000 80ca 	beq.w	8008218 <_dtoa_r+0xb20>
 8008084:	9b03      	ldr	r3, [sp, #12]
 8008086:	9302      	str	r3, [sp, #8]
 8008088:	2d00      	cmp	r5, #0
 800808a:	dd05      	ble.n	8008098 <_dtoa_r+0x9a0>
 800808c:	4639      	mov	r1, r7
 800808e:	462a      	mov	r2, r5
 8008090:	4620      	mov	r0, r4
 8008092:	f000 fb4b 	bl	800872c <__lshift>
 8008096:	4607      	mov	r7, r0
 8008098:	f1b8 0f00 	cmp.w	r8, #0
 800809c:	d05b      	beq.n	8008156 <_dtoa_r+0xa5e>
 800809e:	6879      	ldr	r1, [r7, #4]
 80080a0:	4620      	mov	r0, r4
 80080a2:	f000 f931 	bl	8008308 <_Balloc>
 80080a6:	4605      	mov	r5, r0
 80080a8:	b928      	cbnz	r0, 80080b6 <_dtoa_r+0x9be>
 80080aa:	4b87      	ldr	r3, [pc, #540]	; (80082c8 <_dtoa_r+0xbd0>)
 80080ac:	4602      	mov	r2, r0
 80080ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 80080b2:	f7ff bb3b 	b.w	800772c <_dtoa_r+0x34>
 80080b6:	693a      	ldr	r2, [r7, #16]
 80080b8:	3202      	adds	r2, #2
 80080ba:	0092      	lsls	r2, r2, #2
 80080bc:	f107 010c 	add.w	r1, r7, #12
 80080c0:	300c      	adds	r0, #12
 80080c2:	f000 f913 	bl	80082ec <memcpy>
 80080c6:	2201      	movs	r2, #1
 80080c8:	4629      	mov	r1, r5
 80080ca:	4620      	mov	r0, r4
 80080cc:	f000 fb2e 	bl	800872c <__lshift>
 80080d0:	9b01      	ldr	r3, [sp, #4]
 80080d2:	f103 0901 	add.w	r9, r3, #1
 80080d6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80080da:	4413      	add	r3, r2
 80080dc:	9305      	str	r3, [sp, #20]
 80080de:	f00a 0301 	and.w	r3, sl, #1
 80080e2:	46b8      	mov	r8, r7
 80080e4:	9304      	str	r3, [sp, #16]
 80080e6:	4607      	mov	r7, r0
 80080e8:	4631      	mov	r1, r6
 80080ea:	ee18 0a10 	vmov	r0, s16
 80080ee:	f7ff fa77 	bl	80075e0 <quorem>
 80080f2:	4641      	mov	r1, r8
 80080f4:	9002      	str	r0, [sp, #8]
 80080f6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80080fa:	ee18 0a10 	vmov	r0, s16
 80080fe:	f000 fb85 	bl	800880c <__mcmp>
 8008102:	463a      	mov	r2, r7
 8008104:	9003      	str	r0, [sp, #12]
 8008106:	4631      	mov	r1, r6
 8008108:	4620      	mov	r0, r4
 800810a:	f000 fb9b 	bl	8008844 <__mdiff>
 800810e:	68c2      	ldr	r2, [r0, #12]
 8008110:	f109 3bff 	add.w	fp, r9, #4294967295
 8008114:	4605      	mov	r5, r0
 8008116:	bb02      	cbnz	r2, 800815a <_dtoa_r+0xa62>
 8008118:	4601      	mov	r1, r0
 800811a:	ee18 0a10 	vmov	r0, s16
 800811e:	f000 fb75 	bl	800880c <__mcmp>
 8008122:	4602      	mov	r2, r0
 8008124:	4629      	mov	r1, r5
 8008126:	4620      	mov	r0, r4
 8008128:	9207      	str	r2, [sp, #28]
 800812a:	f000 f92d 	bl	8008388 <_Bfree>
 800812e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008132:	ea43 0102 	orr.w	r1, r3, r2
 8008136:	9b04      	ldr	r3, [sp, #16]
 8008138:	430b      	orrs	r3, r1
 800813a:	464d      	mov	r5, r9
 800813c:	d10f      	bne.n	800815e <_dtoa_r+0xa66>
 800813e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008142:	d02a      	beq.n	800819a <_dtoa_r+0xaa2>
 8008144:	9b03      	ldr	r3, [sp, #12]
 8008146:	2b00      	cmp	r3, #0
 8008148:	dd02      	ble.n	8008150 <_dtoa_r+0xa58>
 800814a:	9b02      	ldr	r3, [sp, #8]
 800814c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008150:	f88b a000 	strb.w	sl, [fp]
 8008154:	e775      	b.n	8008042 <_dtoa_r+0x94a>
 8008156:	4638      	mov	r0, r7
 8008158:	e7ba      	b.n	80080d0 <_dtoa_r+0x9d8>
 800815a:	2201      	movs	r2, #1
 800815c:	e7e2      	b.n	8008124 <_dtoa_r+0xa2c>
 800815e:	9b03      	ldr	r3, [sp, #12]
 8008160:	2b00      	cmp	r3, #0
 8008162:	db04      	blt.n	800816e <_dtoa_r+0xa76>
 8008164:	9906      	ldr	r1, [sp, #24]
 8008166:	430b      	orrs	r3, r1
 8008168:	9904      	ldr	r1, [sp, #16]
 800816a:	430b      	orrs	r3, r1
 800816c:	d122      	bne.n	80081b4 <_dtoa_r+0xabc>
 800816e:	2a00      	cmp	r2, #0
 8008170:	ddee      	ble.n	8008150 <_dtoa_r+0xa58>
 8008172:	ee18 1a10 	vmov	r1, s16
 8008176:	2201      	movs	r2, #1
 8008178:	4620      	mov	r0, r4
 800817a:	f000 fad7 	bl	800872c <__lshift>
 800817e:	4631      	mov	r1, r6
 8008180:	ee08 0a10 	vmov	s16, r0
 8008184:	f000 fb42 	bl	800880c <__mcmp>
 8008188:	2800      	cmp	r0, #0
 800818a:	dc03      	bgt.n	8008194 <_dtoa_r+0xa9c>
 800818c:	d1e0      	bne.n	8008150 <_dtoa_r+0xa58>
 800818e:	f01a 0f01 	tst.w	sl, #1
 8008192:	d0dd      	beq.n	8008150 <_dtoa_r+0xa58>
 8008194:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008198:	d1d7      	bne.n	800814a <_dtoa_r+0xa52>
 800819a:	2339      	movs	r3, #57	; 0x39
 800819c:	f88b 3000 	strb.w	r3, [fp]
 80081a0:	462b      	mov	r3, r5
 80081a2:	461d      	mov	r5, r3
 80081a4:	3b01      	subs	r3, #1
 80081a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80081aa:	2a39      	cmp	r2, #57	; 0x39
 80081ac:	d071      	beq.n	8008292 <_dtoa_r+0xb9a>
 80081ae:	3201      	adds	r2, #1
 80081b0:	701a      	strb	r2, [r3, #0]
 80081b2:	e746      	b.n	8008042 <_dtoa_r+0x94a>
 80081b4:	2a00      	cmp	r2, #0
 80081b6:	dd07      	ble.n	80081c8 <_dtoa_r+0xad0>
 80081b8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80081bc:	d0ed      	beq.n	800819a <_dtoa_r+0xaa2>
 80081be:	f10a 0301 	add.w	r3, sl, #1
 80081c2:	f88b 3000 	strb.w	r3, [fp]
 80081c6:	e73c      	b.n	8008042 <_dtoa_r+0x94a>
 80081c8:	9b05      	ldr	r3, [sp, #20]
 80081ca:	f809 ac01 	strb.w	sl, [r9, #-1]
 80081ce:	4599      	cmp	r9, r3
 80081d0:	d047      	beq.n	8008262 <_dtoa_r+0xb6a>
 80081d2:	ee18 1a10 	vmov	r1, s16
 80081d6:	2300      	movs	r3, #0
 80081d8:	220a      	movs	r2, #10
 80081da:	4620      	mov	r0, r4
 80081dc:	f000 f8f6 	bl	80083cc <__multadd>
 80081e0:	45b8      	cmp	r8, r7
 80081e2:	ee08 0a10 	vmov	s16, r0
 80081e6:	f04f 0300 	mov.w	r3, #0
 80081ea:	f04f 020a 	mov.w	r2, #10
 80081ee:	4641      	mov	r1, r8
 80081f0:	4620      	mov	r0, r4
 80081f2:	d106      	bne.n	8008202 <_dtoa_r+0xb0a>
 80081f4:	f000 f8ea 	bl	80083cc <__multadd>
 80081f8:	4680      	mov	r8, r0
 80081fa:	4607      	mov	r7, r0
 80081fc:	f109 0901 	add.w	r9, r9, #1
 8008200:	e772      	b.n	80080e8 <_dtoa_r+0x9f0>
 8008202:	f000 f8e3 	bl	80083cc <__multadd>
 8008206:	4639      	mov	r1, r7
 8008208:	4680      	mov	r8, r0
 800820a:	2300      	movs	r3, #0
 800820c:	220a      	movs	r2, #10
 800820e:	4620      	mov	r0, r4
 8008210:	f000 f8dc 	bl	80083cc <__multadd>
 8008214:	4607      	mov	r7, r0
 8008216:	e7f1      	b.n	80081fc <_dtoa_r+0xb04>
 8008218:	9b03      	ldr	r3, [sp, #12]
 800821a:	9302      	str	r3, [sp, #8]
 800821c:	9d01      	ldr	r5, [sp, #4]
 800821e:	ee18 0a10 	vmov	r0, s16
 8008222:	4631      	mov	r1, r6
 8008224:	f7ff f9dc 	bl	80075e0 <quorem>
 8008228:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800822c:	9b01      	ldr	r3, [sp, #4]
 800822e:	f805 ab01 	strb.w	sl, [r5], #1
 8008232:	1aea      	subs	r2, r5, r3
 8008234:	9b02      	ldr	r3, [sp, #8]
 8008236:	4293      	cmp	r3, r2
 8008238:	dd09      	ble.n	800824e <_dtoa_r+0xb56>
 800823a:	ee18 1a10 	vmov	r1, s16
 800823e:	2300      	movs	r3, #0
 8008240:	220a      	movs	r2, #10
 8008242:	4620      	mov	r0, r4
 8008244:	f000 f8c2 	bl	80083cc <__multadd>
 8008248:	ee08 0a10 	vmov	s16, r0
 800824c:	e7e7      	b.n	800821e <_dtoa_r+0xb26>
 800824e:	9b02      	ldr	r3, [sp, #8]
 8008250:	2b00      	cmp	r3, #0
 8008252:	bfc8      	it	gt
 8008254:	461d      	movgt	r5, r3
 8008256:	9b01      	ldr	r3, [sp, #4]
 8008258:	bfd8      	it	le
 800825a:	2501      	movle	r5, #1
 800825c:	441d      	add	r5, r3
 800825e:	f04f 0800 	mov.w	r8, #0
 8008262:	ee18 1a10 	vmov	r1, s16
 8008266:	2201      	movs	r2, #1
 8008268:	4620      	mov	r0, r4
 800826a:	f000 fa5f 	bl	800872c <__lshift>
 800826e:	4631      	mov	r1, r6
 8008270:	ee08 0a10 	vmov	s16, r0
 8008274:	f000 faca 	bl	800880c <__mcmp>
 8008278:	2800      	cmp	r0, #0
 800827a:	dc91      	bgt.n	80081a0 <_dtoa_r+0xaa8>
 800827c:	d102      	bne.n	8008284 <_dtoa_r+0xb8c>
 800827e:	f01a 0f01 	tst.w	sl, #1
 8008282:	d18d      	bne.n	80081a0 <_dtoa_r+0xaa8>
 8008284:	462b      	mov	r3, r5
 8008286:	461d      	mov	r5, r3
 8008288:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800828c:	2a30      	cmp	r2, #48	; 0x30
 800828e:	d0fa      	beq.n	8008286 <_dtoa_r+0xb8e>
 8008290:	e6d7      	b.n	8008042 <_dtoa_r+0x94a>
 8008292:	9a01      	ldr	r2, [sp, #4]
 8008294:	429a      	cmp	r2, r3
 8008296:	d184      	bne.n	80081a2 <_dtoa_r+0xaaa>
 8008298:	9b00      	ldr	r3, [sp, #0]
 800829a:	3301      	adds	r3, #1
 800829c:	9300      	str	r3, [sp, #0]
 800829e:	2331      	movs	r3, #49	; 0x31
 80082a0:	7013      	strb	r3, [r2, #0]
 80082a2:	e6ce      	b.n	8008042 <_dtoa_r+0x94a>
 80082a4:	4b09      	ldr	r3, [pc, #36]	; (80082cc <_dtoa_r+0xbd4>)
 80082a6:	f7ff ba95 	b.w	80077d4 <_dtoa_r+0xdc>
 80082aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	f47f aa6e 	bne.w	800778e <_dtoa_r+0x96>
 80082b2:	4b07      	ldr	r3, [pc, #28]	; (80082d0 <_dtoa_r+0xbd8>)
 80082b4:	f7ff ba8e 	b.w	80077d4 <_dtoa_r+0xdc>
 80082b8:	9b02      	ldr	r3, [sp, #8]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	dcae      	bgt.n	800821c <_dtoa_r+0xb24>
 80082be:	9b06      	ldr	r3, [sp, #24]
 80082c0:	2b02      	cmp	r3, #2
 80082c2:	f73f aea8 	bgt.w	8008016 <_dtoa_r+0x91e>
 80082c6:	e7a9      	b.n	800821c <_dtoa_r+0xb24>
 80082c8:	08009f0b 	.word	0x08009f0b
 80082cc:	08009e68 	.word	0x08009e68
 80082d0:	08009e8c 	.word	0x08009e8c

080082d4 <_localeconv_r>:
 80082d4:	4800      	ldr	r0, [pc, #0]	; (80082d8 <_localeconv_r+0x4>)
 80082d6:	4770      	bx	lr
 80082d8:	2000018c 	.word	0x2000018c

080082dc <malloc>:
 80082dc:	4b02      	ldr	r3, [pc, #8]	; (80082e8 <malloc+0xc>)
 80082de:	4601      	mov	r1, r0
 80082e0:	6818      	ldr	r0, [r3, #0]
 80082e2:	f000 bc17 	b.w	8008b14 <_malloc_r>
 80082e6:	bf00      	nop
 80082e8:	20000038 	.word	0x20000038

080082ec <memcpy>:
 80082ec:	440a      	add	r2, r1
 80082ee:	4291      	cmp	r1, r2
 80082f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80082f4:	d100      	bne.n	80082f8 <memcpy+0xc>
 80082f6:	4770      	bx	lr
 80082f8:	b510      	push	{r4, lr}
 80082fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008302:	4291      	cmp	r1, r2
 8008304:	d1f9      	bne.n	80082fa <memcpy+0xe>
 8008306:	bd10      	pop	{r4, pc}

08008308 <_Balloc>:
 8008308:	b570      	push	{r4, r5, r6, lr}
 800830a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800830c:	4604      	mov	r4, r0
 800830e:	460d      	mov	r5, r1
 8008310:	b976      	cbnz	r6, 8008330 <_Balloc+0x28>
 8008312:	2010      	movs	r0, #16
 8008314:	f7ff ffe2 	bl	80082dc <malloc>
 8008318:	4602      	mov	r2, r0
 800831a:	6260      	str	r0, [r4, #36]	; 0x24
 800831c:	b920      	cbnz	r0, 8008328 <_Balloc+0x20>
 800831e:	4b18      	ldr	r3, [pc, #96]	; (8008380 <_Balloc+0x78>)
 8008320:	4818      	ldr	r0, [pc, #96]	; (8008384 <_Balloc+0x7c>)
 8008322:	2166      	movs	r1, #102	; 0x66
 8008324:	f000 fdd6 	bl	8008ed4 <__assert_func>
 8008328:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800832c:	6006      	str	r6, [r0, #0]
 800832e:	60c6      	str	r6, [r0, #12]
 8008330:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008332:	68f3      	ldr	r3, [r6, #12]
 8008334:	b183      	cbz	r3, 8008358 <_Balloc+0x50>
 8008336:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800833e:	b9b8      	cbnz	r0, 8008370 <_Balloc+0x68>
 8008340:	2101      	movs	r1, #1
 8008342:	fa01 f605 	lsl.w	r6, r1, r5
 8008346:	1d72      	adds	r2, r6, #5
 8008348:	0092      	lsls	r2, r2, #2
 800834a:	4620      	mov	r0, r4
 800834c:	f000 fb60 	bl	8008a10 <_calloc_r>
 8008350:	b160      	cbz	r0, 800836c <_Balloc+0x64>
 8008352:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008356:	e00e      	b.n	8008376 <_Balloc+0x6e>
 8008358:	2221      	movs	r2, #33	; 0x21
 800835a:	2104      	movs	r1, #4
 800835c:	4620      	mov	r0, r4
 800835e:	f000 fb57 	bl	8008a10 <_calloc_r>
 8008362:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008364:	60f0      	str	r0, [r6, #12]
 8008366:	68db      	ldr	r3, [r3, #12]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d1e4      	bne.n	8008336 <_Balloc+0x2e>
 800836c:	2000      	movs	r0, #0
 800836e:	bd70      	pop	{r4, r5, r6, pc}
 8008370:	6802      	ldr	r2, [r0, #0]
 8008372:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008376:	2300      	movs	r3, #0
 8008378:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800837c:	e7f7      	b.n	800836e <_Balloc+0x66>
 800837e:	bf00      	nop
 8008380:	08009e99 	.word	0x08009e99
 8008384:	08009f1c 	.word	0x08009f1c

08008388 <_Bfree>:
 8008388:	b570      	push	{r4, r5, r6, lr}
 800838a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800838c:	4605      	mov	r5, r0
 800838e:	460c      	mov	r4, r1
 8008390:	b976      	cbnz	r6, 80083b0 <_Bfree+0x28>
 8008392:	2010      	movs	r0, #16
 8008394:	f7ff ffa2 	bl	80082dc <malloc>
 8008398:	4602      	mov	r2, r0
 800839a:	6268      	str	r0, [r5, #36]	; 0x24
 800839c:	b920      	cbnz	r0, 80083a8 <_Bfree+0x20>
 800839e:	4b09      	ldr	r3, [pc, #36]	; (80083c4 <_Bfree+0x3c>)
 80083a0:	4809      	ldr	r0, [pc, #36]	; (80083c8 <_Bfree+0x40>)
 80083a2:	218a      	movs	r1, #138	; 0x8a
 80083a4:	f000 fd96 	bl	8008ed4 <__assert_func>
 80083a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80083ac:	6006      	str	r6, [r0, #0]
 80083ae:	60c6      	str	r6, [r0, #12]
 80083b0:	b13c      	cbz	r4, 80083c2 <_Bfree+0x3a>
 80083b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80083b4:	6862      	ldr	r2, [r4, #4]
 80083b6:	68db      	ldr	r3, [r3, #12]
 80083b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80083bc:	6021      	str	r1, [r4, #0]
 80083be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80083c2:	bd70      	pop	{r4, r5, r6, pc}
 80083c4:	08009e99 	.word	0x08009e99
 80083c8:	08009f1c 	.word	0x08009f1c

080083cc <__multadd>:
 80083cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083d0:	690d      	ldr	r5, [r1, #16]
 80083d2:	4607      	mov	r7, r0
 80083d4:	460c      	mov	r4, r1
 80083d6:	461e      	mov	r6, r3
 80083d8:	f101 0c14 	add.w	ip, r1, #20
 80083dc:	2000      	movs	r0, #0
 80083de:	f8dc 3000 	ldr.w	r3, [ip]
 80083e2:	b299      	uxth	r1, r3
 80083e4:	fb02 6101 	mla	r1, r2, r1, r6
 80083e8:	0c1e      	lsrs	r6, r3, #16
 80083ea:	0c0b      	lsrs	r3, r1, #16
 80083ec:	fb02 3306 	mla	r3, r2, r6, r3
 80083f0:	b289      	uxth	r1, r1
 80083f2:	3001      	adds	r0, #1
 80083f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80083f8:	4285      	cmp	r5, r0
 80083fa:	f84c 1b04 	str.w	r1, [ip], #4
 80083fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008402:	dcec      	bgt.n	80083de <__multadd+0x12>
 8008404:	b30e      	cbz	r6, 800844a <__multadd+0x7e>
 8008406:	68a3      	ldr	r3, [r4, #8]
 8008408:	42ab      	cmp	r3, r5
 800840a:	dc19      	bgt.n	8008440 <__multadd+0x74>
 800840c:	6861      	ldr	r1, [r4, #4]
 800840e:	4638      	mov	r0, r7
 8008410:	3101      	adds	r1, #1
 8008412:	f7ff ff79 	bl	8008308 <_Balloc>
 8008416:	4680      	mov	r8, r0
 8008418:	b928      	cbnz	r0, 8008426 <__multadd+0x5a>
 800841a:	4602      	mov	r2, r0
 800841c:	4b0c      	ldr	r3, [pc, #48]	; (8008450 <__multadd+0x84>)
 800841e:	480d      	ldr	r0, [pc, #52]	; (8008454 <__multadd+0x88>)
 8008420:	21b5      	movs	r1, #181	; 0xb5
 8008422:	f000 fd57 	bl	8008ed4 <__assert_func>
 8008426:	6922      	ldr	r2, [r4, #16]
 8008428:	3202      	adds	r2, #2
 800842a:	f104 010c 	add.w	r1, r4, #12
 800842e:	0092      	lsls	r2, r2, #2
 8008430:	300c      	adds	r0, #12
 8008432:	f7ff ff5b 	bl	80082ec <memcpy>
 8008436:	4621      	mov	r1, r4
 8008438:	4638      	mov	r0, r7
 800843a:	f7ff ffa5 	bl	8008388 <_Bfree>
 800843e:	4644      	mov	r4, r8
 8008440:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008444:	3501      	adds	r5, #1
 8008446:	615e      	str	r6, [r3, #20]
 8008448:	6125      	str	r5, [r4, #16]
 800844a:	4620      	mov	r0, r4
 800844c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008450:	08009f0b 	.word	0x08009f0b
 8008454:	08009f1c 	.word	0x08009f1c

08008458 <__hi0bits>:
 8008458:	0c03      	lsrs	r3, r0, #16
 800845a:	041b      	lsls	r3, r3, #16
 800845c:	b9d3      	cbnz	r3, 8008494 <__hi0bits+0x3c>
 800845e:	0400      	lsls	r0, r0, #16
 8008460:	2310      	movs	r3, #16
 8008462:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008466:	bf04      	itt	eq
 8008468:	0200      	lsleq	r0, r0, #8
 800846a:	3308      	addeq	r3, #8
 800846c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008470:	bf04      	itt	eq
 8008472:	0100      	lsleq	r0, r0, #4
 8008474:	3304      	addeq	r3, #4
 8008476:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800847a:	bf04      	itt	eq
 800847c:	0080      	lsleq	r0, r0, #2
 800847e:	3302      	addeq	r3, #2
 8008480:	2800      	cmp	r0, #0
 8008482:	db05      	blt.n	8008490 <__hi0bits+0x38>
 8008484:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008488:	f103 0301 	add.w	r3, r3, #1
 800848c:	bf08      	it	eq
 800848e:	2320      	moveq	r3, #32
 8008490:	4618      	mov	r0, r3
 8008492:	4770      	bx	lr
 8008494:	2300      	movs	r3, #0
 8008496:	e7e4      	b.n	8008462 <__hi0bits+0xa>

08008498 <__lo0bits>:
 8008498:	6803      	ldr	r3, [r0, #0]
 800849a:	f013 0207 	ands.w	r2, r3, #7
 800849e:	4601      	mov	r1, r0
 80084a0:	d00b      	beq.n	80084ba <__lo0bits+0x22>
 80084a2:	07da      	lsls	r2, r3, #31
 80084a4:	d423      	bmi.n	80084ee <__lo0bits+0x56>
 80084a6:	0798      	lsls	r0, r3, #30
 80084a8:	bf49      	itett	mi
 80084aa:	085b      	lsrmi	r3, r3, #1
 80084ac:	089b      	lsrpl	r3, r3, #2
 80084ae:	2001      	movmi	r0, #1
 80084b0:	600b      	strmi	r3, [r1, #0]
 80084b2:	bf5c      	itt	pl
 80084b4:	600b      	strpl	r3, [r1, #0]
 80084b6:	2002      	movpl	r0, #2
 80084b8:	4770      	bx	lr
 80084ba:	b298      	uxth	r0, r3
 80084bc:	b9a8      	cbnz	r0, 80084ea <__lo0bits+0x52>
 80084be:	0c1b      	lsrs	r3, r3, #16
 80084c0:	2010      	movs	r0, #16
 80084c2:	b2da      	uxtb	r2, r3
 80084c4:	b90a      	cbnz	r2, 80084ca <__lo0bits+0x32>
 80084c6:	3008      	adds	r0, #8
 80084c8:	0a1b      	lsrs	r3, r3, #8
 80084ca:	071a      	lsls	r2, r3, #28
 80084cc:	bf04      	itt	eq
 80084ce:	091b      	lsreq	r3, r3, #4
 80084d0:	3004      	addeq	r0, #4
 80084d2:	079a      	lsls	r2, r3, #30
 80084d4:	bf04      	itt	eq
 80084d6:	089b      	lsreq	r3, r3, #2
 80084d8:	3002      	addeq	r0, #2
 80084da:	07da      	lsls	r2, r3, #31
 80084dc:	d403      	bmi.n	80084e6 <__lo0bits+0x4e>
 80084de:	085b      	lsrs	r3, r3, #1
 80084e0:	f100 0001 	add.w	r0, r0, #1
 80084e4:	d005      	beq.n	80084f2 <__lo0bits+0x5a>
 80084e6:	600b      	str	r3, [r1, #0]
 80084e8:	4770      	bx	lr
 80084ea:	4610      	mov	r0, r2
 80084ec:	e7e9      	b.n	80084c2 <__lo0bits+0x2a>
 80084ee:	2000      	movs	r0, #0
 80084f0:	4770      	bx	lr
 80084f2:	2020      	movs	r0, #32
 80084f4:	4770      	bx	lr
	...

080084f8 <__i2b>:
 80084f8:	b510      	push	{r4, lr}
 80084fa:	460c      	mov	r4, r1
 80084fc:	2101      	movs	r1, #1
 80084fe:	f7ff ff03 	bl	8008308 <_Balloc>
 8008502:	4602      	mov	r2, r0
 8008504:	b928      	cbnz	r0, 8008512 <__i2b+0x1a>
 8008506:	4b05      	ldr	r3, [pc, #20]	; (800851c <__i2b+0x24>)
 8008508:	4805      	ldr	r0, [pc, #20]	; (8008520 <__i2b+0x28>)
 800850a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800850e:	f000 fce1 	bl	8008ed4 <__assert_func>
 8008512:	2301      	movs	r3, #1
 8008514:	6144      	str	r4, [r0, #20]
 8008516:	6103      	str	r3, [r0, #16]
 8008518:	bd10      	pop	{r4, pc}
 800851a:	bf00      	nop
 800851c:	08009f0b 	.word	0x08009f0b
 8008520:	08009f1c 	.word	0x08009f1c

08008524 <__multiply>:
 8008524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008528:	4691      	mov	r9, r2
 800852a:	690a      	ldr	r2, [r1, #16]
 800852c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008530:	429a      	cmp	r2, r3
 8008532:	bfb8      	it	lt
 8008534:	460b      	movlt	r3, r1
 8008536:	460c      	mov	r4, r1
 8008538:	bfbc      	itt	lt
 800853a:	464c      	movlt	r4, r9
 800853c:	4699      	movlt	r9, r3
 800853e:	6927      	ldr	r7, [r4, #16]
 8008540:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008544:	68a3      	ldr	r3, [r4, #8]
 8008546:	6861      	ldr	r1, [r4, #4]
 8008548:	eb07 060a 	add.w	r6, r7, sl
 800854c:	42b3      	cmp	r3, r6
 800854e:	b085      	sub	sp, #20
 8008550:	bfb8      	it	lt
 8008552:	3101      	addlt	r1, #1
 8008554:	f7ff fed8 	bl	8008308 <_Balloc>
 8008558:	b930      	cbnz	r0, 8008568 <__multiply+0x44>
 800855a:	4602      	mov	r2, r0
 800855c:	4b44      	ldr	r3, [pc, #272]	; (8008670 <__multiply+0x14c>)
 800855e:	4845      	ldr	r0, [pc, #276]	; (8008674 <__multiply+0x150>)
 8008560:	f240 115d 	movw	r1, #349	; 0x15d
 8008564:	f000 fcb6 	bl	8008ed4 <__assert_func>
 8008568:	f100 0514 	add.w	r5, r0, #20
 800856c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008570:	462b      	mov	r3, r5
 8008572:	2200      	movs	r2, #0
 8008574:	4543      	cmp	r3, r8
 8008576:	d321      	bcc.n	80085bc <__multiply+0x98>
 8008578:	f104 0314 	add.w	r3, r4, #20
 800857c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008580:	f109 0314 	add.w	r3, r9, #20
 8008584:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008588:	9202      	str	r2, [sp, #8]
 800858a:	1b3a      	subs	r2, r7, r4
 800858c:	3a15      	subs	r2, #21
 800858e:	f022 0203 	bic.w	r2, r2, #3
 8008592:	3204      	adds	r2, #4
 8008594:	f104 0115 	add.w	r1, r4, #21
 8008598:	428f      	cmp	r7, r1
 800859a:	bf38      	it	cc
 800859c:	2204      	movcc	r2, #4
 800859e:	9201      	str	r2, [sp, #4]
 80085a0:	9a02      	ldr	r2, [sp, #8]
 80085a2:	9303      	str	r3, [sp, #12]
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d80c      	bhi.n	80085c2 <__multiply+0x9e>
 80085a8:	2e00      	cmp	r6, #0
 80085aa:	dd03      	ble.n	80085b4 <__multiply+0x90>
 80085ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d05a      	beq.n	800866a <__multiply+0x146>
 80085b4:	6106      	str	r6, [r0, #16]
 80085b6:	b005      	add	sp, #20
 80085b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085bc:	f843 2b04 	str.w	r2, [r3], #4
 80085c0:	e7d8      	b.n	8008574 <__multiply+0x50>
 80085c2:	f8b3 a000 	ldrh.w	sl, [r3]
 80085c6:	f1ba 0f00 	cmp.w	sl, #0
 80085ca:	d024      	beq.n	8008616 <__multiply+0xf2>
 80085cc:	f104 0e14 	add.w	lr, r4, #20
 80085d0:	46a9      	mov	r9, r5
 80085d2:	f04f 0c00 	mov.w	ip, #0
 80085d6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80085da:	f8d9 1000 	ldr.w	r1, [r9]
 80085de:	fa1f fb82 	uxth.w	fp, r2
 80085e2:	b289      	uxth	r1, r1
 80085e4:	fb0a 110b 	mla	r1, sl, fp, r1
 80085e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80085ec:	f8d9 2000 	ldr.w	r2, [r9]
 80085f0:	4461      	add	r1, ip
 80085f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80085f6:	fb0a c20b 	mla	r2, sl, fp, ip
 80085fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80085fe:	b289      	uxth	r1, r1
 8008600:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008604:	4577      	cmp	r7, lr
 8008606:	f849 1b04 	str.w	r1, [r9], #4
 800860a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800860e:	d8e2      	bhi.n	80085d6 <__multiply+0xb2>
 8008610:	9a01      	ldr	r2, [sp, #4]
 8008612:	f845 c002 	str.w	ip, [r5, r2]
 8008616:	9a03      	ldr	r2, [sp, #12]
 8008618:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800861c:	3304      	adds	r3, #4
 800861e:	f1b9 0f00 	cmp.w	r9, #0
 8008622:	d020      	beq.n	8008666 <__multiply+0x142>
 8008624:	6829      	ldr	r1, [r5, #0]
 8008626:	f104 0c14 	add.w	ip, r4, #20
 800862a:	46ae      	mov	lr, r5
 800862c:	f04f 0a00 	mov.w	sl, #0
 8008630:	f8bc b000 	ldrh.w	fp, [ip]
 8008634:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008638:	fb09 220b 	mla	r2, r9, fp, r2
 800863c:	4492      	add	sl, r2
 800863e:	b289      	uxth	r1, r1
 8008640:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008644:	f84e 1b04 	str.w	r1, [lr], #4
 8008648:	f85c 2b04 	ldr.w	r2, [ip], #4
 800864c:	f8be 1000 	ldrh.w	r1, [lr]
 8008650:	0c12      	lsrs	r2, r2, #16
 8008652:	fb09 1102 	mla	r1, r9, r2, r1
 8008656:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800865a:	4567      	cmp	r7, ip
 800865c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008660:	d8e6      	bhi.n	8008630 <__multiply+0x10c>
 8008662:	9a01      	ldr	r2, [sp, #4]
 8008664:	50a9      	str	r1, [r5, r2]
 8008666:	3504      	adds	r5, #4
 8008668:	e79a      	b.n	80085a0 <__multiply+0x7c>
 800866a:	3e01      	subs	r6, #1
 800866c:	e79c      	b.n	80085a8 <__multiply+0x84>
 800866e:	bf00      	nop
 8008670:	08009f0b 	.word	0x08009f0b
 8008674:	08009f1c 	.word	0x08009f1c

08008678 <__pow5mult>:
 8008678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800867c:	4615      	mov	r5, r2
 800867e:	f012 0203 	ands.w	r2, r2, #3
 8008682:	4606      	mov	r6, r0
 8008684:	460f      	mov	r7, r1
 8008686:	d007      	beq.n	8008698 <__pow5mult+0x20>
 8008688:	4c25      	ldr	r4, [pc, #148]	; (8008720 <__pow5mult+0xa8>)
 800868a:	3a01      	subs	r2, #1
 800868c:	2300      	movs	r3, #0
 800868e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008692:	f7ff fe9b 	bl	80083cc <__multadd>
 8008696:	4607      	mov	r7, r0
 8008698:	10ad      	asrs	r5, r5, #2
 800869a:	d03d      	beq.n	8008718 <__pow5mult+0xa0>
 800869c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800869e:	b97c      	cbnz	r4, 80086c0 <__pow5mult+0x48>
 80086a0:	2010      	movs	r0, #16
 80086a2:	f7ff fe1b 	bl	80082dc <malloc>
 80086a6:	4602      	mov	r2, r0
 80086a8:	6270      	str	r0, [r6, #36]	; 0x24
 80086aa:	b928      	cbnz	r0, 80086b8 <__pow5mult+0x40>
 80086ac:	4b1d      	ldr	r3, [pc, #116]	; (8008724 <__pow5mult+0xac>)
 80086ae:	481e      	ldr	r0, [pc, #120]	; (8008728 <__pow5mult+0xb0>)
 80086b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80086b4:	f000 fc0e 	bl	8008ed4 <__assert_func>
 80086b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80086bc:	6004      	str	r4, [r0, #0]
 80086be:	60c4      	str	r4, [r0, #12]
 80086c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80086c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80086c8:	b94c      	cbnz	r4, 80086de <__pow5mult+0x66>
 80086ca:	f240 2171 	movw	r1, #625	; 0x271
 80086ce:	4630      	mov	r0, r6
 80086d0:	f7ff ff12 	bl	80084f8 <__i2b>
 80086d4:	2300      	movs	r3, #0
 80086d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80086da:	4604      	mov	r4, r0
 80086dc:	6003      	str	r3, [r0, #0]
 80086de:	f04f 0900 	mov.w	r9, #0
 80086e2:	07eb      	lsls	r3, r5, #31
 80086e4:	d50a      	bpl.n	80086fc <__pow5mult+0x84>
 80086e6:	4639      	mov	r1, r7
 80086e8:	4622      	mov	r2, r4
 80086ea:	4630      	mov	r0, r6
 80086ec:	f7ff ff1a 	bl	8008524 <__multiply>
 80086f0:	4639      	mov	r1, r7
 80086f2:	4680      	mov	r8, r0
 80086f4:	4630      	mov	r0, r6
 80086f6:	f7ff fe47 	bl	8008388 <_Bfree>
 80086fa:	4647      	mov	r7, r8
 80086fc:	106d      	asrs	r5, r5, #1
 80086fe:	d00b      	beq.n	8008718 <__pow5mult+0xa0>
 8008700:	6820      	ldr	r0, [r4, #0]
 8008702:	b938      	cbnz	r0, 8008714 <__pow5mult+0x9c>
 8008704:	4622      	mov	r2, r4
 8008706:	4621      	mov	r1, r4
 8008708:	4630      	mov	r0, r6
 800870a:	f7ff ff0b 	bl	8008524 <__multiply>
 800870e:	6020      	str	r0, [r4, #0]
 8008710:	f8c0 9000 	str.w	r9, [r0]
 8008714:	4604      	mov	r4, r0
 8008716:	e7e4      	b.n	80086e2 <__pow5mult+0x6a>
 8008718:	4638      	mov	r0, r7
 800871a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800871e:	bf00      	nop
 8008720:	0800a068 	.word	0x0800a068
 8008724:	08009e99 	.word	0x08009e99
 8008728:	08009f1c 	.word	0x08009f1c

0800872c <__lshift>:
 800872c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008730:	460c      	mov	r4, r1
 8008732:	6849      	ldr	r1, [r1, #4]
 8008734:	6923      	ldr	r3, [r4, #16]
 8008736:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800873a:	68a3      	ldr	r3, [r4, #8]
 800873c:	4607      	mov	r7, r0
 800873e:	4691      	mov	r9, r2
 8008740:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008744:	f108 0601 	add.w	r6, r8, #1
 8008748:	42b3      	cmp	r3, r6
 800874a:	db0b      	blt.n	8008764 <__lshift+0x38>
 800874c:	4638      	mov	r0, r7
 800874e:	f7ff fddb 	bl	8008308 <_Balloc>
 8008752:	4605      	mov	r5, r0
 8008754:	b948      	cbnz	r0, 800876a <__lshift+0x3e>
 8008756:	4602      	mov	r2, r0
 8008758:	4b2a      	ldr	r3, [pc, #168]	; (8008804 <__lshift+0xd8>)
 800875a:	482b      	ldr	r0, [pc, #172]	; (8008808 <__lshift+0xdc>)
 800875c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008760:	f000 fbb8 	bl	8008ed4 <__assert_func>
 8008764:	3101      	adds	r1, #1
 8008766:	005b      	lsls	r3, r3, #1
 8008768:	e7ee      	b.n	8008748 <__lshift+0x1c>
 800876a:	2300      	movs	r3, #0
 800876c:	f100 0114 	add.w	r1, r0, #20
 8008770:	f100 0210 	add.w	r2, r0, #16
 8008774:	4618      	mov	r0, r3
 8008776:	4553      	cmp	r3, sl
 8008778:	db37      	blt.n	80087ea <__lshift+0xbe>
 800877a:	6920      	ldr	r0, [r4, #16]
 800877c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008780:	f104 0314 	add.w	r3, r4, #20
 8008784:	f019 091f 	ands.w	r9, r9, #31
 8008788:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800878c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008790:	d02f      	beq.n	80087f2 <__lshift+0xc6>
 8008792:	f1c9 0e20 	rsb	lr, r9, #32
 8008796:	468a      	mov	sl, r1
 8008798:	f04f 0c00 	mov.w	ip, #0
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	fa02 f209 	lsl.w	r2, r2, r9
 80087a2:	ea42 020c 	orr.w	r2, r2, ip
 80087a6:	f84a 2b04 	str.w	r2, [sl], #4
 80087aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80087ae:	4298      	cmp	r0, r3
 80087b0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80087b4:	d8f2      	bhi.n	800879c <__lshift+0x70>
 80087b6:	1b03      	subs	r3, r0, r4
 80087b8:	3b15      	subs	r3, #21
 80087ba:	f023 0303 	bic.w	r3, r3, #3
 80087be:	3304      	adds	r3, #4
 80087c0:	f104 0215 	add.w	r2, r4, #21
 80087c4:	4290      	cmp	r0, r2
 80087c6:	bf38      	it	cc
 80087c8:	2304      	movcc	r3, #4
 80087ca:	f841 c003 	str.w	ip, [r1, r3]
 80087ce:	f1bc 0f00 	cmp.w	ip, #0
 80087d2:	d001      	beq.n	80087d8 <__lshift+0xac>
 80087d4:	f108 0602 	add.w	r6, r8, #2
 80087d8:	3e01      	subs	r6, #1
 80087da:	4638      	mov	r0, r7
 80087dc:	612e      	str	r6, [r5, #16]
 80087de:	4621      	mov	r1, r4
 80087e0:	f7ff fdd2 	bl	8008388 <_Bfree>
 80087e4:	4628      	mov	r0, r5
 80087e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80087ee:	3301      	adds	r3, #1
 80087f0:	e7c1      	b.n	8008776 <__lshift+0x4a>
 80087f2:	3904      	subs	r1, #4
 80087f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80087f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80087fc:	4298      	cmp	r0, r3
 80087fe:	d8f9      	bhi.n	80087f4 <__lshift+0xc8>
 8008800:	e7ea      	b.n	80087d8 <__lshift+0xac>
 8008802:	bf00      	nop
 8008804:	08009f0b 	.word	0x08009f0b
 8008808:	08009f1c 	.word	0x08009f1c

0800880c <__mcmp>:
 800880c:	b530      	push	{r4, r5, lr}
 800880e:	6902      	ldr	r2, [r0, #16]
 8008810:	690c      	ldr	r4, [r1, #16]
 8008812:	1b12      	subs	r2, r2, r4
 8008814:	d10e      	bne.n	8008834 <__mcmp+0x28>
 8008816:	f100 0314 	add.w	r3, r0, #20
 800881a:	3114      	adds	r1, #20
 800881c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008820:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008824:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008828:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800882c:	42a5      	cmp	r5, r4
 800882e:	d003      	beq.n	8008838 <__mcmp+0x2c>
 8008830:	d305      	bcc.n	800883e <__mcmp+0x32>
 8008832:	2201      	movs	r2, #1
 8008834:	4610      	mov	r0, r2
 8008836:	bd30      	pop	{r4, r5, pc}
 8008838:	4283      	cmp	r3, r0
 800883a:	d3f3      	bcc.n	8008824 <__mcmp+0x18>
 800883c:	e7fa      	b.n	8008834 <__mcmp+0x28>
 800883e:	f04f 32ff 	mov.w	r2, #4294967295
 8008842:	e7f7      	b.n	8008834 <__mcmp+0x28>

08008844 <__mdiff>:
 8008844:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008848:	460c      	mov	r4, r1
 800884a:	4606      	mov	r6, r0
 800884c:	4611      	mov	r1, r2
 800884e:	4620      	mov	r0, r4
 8008850:	4690      	mov	r8, r2
 8008852:	f7ff ffdb 	bl	800880c <__mcmp>
 8008856:	1e05      	subs	r5, r0, #0
 8008858:	d110      	bne.n	800887c <__mdiff+0x38>
 800885a:	4629      	mov	r1, r5
 800885c:	4630      	mov	r0, r6
 800885e:	f7ff fd53 	bl	8008308 <_Balloc>
 8008862:	b930      	cbnz	r0, 8008872 <__mdiff+0x2e>
 8008864:	4b3a      	ldr	r3, [pc, #232]	; (8008950 <__mdiff+0x10c>)
 8008866:	4602      	mov	r2, r0
 8008868:	f240 2132 	movw	r1, #562	; 0x232
 800886c:	4839      	ldr	r0, [pc, #228]	; (8008954 <__mdiff+0x110>)
 800886e:	f000 fb31 	bl	8008ed4 <__assert_func>
 8008872:	2301      	movs	r3, #1
 8008874:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008878:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800887c:	bfa4      	itt	ge
 800887e:	4643      	movge	r3, r8
 8008880:	46a0      	movge	r8, r4
 8008882:	4630      	mov	r0, r6
 8008884:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008888:	bfa6      	itte	ge
 800888a:	461c      	movge	r4, r3
 800888c:	2500      	movge	r5, #0
 800888e:	2501      	movlt	r5, #1
 8008890:	f7ff fd3a 	bl	8008308 <_Balloc>
 8008894:	b920      	cbnz	r0, 80088a0 <__mdiff+0x5c>
 8008896:	4b2e      	ldr	r3, [pc, #184]	; (8008950 <__mdiff+0x10c>)
 8008898:	4602      	mov	r2, r0
 800889a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800889e:	e7e5      	b.n	800886c <__mdiff+0x28>
 80088a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80088a4:	6926      	ldr	r6, [r4, #16]
 80088a6:	60c5      	str	r5, [r0, #12]
 80088a8:	f104 0914 	add.w	r9, r4, #20
 80088ac:	f108 0514 	add.w	r5, r8, #20
 80088b0:	f100 0e14 	add.w	lr, r0, #20
 80088b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80088b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80088bc:	f108 0210 	add.w	r2, r8, #16
 80088c0:	46f2      	mov	sl, lr
 80088c2:	2100      	movs	r1, #0
 80088c4:	f859 3b04 	ldr.w	r3, [r9], #4
 80088c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80088cc:	fa1f f883 	uxth.w	r8, r3
 80088d0:	fa11 f18b 	uxtah	r1, r1, fp
 80088d4:	0c1b      	lsrs	r3, r3, #16
 80088d6:	eba1 0808 	sub.w	r8, r1, r8
 80088da:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80088de:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80088e2:	fa1f f888 	uxth.w	r8, r8
 80088e6:	1419      	asrs	r1, r3, #16
 80088e8:	454e      	cmp	r6, r9
 80088ea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80088ee:	f84a 3b04 	str.w	r3, [sl], #4
 80088f2:	d8e7      	bhi.n	80088c4 <__mdiff+0x80>
 80088f4:	1b33      	subs	r3, r6, r4
 80088f6:	3b15      	subs	r3, #21
 80088f8:	f023 0303 	bic.w	r3, r3, #3
 80088fc:	3304      	adds	r3, #4
 80088fe:	3415      	adds	r4, #21
 8008900:	42a6      	cmp	r6, r4
 8008902:	bf38      	it	cc
 8008904:	2304      	movcc	r3, #4
 8008906:	441d      	add	r5, r3
 8008908:	4473      	add	r3, lr
 800890a:	469e      	mov	lr, r3
 800890c:	462e      	mov	r6, r5
 800890e:	4566      	cmp	r6, ip
 8008910:	d30e      	bcc.n	8008930 <__mdiff+0xec>
 8008912:	f10c 0203 	add.w	r2, ip, #3
 8008916:	1b52      	subs	r2, r2, r5
 8008918:	f022 0203 	bic.w	r2, r2, #3
 800891c:	3d03      	subs	r5, #3
 800891e:	45ac      	cmp	ip, r5
 8008920:	bf38      	it	cc
 8008922:	2200      	movcc	r2, #0
 8008924:	441a      	add	r2, r3
 8008926:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800892a:	b17b      	cbz	r3, 800894c <__mdiff+0x108>
 800892c:	6107      	str	r7, [r0, #16]
 800892e:	e7a3      	b.n	8008878 <__mdiff+0x34>
 8008930:	f856 8b04 	ldr.w	r8, [r6], #4
 8008934:	fa11 f288 	uxtah	r2, r1, r8
 8008938:	1414      	asrs	r4, r2, #16
 800893a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800893e:	b292      	uxth	r2, r2
 8008940:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008944:	f84e 2b04 	str.w	r2, [lr], #4
 8008948:	1421      	asrs	r1, r4, #16
 800894a:	e7e0      	b.n	800890e <__mdiff+0xca>
 800894c:	3f01      	subs	r7, #1
 800894e:	e7ea      	b.n	8008926 <__mdiff+0xe2>
 8008950:	08009f0b 	.word	0x08009f0b
 8008954:	08009f1c 	.word	0x08009f1c

08008958 <__d2b>:
 8008958:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800895c:	4689      	mov	r9, r1
 800895e:	2101      	movs	r1, #1
 8008960:	ec57 6b10 	vmov	r6, r7, d0
 8008964:	4690      	mov	r8, r2
 8008966:	f7ff fccf 	bl	8008308 <_Balloc>
 800896a:	4604      	mov	r4, r0
 800896c:	b930      	cbnz	r0, 800897c <__d2b+0x24>
 800896e:	4602      	mov	r2, r0
 8008970:	4b25      	ldr	r3, [pc, #148]	; (8008a08 <__d2b+0xb0>)
 8008972:	4826      	ldr	r0, [pc, #152]	; (8008a0c <__d2b+0xb4>)
 8008974:	f240 310a 	movw	r1, #778	; 0x30a
 8008978:	f000 faac 	bl	8008ed4 <__assert_func>
 800897c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008980:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008984:	bb35      	cbnz	r5, 80089d4 <__d2b+0x7c>
 8008986:	2e00      	cmp	r6, #0
 8008988:	9301      	str	r3, [sp, #4]
 800898a:	d028      	beq.n	80089de <__d2b+0x86>
 800898c:	4668      	mov	r0, sp
 800898e:	9600      	str	r6, [sp, #0]
 8008990:	f7ff fd82 	bl	8008498 <__lo0bits>
 8008994:	9900      	ldr	r1, [sp, #0]
 8008996:	b300      	cbz	r0, 80089da <__d2b+0x82>
 8008998:	9a01      	ldr	r2, [sp, #4]
 800899a:	f1c0 0320 	rsb	r3, r0, #32
 800899e:	fa02 f303 	lsl.w	r3, r2, r3
 80089a2:	430b      	orrs	r3, r1
 80089a4:	40c2      	lsrs	r2, r0
 80089a6:	6163      	str	r3, [r4, #20]
 80089a8:	9201      	str	r2, [sp, #4]
 80089aa:	9b01      	ldr	r3, [sp, #4]
 80089ac:	61a3      	str	r3, [r4, #24]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	bf14      	ite	ne
 80089b2:	2202      	movne	r2, #2
 80089b4:	2201      	moveq	r2, #1
 80089b6:	6122      	str	r2, [r4, #16]
 80089b8:	b1d5      	cbz	r5, 80089f0 <__d2b+0x98>
 80089ba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80089be:	4405      	add	r5, r0
 80089c0:	f8c9 5000 	str.w	r5, [r9]
 80089c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80089c8:	f8c8 0000 	str.w	r0, [r8]
 80089cc:	4620      	mov	r0, r4
 80089ce:	b003      	add	sp, #12
 80089d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80089d8:	e7d5      	b.n	8008986 <__d2b+0x2e>
 80089da:	6161      	str	r1, [r4, #20]
 80089dc:	e7e5      	b.n	80089aa <__d2b+0x52>
 80089de:	a801      	add	r0, sp, #4
 80089e0:	f7ff fd5a 	bl	8008498 <__lo0bits>
 80089e4:	9b01      	ldr	r3, [sp, #4]
 80089e6:	6163      	str	r3, [r4, #20]
 80089e8:	2201      	movs	r2, #1
 80089ea:	6122      	str	r2, [r4, #16]
 80089ec:	3020      	adds	r0, #32
 80089ee:	e7e3      	b.n	80089b8 <__d2b+0x60>
 80089f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80089f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80089f8:	f8c9 0000 	str.w	r0, [r9]
 80089fc:	6918      	ldr	r0, [r3, #16]
 80089fe:	f7ff fd2b 	bl	8008458 <__hi0bits>
 8008a02:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008a06:	e7df      	b.n	80089c8 <__d2b+0x70>
 8008a08:	08009f0b 	.word	0x08009f0b
 8008a0c:	08009f1c 	.word	0x08009f1c

08008a10 <_calloc_r>:
 8008a10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a12:	fba1 2402 	umull	r2, r4, r1, r2
 8008a16:	b94c      	cbnz	r4, 8008a2c <_calloc_r+0x1c>
 8008a18:	4611      	mov	r1, r2
 8008a1a:	9201      	str	r2, [sp, #4]
 8008a1c:	f000 f87a 	bl	8008b14 <_malloc_r>
 8008a20:	9a01      	ldr	r2, [sp, #4]
 8008a22:	4605      	mov	r5, r0
 8008a24:	b930      	cbnz	r0, 8008a34 <_calloc_r+0x24>
 8008a26:	4628      	mov	r0, r5
 8008a28:	b003      	add	sp, #12
 8008a2a:	bd30      	pop	{r4, r5, pc}
 8008a2c:	220c      	movs	r2, #12
 8008a2e:	6002      	str	r2, [r0, #0]
 8008a30:	2500      	movs	r5, #0
 8008a32:	e7f8      	b.n	8008a26 <_calloc_r+0x16>
 8008a34:	4621      	mov	r1, r4
 8008a36:	f7fe f92d 	bl	8006c94 <memset>
 8008a3a:	e7f4      	b.n	8008a26 <_calloc_r+0x16>

08008a3c <_free_r>:
 8008a3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a3e:	2900      	cmp	r1, #0
 8008a40:	d044      	beq.n	8008acc <_free_r+0x90>
 8008a42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a46:	9001      	str	r0, [sp, #4]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	f1a1 0404 	sub.w	r4, r1, #4
 8008a4e:	bfb8      	it	lt
 8008a50:	18e4      	addlt	r4, r4, r3
 8008a52:	f000 fa9b 	bl	8008f8c <__malloc_lock>
 8008a56:	4a1e      	ldr	r2, [pc, #120]	; (8008ad0 <_free_r+0x94>)
 8008a58:	9801      	ldr	r0, [sp, #4]
 8008a5a:	6813      	ldr	r3, [r2, #0]
 8008a5c:	b933      	cbnz	r3, 8008a6c <_free_r+0x30>
 8008a5e:	6063      	str	r3, [r4, #4]
 8008a60:	6014      	str	r4, [r2, #0]
 8008a62:	b003      	add	sp, #12
 8008a64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a68:	f000 ba96 	b.w	8008f98 <__malloc_unlock>
 8008a6c:	42a3      	cmp	r3, r4
 8008a6e:	d908      	bls.n	8008a82 <_free_r+0x46>
 8008a70:	6825      	ldr	r5, [r4, #0]
 8008a72:	1961      	adds	r1, r4, r5
 8008a74:	428b      	cmp	r3, r1
 8008a76:	bf01      	itttt	eq
 8008a78:	6819      	ldreq	r1, [r3, #0]
 8008a7a:	685b      	ldreq	r3, [r3, #4]
 8008a7c:	1949      	addeq	r1, r1, r5
 8008a7e:	6021      	streq	r1, [r4, #0]
 8008a80:	e7ed      	b.n	8008a5e <_free_r+0x22>
 8008a82:	461a      	mov	r2, r3
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	b10b      	cbz	r3, 8008a8c <_free_r+0x50>
 8008a88:	42a3      	cmp	r3, r4
 8008a8a:	d9fa      	bls.n	8008a82 <_free_r+0x46>
 8008a8c:	6811      	ldr	r1, [r2, #0]
 8008a8e:	1855      	adds	r5, r2, r1
 8008a90:	42a5      	cmp	r5, r4
 8008a92:	d10b      	bne.n	8008aac <_free_r+0x70>
 8008a94:	6824      	ldr	r4, [r4, #0]
 8008a96:	4421      	add	r1, r4
 8008a98:	1854      	adds	r4, r2, r1
 8008a9a:	42a3      	cmp	r3, r4
 8008a9c:	6011      	str	r1, [r2, #0]
 8008a9e:	d1e0      	bne.n	8008a62 <_free_r+0x26>
 8008aa0:	681c      	ldr	r4, [r3, #0]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	6053      	str	r3, [r2, #4]
 8008aa6:	4421      	add	r1, r4
 8008aa8:	6011      	str	r1, [r2, #0]
 8008aaa:	e7da      	b.n	8008a62 <_free_r+0x26>
 8008aac:	d902      	bls.n	8008ab4 <_free_r+0x78>
 8008aae:	230c      	movs	r3, #12
 8008ab0:	6003      	str	r3, [r0, #0]
 8008ab2:	e7d6      	b.n	8008a62 <_free_r+0x26>
 8008ab4:	6825      	ldr	r5, [r4, #0]
 8008ab6:	1961      	adds	r1, r4, r5
 8008ab8:	428b      	cmp	r3, r1
 8008aba:	bf04      	itt	eq
 8008abc:	6819      	ldreq	r1, [r3, #0]
 8008abe:	685b      	ldreq	r3, [r3, #4]
 8008ac0:	6063      	str	r3, [r4, #4]
 8008ac2:	bf04      	itt	eq
 8008ac4:	1949      	addeq	r1, r1, r5
 8008ac6:	6021      	streq	r1, [r4, #0]
 8008ac8:	6054      	str	r4, [r2, #4]
 8008aca:	e7ca      	b.n	8008a62 <_free_r+0x26>
 8008acc:	b003      	add	sp, #12
 8008ace:	bd30      	pop	{r4, r5, pc}
 8008ad0:	200002c8 	.word	0x200002c8

08008ad4 <sbrk_aligned>:
 8008ad4:	b570      	push	{r4, r5, r6, lr}
 8008ad6:	4e0e      	ldr	r6, [pc, #56]	; (8008b10 <sbrk_aligned+0x3c>)
 8008ad8:	460c      	mov	r4, r1
 8008ada:	6831      	ldr	r1, [r6, #0]
 8008adc:	4605      	mov	r5, r0
 8008ade:	b911      	cbnz	r1, 8008ae6 <sbrk_aligned+0x12>
 8008ae0:	f000 f9e8 	bl	8008eb4 <_sbrk_r>
 8008ae4:	6030      	str	r0, [r6, #0]
 8008ae6:	4621      	mov	r1, r4
 8008ae8:	4628      	mov	r0, r5
 8008aea:	f000 f9e3 	bl	8008eb4 <_sbrk_r>
 8008aee:	1c43      	adds	r3, r0, #1
 8008af0:	d00a      	beq.n	8008b08 <sbrk_aligned+0x34>
 8008af2:	1cc4      	adds	r4, r0, #3
 8008af4:	f024 0403 	bic.w	r4, r4, #3
 8008af8:	42a0      	cmp	r0, r4
 8008afa:	d007      	beq.n	8008b0c <sbrk_aligned+0x38>
 8008afc:	1a21      	subs	r1, r4, r0
 8008afe:	4628      	mov	r0, r5
 8008b00:	f000 f9d8 	bl	8008eb4 <_sbrk_r>
 8008b04:	3001      	adds	r0, #1
 8008b06:	d101      	bne.n	8008b0c <sbrk_aligned+0x38>
 8008b08:	f04f 34ff 	mov.w	r4, #4294967295
 8008b0c:	4620      	mov	r0, r4
 8008b0e:	bd70      	pop	{r4, r5, r6, pc}
 8008b10:	200002cc 	.word	0x200002cc

08008b14 <_malloc_r>:
 8008b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b18:	1ccd      	adds	r5, r1, #3
 8008b1a:	f025 0503 	bic.w	r5, r5, #3
 8008b1e:	3508      	adds	r5, #8
 8008b20:	2d0c      	cmp	r5, #12
 8008b22:	bf38      	it	cc
 8008b24:	250c      	movcc	r5, #12
 8008b26:	2d00      	cmp	r5, #0
 8008b28:	4607      	mov	r7, r0
 8008b2a:	db01      	blt.n	8008b30 <_malloc_r+0x1c>
 8008b2c:	42a9      	cmp	r1, r5
 8008b2e:	d905      	bls.n	8008b3c <_malloc_r+0x28>
 8008b30:	230c      	movs	r3, #12
 8008b32:	603b      	str	r3, [r7, #0]
 8008b34:	2600      	movs	r6, #0
 8008b36:	4630      	mov	r0, r6
 8008b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b3c:	4e2e      	ldr	r6, [pc, #184]	; (8008bf8 <_malloc_r+0xe4>)
 8008b3e:	f000 fa25 	bl	8008f8c <__malloc_lock>
 8008b42:	6833      	ldr	r3, [r6, #0]
 8008b44:	461c      	mov	r4, r3
 8008b46:	bb34      	cbnz	r4, 8008b96 <_malloc_r+0x82>
 8008b48:	4629      	mov	r1, r5
 8008b4a:	4638      	mov	r0, r7
 8008b4c:	f7ff ffc2 	bl	8008ad4 <sbrk_aligned>
 8008b50:	1c43      	adds	r3, r0, #1
 8008b52:	4604      	mov	r4, r0
 8008b54:	d14d      	bne.n	8008bf2 <_malloc_r+0xde>
 8008b56:	6834      	ldr	r4, [r6, #0]
 8008b58:	4626      	mov	r6, r4
 8008b5a:	2e00      	cmp	r6, #0
 8008b5c:	d140      	bne.n	8008be0 <_malloc_r+0xcc>
 8008b5e:	6823      	ldr	r3, [r4, #0]
 8008b60:	4631      	mov	r1, r6
 8008b62:	4638      	mov	r0, r7
 8008b64:	eb04 0803 	add.w	r8, r4, r3
 8008b68:	f000 f9a4 	bl	8008eb4 <_sbrk_r>
 8008b6c:	4580      	cmp	r8, r0
 8008b6e:	d13a      	bne.n	8008be6 <_malloc_r+0xd2>
 8008b70:	6821      	ldr	r1, [r4, #0]
 8008b72:	3503      	adds	r5, #3
 8008b74:	1a6d      	subs	r5, r5, r1
 8008b76:	f025 0503 	bic.w	r5, r5, #3
 8008b7a:	3508      	adds	r5, #8
 8008b7c:	2d0c      	cmp	r5, #12
 8008b7e:	bf38      	it	cc
 8008b80:	250c      	movcc	r5, #12
 8008b82:	4629      	mov	r1, r5
 8008b84:	4638      	mov	r0, r7
 8008b86:	f7ff ffa5 	bl	8008ad4 <sbrk_aligned>
 8008b8a:	3001      	adds	r0, #1
 8008b8c:	d02b      	beq.n	8008be6 <_malloc_r+0xd2>
 8008b8e:	6823      	ldr	r3, [r4, #0]
 8008b90:	442b      	add	r3, r5
 8008b92:	6023      	str	r3, [r4, #0]
 8008b94:	e00e      	b.n	8008bb4 <_malloc_r+0xa0>
 8008b96:	6822      	ldr	r2, [r4, #0]
 8008b98:	1b52      	subs	r2, r2, r5
 8008b9a:	d41e      	bmi.n	8008bda <_malloc_r+0xc6>
 8008b9c:	2a0b      	cmp	r2, #11
 8008b9e:	d916      	bls.n	8008bce <_malloc_r+0xba>
 8008ba0:	1961      	adds	r1, r4, r5
 8008ba2:	42a3      	cmp	r3, r4
 8008ba4:	6025      	str	r5, [r4, #0]
 8008ba6:	bf18      	it	ne
 8008ba8:	6059      	strne	r1, [r3, #4]
 8008baa:	6863      	ldr	r3, [r4, #4]
 8008bac:	bf08      	it	eq
 8008bae:	6031      	streq	r1, [r6, #0]
 8008bb0:	5162      	str	r2, [r4, r5]
 8008bb2:	604b      	str	r3, [r1, #4]
 8008bb4:	4638      	mov	r0, r7
 8008bb6:	f104 060b 	add.w	r6, r4, #11
 8008bba:	f000 f9ed 	bl	8008f98 <__malloc_unlock>
 8008bbe:	f026 0607 	bic.w	r6, r6, #7
 8008bc2:	1d23      	adds	r3, r4, #4
 8008bc4:	1af2      	subs	r2, r6, r3
 8008bc6:	d0b6      	beq.n	8008b36 <_malloc_r+0x22>
 8008bc8:	1b9b      	subs	r3, r3, r6
 8008bca:	50a3      	str	r3, [r4, r2]
 8008bcc:	e7b3      	b.n	8008b36 <_malloc_r+0x22>
 8008bce:	6862      	ldr	r2, [r4, #4]
 8008bd0:	42a3      	cmp	r3, r4
 8008bd2:	bf0c      	ite	eq
 8008bd4:	6032      	streq	r2, [r6, #0]
 8008bd6:	605a      	strne	r2, [r3, #4]
 8008bd8:	e7ec      	b.n	8008bb4 <_malloc_r+0xa0>
 8008bda:	4623      	mov	r3, r4
 8008bdc:	6864      	ldr	r4, [r4, #4]
 8008bde:	e7b2      	b.n	8008b46 <_malloc_r+0x32>
 8008be0:	4634      	mov	r4, r6
 8008be2:	6876      	ldr	r6, [r6, #4]
 8008be4:	e7b9      	b.n	8008b5a <_malloc_r+0x46>
 8008be6:	230c      	movs	r3, #12
 8008be8:	603b      	str	r3, [r7, #0]
 8008bea:	4638      	mov	r0, r7
 8008bec:	f000 f9d4 	bl	8008f98 <__malloc_unlock>
 8008bf0:	e7a1      	b.n	8008b36 <_malloc_r+0x22>
 8008bf2:	6025      	str	r5, [r4, #0]
 8008bf4:	e7de      	b.n	8008bb4 <_malloc_r+0xa0>
 8008bf6:	bf00      	nop
 8008bf8:	200002c8 	.word	0x200002c8

08008bfc <__ssputs_r>:
 8008bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c00:	688e      	ldr	r6, [r1, #8]
 8008c02:	429e      	cmp	r6, r3
 8008c04:	4682      	mov	sl, r0
 8008c06:	460c      	mov	r4, r1
 8008c08:	4690      	mov	r8, r2
 8008c0a:	461f      	mov	r7, r3
 8008c0c:	d838      	bhi.n	8008c80 <__ssputs_r+0x84>
 8008c0e:	898a      	ldrh	r2, [r1, #12]
 8008c10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c14:	d032      	beq.n	8008c7c <__ssputs_r+0x80>
 8008c16:	6825      	ldr	r5, [r4, #0]
 8008c18:	6909      	ldr	r1, [r1, #16]
 8008c1a:	eba5 0901 	sub.w	r9, r5, r1
 8008c1e:	6965      	ldr	r5, [r4, #20]
 8008c20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c28:	3301      	adds	r3, #1
 8008c2a:	444b      	add	r3, r9
 8008c2c:	106d      	asrs	r5, r5, #1
 8008c2e:	429d      	cmp	r5, r3
 8008c30:	bf38      	it	cc
 8008c32:	461d      	movcc	r5, r3
 8008c34:	0553      	lsls	r3, r2, #21
 8008c36:	d531      	bpl.n	8008c9c <__ssputs_r+0xa0>
 8008c38:	4629      	mov	r1, r5
 8008c3a:	f7ff ff6b 	bl	8008b14 <_malloc_r>
 8008c3e:	4606      	mov	r6, r0
 8008c40:	b950      	cbnz	r0, 8008c58 <__ssputs_r+0x5c>
 8008c42:	230c      	movs	r3, #12
 8008c44:	f8ca 3000 	str.w	r3, [sl]
 8008c48:	89a3      	ldrh	r3, [r4, #12]
 8008c4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c4e:	81a3      	strh	r3, [r4, #12]
 8008c50:	f04f 30ff 	mov.w	r0, #4294967295
 8008c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c58:	6921      	ldr	r1, [r4, #16]
 8008c5a:	464a      	mov	r2, r9
 8008c5c:	f7ff fb46 	bl	80082ec <memcpy>
 8008c60:	89a3      	ldrh	r3, [r4, #12]
 8008c62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c6a:	81a3      	strh	r3, [r4, #12]
 8008c6c:	6126      	str	r6, [r4, #16]
 8008c6e:	6165      	str	r5, [r4, #20]
 8008c70:	444e      	add	r6, r9
 8008c72:	eba5 0509 	sub.w	r5, r5, r9
 8008c76:	6026      	str	r6, [r4, #0]
 8008c78:	60a5      	str	r5, [r4, #8]
 8008c7a:	463e      	mov	r6, r7
 8008c7c:	42be      	cmp	r6, r7
 8008c7e:	d900      	bls.n	8008c82 <__ssputs_r+0x86>
 8008c80:	463e      	mov	r6, r7
 8008c82:	6820      	ldr	r0, [r4, #0]
 8008c84:	4632      	mov	r2, r6
 8008c86:	4641      	mov	r1, r8
 8008c88:	f000 f966 	bl	8008f58 <memmove>
 8008c8c:	68a3      	ldr	r3, [r4, #8]
 8008c8e:	1b9b      	subs	r3, r3, r6
 8008c90:	60a3      	str	r3, [r4, #8]
 8008c92:	6823      	ldr	r3, [r4, #0]
 8008c94:	4433      	add	r3, r6
 8008c96:	6023      	str	r3, [r4, #0]
 8008c98:	2000      	movs	r0, #0
 8008c9a:	e7db      	b.n	8008c54 <__ssputs_r+0x58>
 8008c9c:	462a      	mov	r2, r5
 8008c9e:	f000 f981 	bl	8008fa4 <_realloc_r>
 8008ca2:	4606      	mov	r6, r0
 8008ca4:	2800      	cmp	r0, #0
 8008ca6:	d1e1      	bne.n	8008c6c <__ssputs_r+0x70>
 8008ca8:	6921      	ldr	r1, [r4, #16]
 8008caa:	4650      	mov	r0, sl
 8008cac:	f7ff fec6 	bl	8008a3c <_free_r>
 8008cb0:	e7c7      	b.n	8008c42 <__ssputs_r+0x46>
	...

08008cb4 <_svfiprintf_r>:
 8008cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cb8:	4698      	mov	r8, r3
 8008cba:	898b      	ldrh	r3, [r1, #12]
 8008cbc:	061b      	lsls	r3, r3, #24
 8008cbe:	b09d      	sub	sp, #116	; 0x74
 8008cc0:	4607      	mov	r7, r0
 8008cc2:	460d      	mov	r5, r1
 8008cc4:	4614      	mov	r4, r2
 8008cc6:	d50e      	bpl.n	8008ce6 <_svfiprintf_r+0x32>
 8008cc8:	690b      	ldr	r3, [r1, #16]
 8008cca:	b963      	cbnz	r3, 8008ce6 <_svfiprintf_r+0x32>
 8008ccc:	2140      	movs	r1, #64	; 0x40
 8008cce:	f7ff ff21 	bl	8008b14 <_malloc_r>
 8008cd2:	6028      	str	r0, [r5, #0]
 8008cd4:	6128      	str	r0, [r5, #16]
 8008cd6:	b920      	cbnz	r0, 8008ce2 <_svfiprintf_r+0x2e>
 8008cd8:	230c      	movs	r3, #12
 8008cda:	603b      	str	r3, [r7, #0]
 8008cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ce0:	e0d1      	b.n	8008e86 <_svfiprintf_r+0x1d2>
 8008ce2:	2340      	movs	r3, #64	; 0x40
 8008ce4:	616b      	str	r3, [r5, #20]
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	9309      	str	r3, [sp, #36]	; 0x24
 8008cea:	2320      	movs	r3, #32
 8008cec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008cf0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cf4:	2330      	movs	r3, #48	; 0x30
 8008cf6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008ea0 <_svfiprintf_r+0x1ec>
 8008cfa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008cfe:	f04f 0901 	mov.w	r9, #1
 8008d02:	4623      	mov	r3, r4
 8008d04:	469a      	mov	sl, r3
 8008d06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d0a:	b10a      	cbz	r2, 8008d10 <_svfiprintf_r+0x5c>
 8008d0c:	2a25      	cmp	r2, #37	; 0x25
 8008d0e:	d1f9      	bne.n	8008d04 <_svfiprintf_r+0x50>
 8008d10:	ebba 0b04 	subs.w	fp, sl, r4
 8008d14:	d00b      	beq.n	8008d2e <_svfiprintf_r+0x7a>
 8008d16:	465b      	mov	r3, fp
 8008d18:	4622      	mov	r2, r4
 8008d1a:	4629      	mov	r1, r5
 8008d1c:	4638      	mov	r0, r7
 8008d1e:	f7ff ff6d 	bl	8008bfc <__ssputs_r>
 8008d22:	3001      	adds	r0, #1
 8008d24:	f000 80aa 	beq.w	8008e7c <_svfiprintf_r+0x1c8>
 8008d28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d2a:	445a      	add	r2, fp
 8008d2c:	9209      	str	r2, [sp, #36]	; 0x24
 8008d2e:	f89a 3000 	ldrb.w	r3, [sl]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	f000 80a2 	beq.w	8008e7c <_svfiprintf_r+0x1c8>
 8008d38:	2300      	movs	r3, #0
 8008d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8008d3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d42:	f10a 0a01 	add.w	sl, sl, #1
 8008d46:	9304      	str	r3, [sp, #16]
 8008d48:	9307      	str	r3, [sp, #28]
 8008d4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d4e:	931a      	str	r3, [sp, #104]	; 0x68
 8008d50:	4654      	mov	r4, sl
 8008d52:	2205      	movs	r2, #5
 8008d54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d58:	4851      	ldr	r0, [pc, #324]	; (8008ea0 <_svfiprintf_r+0x1ec>)
 8008d5a:	f7f7 fa41 	bl	80001e0 <memchr>
 8008d5e:	9a04      	ldr	r2, [sp, #16]
 8008d60:	b9d8      	cbnz	r0, 8008d9a <_svfiprintf_r+0xe6>
 8008d62:	06d0      	lsls	r0, r2, #27
 8008d64:	bf44      	itt	mi
 8008d66:	2320      	movmi	r3, #32
 8008d68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d6c:	0711      	lsls	r1, r2, #28
 8008d6e:	bf44      	itt	mi
 8008d70:	232b      	movmi	r3, #43	; 0x2b
 8008d72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d76:	f89a 3000 	ldrb.w	r3, [sl]
 8008d7a:	2b2a      	cmp	r3, #42	; 0x2a
 8008d7c:	d015      	beq.n	8008daa <_svfiprintf_r+0xf6>
 8008d7e:	9a07      	ldr	r2, [sp, #28]
 8008d80:	4654      	mov	r4, sl
 8008d82:	2000      	movs	r0, #0
 8008d84:	f04f 0c0a 	mov.w	ip, #10
 8008d88:	4621      	mov	r1, r4
 8008d8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d8e:	3b30      	subs	r3, #48	; 0x30
 8008d90:	2b09      	cmp	r3, #9
 8008d92:	d94e      	bls.n	8008e32 <_svfiprintf_r+0x17e>
 8008d94:	b1b0      	cbz	r0, 8008dc4 <_svfiprintf_r+0x110>
 8008d96:	9207      	str	r2, [sp, #28]
 8008d98:	e014      	b.n	8008dc4 <_svfiprintf_r+0x110>
 8008d9a:	eba0 0308 	sub.w	r3, r0, r8
 8008d9e:	fa09 f303 	lsl.w	r3, r9, r3
 8008da2:	4313      	orrs	r3, r2
 8008da4:	9304      	str	r3, [sp, #16]
 8008da6:	46a2      	mov	sl, r4
 8008da8:	e7d2      	b.n	8008d50 <_svfiprintf_r+0x9c>
 8008daa:	9b03      	ldr	r3, [sp, #12]
 8008dac:	1d19      	adds	r1, r3, #4
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	9103      	str	r1, [sp, #12]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	bfbb      	ittet	lt
 8008db6:	425b      	neglt	r3, r3
 8008db8:	f042 0202 	orrlt.w	r2, r2, #2
 8008dbc:	9307      	strge	r3, [sp, #28]
 8008dbe:	9307      	strlt	r3, [sp, #28]
 8008dc0:	bfb8      	it	lt
 8008dc2:	9204      	strlt	r2, [sp, #16]
 8008dc4:	7823      	ldrb	r3, [r4, #0]
 8008dc6:	2b2e      	cmp	r3, #46	; 0x2e
 8008dc8:	d10c      	bne.n	8008de4 <_svfiprintf_r+0x130>
 8008dca:	7863      	ldrb	r3, [r4, #1]
 8008dcc:	2b2a      	cmp	r3, #42	; 0x2a
 8008dce:	d135      	bne.n	8008e3c <_svfiprintf_r+0x188>
 8008dd0:	9b03      	ldr	r3, [sp, #12]
 8008dd2:	1d1a      	adds	r2, r3, #4
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	9203      	str	r2, [sp, #12]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	bfb8      	it	lt
 8008ddc:	f04f 33ff 	movlt.w	r3, #4294967295
 8008de0:	3402      	adds	r4, #2
 8008de2:	9305      	str	r3, [sp, #20]
 8008de4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008eb0 <_svfiprintf_r+0x1fc>
 8008de8:	7821      	ldrb	r1, [r4, #0]
 8008dea:	2203      	movs	r2, #3
 8008dec:	4650      	mov	r0, sl
 8008dee:	f7f7 f9f7 	bl	80001e0 <memchr>
 8008df2:	b140      	cbz	r0, 8008e06 <_svfiprintf_r+0x152>
 8008df4:	2340      	movs	r3, #64	; 0x40
 8008df6:	eba0 000a 	sub.w	r0, r0, sl
 8008dfa:	fa03 f000 	lsl.w	r0, r3, r0
 8008dfe:	9b04      	ldr	r3, [sp, #16]
 8008e00:	4303      	orrs	r3, r0
 8008e02:	3401      	adds	r4, #1
 8008e04:	9304      	str	r3, [sp, #16]
 8008e06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e0a:	4826      	ldr	r0, [pc, #152]	; (8008ea4 <_svfiprintf_r+0x1f0>)
 8008e0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e10:	2206      	movs	r2, #6
 8008e12:	f7f7 f9e5 	bl	80001e0 <memchr>
 8008e16:	2800      	cmp	r0, #0
 8008e18:	d038      	beq.n	8008e8c <_svfiprintf_r+0x1d8>
 8008e1a:	4b23      	ldr	r3, [pc, #140]	; (8008ea8 <_svfiprintf_r+0x1f4>)
 8008e1c:	bb1b      	cbnz	r3, 8008e66 <_svfiprintf_r+0x1b2>
 8008e1e:	9b03      	ldr	r3, [sp, #12]
 8008e20:	3307      	adds	r3, #7
 8008e22:	f023 0307 	bic.w	r3, r3, #7
 8008e26:	3308      	adds	r3, #8
 8008e28:	9303      	str	r3, [sp, #12]
 8008e2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e2c:	4433      	add	r3, r6
 8008e2e:	9309      	str	r3, [sp, #36]	; 0x24
 8008e30:	e767      	b.n	8008d02 <_svfiprintf_r+0x4e>
 8008e32:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e36:	460c      	mov	r4, r1
 8008e38:	2001      	movs	r0, #1
 8008e3a:	e7a5      	b.n	8008d88 <_svfiprintf_r+0xd4>
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	3401      	adds	r4, #1
 8008e40:	9305      	str	r3, [sp, #20]
 8008e42:	4619      	mov	r1, r3
 8008e44:	f04f 0c0a 	mov.w	ip, #10
 8008e48:	4620      	mov	r0, r4
 8008e4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e4e:	3a30      	subs	r2, #48	; 0x30
 8008e50:	2a09      	cmp	r2, #9
 8008e52:	d903      	bls.n	8008e5c <_svfiprintf_r+0x1a8>
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d0c5      	beq.n	8008de4 <_svfiprintf_r+0x130>
 8008e58:	9105      	str	r1, [sp, #20]
 8008e5a:	e7c3      	b.n	8008de4 <_svfiprintf_r+0x130>
 8008e5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e60:	4604      	mov	r4, r0
 8008e62:	2301      	movs	r3, #1
 8008e64:	e7f0      	b.n	8008e48 <_svfiprintf_r+0x194>
 8008e66:	ab03      	add	r3, sp, #12
 8008e68:	9300      	str	r3, [sp, #0]
 8008e6a:	462a      	mov	r2, r5
 8008e6c:	4b0f      	ldr	r3, [pc, #60]	; (8008eac <_svfiprintf_r+0x1f8>)
 8008e6e:	a904      	add	r1, sp, #16
 8008e70:	4638      	mov	r0, r7
 8008e72:	f7fd ffb7 	bl	8006de4 <_printf_float>
 8008e76:	1c42      	adds	r2, r0, #1
 8008e78:	4606      	mov	r6, r0
 8008e7a:	d1d6      	bne.n	8008e2a <_svfiprintf_r+0x176>
 8008e7c:	89ab      	ldrh	r3, [r5, #12]
 8008e7e:	065b      	lsls	r3, r3, #25
 8008e80:	f53f af2c 	bmi.w	8008cdc <_svfiprintf_r+0x28>
 8008e84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e86:	b01d      	add	sp, #116	; 0x74
 8008e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e8c:	ab03      	add	r3, sp, #12
 8008e8e:	9300      	str	r3, [sp, #0]
 8008e90:	462a      	mov	r2, r5
 8008e92:	4b06      	ldr	r3, [pc, #24]	; (8008eac <_svfiprintf_r+0x1f8>)
 8008e94:	a904      	add	r1, sp, #16
 8008e96:	4638      	mov	r0, r7
 8008e98:	f7fe fa48 	bl	800732c <_printf_i>
 8008e9c:	e7eb      	b.n	8008e76 <_svfiprintf_r+0x1c2>
 8008e9e:	bf00      	nop
 8008ea0:	0800a074 	.word	0x0800a074
 8008ea4:	0800a07e 	.word	0x0800a07e
 8008ea8:	08006de5 	.word	0x08006de5
 8008eac:	08008bfd 	.word	0x08008bfd
 8008eb0:	0800a07a 	.word	0x0800a07a

08008eb4 <_sbrk_r>:
 8008eb4:	b538      	push	{r3, r4, r5, lr}
 8008eb6:	4d06      	ldr	r5, [pc, #24]	; (8008ed0 <_sbrk_r+0x1c>)
 8008eb8:	2300      	movs	r3, #0
 8008eba:	4604      	mov	r4, r0
 8008ebc:	4608      	mov	r0, r1
 8008ebe:	602b      	str	r3, [r5, #0]
 8008ec0:	f7fa fdf0 	bl	8003aa4 <_sbrk>
 8008ec4:	1c43      	adds	r3, r0, #1
 8008ec6:	d102      	bne.n	8008ece <_sbrk_r+0x1a>
 8008ec8:	682b      	ldr	r3, [r5, #0]
 8008eca:	b103      	cbz	r3, 8008ece <_sbrk_r+0x1a>
 8008ecc:	6023      	str	r3, [r4, #0]
 8008ece:	bd38      	pop	{r3, r4, r5, pc}
 8008ed0:	200002d0 	.word	0x200002d0

08008ed4 <__assert_func>:
 8008ed4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008ed6:	4614      	mov	r4, r2
 8008ed8:	461a      	mov	r2, r3
 8008eda:	4b09      	ldr	r3, [pc, #36]	; (8008f00 <__assert_func+0x2c>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4605      	mov	r5, r0
 8008ee0:	68d8      	ldr	r0, [r3, #12]
 8008ee2:	b14c      	cbz	r4, 8008ef8 <__assert_func+0x24>
 8008ee4:	4b07      	ldr	r3, [pc, #28]	; (8008f04 <__assert_func+0x30>)
 8008ee6:	9100      	str	r1, [sp, #0]
 8008ee8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008eec:	4906      	ldr	r1, [pc, #24]	; (8008f08 <__assert_func+0x34>)
 8008eee:	462b      	mov	r3, r5
 8008ef0:	f000 f80e 	bl	8008f10 <fiprintf>
 8008ef4:	f000 faac 	bl	8009450 <abort>
 8008ef8:	4b04      	ldr	r3, [pc, #16]	; (8008f0c <__assert_func+0x38>)
 8008efa:	461c      	mov	r4, r3
 8008efc:	e7f3      	b.n	8008ee6 <__assert_func+0x12>
 8008efe:	bf00      	nop
 8008f00:	20000038 	.word	0x20000038
 8008f04:	0800a085 	.word	0x0800a085
 8008f08:	0800a092 	.word	0x0800a092
 8008f0c:	0800a0c0 	.word	0x0800a0c0

08008f10 <fiprintf>:
 8008f10:	b40e      	push	{r1, r2, r3}
 8008f12:	b503      	push	{r0, r1, lr}
 8008f14:	4601      	mov	r1, r0
 8008f16:	ab03      	add	r3, sp, #12
 8008f18:	4805      	ldr	r0, [pc, #20]	; (8008f30 <fiprintf+0x20>)
 8008f1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f1e:	6800      	ldr	r0, [r0, #0]
 8008f20:	9301      	str	r3, [sp, #4]
 8008f22:	f000 f897 	bl	8009054 <_vfiprintf_r>
 8008f26:	b002      	add	sp, #8
 8008f28:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f2c:	b003      	add	sp, #12
 8008f2e:	4770      	bx	lr
 8008f30:	20000038 	.word	0x20000038

08008f34 <__ascii_mbtowc>:
 8008f34:	b082      	sub	sp, #8
 8008f36:	b901      	cbnz	r1, 8008f3a <__ascii_mbtowc+0x6>
 8008f38:	a901      	add	r1, sp, #4
 8008f3a:	b142      	cbz	r2, 8008f4e <__ascii_mbtowc+0x1a>
 8008f3c:	b14b      	cbz	r3, 8008f52 <__ascii_mbtowc+0x1e>
 8008f3e:	7813      	ldrb	r3, [r2, #0]
 8008f40:	600b      	str	r3, [r1, #0]
 8008f42:	7812      	ldrb	r2, [r2, #0]
 8008f44:	1e10      	subs	r0, r2, #0
 8008f46:	bf18      	it	ne
 8008f48:	2001      	movne	r0, #1
 8008f4a:	b002      	add	sp, #8
 8008f4c:	4770      	bx	lr
 8008f4e:	4610      	mov	r0, r2
 8008f50:	e7fb      	b.n	8008f4a <__ascii_mbtowc+0x16>
 8008f52:	f06f 0001 	mvn.w	r0, #1
 8008f56:	e7f8      	b.n	8008f4a <__ascii_mbtowc+0x16>

08008f58 <memmove>:
 8008f58:	4288      	cmp	r0, r1
 8008f5a:	b510      	push	{r4, lr}
 8008f5c:	eb01 0402 	add.w	r4, r1, r2
 8008f60:	d902      	bls.n	8008f68 <memmove+0x10>
 8008f62:	4284      	cmp	r4, r0
 8008f64:	4623      	mov	r3, r4
 8008f66:	d807      	bhi.n	8008f78 <memmove+0x20>
 8008f68:	1e43      	subs	r3, r0, #1
 8008f6a:	42a1      	cmp	r1, r4
 8008f6c:	d008      	beq.n	8008f80 <memmove+0x28>
 8008f6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f76:	e7f8      	b.n	8008f6a <memmove+0x12>
 8008f78:	4402      	add	r2, r0
 8008f7a:	4601      	mov	r1, r0
 8008f7c:	428a      	cmp	r2, r1
 8008f7e:	d100      	bne.n	8008f82 <memmove+0x2a>
 8008f80:	bd10      	pop	{r4, pc}
 8008f82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f8a:	e7f7      	b.n	8008f7c <memmove+0x24>

08008f8c <__malloc_lock>:
 8008f8c:	4801      	ldr	r0, [pc, #4]	; (8008f94 <__malloc_lock+0x8>)
 8008f8e:	f000 bc1f 	b.w	80097d0 <__retarget_lock_acquire_recursive>
 8008f92:	bf00      	nop
 8008f94:	200002d4 	.word	0x200002d4

08008f98 <__malloc_unlock>:
 8008f98:	4801      	ldr	r0, [pc, #4]	; (8008fa0 <__malloc_unlock+0x8>)
 8008f9a:	f000 bc1a 	b.w	80097d2 <__retarget_lock_release_recursive>
 8008f9e:	bf00      	nop
 8008fa0:	200002d4 	.word	0x200002d4

08008fa4 <_realloc_r>:
 8008fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fa8:	4680      	mov	r8, r0
 8008faa:	4614      	mov	r4, r2
 8008fac:	460e      	mov	r6, r1
 8008fae:	b921      	cbnz	r1, 8008fba <_realloc_r+0x16>
 8008fb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fb4:	4611      	mov	r1, r2
 8008fb6:	f7ff bdad 	b.w	8008b14 <_malloc_r>
 8008fba:	b92a      	cbnz	r2, 8008fc8 <_realloc_r+0x24>
 8008fbc:	f7ff fd3e 	bl	8008a3c <_free_r>
 8008fc0:	4625      	mov	r5, r4
 8008fc2:	4628      	mov	r0, r5
 8008fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fc8:	f000 fc6a 	bl	80098a0 <_malloc_usable_size_r>
 8008fcc:	4284      	cmp	r4, r0
 8008fce:	4607      	mov	r7, r0
 8008fd0:	d802      	bhi.n	8008fd8 <_realloc_r+0x34>
 8008fd2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008fd6:	d812      	bhi.n	8008ffe <_realloc_r+0x5a>
 8008fd8:	4621      	mov	r1, r4
 8008fda:	4640      	mov	r0, r8
 8008fdc:	f7ff fd9a 	bl	8008b14 <_malloc_r>
 8008fe0:	4605      	mov	r5, r0
 8008fe2:	2800      	cmp	r0, #0
 8008fe4:	d0ed      	beq.n	8008fc2 <_realloc_r+0x1e>
 8008fe6:	42bc      	cmp	r4, r7
 8008fe8:	4622      	mov	r2, r4
 8008fea:	4631      	mov	r1, r6
 8008fec:	bf28      	it	cs
 8008fee:	463a      	movcs	r2, r7
 8008ff0:	f7ff f97c 	bl	80082ec <memcpy>
 8008ff4:	4631      	mov	r1, r6
 8008ff6:	4640      	mov	r0, r8
 8008ff8:	f7ff fd20 	bl	8008a3c <_free_r>
 8008ffc:	e7e1      	b.n	8008fc2 <_realloc_r+0x1e>
 8008ffe:	4635      	mov	r5, r6
 8009000:	e7df      	b.n	8008fc2 <_realloc_r+0x1e>

08009002 <__sfputc_r>:
 8009002:	6893      	ldr	r3, [r2, #8]
 8009004:	3b01      	subs	r3, #1
 8009006:	2b00      	cmp	r3, #0
 8009008:	b410      	push	{r4}
 800900a:	6093      	str	r3, [r2, #8]
 800900c:	da08      	bge.n	8009020 <__sfputc_r+0x1e>
 800900e:	6994      	ldr	r4, [r2, #24]
 8009010:	42a3      	cmp	r3, r4
 8009012:	db01      	blt.n	8009018 <__sfputc_r+0x16>
 8009014:	290a      	cmp	r1, #10
 8009016:	d103      	bne.n	8009020 <__sfputc_r+0x1e>
 8009018:	f85d 4b04 	ldr.w	r4, [sp], #4
 800901c:	f000 b94a 	b.w	80092b4 <__swbuf_r>
 8009020:	6813      	ldr	r3, [r2, #0]
 8009022:	1c58      	adds	r0, r3, #1
 8009024:	6010      	str	r0, [r2, #0]
 8009026:	7019      	strb	r1, [r3, #0]
 8009028:	4608      	mov	r0, r1
 800902a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800902e:	4770      	bx	lr

08009030 <__sfputs_r>:
 8009030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009032:	4606      	mov	r6, r0
 8009034:	460f      	mov	r7, r1
 8009036:	4614      	mov	r4, r2
 8009038:	18d5      	adds	r5, r2, r3
 800903a:	42ac      	cmp	r4, r5
 800903c:	d101      	bne.n	8009042 <__sfputs_r+0x12>
 800903e:	2000      	movs	r0, #0
 8009040:	e007      	b.n	8009052 <__sfputs_r+0x22>
 8009042:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009046:	463a      	mov	r2, r7
 8009048:	4630      	mov	r0, r6
 800904a:	f7ff ffda 	bl	8009002 <__sfputc_r>
 800904e:	1c43      	adds	r3, r0, #1
 8009050:	d1f3      	bne.n	800903a <__sfputs_r+0xa>
 8009052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009054 <_vfiprintf_r>:
 8009054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009058:	460d      	mov	r5, r1
 800905a:	b09d      	sub	sp, #116	; 0x74
 800905c:	4614      	mov	r4, r2
 800905e:	4698      	mov	r8, r3
 8009060:	4606      	mov	r6, r0
 8009062:	b118      	cbz	r0, 800906c <_vfiprintf_r+0x18>
 8009064:	6983      	ldr	r3, [r0, #24]
 8009066:	b90b      	cbnz	r3, 800906c <_vfiprintf_r+0x18>
 8009068:	f000 fb14 	bl	8009694 <__sinit>
 800906c:	4b89      	ldr	r3, [pc, #548]	; (8009294 <_vfiprintf_r+0x240>)
 800906e:	429d      	cmp	r5, r3
 8009070:	d11b      	bne.n	80090aa <_vfiprintf_r+0x56>
 8009072:	6875      	ldr	r5, [r6, #4]
 8009074:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009076:	07d9      	lsls	r1, r3, #31
 8009078:	d405      	bmi.n	8009086 <_vfiprintf_r+0x32>
 800907a:	89ab      	ldrh	r3, [r5, #12]
 800907c:	059a      	lsls	r2, r3, #22
 800907e:	d402      	bmi.n	8009086 <_vfiprintf_r+0x32>
 8009080:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009082:	f000 fba5 	bl	80097d0 <__retarget_lock_acquire_recursive>
 8009086:	89ab      	ldrh	r3, [r5, #12]
 8009088:	071b      	lsls	r3, r3, #28
 800908a:	d501      	bpl.n	8009090 <_vfiprintf_r+0x3c>
 800908c:	692b      	ldr	r3, [r5, #16]
 800908e:	b9eb      	cbnz	r3, 80090cc <_vfiprintf_r+0x78>
 8009090:	4629      	mov	r1, r5
 8009092:	4630      	mov	r0, r6
 8009094:	f000 f96e 	bl	8009374 <__swsetup_r>
 8009098:	b1c0      	cbz	r0, 80090cc <_vfiprintf_r+0x78>
 800909a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800909c:	07dc      	lsls	r4, r3, #31
 800909e:	d50e      	bpl.n	80090be <_vfiprintf_r+0x6a>
 80090a0:	f04f 30ff 	mov.w	r0, #4294967295
 80090a4:	b01d      	add	sp, #116	; 0x74
 80090a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090aa:	4b7b      	ldr	r3, [pc, #492]	; (8009298 <_vfiprintf_r+0x244>)
 80090ac:	429d      	cmp	r5, r3
 80090ae:	d101      	bne.n	80090b4 <_vfiprintf_r+0x60>
 80090b0:	68b5      	ldr	r5, [r6, #8]
 80090b2:	e7df      	b.n	8009074 <_vfiprintf_r+0x20>
 80090b4:	4b79      	ldr	r3, [pc, #484]	; (800929c <_vfiprintf_r+0x248>)
 80090b6:	429d      	cmp	r5, r3
 80090b8:	bf08      	it	eq
 80090ba:	68f5      	ldreq	r5, [r6, #12]
 80090bc:	e7da      	b.n	8009074 <_vfiprintf_r+0x20>
 80090be:	89ab      	ldrh	r3, [r5, #12]
 80090c0:	0598      	lsls	r0, r3, #22
 80090c2:	d4ed      	bmi.n	80090a0 <_vfiprintf_r+0x4c>
 80090c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090c6:	f000 fb84 	bl	80097d2 <__retarget_lock_release_recursive>
 80090ca:	e7e9      	b.n	80090a0 <_vfiprintf_r+0x4c>
 80090cc:	2300      	movs	r3, #0
 80090ce:	9309      	str	r3, [sp, #36]	; 0x24
 80090d0:	2320      	movs	r3, #32
 80090d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80090d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80090da:	2330      	movs	r3, #48	; 0x30
 80090dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80092a0 <_vfiprintf_r+0x24c>
 80090e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090e4:	f04f 0901 	mov.w	r9, #1
 80090e8:	4623      	mov	r3, r4
 80090ea:	469a      	mov	sl, r3
 80090ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090f0:	b10a      	cbz	r2, 80090f6 <_vfiprintf_r+0xa2>
 80090f2:	2a25      	cmp	r2, #37	; 0x25
 80090f4:	d1f9      	bne.n	80090ea <_vfiprintf_r+0x96>
 80090f6:	ebba 0b04 	subs.w	fp, sl, r4
 80090fa:	d00b      	beq.n	8009114 <_vfiprintf_r+0xc0>
 80090fc:	465b      	mov	r3, fp
 80090fe:	4622      	mov	r2, r4
 8009100:	4629      	mov	r1, r5
 8009102:	4630      	mov	r0, r6
 8009104:	f7ff ff94 	bl	8009030 <__sfputs_r>
 8009108:	3001      	adds	r0, #1
 800910a:	f000 80aa 	beq.w	8009262 <_vfiprintf_r+0x20e>
 800910e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009110:	445a      	add	r2, fp
 8009112:	9209      	str	r2, [sp, #36]	; 0x24
 8009114:	f89a 3000 	ldrb.w	r3, [sl]
 8009118:	2b00      	cmp	r3, #0
 800911a:	f000 80a2 	beq.w	8009262 <_vfiprintf_r+0x20e>
 800911e:	2300      	movs	r3, #0
 8009120:	f04f 32ff 	mov.w	r2, #4294967295
 8009124:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009128:	f10a 0a01 	add.w	sl, sl, #1
 800912c:	9304      	str	r3, [sp, #16]
 800912e:	9307      	str	r3, [sp, #28]
 8009130:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009134:	931a      	str	r3, [sp, #104]	; 0x68
 8009136:	4654      	mov	r4, sl
 8009138:	2205      	movs	r2, #5
 800913a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800913e:	4858      	ldr	r0, [pc, #352]	; (80092a0 <_vfiprintf_r+0x24c>)
 8009140:	f7f7 f84e 	bl	80001e0 <memchr>
 8009144:	9a04      	ldr	r2, [sp, #16]
 8009146:	b9d8      	cbnz	r0, 8009180 <_vfiprintf_r+0x12c>
 8009148:	06d1      	lsls	r1, r2, #27
 800914a:	bf44      	itt	mi
 800914c:	2320      	movmi	r3, #32
 800914e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009152:	0713      	lsls	r3, r2, #28
 8009154:	bf44      	itt	mi
 8009156:	232b      	movmi	r3, #43	; 0x2b
 8009158:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800915c:	f89a 3000 	ldrb.w	r3, [sl]
 8009160:	2b2a      	cmp	r3, #42	; 0x2a
 8009162:	d015      	beq.n	8009190 <_vfiprintf_r+0x13c>
 8009164:	9a07      	ldr	r2, [sp, #28]
 8009166:	4654      	mov	r4, sl
 8009168:	2000      	movs	r0, #0
 800916a:	f04f 0c0a 	mov.w	ip, #10
 800916e:	4621      	mov	r1, r4
 8009170:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009174:	3b30      	subs	r3, #48	; 0x30
 8009176:	2b09      	cmp	r3, #9
 8009178:	d94e      	bls.n	8009218 <_vfiprintf_r+0x1c4>
 800917a:	b1b0      	cbz	r0, 80091aa <_vfiprintf_r+0x156>
 800917c:	9207      	str	r2, [sp, #28]
 800917e:	e014      	b.n	80091aa <_vfiprintf_r+0x156>
 8009180:	eba0 0308 	sub.w	r3, r0, r8
 8009184:	fa09 f303 	lsl.w	r3, r9, r3
 8009188:	4313      	orrs	r3, r2
 800918a:	9304      	str	r3, [sp, #16]
 800918c:	46a2      	mov	sl, r4
 800918e:	e7d2      	b.n	8009136 <_vfiprintf_r+0xe2>
 8009190:	9b03      	ldr	r3, [sp, #12]
 8009192:	1d19      	adds	r1, r3, #4
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	9103      	str	r1, [sp, #12]
 8009198:	2b00      	cmp	r3, #0
 800919a:	bfbb      	ittet	lt
 800919c:	425b      	neglt	r3, r3
 800919e:	f042 0202 	orrlt.w	r2, r2, #2
 80091a2:	9307      	strge	r3, [sp, #28]
 80091a4:	9307      	strlt	r3, [sp, #28]
 80091a6:	bfb8      	it	lt
 80091a8:	9204      	strlt	r2, [sp, #16]
 80091aa:	7823      	ldrb	r3, [r4, #0]
 80091ac:	2b2e      	cmp	r3, #46	; 0x2e
 80091ae:	d10c      	bne.n	80091ca <_vfiprintf_r+0x176>
 80091b0:	7863      	ldrb	r3, [r4, #1]
 80091b2:	2b2a      	cmp	r3, #42	; 0x2a
 80091b4:	d135      	bne.n	8009222 <_vfiprintf_r+0x1ce>
 80091b6:	9b03      	ldr	r3, [sp, #12]
 80091b8:	1d1a      	adds	r2, r3, #4
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	9203      	str	r2, [sp, #12]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	bfb8      	it	lt
 80091c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80091c6:	3402      	adds	r4, #2
 80091c8:	9305      	str	r3, [sp, #20]
 80091ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80092b0 <_vfiprintf_r+0x25c>
 80091ce:	7821      	ldrb	r1, [r4, #0]
 80091d0:	2203      	movs	r2, #3
 80091d2:	4650      	mov	r0, sl
 80091d4:	f7f7 f804 	bl	80001e0 <memchr>
 80091d8:	b140      	cbz	r0, 80091ec <_vfiprintf_r+0x198>
 80091da:	2340      	movs	r3, #64	; 0x40
 80091dc:	eba0 000a 	sub.w	r0, r0, sl
 80091e0:	fa03 f000 	lsl.w	r0, r3, r0
 80091e4:	9b04      	ldr	r3, [sp, #16]
 80091e6:	4303      	orrs	r3, r0
 80091e8:	3401      	adds	r4, #1
 80091ea:	9304      	str	r3, [sp, #16]
 80091ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091f0:	482c      	ldr	r0, [pc, #176]	; (80092a4 <_vfiprintf_r+0x250>)
 80091f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091f6:	2206      	movs	r2, #6
 80091f8:	f7f6 fff2 	bl	80001e0 <memchr>
 80091fc:	2800      	cmp	r0, #0
 80091fe:	d03f      	beq.n	8009280 <_vfiprintf_r+0x22c>
 8009200:	4b29      	ldr	r3, [pc, #164]	; (80092a8 <_vfiprintf_r+0x254>)
 8009202:	bb1b      	cbnz	r3, 800924c <_vfiprintf_r+0x1f8>
 8009204:	9b03      	ldr	r3, [sp, #12]
 8009206:	3307      	adds	r3, #7
 8009208:	f023 0307 	bic.w	r3, r3, #7
 800920c:	3308      	adds	r3, #8
 800920e:	9303      	str	r3, [sp, #12]
 8009210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009212:	443b      	add	r3, r7
 8009214:	9309      	str	r3, [sp, #36]	; 0x24
 8009216:	e767      	b.n	80090e8 <_vfiprintf_r+0x94>
 8009218:	fb0c 3202 	mla	r2, ip, r2, r3
 800921c:	460c      	mov	r4, r1
 800921e:	2001      	movs	r0, #1
 8009220:	e7a5      	b.n	800916e <_vfiprintf_r+0x11a>
 8009222:	2300      	movs	r3, #0
 8009224:	3401      	adds	r4, #1
 8009226:	9305      	str	r3, [sp, #20]
 8009228:	4619      	mov	r1, r3
 800922a:	f04f 0c0a 	mov.w	ip, #10
 800922e:	4620      	mov	r0, r4
 8009230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009234:	3a30      	subs	r2, #48	; 0x30
 8009236:	2a09      	cmp	r2, #9
 8009238:	d903      	bls.n	8009242 <_vfiprintf_r+0x1ee>
 800923a:	2b00      	cmp	r3, #0
 800923c:	d0c5      	beq.n	80091ca <_vfiprintf_r+0x176>
 800923e:	9105      	str	r1, [sp, #20]
 8009240:	e7c3      	b.n	80091ca <_vfiprintf_r+0x176>
 8009242:	fb0c 2101 	mla	r1, ip, r1, r2
 8009246:	4604      	mov	r4, r0
 8009248:	2301      	movs	r3, #1
 800924a:	e7f0      	b.n	800922e <_vfiprintf_r+0x1da>
 800924c:	ab03      	add	r3, sp, #12
 800924e:	9300      	str	r3, [sp, #0]
 8009250:	462a      	mov	r2, r5
 8009252:	4b16      	ldr	r3, [pc, #88]	; (80092ac <_vfiprintf_r+0x258>)
 8009254:	a904      	add	r1, sp, #16
 8009256:	4630      	mov	r0, r6
 8009258:	f7fd fdc4 	bl	8006de4 <_printf_float>
 800925c:	4607      	mov	r7, r0
 800925e:	1c78      	adds	r0, r7, #1
 8009260:	d1d6      	bne.n	8009210 <_vfiprintf_r+0x1bc>
 8009262:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009264:	07d9      	lsls	r1, r3, #31
 8009266:	d405      	bmi.n	8009274 <_vfiprintf_r+0x220>
 8009268:	89ab      	ldrh	r3, [r5, #12]
 800926a:	059a      	lsls	r2, r3, #22
 800926c:	d402      	bmi.n	8009274 <_vfiprintf_r+0x220>
 800926e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009270:	f000 faaf 	bl	80097d2 <__retarget_lock_release_recursive>
 8009274:	89ab      	ldrh	r3, [r5, #12]
 8009276:	065b      	lsls	r3, r3, #25
 8009278:	f53f af12 	bmi.w	80090a0 <_vfiprintf_r+0x4c>
 800927c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800927e:	e711      	b.n	80090a4 <_vfiprintf_r+0x50>
 8009280:	ab03      	add	r3, sp, #12
 8009282:	9300      	str	r3, [sp, #0]
 8009284:	462a      	mov	r2, r5
 8009286:	4b09      	ldr	r3, [pc, #36]	; (80092ac <_vfiprintf_r+0x258>)
 8009288:	a904      	add	r1, sp, #16
 800928a:	4630      	mov	r0, r6
 800928c:	f7fe f84e 	bl	800732c <_printf_i>
 8009290:	e7e4      	b.n	800925c <_vfiprintf_r+0x208>
 8009292:	bf00      	nop
 8009294:	0800a1ec 	.word	0x0800a1ec
 8009298:	0800a20c 	.word	0x0800a20c
 800929c:	0800a1cc 	.word	0x0800a1cc
 80092a0:	0800a074 	.word	0x0800a074
 80092a4:	0800a07e 	.word	0x0800a07e
 80092a8:	08006de5 	.word	0x08006de5
 80092ac:	08009031 	.word	0x08009031
 80092b0:	0800a07a 	.word	0x0800a07a

080092b4 <__swbuf_r>:
 80092b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092b6:	460e      	mov	r6, r1
 80092b8:	4614      	mov	r4, r2
 80092ba:	4605      	mov	r5, r0
 80092bc:	b118      	cbz	r0, 80092c6 <__swbuf_r+0x12>
 80092be:	6983      	ldr	r3, [r0, #24]
 80092c0:	b90b      	cbnz	r3, 80092c6 <__swbuf_r+0x12>
 80092c2:	f000 f9e7 	bl	8009694 <__sinit>
 80092c6:	4b21      	ldr	r3, [pc, #132]	; (800934c <__swbuf_r+0x98>)
 80092c8:	429c      	cmp	r4, r3
 80092ca:	d12b      	bne.n	8009324 <__swbuf_r+0x70>
 80092cc:	686c      	ldr	r4, [r5, #4]
 80092ce:	69a3      	ldr	r3, [r4, #24]
 80092d0:	60a3      	str	r3, [r4, #8]
 80092d2:	89a3      	ldrh	r3, [r4, #12]
 80092d4:	071a      	lsls	r2, r3, #28
 80092d6:	d52f      	bpl.n	8009338 <__swbuf_r+0x84>
 80092d8:	6923      	ldr	r3, [r4, #16]
 80092da:	b36b      	cbz	r3, 8009338 <__swbuf_r+0x84>
 80092dc:	6923      	ldr	r3, [r4, #16]
 80092de:	6820      	ldr	r0, [r4, #0]
 80092e0:	1ac0      	subs	r0, r0, r3
 80092e2:	6963      	ldr	r3, [r4, #20]
 80092e4:	b2f6      	uxtb	r6, r6
 80092e6:	4283      	cmp	r3, r0
 80092e8:	4637      	mov	r7, r6
 80092ea:	dc04      	bgt.n	80092f6 <__swbuf_r+0x42>
 80092ec:	4621      	mov	r1, r4
 80092ee:	4628      	mov	r0, r5
 80092f0:	f000 f93c 	bl	800956c <_fflush_r>
 80092f4:	bb30      	cbnz	r0, 8009344 <__swbuf_r+0x90>
 80092f6:	68a3      	ldr	r3, [r4, #8]
 80092f8:	3b01      	subs	r3, #1
 80092fa:	60a3      	str	r3, [r4, #8]
 80092fc:	6823      	ldr	r3, [r4, #0]
 80092fe:	1c5a      	adds	r2, r3, #1
 8009300:	6022      	str	r2, [r4, #0]
 8009302:	701e      	strb	r6, [r3, #0]
 8009304:	6963      	ldr	r3, [r4, #20]
 8009306:	3001      	adds	r0, #1
 8009308:	4283      	cmp	r3, r0
 800930a:	d004      	beq.n	8009316 <__swbuf_r+0x62>
 800930c:	89a3      	ldrh	r3, [r4, #12]
 800930e:	07db      	lsls	r3, r3, #31
 8009310:	d506      	bpl.n	8009320 <__swbuf_r+0x6c>
 8009312:	2e0a      	cmp	r6, #10
 8009314:	d104      	bne.n	8009320 <__swbuf_r+0x6c>
 8009316:	4621      	mov	r1, r4
 8009318:	4628      	mov	r0, r5
 800931a:	f000 f927 	bl	800956c <_fflush_r>
 800931e:	b988      	cbnz	r0, 8009344 <__swbuf_r+0x90>
 8009320:	4638      	mov	r0, r7
 8009322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009324:	4b0a      	ldr	r3, [pc, #40]	; (8009350 <__swbuf_r+0x9c>)
 8009326:	429c      	cmp	r4, r3
 8009328:	d101      	bne.n	800932e <__swbuf_r+0x7a>
 800932a:	68ac      	ldr	r4, [r5, #8]
 800932c:	e7cf      	b.n	80092ce <__swbuf_r+0x1a>
 800932e:	4b09      	ldr	r3, [pc, #36]	; (8009354 <__swbuf_r+0xa0>)
 8009330:	429c      	cmp	r4, r3
 8009332:	bf08      	it	eq
 8009334:	68ec      	ldreq	r4, [r5, #12]
 8009336:	e7ca      	b.n	80092ce <__swbuf_r+0x1a>
 8009338:	4621      	mov	r1, r4
 800933a:	4628      	mov	r0, r5
 800933c:	f000 f81a 	bl	8009374 <__swsetup_r>
 8009340:	2800      	cmp	r0, #0
 8009342:	d0cb      	beq.n	80092dc <__swbuf_r+0x28>
 8009344:	f04f 37ff 	mov.w	r7, #4294967295
 8009348:	e7ea      	b.n	8009320 <__swbuf_r+0x6c>
 800934a:	bf00      	nop
 800934c:	0800a1ec 	.word	0x0800a1ec
 8009350:	0800a20c 	.word	0x0800a20c
 8009354:	0800a1cc 	.word	0x0800a1cc

08009358 <__ascii_wctomb>:
 8009358:	b149      	cbz	r1, 800936e <__ascii_wctomb+0x16>
 800935a:	2aff      	cmp	r2, #255	; 0xff
 800935c:	bf85      	ittet	hi
 800935e:	238a      	movhi	r3, #138	; 0x8a
 8009360:	6003      	strhi	r3, [r0, #0]
 8009362:	700a      	strbls	r2, [r1, #0]
 8009364:	f04f 30ff 	movhi.w	r0, #4294967295
 8009368:	bf98      	it	ls
 800936a:	2001      	movls	r0, #1
 800936c:	4770      	bx	lr
 800936e:	4608      	mov	r0, r1
 8009370:	4770      	bx	lr
	...

08009374 <__swsetup_r>:
 8009374:	4b32      	ldr	r3, [pc, #200]	; (8009440 <__swsetup_r+0xcc>)
 8009376:	b570      	push	{r4, r5, r6, lr}
 8009378:	681d      	ldr	r5, [r3, #0]
 800937a:	4606      	mov	r6, r0
 800937c:	460c      	mov	r4, r1
 800937e:	b125      	cbz	r5, 800938a <__swsetup_r+0x16>
 8009380:	69ab      	ldr	r3, [r5, #24]
 8009382:	b913      	cbnz	r3, 800938a <__swsetup_r+0x16>
 8009384:	4628      	mov	r0, r5
 8009386:	f000 f985 	bl	8009694 <__sinit>
 800938a:	4b2e      	ldr	r3, [pc, #184]	; (8009444 <__swsetup_r+0xd0>)
 800938c:	429c      	cmp	r4, r3
 800938e:	d10f      	bne.n	80093b0 <__swsetup_r+0x3c>
 8009390:	686c      	ldr	r4, [r5, #4]
 8009392:	89a3      	ldrh	r3, [r4, #12]
 8009394:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009398:	0719      	lsls	r1, r3, #28
 800939a:	d42c      	bmi.n	80093f6 <__swsetup_r+0x82>
 800939c:	06dd      	lsls	r5, r3, #27
 800939e:	d411      	bmi.n	80093c4 <__swsetup_r+0x50>
 80093a0:	2309      	movs	r3, #9
 80093a2:	6033      	str	r3, [r6, #0]
 80093a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80093a8:	81a3      	strh	r3, [r4, #12]
 80093aa:	f04f 30ff 	mov.w	r0, #4294967295
 80093ae:	e03e      	b.n	800942e <__swsetup_r+0xba>
 80093b0:	4b25      	ldr	r3, [pc, #148]	; (8009448 <__swsetup_r+0xd4>)
 80093b2:	429c      	cmp	r4, r3
 80093b4:	d101      	bne.n	80093ba <__swsetup_r+0x46>
 80093b6:	68ac      	ldr	r4, [r5, #8]
 80093b8:	e7eb      	b.n	8009392 <__swsetup_r+0x1e>
 80093ba:	4b24      	ldr	r3, [pc, #144]	; (800944c <__swsetup_r+0xd8>)
 80093bc:	429c      	cmp	r4, r3
 80093be:	bf08      	it	eq
 80093c0:	68ec      	ldreq	r4, [r5, #12]
 80093c2:	e7e6      	b.n	8009392 <__swsetup_r+0x1e>
 80093c4:	0758      	lsls	r0, r3, #29
 80093c6:	d512      	bpl.n	80093ee <__swsetup_r+0x7a>
 80093c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093ca:	b141      	cbz	r1, 80093de <__swsetup_r+0x6a>
 80093cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093d0:	4299      	cmp	r1, r3
 80093d2:	d002      	beq.n	80093da <__swsetup_r+0x66>
 80093d4:	4630      	mov	r0, r6
 80093d6:	f7ff fb31 	bl	8008a3c <_free_r>
 80093da:	2300      	movs	r3, #0
 80093dc:	6363      	str	r3, [r4, #52]	; 0x34
 80093de:	89a3      	ldrh	r3, [r4, #12]
 80093e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80093e4:	81a3      	strh	r3, [r4, #12]
 80093e6:	2300      	movs	r3, #0
 80093e8:	6063      	str	r3, [r4, #4]
 80093ea:	6923      	ldr	r3, [r4, #16]
 80093ec:	6023      	str	r3, [r4, #0]
 80093ee:	89a3      	ldrh	r3, [r4, #12]
 80093f0:	f043 0308 	orr.w	r3, r3, #8
 80093f4:	81a3      	strh	r3, [r4, #12]
 80093f6:	6923      	ldr	r3, [r4, #16]
 80093f8:	b94b      	cbnz	r3, 800940e <__swsetup_r+0x9a>
 80093fa:	89a3      	ldrh	r3, [r4, #12]
 80093fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009400:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009404:	d003      	beq.n	800940e <__swsetup_r+0x9a>
 8009406:	4621      	mov	r1, r4
 8009408:	4630      	mov	r0, r6
 800940a:	f000 fa09 	bl	8009820 <__smakebuf_r>
 800940e:	89a0      	ldrh	r0, [r4, #12]
 8009410:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009414:	f010 0301 	ands.w	r3, r0, #1
 8009418:	d00a      	beq.n	8009430 <__swsetup_r+0xbc>
 800941a:	2300      	movs	r3, #0
 800941c:	60a3      	str	r3, [r4, #8]
 800941e:	6963      	ldr	r3, [r4, #20]
 8009420:	425b      	negs	r3, r3
 8009422:	61a3      	str	r3, [r4, #24]
 8009424:	6923      	ldr	r3, [r4, #16]
 8009426:	b943      	cbnz	r3, 800943a <__swsetup_r+0xc6>
 8009428:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800942c:	d1ba      	bne.n	80093a4 <__swsetup_r+0x30>
 800942e:	bd70      	pop	{r4, r5, r6, pc}
 8009430:	0781      	lsls	r1, r0, #30
 8009432:	bf58      	it	pl
 8009434:	6963      	ldrpl	r3, [r4, #20]
 8009436:	60a3      	str	r3, [r4, #8]
 8009438:	e7f4      	b.n	8009424 <__swsetup_r+0xb0>
 800943a:	2000      	movs	r0, #0
 800943c:	e7f7      	b.n	800942e <__swsetup_r+0xba>
 800943e:	bf00      	nop
 8009440:	20000038 	.word	0x20000038
 8009444:	0800a1ec 	.word	0x0800a1ec
 8009448:	0800a20c 	.word	0x0800a20c
 800944c:	0800a1cc 	.word	0x0800a1cc

08009450 <abort>:
 8009450:	b508      	push	{r3, lr}
 8009452:	2006      	movs	r0, #6
 8009454:	f000 fa54 	bl	8009900 <raise>
 8009458:	2001      	movs	r0, #1
 800945a:	f7fa faab 	bl	80039b4 <_exit>
	...

08009460 <__sflush_r>:
 8009460:	898a      	ldrh	r2, [r1, #12]
 8009462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009466:	4605      	mov	r5, r0
 8009468:	0710      	lsls	r0, r2, #28
 800946a:	460c      	mov	r4, r1
 800946c:	d458      	bmi.n	8009520 <__sflush_r+0xc0>
 800946e:	684b      	ldr	r3, [r1, #4]
 8009470:	2b00      	cmp	r3, #0
 8009472:	dc05      	bgt.n	8009480 <__sflush_r+0x20>
 8009474:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009476:	2b00      	cmp	r3, #0
 8009478:	dc02      	bgt.n	8009480 <__sflush_r+0x20>
 800947a:	2000      	movs	r0, #0
 800947c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009480:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009482:	2e00      	cmp	r6, #0
 8009484:	d0f9      	beq.n	800947a <__sflush_r+0x1a>
 8009486:	2300      	movs	r3, #0
 8009488:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800948c:	682f      	ldr	r7, [r5, #0]
 800948e:	602b      	str	r3, [r5, #0]
 8009490:	d032      	beq.n	80094f8 <__sflush_r+0x98>
 8009492:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009494:	89a3      	ldrh	r3, [r4, #12]
 8009496:	075a      	lsls	r2, r3, #29
 8009498:	d505      	bpl.n	80094a6 <__sflush_r+0x46>
 800949a:	6863      	ldr	r3, [r4, #4]
 800949c:	1ac0      	subs	r0, r0, r3
 800949e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80094a0:	b10b      	cbz	r3, 80094a6 <__sflush_r+0x46>
 80094a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80094a4:	1ac0      	subs	r0, r0, r3
 80094a6:	2300      	movs	r3, #0
 80094a8:	4602      	mov	r2, r0
 80094aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094ac:	6a21      	ldr	r1, [r4, #32]
 80094ae:	4628      	mov	r0, r5
 80094b0:	47b0      	blx	r6
 80094b2:	1c43      	adds	r3, r0, #1
 80094b4:	89a3      	ldrh	r3, [r4, #12]
 80094b6:	d106      	bne.n	80094c6 <__sflush_r+0x66>
 80094b8:	6829      	ldr	r1, [r5, #0]
 80094ba:	291d      	cmp	r1, #29
 80094bc:	d82c      	bhi.n	8009518 <__sflush_r+0xb8>
 80094be:	4a2a      	ldr	r2, [pc, #168]	; (8009568 <__sflush_r+0x108>)
 80094c0:	40ca      	lsrs	r2, r1
 80094c2:	07d6      	lsls	r6, r2, #31
 80094c4:	d528      	bpl.n	8009518 <__sflush_r+0xb8>
 80094c6:	2200      	movs	r2, #0
 80094c8:	6062      	str	r2, [r4, #4]
 80094ca:	04d9      	lsls	r1, r3, #19
 80094cc:	6922      	ldr	r2, [r4, #16]
 80094ce:	6022      	str	r2, [r4, #0]
 80094d0:	d504      	bpl.n	80094dc <__sflush_r+0x7c>
 80094d2:	1c42      	adds	r2, r0, #1
 80094d4:	d101      	bne.n	80094da <__sflush_r+0x7a>
 80094d6:	682b      	ldr	r3, [r5, #0]
 80094d8:	b903      	cbnz	r3, 80094dc <__sflush_r+0x7c>
 80094da:	6560      	str	r0, [r4, #84]	; 0x54
 80094dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094de:	602f      	str	r7, [r5, #0]
 80094e0:	2900      	cmp	r1, #0
 80094e2:	d0ca      	beq.n	800947a <__sflush_r+0x1a>
 80094e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094e8:	4299      	cmp	r1, r3
 80094ea:	d002      	beq.n	80094f2 <__sflush_r+0x92>
 80094ec:	4628      	mov	r0, r5
 80094ee:	f7ff faa5 	bl	8008a3c <_free_r>
 80094f2:	2000      	movs	r0, #0
 80094f4:	6360      	str	r0, [r4, #52]	; 0x34
 80094f6:	e7c1      	b.n	800947c <__sflush_r+0x1c>
 80094f8:	6a21      	ldr	r1, [r4, #32]
 80094fa:	2301      	movs	r3, #1
 80094fc:	4628      	mov	r0, r5
 80094fe:	47b0      	blx	r6
 8009500:	1c41      	adds	r1, r0, #1
 8009502:	d1c7      	bne.n	8009494 <__sflush_r+0x34>
 8009504:	682b      	ldr	r3, [r5, #0]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d0c4      	beq.n	8009494 <__sflush_r+0x34>
 800950a:	2b1d      	cmp	r3, #29
 800950c:	d001      	beq.n	8009512 <__sflush_r+0xb2>
 800950e:	2b16      	cmp	r3, #22
 8009510:	d101      	bne.n	8009516 <__sflush_r+0xb6>
 8009512:	602f      	str	r7, [r5, #0]
 8009514:	e7b1      	b.n	800947a <__sflush_r+0x1a>
 8009516:	89a3      	ldrh	r3, [r4, #12]
 8009518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800951c:	81a3      	strh	r3, [r4, #12]
 800951e:	e7ad      	b.n	800947c <__sflush_r+0x1c>
 8009520:	690f      	ldr	r7, [r1, #16]
 8009522:	2f00      	cmp	r7, #0
 8009524:	d0a9      	beq.n	800947a <__sflush_r+0x1a>
 8009526:	0793      	lsls	r3, r2, #30
 8009528:	680e      	ldr	r6, [r1, #0]
 800952a:	bf08      	it	eq
 800952c:	694b      	ldreq	r3, [r1, #20]
 800952e:	600f      	str	r7, [r1, #0]
 8009530:	bf18      	it	ne
 8009532:	2300      	movne	r3, #0
 8009534:	eba6 0807 	sub.w	r8, r6, r7
 8009538:	608b      	str	r3, [r1, #8]
 800953a:	f1b8 0f00 	cmp.w	r8, #0
 800953e:	dd9c      	ble.n	800947a <__sflush_r+0x1a>
 8009540:	6a21      	ldr	r1, [r4, #32]
 8009542:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009544:	4643      	mov	r3, r8
 8009546:	463a      	mov	r2, r7
 8009548:	4628      	mov	r0, r5
 800954a:	47b0      	blx	r6
 800954c:	2800      	cmp	r0, #0
 800954e:	dc06      	bgt.n	800955e <__sflush_r+0xfe>
 8009550:	89a3      	ldrh	r3, [r4, #12]
 8009552:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009556:	81a3      	strh	r3, [r4, #12]
 8009558:	f04f 30ff 	mov.w	r0, #4294967295
 800955c:	e78e      	b.n	800947c <__sflush_r+0x1c>
 800955e:	4407      	add	r7, r0
 8009560:	eba8 0800 	sub.w	r8, r8, r0
 8009564:	e7e9      	b.n	800953a <__sflush_r+0xda>
 8009566:	bf00      	nop
 8009568:	20400001 	.word	0x20400001

0800956c <_fflush_r>:
 800956c:	b538      	push	{r3, r4, r5, lr}
 800956e:	690b      	ldr	r3, [r1, #16]
 8009570:	4605      	mov	r5, r0
 8009572:	460c      	mov	r4, r1
 8009574:	b913      	cbnz	r3, 800957c <_fflush_r+0x10>
 8009576:	2500      	movs	r5, #0
 8009578:	4628      	mov	r0, r5
 800957a:	bd38      	pop	{r3, r4, r5, pc}
 800957c:	b118      	cbz	r0, 8009586 <_fflush_r+0x1a>
 800957e:	6983      	ldr	r3, [r0, #24]
 8009580:	b90b      	cbnz	r3, 8009586 <_fflush_r+0x1a>
 8009582:	f000 f887 	bl	8009694 <__sinit>
 8009586:	4b14      	ldr	r3, [pc, #80]	; (80095d8 <_fflush_r+0x6c>)
 8009588:	429c      	cmp	r4, r3
 800958a:	d11b      	bne.n	80095c4 <_fflush_r+0x58>
 800958c:	686c      	ldr	r4, [r5, #4]
 800958e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d0ef      	beq.n	8009576 <_fflush_r+0xa>
 8009596:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009598:	07d0      	lsls	r0, r2, #31
 800959a:	d404      	bmi.n	80095a6 <_fflush_r+0x3a>
 800959c:	0599      	lsls	r1, r3, #22
 800959e:	d402      	bmi.n	80095a6 <_fflush_r+0x3a>
 80095a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095a2:	f000 f915 	bl	80097d0 <__retarget_lock_acquire_recursive>
 80095a6:	4628      	mov	r0, r5
 80095a8:	4621      	mov	r1, r4
 80095aa:	f7ff ff59 	bl	8009460 <__sflush_r>
 80095ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095b0:	07da      	lsls	r2, r3, #31
 80095b2:	4605      	mov	r5, r0
 80095b4:	d4e0      	bmi.n	8009578 <_fflush_r+0xc>
 80095b6:	89a3      	ldrh	r3, [r4, #12]
 80095b8:	059b      	lsls	r3, r3, #22
 80095ba:	d4dd      	bmi.n	8009578 <_fflush_r+0xc>
 80095bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095be:	f000 f908 	bl	80097d2 <__retarget_lock_release_recursive>
 80095c2:	e7d9      	b.n	8009578 <_fflush_r+0xc>
 80095c4:	4b05      	ldr	r3, [pc, #20]	; (80095dc <_fflush_r+0x70>)
 80095c6:	429c      	cmp	r4, r3
 80095c8:	d101      	bne.n	80095ce <_fflush_r+0x62>
 80095ca:	68ac      	ldr	r4, [r5, #8]
 80095cc:	e7df      	b.n	800958e <_fflush_r+0x22>
 80095ce:	4b04      	ldr	r3, [pc, #16]	; (80095e0 <_fflush_r+0x74>)
 80095d0:	429c      	cmp	r4, r3
 80095d2:	bf08      	it	eq
 80095d4:	68ec      	ldreq	r4, [r5, #12]
 80095d6:	e7da      	b.n	800958e <_fflush_r+0x22>
 80095d8:	0800a1ec 	.word	0x0800a1ec
 80095dc:	0800a20c 	.word	0x0800a20c
 80095e0:	0800a1cc 	.word	0x0800a1cc

080095e4 <std>:
 80095e4:	2300      	movs	r3, #0
 80095e6:	b510      	push	{r4, lr}
 80095e8:	4604      	mov	r4, r0
 80095ea:	e9c0 3300 	strd	r3, r3, [r0]
 80095ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80095f2:	6083      	str	r3, [r0, #8]
 80095f4:	8181      	strh	r1, [r0, #12]
 80095f6:	6643      	str	r3, [r0, #100]	; 0x64
 80095f8:	81c2      	strh	r2, [r0, #14]
 80095fa:	6183      	str	r3, [r0, #24]
 80095fc:	4619      	mov	r1, r3
 80095fe:	2208      	movs	r2, #8
 8009600:	305c      	adds	r0, #92	; 0x5c
 8009602:	f7fd fb47 	bl	8006c94 <memset>
 8009606:	4b05      	ldr	r3, [pc, #20]	; (800961c <std+0x38>)
 8009608:	6263      	str	r3, [r4, #36]	; 0x24
 800960a:	4b05      	ldr	r3, [pc, #20]	; (8009620 <std+0x3c>)
 800960c:	62a3      	str	r3, [r4, #40]	; 0x28
 800960e:	4b05      	ldr	r3, [pc, #20]	; (8009624 <std+0x40>)
 8009610:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009612:	4b05      	ldr	r3, [pc, #20]	; (8009628 <std+0x44>)
 8009614:	6224      	str	r4, [r4, #32]
 8009616:	6323      	str	r3, [r4, #48]	; 0x30
 8009618:	bd10      	pop	{r4, pc}
 800961a:	bf00      	nop
 800961c:	08009939 	.word	0x08009939
 8009620:	0800995b 	.word	0x0800995b
 8009624:	08009993 	.word	0x08009993
 8009628:	080099b7 	.word	0x080099b7

0800962c <_cleanup_r>:
 800962c:	4901      	ldr	r1, [pc, #4]	; (8009634 <_cleanup_r+0x8>)
 800962e:	f000 b8af 	b.w	8009790 <_fwalk_reent>
 8009632:	bf00      	nop
 8009634:	0800956d 	.word	0x0800956d

08009638 <__sfmoreglue>:
 8009638:	b570      	push	{r4, r5, r6, lr}
 800963a:	2268      	movs	r2, #104	; 0x68
 800963c:	1e4d      	subs	r5, r1, #1
 800963e:	4355      	muls	r5, r2
 8009640:	460e      	mov	r6, r1
 8009642:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009646:	f7ff fa65 	bl	8008b14 <_malloc_r>
 800964a:	4604      	mov	r4, r0
 800964c:	b140      	cbz	r0, 8009660 <__sfmoreglue+0x28>
 800964e:	2100      	movs	r1, #0
 8009650:	e9c0 1600 	strd	r1, r6, [r0]
 8009654:	300c      	adds	r0, #12
 8009656:	60a0      	str	r0, [r4, #8]
 8009658:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800965c:	f7fd fb1a 	bl	8006c94 <memset>
 8009660:	4620      	mov	r0, r4
 8009662:	bd70      	pop	{r4, r5, r6, pc}

08009664 <__sfp_lock_acquire>:
 8009664:	4801      	ldr	r0, [pc, #4]	; (800966c <__sfp_lock_acquire+0x8>)
 8009666:	f000 b8b3 	b.w	80097d0 <__retarget_lock_acquire_recursive>
 800966a:	bf00      	nop
 800966c:	200002d5 	.word	0x200002d5

08009670 <__sfp_lock_release>:
 8009670:	4801      	ldr	r0, [pc, #4]	; (8009678 <__sfp_lock_release+0x8>)
 8009672:	f000 b8ae 	b.w	80097d2 <__retarget_lock_release_recursive>
 8009676:	bf00      	nop
 8009678:	200002d5 	.word	0x200002d5

0800967c <__sinit_lock_acquire>:
 800967c:	4801      	ldr	r0, [pc, #4]	; (8009684 <__sinit_lock_acquire+0x8>)
 800967e:	f000 b8a7 	b.w	80097d0 <__retarget_lock_acquire_recursive>
 8009682:	bf00      	nop
 8009684:	200002d6 	.word	0x200002d6

08009688 <__sinit_lock_release>:
 8009688:	4801      	ldr	r0, [pc, #4]	; (8009690 <__sinit_lock_release+0x8>)
 800968a:	f000 b8a2 	b.w	80097d2 <__retarget_lock_release_recursive>
 800968e:	bf00      	nop
 8009690:	200002d6 	.word	0x200002d6

08009694 <__sinit>:
 8009694:	b510      	push	{r4, lr}
 8009696:	4604      	mov	r4, r0
 8009698:	f7ff fff0 	bl	800967c <__sinit_lock_acquire>
 800969c:	69a3      	ldr	r3, [r4, #24]
 800969e:	b11b      	cbz	r3, 80096a8 <__sinit+0x14>
 80096a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096a4:	f7ff bff0 	b.w	8009688 <__sinit_lock_release>
 80096a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80096ac:	6523      	str	r3, [r4, #80]	; 0x50
 80096ae:	4b13      	ldr	r3, [pc, #76]	; (80096fc <__sinit+0x68>)
 80096b0:	4a13      	ldr	r2, [pc, #76]	; (8009700 <__sinit+0x6c>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80096b6:	42a3      	cmp	r3, r4
 80096b8:	bf04      	itt	eq
 80096ba:	2301      	moveq	r3, #1
 80096bc:	61a3      	streq	r3, [r4, #24]
 80096be:	4620      	mov	r0, r4
 80096c0:	f000 f820 	bl	8009704 <__sfp>
 80096c4:	6060      	str	r0, [r4, #4]
 80096c6:	4620      	mov	r0, r4
 80096c8:	f000 f81c 	bl	8009704 <__sfp>
 80096cc:	60a0      	str	r0, [r4, #8]
 80096ce:	4620      	mov	r0, r4
 80096d0:	f000 f818 	bl	8009704 <__sfp>
 80096d4:	2200      	movs	r2, #0
 80096d6:	60e0      	str	r0, [r4, #12]
 80096d8:	2104      	movs	r1, #4
 80096da:	6860      	ldr	r0, [r4, #4]
 80096dc:	f7ff ff82 	bl	80095e4 <std>
 80096e0:	68a0      	ldr	r0, [r4, #8]
 80096e2:	2201      	movs	r2, #1
 80096e4:	2109      	movs	r1, #9
 80096e6:	f7ff ff7d 	bl	80095e4 <std>
 80096ea:	68e0      	ldr	r0, [r4, #12]
 80096ec:	2202      	movs	r2, #2
 80096ee:	2112      	movs	r1, #18
 80096f0:	f7ff ff78 	bl	80095e4 <std>
 80096f4:	2301      	movs	r3, #1
 80096f6:	61a3      	str	r3, [r4, #24]
 80096f8:	e7d2      	b.n	80096a0 <__sinit+0xc>
 80096fa:	bf00      	nop
 80096fc:	08009e54 	.word	0x08009e54
 8009700:	0800962d 	.word	0x0800962d

08009704 <__sfp>:
 8009704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009706:	4607      	mov	r7, r0
 8009708:	f7ff ffac 	bl	8009664 <__sfp_lock_acquire>
 800970c:	4b1e      	ldr	r3, [pc, #120]	; (8009788 <__sfp+0x84>)
 800970e:	681e      	ldr	r6, [r3, #0]
 8009710:	69b3      	ldr	r3, [r6, #24]
 8009712:	b913      	cbnz	r3, 800971a <__sfp+0x16>
 8009714:	4630      	mov	r0, r6
 8009716:	f7ff ffbd 	bl	8009694 <__sinit>
 800971a:	3648      	adds	r6, #72	; 0x48
 800971c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009720:	3b01      	subs	r3, #1
 8009722:	d503      	bpl.n	800972c <__sfp+0x28>
 8009724:	6833      	ldr	r3, [r6, #0]
 8009726:	b30b      	cbz	r3, 800976c <__sfp+0x68>
 8009728:	6836      	ldr	r6, [r6, #0]
 800972a:	e7f7      	b.n	800971c <__sfp+0x18>
 800972c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009730:	b9d5      	cbnz	r5, 8009768 <__sfp+0x64>
 8009732:	4b16      	ldr	r3, [pc, #88]	; (800978c <__sfp+0x88>)
 8009734:	60e3      	str	r3, [r4, #12]
 8009736:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800973a:	6665      	str	r5, [r4, #100]	; 0x64
 800973c:	f000 f847 	bl	80097ce <__retarget_lock_init_recursive>
 8009740:	f7ff ff96 	bl	8009670 <__sfp_lock_release>
 8009744:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009748:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800974c:	6025      	str	r5, [r4, #0]
 800974e:	61a5      	str	r5, [r4, #24]
 8009750:	2208      	movs	r2, #8
 8009752:	4629      	mov	r1, r5
 8009754:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009758:	f7fd fa9c 	bl	8006c94 <memset>
 800975c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009760:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009764:	4620      	mov	r0, r4
 8009766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009768:	3468      	adds	r4, #104	; 0x68
 800976a:	e7d9      	b.n	8009720 <__sfp+0x1c>
 800976c:	2104      	movs	r1, #4
 800976e:	4638      	mov	r0, r7
 8009770:	f7ff ff62 	bl	8009638 <__sfmoreglue>
 8009774:	4604      	mov	r4, r0
 8009776:	6030      	str	r0, [r6, #0]
 8009778:	2800      	cmp	r0, #0
 800977a:	d1d5      	bne.n	8009728 <__sfp+0x24>
 800977c:	f7ff ff78 	bl	8009670 <__sfp_lock_release>
 8009780:	230c      	movs	r3, #12
 8009782:	603b      	str	r3, [r7, #0]
 8009784:	e7ee      	b.n	8009764 <__sfp+0x60>
 8009786:	bf00      	nop
 8009788:	08009e54 	.word	0x08009e54
 800978c:	ffff0001 	.word	0xffff0001

08009790 <_fwalk_reent>:
 8009790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009794:	4606      	mov	r6, r0
 8009796:	4688      	mov	r8, r1
 8009798:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800979c:	2700      	movs	r7, #0
 800979e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80097a2:	f1b9 0901 	subs.w	r9, r9, #1
 80097a6:	d505      	bpl.n	80097b4 <_fwalk_reent+0x24>
 80097a8:	6824      	ldr	r4, [r4, #0]
 80097aa:	2c00      	cmp	r4, #0
 80097ac:	d1f7      	bne.n	800979e <_fwalk_reent+0xe>
 80097ae:	4638      	mov	r0, r7
 80097b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097b4:	89ab      	ldrh	r3, [r5, #12]
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	d907      	bls.n	80097ca <_fwalk_reent+0x3a>
 80097ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80097be:	3301      	adds	r3, #1
 80097c0:	d003      	beq.n	80097ca <_fwalk_reent+0x3a>
 80097c2:	4629      	mov	r1, r5
 80097c4:	4630      	mov	r0, r6
 80097c6:	47c0      	blx	r8
 80097c8:	4307      	orrs	r7, r0
 80097ca:	3568      	adds	r5, #104	; 0x68
 80097cc:	e7e9      	b.n	80097a2 <_fwalk_reent+0x12>

080097ce <__retarget_lock_init_recursive>:
 80097ce:	4770      	bx	lr

080097d0 <__retarget_lock_acquire_recursive>:
 80097d0:	4770      	bx	lr

080097d2 <__retarget_lock_release_recursive>:
 80097d2:	4770      	bx	lr

080097d4 <__swhatbuf_r>:
 80097d4:	b570      	push	{r4, r5, r6, lr}
 80097d6:	460e      	mov	r6, r1
 80097d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097dc:	2900      	cmp	r1, #0
 80097de:	b096      	sub	sp, #88	; 0x58
 80097e0:	4614      	mov	r4, r2
 80097e2:	461d      	mov	r5, r3
 80097e4:	da08      	bge.n	80097f8 <__swhatbuf_r+0x24>
 80097e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80097ea:	2200      	movs	r2, #0
 80097ec:	602a      	str	r2, [r5, #0]
 80097ee:	061a      	lsls	r2, r3, #24
 80097f0:	d410      	bmi.n	8009814 <__swhatbuf_r+0x40>
 80097f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097f6:	e00e      	b.n	8009816 <__swhatbuf_r+0x42>
 80097f8:	466a      	mov	r2, sp
 80097fa:	f000 f903 	bl	8009a04 <_fstat_r>
 80097fe:	2800      	cmp	r0, #0
 8009800:	dbf1      	blt.n	80097e6 <__swhatbuf_r+0x12>
 8009802:	9a01      	ldr	r2, [sp, #4]
 8009804:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009808:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800980c:	425a      	negs	r2, r3
 800980e:	415a      	adcs	r2, r3
 8009810:	602a      	str	r2, [r5, #0]
 8009812:	e7ee      	b.n	80097f2 <__swhatbuf_r+0x1e>
 8009814:	2340      	movs	r3, #64	; 0x40
 8009816:	2000      	movs	r0, #0
 8009818:	6023      	str	r3, [r4, #0]
 800981a:	b016      	add	sp, #88	; 0x58
 800981c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009820 <__smakebuf_r>:
 8009820:	898b      	ldrh	r3, [r1, #12]
 8009822:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009824:	079d      	lsls	r5, r3, #30
 8009826:	4606      	mov	r6, r0
 8009828:	460c      	mov	r4, r1
 800982a:	d507      	bpl.n	800983c <__smakebuf_r+0x1c>
 800982c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009830:	6023      	str	r3, [r4, #0]
 8009832:	6123      	str	r3, [r4, #16]
 8009834:	2301      	movs	r3, #1
 8009836:	6163      	str	r3, [r4, #20]
 8009838:	b002      	add	sp, #8
 800983a:	bd70      	pop	{r4, r5, r6, pc}
 800983c:	ab01      	add	r3, sp, #4
 800983e:	466a      	mov	r2, sp
 8009840:	f7ff ffc8 	bl	80097d4 <__swhatbuf_r>
 8009844:	9900      	ldr	r1, [sp, #0]
 8009846:	4605      	mov	r5, r0
 8009848:	4630      	mov	r0, r6
 800984a:	f7ff f963 	bl	8008b14 <_malloc_r>
 800984e:	b948      	cbnz	r0, 8009864 <__smakebuf_r+0x44>
 8009850:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009854:	059a      	lsls	r2, r3, #22
 8009856:	d4ef      	bmi.n	8009838 <__smakebuf_r+0x18>
 8009858:	f023 0303 	bic.w	r3, r3, #3
 800985c:	f043 0302 	orr.w	r3, r3, #2
 8009860:	81a3      	strh	r3, [r4, #12]
 8009862:	e7e3      	b.n	800982c <__smakebuf_r+0xc>
 8009864:	4b0d      	ldr	r3, [pc, #52]	; (800989c <__smakebuf_r+0x7c>)
 8009866:	62b3      	str	r3, [r6, #40]	; 0x28
 8009868:	89a3      	ldrh	r3, [r4, #12]
 800986a:	6020      	str	r0, [r4, #0]
 800986c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009870:	81a3      	strh	r3, [r4, #12]
 8009872:	9b00      	ldr	r3, [sp, #0]
 8009874:	6163      	str	r3, [r4, #20]
 8009876:	9b01      	ldr	r3, [sp, #4]
 8009878:	6120      	str	r0, [r4, #16]
 800987a:	b15b      	cbz	r3, 8009894 <__smakebuf_r+0x74>
 800987c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009880:	4630      	mov	r0, r6
 8009882:	f000 f8d1 	bl	8009a28 <_isatty_r>
 8009886:	b128      	cbz	r0, 8009894 <__smakebuf_r+0x74>
 8009888:	89a3      	ldrh	r3, [r4, #12]
 800988a:	f023 0303 	bic.w	r3, r3, #3
 800988e:	f043 0301 	orr.w	r3, r3, #1
 8009892:	81a3      	strh	r3, [r4, #12]
 8009894:	89a0      	ldrh	r0, [r4, #12]
 8009896:	4305      	orrs	r5, r0
 8009898:	81a5      	strh	r5, [r4, #12]
 800989a:	e7cd      	b.n	8009838 <__smakebuf_r+0x18>
 800989c:	0800962d 	.word	0x0800962d

080098a0 <_malloc_usable_size_r>:
 80098a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098a4:	1f18      	subs	r0, r3, #4
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	bfbc      	itt	lt
 80098aa:	580b      	ldrlt	r3, [r1, r0]
 80098ac:	18c0      	addlt	r0, r0, r3
 80098ae:	4770      	bx	lr

080098b0 <_raise_r>:
 80098b0:	291f      	cmp	r1, #31
 80098b2:	b538      	push	{r3, r4, r5, lr}
 80098b4:	4604      	mov	r4, r0
 80098b6:	460d      	mov	r5, r1
 80098b8:	d904      	bls.n	80098c4 <_raise_r+0x14>
 80098ba:	2316      	movs	r3, #22
 80098bc:	6003      	str	r3, [r0, #0]
 80098be:	f04f 30ff 	mov.w	r0, #4294967295
 80098c2:	bd38      	pop	{r3, r4, r5, pc}
 80098c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80098c6:	b112      	cbz	r2, 80098ce <_raise_r+0x1e>
 80098c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80098cc:	b94b      	cbnz	r3, 80098e2 <_raise_r+0x32>
 80098ce:	4620      	mov	r0, r4
 80098d0:	f000 f830 	bl	8009934 <_getpid_r>
 80098d4:	462a      	mov	r2, r5
 80098d6:	4601      	mov	r1, r0
 80098d8:	4620      	mov	r0, r4
 80098da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098de:	f000 b817 	b.w	8009910 <_kill_r>
 80098e2:	2b01      	cmp	r3, #1
 80098e4:	d00a      	beq.n	80098fc <_raise_r+0x4c>
 80098e6:	1c59      	adds	r1, r3, #1
 80098e8:	d103      	bne.n	80098f2 <_raise_r+0x42>
 80098ea:	2316      	movs	r3, #22
 80098ec:	6003      	str	r3, [r0, #0]
 80098ee:	2001      	movs	r0, #1
 80098f0:	e7e7      	b.n	80098c2 <_raise_r+0x12>
 80098f2:	2400      	movs	r4, #0
 80098f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80098f8:	4628      	mov	r0, r5
 80098fa:	4798      	blx	r3
 80098fc:	2000      	movs	r0, #0
 80098fe:	e7e0      	b.n	80098c2 <_raise_r+0x12>

08009900 <raise>:
 8009900:	4b02      	ldr	r3, [pc, #8]	; (800990c <raise+0xc>)
 8009902:	4601      	mov	r1, r0
 8009904:	6818      	ldr	r0, [r3, #0]
 8009906:	f7ff bfd3 	b.w	80098b0 <_raise_r>
 800990a:	bf00      	nop
 800990c:	20000038 	.word	0x20000038

08009910 <_kill_r>:
 8009910:	b538      	push	{r3, r4, r5, lr}
 8009912:	4d07      	ldr	r5, [pc, #28]	; (8009930 <_kill_r+0x20>)
 8009914:	2300      	movs	r3, #0
 8009916:	4604      	mov	r4, r0
 8009918:	4608      	mov	r0, r1
 800991a:	4611      	mov	r1, r2
 800991c:	602b      	str	r3, [r5, #0]
 800991e:	f7fa f839 	bl	8003994 <_kill>
 8009922:	1c43      	adds	r3, r0, #1
 8009924:	d102      	bne.n	800992c <_kill_r+0x1c>
 8009926:	682b      	ldr	r3, [r5, #0]
 8009928:	b103      	cbz	r3, 800992c <_kill_r+0x1c>
 800992a:	6023      	str	r3, [r4, #0]
 800992c:	bd38      	pop	{r3, r4, r5, pc}
 800992e:	bf00      	nop
 8009930:	200002d0 	.word	0x200002d0

08009934 <_getpid_r>:
 8009934:	f7fa b826 	b.w	8003984 <_getpid>

08009938 <__sread>:
 8009938:	b510      	push	{r4, lr}
 800993a:	460c      	mov	r4, r1
 800993c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009940:	f000 f894 	bl	8009a6c <_read_r>
 8009944:	2800      	cmp	r0, #0
 8009946:	bfab      	itete	ge
 8009948:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800994a:	89a3      	ldrhlt	r3, [r4, #12]
 800994c:	181b      	addge	r3, r3, r0
 800994e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009952:	bfac      	ite	ge
 8009954:	6563      	strge	r3, [r4, #84]	; 0x54
 8009956:	81a3      	strhlt	r3, [r4, #12]
 8009958:	bd10      	pop	{r4, pc}

0800995a <__swrite>:
 800995a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800995e:	461f      	mov	r7, r3
 8009960:	898b      	ldrh	r3, [r1, #12]
 8009962:	05db      	lsls	r3, r3, #23
 8009964:	4605      	mov	r5, r0
 8009966:	460c      	mov	r4, r1
 8009968:	4616      	mov	r6, r2
 800996a:	d505      	bpl.n	8009978 <__swrite+0x1e>
 800996c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009970:	2302      	movs	r3, #2
 8009972:	2200      	movs	r2, #0
 8009974:	f000 f868 	bl	8009a48 <_lseek_r>
 8009978:	89a3      	ldrh	r3, [r4, #12]
 800997a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800997e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009982:	81a3      	strh	r3, [r4, #12]
 8009984:	4632      	mov	r2, r6
 8009986:	463b      	mov	r3, r7
 8009988:	4628      	mov	r0, r5
 800998a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800998e:	f000 b817 	b.w	80099c0 <_write_r>

08009992 <__sseek>:
 8009992:	b510      	push	{r4, lr}
 8009994:	460c      	mov	r4, r1
 8009996:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800999a:	f000 f855 	bl	8009a48 <_lseek_r>
 800999e:	1c43      	adds	r3, r0, #1
 80099a0:	89a3      	ldrh	r3, [r4, #12]
 80099a2:	bf15      	itete	ne
 80099a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80099a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80099aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80099ae:	81a3      	strheq	r3, [r4, #12]
 80099b0:	bf18      	it	ne
 80099b2:	81a3      	strhne	r3, [r4, #12]
 80099b4:	bd10      	pop	{r4, pc}

080099b6 <__sclose>:
 80099b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099ba:	f000 b813 	b.w	80099e4 <_close_r>
	...

080099c0 <_write_r>:
 80099c0:	b538      	push	{r3, r4, r5, lr}
 80099c2:	4d07      	ldr	r5, [pc, #28]	; (80099e0 <_write_r+0x20>)
 80099c4:	4604      	mov	r4, r0
 80099c6:	4608      	mov	r0, r1
 80099c8:	4611      	mov	r1, r2
 80099ca:	2200      	movs	r2, #0
 80099cc:	602a      	str	r2, [r5, #0]
 80099ce:	461a      	mov	r2, r3
 80099d0:	f7fa f817 	bl	8003a02 <_write>
 80099d4:	1c43      	adds	r3, r0, #1
 80099d6:	d102      	bne.n	80099de <_write_r+0x1e>
 80099d8:	682b      	ldr	r3, [r5, #0]
 80099da:	b103      	cbz	r3, 80099de <_write_r+0x1e>
 80099dc:	6023      	str	r3, [r4, #0]
 80099de:	bd38      	pop	{r3, r4, r5, pc}
 80099e0:	200002d0 	.word	0x200002d0

080099e4 <_close_r>:
 80099e4:	b538      	push	{r3, r4, r5, lr}
 80099e6:	4d06      	ldr	r5, [pc, #24]	; (8009a00 <_close_r+0x1c>)
 80099e8:	2300      	movs	r3, #0
 80099ea:	4604      	mov	r4, r0
 80099ec:	4608      	mov	r0, r1
 80099ee:	602b      	str	r3, [r5, #0]
 80099f0:	f7fa f823 	bl	8003a3a <_close>
 80099f4:	1c43      	adds	r3, r0, #1
 80099f6:	d102      	bne.n	80099fe <_close_r+0x1a>
 80099f8:	682b      	ldr	r3, [r5, #0]
 80099fa:	b103      	cbz	r3, 80099fe <_close_r+0x1a>
 80099fc:	6023      	str	r3, [r4, #0]
 80099fe:	bd38      	pop	{r3, r4, r5, pc}
 8009a00:	200002d0 	.word	0x200002d0

08009a04 <_fstat_r>:
 8009a04:	b538      	push	{r3, r4, r5, lr}
 8009a06:	4d07      	ldr	r5, [pc, #28]	; (8009a24 <_fstat_r+0x20>)
 8009a08:	2300      	movs	r3, #0
 8009a0a:	4604      	mov	r4, r0
 8009a0c:	4608      	mov	r0, r1
 8009a0e:	4611      	mov	r1, r2
 8009a10:	602b      	str	r3, [r5, #0]
 8009a12:	f7fa f81e 	bl	8003a52 <_fstat>
 8009a16:	1c43      	adds	r3, r0, #1
 8009a18:	d102      	bne.n	8009a20 <_fstat_r+0x1c>
 8009a1a:	682b      	ldr	r3, [r5, #0]
 8009a1c:	b103      	cbz	r3, 8009a20 <_fstat_r+0x1c>
 8009a1e:	6023      	str	r3, [r4, #0]
 8009a20:	bd38      	pop	{r3, r4, r5, pc}
 8009a22:	bf00      	nop
 8009a24:	200002d0 	.word	0x200002d0

08009a28 <_isatty_r>:
 8009a28:	b538      	push	{r3, r4, r5, lr}
 8009a2a:	4d06      	ldr	r5, [pc, #24]	; (8009a44 <_isatty_r+0x1c>)
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	4604      	mov	r4, r0
 8009a30:	4608      	mov	r0, r1
 8009a32:	602b      	str	r3, [r5, #0]
 8009a34:	f7fa f81d 	bl	8003a72 <_isatty>
 8009a38:	1c43      	adds	r3, r0, #1
 8009a3a:	d102      	bne.n	8009a42 <_isatty_r+0x1a>
 8009a3c:	682b      	ldr	r3, [r5, #0]
 8009a3e:	b103      	cbz	r3, 8009a42 <_isatty_r+0x1a>
 8009a40:	6023      	str	r3, [r4, #0]
 8009a42:	bd38      	pop	{r3, r4, r5, pc}
 8009a44:	200002d0 	.word	0x200002d0

08009a48 <_lseek_r>:
 8009a48:	b538      	push	{r3, r4, r5, lr}
 8009a4a:	4d07      	ldr	r5, [pc, #28]	; (8009a68 <_lseek_r+0x20>)
 8009a4c:	4604      	mov	r4, r0
 8009a4e:	4608      	mov	r0, r1
 8009a50:	4611      	mov	r1, r2
 8009a52:	2200      	movs	r2, #0
 8009a54:	602a      	str	r2, [r5, #0]
 8009a56:	461a      	mov	r2, r3
 8009a58:	f7fa f816 	bl	8003a88 <_lseek>
 8009a5c:	1c43      	adds	r3, r0, #1
 8009a5e:	d102      	bne.n	8009a66 <_lseek_r+0x1e>
 8009a60:	682b      	ldr	r3, [r5, #0]
 8009a62:	b103      	cbz	r3, 8009a66 <_lseek_r+0x1e>
 8009a64:	6023      	str	r3, [r4, #0]
 8009a66:	bd38      	pop	{r3, r4, r5, pc}
 8009a68:	200002d0 	.word	0x200002d0

08009a6c <_read_r>:
 8009a6c:	b538      	push	{r3, r4, r5, lr}
 8009a6e:	4d07      	ldr	r5, [pc, #28]	; (8009a8c <_read_r+0x20>)
 8009a70:	4604      	mov	r4, r0
 8009a72:	4608      	mov	r0, r1
 8009a74:	4611      	mov	r1, r2
 8009a76:	2200      	movs	r2, #0
 8009a78:	602a      	str	r2, [r5, #0]
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	f7f9 ffa4 	bl	80039c8 <_read>
 8009a80:	1c43      	adds	r3, r0, #1
 8009a82:	d102      	bne.n	8009a8a <_read_r+0x1e>
 8009a84:	682b      	ldr	r3, [r5, #0]
 8009a86:	b103      	cbz	r3, 8009a8a <_read_r+0x1e>
 8009a88:	6023      	str	r3, [r4, #0]
 8009a8a:	bd38      	pop	{r3, r4, r5, pc}
 8009a8c:	200002d0 	.word	0x200002d0

08009a90 <_init>:
 8009a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a92:	bf00      	nop
 8009a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a96:	bc08      	pop	{r3}
 8009a98:	469e      	mov	lr, r3
 8009a9a:	4770      	bx	lr

08009a9c <_fini>:
 8009a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a9e:	bf00      	nop
 8009aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aa2:	bc08      	pop	{r3}
 8009aa4:	469e      	mov	lr, r3
 8009aa6:	4770      	bx	lr
