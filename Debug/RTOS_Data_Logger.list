
RTOS_Data_Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009728  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000524  080098b8  080098b8  000198b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ddc  08009ddc  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  08009ddc  08009ddc  00019ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009de4  08009de4  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009de4  08009de4  00019de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009de8  08009de8  00019de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08009dec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201ec  2**0
                  CONTENTS
 10 .bss          000000d0  200001ec  200001ec  000201ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002bc  200002bc  000201ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dba6  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d74  00000000  00000000  0002ddc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b70  00000000  00000000  0002fb38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ad0  00000000  00000000  000306a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021e83  00000000  00000000  00031178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eca5  00000000  00000000  00052ffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c87cf  00000000  00000000  00061ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012a46f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000418c  00000000  00000000  0012a4c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080098a0 	.word	0x080098a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	080098a0 	.word	0x080098a0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <bme68x_init>:
/* @brief This API reads the chip-id of the sensor which is the first step to
* verify the sensor and also calibrates the sensor
* As this API is the entry point, call this API before using other APIs.
*/
int8_t bme68x_init(struct bme68x_dev *dev)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    (void) bme68x_soft_reset(dev);
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f000 f8fb 	bl	80010b0 <bme68x_soft_reset>

    rslt = bme68x_get_regs(BME68X_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8000eba:	6879      	ldr	r1, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	20d0      	movs	r0, #208	; 0xd0
 8000ec2:	f000 f8b1 	bl	8001028 <bme68x_get_regs>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME68X_OK)
 8000eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d114      	bne.n	8000efc <bme68x_init+0x50>
    {
        if (dev->chip_id == BME68X_CHIP_ID)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b61      	cmp	r3, #97	; 0x61
 8000ed8:	d10e      	bne.n	8000ef8 <bme68x_init+0x4c>
        {
            /* Read Variant ID */
            rslt = read_variant_id(dev);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f001 ffe4 	bl	8002ea8 <read_variant_id>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	73fb      	strb	r3, [r7, #15]

            if (rslt == BME68X_OK)
 8000ee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d107      	bne.n	8000efc <bme68x_init+0x50>
            {
                /* Get the Calibration data */
                rslt = get_calib_data(dev);
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f001 fed7 	bl	8002ca0 <get_calib_data>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	73fb      	strb	r3, [r7, #15]
 8000ef6:	e001      	b.n	8000efc <bme68x_init+0x50>
            }
        }
        else
        {
            rslt = BME68X_E_DEV_NOT_FOUND;
 8000ef8:	23fd      	movs	r3, #253	; 0xfd
 8000efa:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8000efc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3710      	adds	r7, #16
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <bme68x_set_regs>:

/*
 * @brief This API writes the given data to the register address of the sensor
 */
int8_t bme68x_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 8000f08:	b5b0      	push	{r4, r5, r7, lr}
 8000f0a:	b08a      	sub	sp, #40	; 0x28
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
 8000f14:	603b      	str	r3, [r7, #0]
    int8_t rslt;

    /* Length of the temporary buffer is 2*(length of register)*/
    uint8_t tmp_buff[BME68X_LEN_INTERLEAVE_BUFF] = { 0 };
 8000f16:	2300      	movs	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	f107 0314 	add.w	r3, r7, #20
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
 8000f26:	60da      	str	r2, [r3, #12]
    uint16_t index;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000f28:	6838      	ldr	r0, [r7, #0]
 8000f2a:	f001 fc93 	bl	8002854 <null_ptr_check>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if ((rslt == BME68X_OK) && reg_addr && reg_data)
 8000f34:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d16c      	bne.n	8001016 <bme68x_set_regs+0x10e>
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d069      	beq.n	8001016 <bme68x_set_regs+0x10e>
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d066      	beq.n	8001016 <bme68x_set_regs+0x10e>
    {
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d05d      	beq.n	800100a <bme68x_set_regs+0x102>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2b0a      	cmp	r3, #10
 8000f52:	d85a      	bhi.n	800100a <bme68x_set_regs+0x102>
        {
            /* Interleave the 2 arrays */
            for (index = 0; index < len; index++)
 8000f54:	2300      	movs	r3, #0
 8000f56:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000f58:	e034      	b.n	8000fc4 <bme68x_set_regs+0xbc>
            {
                if (dev->intf == BME68X_SPI_INTF)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	7b1b      	ldrb	r3, [r3, #12]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d118      	bne.n	8000f94 <bme68x_set_regs+0x8c>
                {
                    /* Set the memory page */
                    rslt = set_mem_page(reg_addr[index], dev);
 8000f62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f64:	68fa      	ldr	r2, [r7, #12]
 8000f66:	4413      	add	r3, r2
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	6839      	ldr	r1, [r7, #0]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f001 fbb0 	bl	80026d2 <set_mem_page>
 8000f72:	4603      	mov	r3, r0
 8000f74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8000f78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	781a      	ldrb	r2, [r3, #0]
 8000f80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000f88:	b2d2      	uxtb	r2, r2
 8000f8a:	3328      	adds	r3, #40	; 0x28
 8000f8c:	443b      	add	r3, r7
 8000f8e:	f803 2c18 	strb.w	r2, [r3, #-24]
 8000f92:	e009      	b.n	8000fa8 <bme68x_set_regs+0xa0>
                }
                else
                {
                    tmp_buff[(2 * index)] = reg_addr[index];
 8000f94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	441a      	add	r2, r3
 8000f9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	7812      	ldrb	r2, [r2, #0]
 8000fa0:	3328      	adds	r3, #40	; 0x28
 8000fa2:	443b      	add	r3, r7
 8000fa4:	f803 2c18 	strb.w	r2, [r3, #-24]
                }

                tmp_buff[(2 * index) + 1] = reg_data[index];
 8000fa8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	441a      	add	r2, r3
 8000fae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	7812      	ldrb	r2, [r2, #0]
 8000fb6:	3328      	adds	r3, #40	; 0x28
 8000fb8:	443b      	add	r3, r7
 8000fba:	f803 2c18 	strb.w	r2, [r3, #-24]
            for (index = 0; index < len; index++)
 8000fbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000fc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d8c6      	bhi.n	8000f5a <bme68x_set_regs+0x52>
            }

            /* Write the interleaved array */
            if (rslt == BME68X_OK)
 8000fcc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d11e      	bne.n	8001012 <bme68x_set_regs+0x10a>
            {
                dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1], (2 * len) - 1, dev->intf_ptr);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8000fd8:	7c38      	ldrb	r0, [r7, #16]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	1e5a      	subs	r2, r3, #1
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685d      	ldr	r5, [r3, #4]
 8000fe4:	f107 0310 	add.w	r3, r7, #16
 8000fe8:	1c59      	adds	r1, r3, #1
 8000fea:	462b      	mov	r3, r5
 8000fec:	47a0      	blx	r4
 8000fee:	4603      	mov	r3, r0
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
                if (dev->intf_rslt != 0)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d007      	beq.n	8001012 <bme68x_set_regs+0x10a>
                {
                    rslt = BME68X_E_COM_FAIL;
 8001002:	23fe      	movs	r3, #254	; 0xfe
 8001004:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if (rslt == BME68X_OK)
 8001008:	e003      	b.n	8001012 <bme68x_set_regs+0x10a>
                }
            }
        }
        else
        {
            rslt = BME68X_E_INVALID_LENGTH;
 800100a:	23fc      	movs	r3, #252	; 0xfc
 800100c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8001010:	e004      	b.n	800101c <bme68x_set_regs+0x114>
            if (rslt == BME68X_OK)
 8001012:	bf00      	nop
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8001014:	e002      	b.n	800101c <bme68x_set_regs+0x114>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8001016:	23ff      	movs	r3, #255	; 0xff
 8001018:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 800101c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001020:	4618      	mov	r0, r3
 8001022:	3728      	adds	r7, #40	; 0x28
 8001024:	46bd      	mov	sp, r7
 8001026:	bdb0      	pop	{r4, r5, r7, pc}

08001028 <bme68x_get_regs>:

/*
 * @brief This API reads the data from the given register address of sensor.
 */
int8_t bme68x_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b087      	sub	sp, #28
 800102c:	af00      	add	r7, sp, #0
 800102e:	60b9      	str	r1, [r7, #8]
 8001030:	607a      	str	r2, [r7, #4]
 8001032:	603b      	str	r3, [r7, #0]
 8001034:	4603      	mov	r3, r0
 8001036:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001038:	6838      	ldr	r0, [r7, #0]
 800103a:	f001 fc0b 	bl	8002854 <null_ptr_check>
 800103e:	4603      	mov	r3, r0
 8001040:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BME68X_OK) && reg_data)
 8001042:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d12a      	bne.n	80010a0 <bme68x_get_regs+0x78>
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d027      	beq.n	80010a0 <bme68x_get_regs+0x78>
    {
        if (dev->intf == BME68X_SPI_INTF)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	7b1b      	ldrb	r3, [r3, #12]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d10e      	bne.n	8001076 <bme68x_get_regs+0x4e>
        {
            /* Set the memory page */
            rslt = set_mem_page(reg_addr, dev);
 8001058:	7bfb      	ldrb	r3, [r7, #15]
 800105a:	6839      	ldr	r1, [r7, #0]
 800105c:	4618      	mov	r0, r3
 800105e:	f001 fb38 	bl	80026d2 <set_mem_page>
 8001062:	4603      	mov	r3, r0
 8001064:	75fb      	strb	r3, [r7, #23]
            if (rslt == BME68X_OK)
 8001066:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d103      	bne.n	8001076 <bme68x_get_regs+0x4e>
            {
                reg_addr = reg_addr | BME68X_SPI_RD_MSK;
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001074:	73fb      	strb	r3, [r7, #15]
            }
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	7bf8      	ldrb	r0, [r7, #15]
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	68b9      	ldr	r1, [r7, #8]
 8001084:	47a0      	blx	r4
 8001086:	4603      	mov	r3, r0
 8001088:	461a      	mov	r2, r3
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (dev->intf_rslt != 0)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 8001096:	2b00      	cmp	r3, #0
 8001098:	d004      	beq.n	80010a4 <bme68x_get_regs+0x7c>
        {
            rslt = BME68X_E_COM_FAIL;
 800109a:	23fe      	movs	r3, #254	; 0xfe
 800109c:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != 0)
 800109e:	e001      	b.n	80010a4 <bme68x_get_regs+0x7c>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80010a0:	23ff      	movs	r3, #255	; 0xff
 80010a2:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80010a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	371c      	adds	r7, #28
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd90      	pop	{r4, r7, pc}

080010b0 <bme68x_soft_reset>:

/*
 * @brief This API soft-resets the sensor.
 */
int8_t bme68x_soft_reset(struct bme68x_dev *dev)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME68X_REG_SOFT_RESET;
 80010b8:	23e0      	movs	r3, #224	; 0xe0
 80010ba:	73bb      	strb	r3, [r7, #14]

    /* 0xb6 is the soft reset command */
    uint8_t soft_rst_cmd = BME68X_SOFT_RESET_CMD;
 80010bc:	23b6      	movs	r3, #182	; 0xb6
 80010be:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f001 fbc7 	bl	8002854 <null_ptr_check>
 80010c6:	4603      	mov	r3, r0
 80010c8:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 80010ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d12b      	bne.n	800112a <bme68x_soft_reset+0x7a>
    {
        if (dev->intf == BME68X_SPI_INTF)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	7b1b      	ldrb	r3, [r3, #12]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d104      	bne.n	80010e4 <bme68x_soft_reset+0x34>
        {
            rslt = get_mem_page(dev);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f001 fb5e 	bl	800279c <get_mem_page>
 80010e0:	4603      	mov	r3, r0
 80010e2:	73fb      	strb	r3, [r7, #15]
        }

        /* Reset the device */
        if (rslt == BME68X_OK)
 80010e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d11e      	bne.n	800112a <bme68x_soft_reset+0x7a>
        {
            rslt = bme68x_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80010ec:	f107 010d 	add.w	r1, r7, #13
 80010f0:	f107 000e 	add.w	r0, r7, #14
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2201      	movs	r2, #1
 80010f8:	f7ff ff06 	bl	8000f08 <bme68x_set_regs>
 80010fc:	4603      	mov	r3, r0
 80010fe:	73fb      	strb	r3, [r7, #15]

            if (rslt == BME68X_OK)
 8001100:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d110      	bne.n	800112a <bme68x_soft_reset+0x7a>
            {
                /* Wait for 5ms */
                dev->delay_us(BME68X_PERIOD_RESET, dev->intf_ptr);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	6852      	ldr	r2, [r2, #4]
 8001110:	4611      	mov	r1, r2
 8001112:	f242 7010 	movw	r0, #10000	; 0x2710
 8001116:	4798      	blx	r3

                /* After reset get the memory page */
                if (dev->intf == BME68X_SPI_INTF)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	7b1b      	ldrb	r3, [r3, #12]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d104      	bne.n	800112a <bme68x_soft_reset+0x7a>
                {
                    rslt = get_mem_page(dev);
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f001 fb3b 	bl	800279c <get_mem_page>
 8001126:	4603      	mov	r3, r0
 8001128:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 800112a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <bme68x_set_conf>:

/*
 * @brief This API is used to set the oversampling, filter and odr configuration
 */
int8_t bme68x_set_conf(struct bme68x_conf *conf, struct bme68x_dev *dev)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b088      	sub	sp, #32
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t odr20 = 0, odr3 = 1;
 8001142:	2300      	movs	r3, #0
 8001144:	77bb      	strb	r3, [r7, #30]
 8001146:	2301      	movs	r3, #1
 8001148:	777b      	strb	r3, [r7, #29]
    uint8_t current_op_mode;

    /* Register data starting from BME68X_REG_CTRL_GAS_1(0x71) up to BME68X_REG_CONFIG(0x75) */
    uint8_t reg_array[BME68X_LEN_CONFIG] = { 0x71, 0x72, 0x73, 0x74, 0x75 };
 800114a:	4a7c      	ldr	r2, [pc, #496]	; (800133c <bme68x_set_conf+0x204>)
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001154:	6018      	str	r0, [r3, #0]
 8001156:	3304      	adds	r3, #4
 8001158:	7019      	strb	r1, [r3, #0]
    uint8_t data_array[BME68X_LEN_CONFIG] = { 0 };
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	2300      	movs	r3, #0
 8001160:	743b      	strb	r3, [r7, #16]

    rslt = bme68x_get_op_mode(&current_op_mode, dev);
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	6839      	ldr	r1, [r7, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f000 f94a 	bl	8001402 <bme68x_get_op_mode>
 800116e:	4603      	mov	r3, r0
 8001170:	77fb      	strb	r3, [r7, #31]
    if (rslt == BME68X_OK)
 8001172:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d105      	bne.n	8001186 <bme68x_set_conf+0x4e>
    {
        /* Configure only in the sleep mode */
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 800117a:	6839      	ldr	r1, [r7, #0]
 800117c:	2000      	movs	r0, #0
 800117e:	f000 f8df 	bl	8001340 <bme68x_set_op_mode>
 8001182:	4603      	mov	r3, r0
 8001184:	77fb      	strb	r3, [r7, #31]
    }

    if (conf == NULL)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d102      	bne.n	8001192 <bme68x_set_conf+0x5a>
    {
        rslt = BME68X_E_NULL_PTR;
 800118c:	23ff      	movs	r3, #255	; 0xff
 800118e:	77fb      	strb	r3, [r7, #31]
 8001190:	e0b2      	b.n	80012f8 <bme68x_set_conf+0x1c0>
    }
    else if (rslt == BME68X_OK)
 8001192:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001196:	2b00      	cmp	r3, #0
 8001198:	f040 80ae 	bne.w	80012f8 <bme68x_set_conf+0x1c0>
    {
        /* Read the whole configuration and write it back once later */
        rslt = bme68x_get_regs(reg_array[0], data_array, BME68X_LEN_CONFIG, dev);
 800119c:	7d38      	ldrb	r0, [r7, #20]
 800119e:	f107 010c 	add.w	r1, r7, #12
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	2205      	movs	r2, #5
 80011a6:	f7ff ff3f 	bl	8001028 <bme68x_get_regs>
 80011aa:	4603      	mov	r3, r0
 80011ac:	77fb      	strb	r3, [r7, #31]
        dev->info_msg = BME68X_OK;
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        if (rslt == BME68X_OK)
 80011b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d108      	bne.n	80011d0 <bme68x_set_conf+0x98>
        {
            rslt = boundary_check(&conf->filter, BME68X_FILTER_SIZE_127, dev);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	3303      	adds	r3, #3
 80011c2:	683a      	ldr	r2, [r7, #0]
 80011c4:	2107      	movs	r1, #7
 80011c6:	4618      	mov	r0, r3
 80011c8:	f001 fb17 	bl	80027fa <boundary_check>
 80011cc:	4603      	mov	r3, r0
 80011ce:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 80011d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d108      	bne.n	80011ea <bme68x_set_conf+0xb2>
        {
            rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3301      	adds	r3, #1
 80011dc:	683a      	ldr	r2, [r7, #0]
 80011de:	2105      	movs	r1, #5
 80011e0:	4618      	mov	r0, r3
 80011e2:	f001 fb0a 	bl	80027fa <boundary_check>
 80011e6:	4603      	mov	r3, r0
 80011e8:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 80011ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d108      	bne.n	8001204 <bme68x_set_conf+0xcc>
        {
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3302      	adds	r3, #2
 80011f6:	683a      	ldr	r2, [r7, #0]
 80011f8:	2105      	movs	r1, #5
 80011fa:	4618      	mov	r0, r3
 80011fc:	f001 fafd 	bl	80027fa <boundary_check>
 8001200:	4603      	mov	r3, r0
 8001202:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8001204:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d107      	bne.n	800121c <bme68x_set_conf+0xe4>
        {
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	683a      	ldr	r2, [r7, #0]
 8001210:	2105      	movs	r1, #5
 8001212:	4618      	mov	r0, r3
 8001214:	f001 faf1 	bl	80027fa <boundary_check>
 8001218:	4603      	mov	r3, r0
 800121a:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 800121c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d108      	bne.n	8001236 <bme68x_set_conf+0xfe>
        {
            rslt = boundary_check(&conf->odr, BME68X_ODR_NONE, dev);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3304      	adds	r3, #4
 8001228:	683a      	ldr	r2, [r7, #0]
 800122a:	2108      	movs	r1, #8
 800122c:	4618      	mov	r0, r3
 800122e:	f001 fae4 	bl	80027fa <boundary_check>
 8001232:	4603      	mov	r3, r0
 8001234:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8001236:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d15c      	bne.n	80012f8 <bme68x_set_conf+0x1c0>
        {
            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_FILTER, conf->filter);
 800123e:	7c3b      	ldrb	r3, [r7, #16]
 8001240:	b25b      	sxtb	r3, r3
 8001242:	f023 031c 	bic.w	r3, r3, #28
 8001246:	b25a      	sxtb	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	78db      	ldrb	r3, [r3, #3]
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	b25b      	sxtb	r3, r3
 8001250:	f003 031c 	and.w	r3, r3, #28
 8001254:	b25b      	sxtb	r3, r3
 8001256:	4313      	orrs	r3, r2
 8001258:	b25b      	sxtb	r3, r3
 800125a:	b2db      	uxtb	r3, r3
 800125c:	743b      	strb	r3, [r7, #16]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OST, conf->os_temp);
 800125e:	7bfb      	ldrb	r3, [r7, #15]
 8001260:	b25b      	sxtb	r3, r3
 8001262:	f003 031f 	and.w	r3, r3, #31
 8001266:	b25a      	sxtb	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	785b      	ldrb	r3, [r3, #1]
 800126c:	015b      	lsls	r3, r3, #5
 800126e:	b25b      	sxtb	r3, r3
 8001270:	4313      	orrs	r3, r2
 8001272:	b25b      	sxtb	r3, r3
 8001274:	b2db      	uxtb	r3, r3
 8001276:	73fb      	strb	r3, [r7, #15]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OSP, conf->os_pres);
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	b25b      	sxtb	r3, r3
 800127c:	f023 031c 	bic.w	r3, r3, #28
 8001280:	b25a      	sxtb	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	789b      	ldrb	r3, [r3, #2]
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	b25b      	sxtb	r3, r3
 800128a:	f003 031c 	and.w	r3, r3, #28
 800128e:	b25b      	sxtb	r3, r3
 8001290:	4313      	orrs	r3, r2
 8001292:	b25b      	sxtb	r3, r3
 8001294:	b2db      	uxtb	r3, r3
 8001296:	73fb      	strb	r3, [r7, #15]
            data_array[1] = BME68X_SET_BITS_POS_0(data_array[1], BME68X_OSH, conf->os_hum);
 8001298:	7b7b      	ldrb	r3, [r7, #13]
 800129a:	b25b      	sxtb	r3, r3
 800129c:	f023 0307 	bic.w	r3, r3, #7
 80012a0:	b25a      	sxtb	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	b25b      	sxtb	r3, r3
 80012a8:	f003 0307 	and.w	r3, r3, #7
 80012ac:	b25b      	sxtb	r3, r3
 80012ae:	4313      	orrs	r3, r2
 80012b0:	b25b      	sxtb	r3, r3
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	737b      	strb	r3, [r7, #13]
            if (conf->odr != BME68X_ODR_NONE)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	791b      	ldrb	r3, [r3, #4]
 80012ba:	2b08      	cmp	r3, #8
 80012bc:	d004      	beq.n	80012c8 <bme68x_set_conf+0x190>
            {
                odr20 = conf->odr;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	791b      	ldrb	r3, [r3, #4]
 80012c2:	77bb      	strb	r3, [r7, #30]
                odr3 = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	777b      	strb	r3, [r7, #29]
            }

            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_ODR20, odr20);
 80012c8:	7c3b      	ldrb	r3, [r7, #16]
 80012ca:	b25b      	sxtb	r3, r3
 80012cc:	f003 031f 	and.w	r3, r3, #31
 80012d0:	b25a      	sxtb	r2, r3
 80012d2:	7fbb      	ldrb	r3, [r7, #30]
 80012d4:	015b      	lsls	r3, r3, #5
 80012d6:	b25b      	sxtb	r3, r3
 80012d8:	4313      	orrs	r3, r2
 80012da:	b25b      	sxtb	r3, r3
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	743b      	strb	r3, [r7, #16]
            data_array[0] = BME68X_SET_BITS(data_array[0], BME68X_ODR3, odr3);
 80012e0:	7b3b      	ldrb	r3, [r7, #12]
 80012e2:	b25b      	sxtb	r3, r3
 80012e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80012e8:	b25a      	sxtb	r2, r3
 80012ea:	7f7b      	ldrb	r3, [r7, #29]
 80012ec:	01db      	lsls	r3, r3, #7
 80012ee:	b25b      	sxtb	r3, r3
 80012f0:	4313      	orrs	r3, r2
 80012f2:	b25b      	sxtb	r3, r3
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	733b      	strb	r3, [r7, #12]
        }
    }

    if (rslt == BME68X_OK)
 80012f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d109      	bne.n	8001314 <bme68x_set_conf+0x1dc>
    {
        rslt = bme68x_set_regs(reg_array, data_array, BME68X_LEN_CONFIG, dev);
 8001300:	f107 010c 	add.w	r1, r7, #12
 8001304:	f107 0014 	add.w	r0, r7, #20
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	2205      	movs	r2, #5
 800130c:	f7ff fdfc 	bl	8000f08 <bme68x_set_regs>
 8001310:	4603      	mov	r3, r0
 8001312:	77fb      	strb	r3, [r7, #31]
    }

    if ((current_op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 8001314:	7f3b      	ldrb	r3, [r7, #28]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d00a      	beq.n	8001330 <bme68x_set_conf+0x1f8>
 800131a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d106      	bne.n	8001330 <bme68x_set_conf+0x1f8>
    {
        rslt = bme68x_set_op_mode(current_op_mode, dev);
 8001322:	7f3b      	ldrb	r3, [r7, #28]
 8001324:	6839      	ldr	r1, [r7, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f000 f80a 	bl	8001340 <bme68x_set_op_mode>
 800132c:	4603      	mov	r3, r0
 800132e:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8001330:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001334:	4618      	mov	r0, r3
 8001336:	3720      	adds	r7, #32
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	080098b8 	.word	0x080098b8

08001340 <bme68x_set_op_mode>:

/*
 * @brief This API is used to set the operation mode of the sensor
 */
int8_t bme68x_set_op_mode(const uint8_t op_mode, struct bme68x_dev *dev)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	6039      	str	r1, [r7, #0]
 800134a:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t tmp_pow_mode;
    uint8_t pow_mode = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	73bb      	strb	r3, [r7, #14]
    uint8_t reg_addr = BME68X_REG_CTRL_MEAS;
 8001350:	2374      	movs	r3, #116	; 0x74
 8001352:	733b      	strb	r3, [r7, #12]

    /* Call until in sleep */
    do
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &tmp_pow_mode, 1, dev);
 8001354:	f107 010d 	add.w	r1, r7, #13
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	2201      	movs	r2, #1
 800135c:	2074      	movs	r0, #116	; 0x74
 800135e:	f7ff fe63 	bl	8001028 <bme68x_get_regs>
 8001362:	4603      	mov	r3, r0
 8001364:	73fb      	strb	r3, [r7, #15]
        if (rslt == BME68X_OK)
 8001366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d11d      	bne.n	80013aa <bme68x_set_op_mode+0x6a>
        {
            /* Put to sleep before changing mode */
            pow_mode = (tmp_pow_mode & BME68X_MODE_MSK);
 800136e:	7b7b      	ldrb	r3, [r7, #13]
 8001370:	f003 0303 	and.w	r3, r3, #3
 8001374:	73bb      	strb	r3, [r7, #14]
            if (pow_mode != BME68X_SLEEP_MODE)
 8001376:	7bbb      	ldrb	r3, [r7, #14]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d016      	beq.n	80013aa <bme68x_set_op_mode+0x6a>
            {
                tmp_pow_mode &= ~BME68X_MODE_MSK; /* Set to sleep */
 800137c:	7b7b      	ldrb	r3, [r7, #13]
 800137e:	f023 0303 	bic.w	r3, r3, #3
 8001382:	b2db      	uxtb	r3, r3
 8001384:	737b      	strb	r3, [r7, #13]
                rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8001386:	f107 010d 	add.w	r1, r7, #13
 800138a:	f107 000c 	add.w	r0, r7, #12
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	2201      	movs	r2, #1
 8001392:	f7ff fdb9 	bl	8000f08 <bme68x_set_regs>
 8001396:	4603      	mov	r3, r0
 8001398:	73fb      	strb	r3, [r7, #15]
                dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800139e:	683a      	ldr	r2, [r7, #0]
 80013a0:	6852      	ldr	r2, [r2, #4]
 80013a2:	4611      	mov	r1, r2
 80013a4:	f242 7010 	movw	r0, #10000	; 0x2710
 80013a8:	4798      	blx	r3
            }
        }
    } while ((pow_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK));
 80013aa:	7bbb      	ldrb	r3, [r7, #14]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <bme68x_set_op_mode+0x78>
 80013b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d0cd      	beq.n	8001354 <bme68x_set_op_mode+0x14>

    /* Already in sleep */
    if ((op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d01b      	beq.n	80013f6 <bme68x_set_op_mode+0xb6>
 80013be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d117      	bne.n	80013f6 <bme68x_set_op_mode+0xb6>
    {
        tmp_pow_mode = (tmp_pow_mode & ~BME68X_MODE_MSK) | (op_mode & BME68X_MODE_MSK);
 80013c6:	7b7b      	ldrb	r3, [r7, #13]
 80013c8:	b25b      	sxtb	r3, r3
 80013ca:	f023 0303 	bic.w	r3, r3, #3
 80013ce:	b25a      	sxtb	r2, r3
 80013d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d4:	f003 0303 	and.w	r3, r3, #3
 80013d8:	b25b      	sxtb	r3, r3
 80013da:	4313      	orrs	r3, r2
 80013dc:	b25b      	sxtb	r3, r3
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	737b      	strb	r3, [r7, #13]
        rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80013e2:	f107 010d 	add.w	r1, r7, #13
 80013e6:	f107 000c 	add.w	r0, r7, #12
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	2201      	movs	r2, #1
 80013ee:	f7ff fd8b 	bl	8000f08 <bme68x_set_regs>
 80013f2:	4603      	mov	r3, r0
 80013f4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80013f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <bme68x_get_op_mode>:

/*
 * @brief This API is used to get the operation mode of the sensor.
 */
int8_t bme68x_get_op_mode(uint8_t *op_mode, struct bme68x_dev *dev)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b084      	sub	sp, #16
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
 800140a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t mode;

    if (op_mode)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d00f      	beq.n	8001432 <bme68x_get_op_mode+0x30>
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &mode, 1, dev);
 8001412:	f107 010e 	add.w	r1, r7, #14
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	2201      	movs	r2, #1
 800141a:	2074      	movs	r0, #116	; 0x74
 800141c:	f7ff fe04 	bl	8001028 <bme68x_get_regs>
 8001420:	4603      	mov	r3, r0
 8001422:	73fb      	strb	r3, [r7, #15]

        /* Masking the other register bit info*/
        *op_mode = mode & BME68X_MODE_MSK;
 8001424:	7bbb      	ldrb	r3, [r7, #14]
 8001426:	f003 0303 	and.w	r3, r3, #3
 800142a:	b2da      	uxtb	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	701a      	strb	r2, [r3, #0]
 8001430:	e001      	b.n	8001436 <bme68x_get_op_mode+0x34>
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8001432:	23ff      	movs	r3, #255	; 0xff
 8001434:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001436:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800143a:	4618      	mov	r0, r3
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <bme68x_get_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme68x_data
 * structure instance passed by the user.
 */
int8_t bme68x_get_data(uint8_t op_mode, struct bme68x_data *data, uint8_t *n_data, struct bme68x_dev *dev)
{
 8001442:	b5b0      	push	{r4, r5, r7, lr}
 8001444:	b09a      	sub	sp, #104	; 0x68
 8001446:	af00      	add	r7, sp, #0
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
 800144c:	603b      	str	r3, [r7, #0]
 800144e:	4603      	mov	r3, r0
 8001450:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t i = 0, j = 0, new_fields = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8001458:	2300      	movs	r3, #0
 800145a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 800145e:	2300      	movs	r3, #0
 8001460:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
    struct bme68x_data *field_ptr[3] = { 0 };
 8001464:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
    struct bme68x_data field_data[3] = { { 0 } };
 8001470:	f107 0310 	add.w	r3, r7, #16
 8001474:	2248      	movs	r2, #72	; 0x48
 8001476:	2100      	movs	r1, #0
 8001478:	4618      	mov	r0, r3
 800147a:	f005 fb11 	bl	8006aa0 <memset>

    field_ptr[0] = &field_data[0];
 800147e:	f107 0310 	add.w	r3, r7, #16
 8001482:	65bb      	str	r3, [r7, #88]	; 0x58
    field_ptr[1] = &field_data[1];
 8001484:	f107 0310 	add.w	r3, r7, #16
 8001488:	3318      	adds	r3, #24
 800148a:	65fb      	str	r3, [r7, #92]	; 0x5c
    field_ptr[2] = &field_data[2];
 800148c:	f107 0310 	add.w	r3, r7, #16
 8001490:	3330      	adds	r3, #48	; 0x30
 8001492:	663b      	str	r3, [r7, #96]	; 0x60

    rslt = null_ptr_check(dev);
 8001494:	6838      	ldr	r0, [r7, #0]
 8001496:	f001 f9dd 	bl	8002854 <null_ptr_check>
 800149a:	4603      	mov	r3, r0
 800149c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if ((rslt == BME68X_OK) && (data != NULL))
 80014a0:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f040 80c1 	bne.w	800162c <bme68x_get_data+0x1ea>
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f000 80bd 	beq.w	800162c <bme68x_get_data+0x1ea>
    {
        /* Reading the sensor data in forced mode only */
        if (op_mode == BME68X_FORCED_MODE)
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d11c      	bne.n	80014f2 <bme68x_get_data+0xb0>
        {
            rslt = read_field_data(0, data, dev);
 80014b8:	683a      	ldr	r2, [r7, #0]
 80014ba:	68b9      	ldr	r1, [r7, #8]
 80014bc:	2000      	movs	r0, #0
 80014be:	f000 fd8c 	bl	8001fda <read_field_data>
 80014c2:	4603      	mov	r3, r0
 80014c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            if (rslt == BME68X_OK)
 80014c8:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	f040 80a1 	bne.w	8001614 <bme68x_get_data+0x1d2>
            {
                if (data->status & BME68X_NEW_DATA_MSK)
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	b25b      	sxtb	r3, r3
 80014d8:	2b00      	cmp	r3, #0
 80014da:	da03      	bge.n	80014e4 <bme68x_get_data+0xa2>
                {
                    new_fields = 1;
 80014dc:	2301      	movs	r3, #1
 80014de:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 80014e2:	e097      	b.n	8001614 <bme68x_get_data+0x1d2>
                }
                else
                {
                    new_fields = 0;
 80014e4:	2300      	movs	r3, #0
 80014e6:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    rslt = BME68X_W_NO_NEW_DATA;
 80014ea:	2302      	movs	r3, #2
 80014ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80014f0:	e090      	b.n	8001614 <bme68x_get_data+0x1d2>
                }
            }
        }
        else if ((op_mode == BME68X_PARALLEL_MODE) || (op_mode == BME68X_SEQUENTIAL_MODE))
 80014f2:	7bfb      	ldrb	r3, [r7, #15]
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d003      	beq.n	8001500 <bme68x_get_data+0xbe>
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	f040 8087 	bne.w	800160e <bme68x_get_data+0x1cc>
        {
            /* Read the 3 fields and count the number of new data fields */
            rslt = read_all_field_data(field_ptr, dev);
 8001500:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001504:	6839      	ldr	r1, [r7, #0]
 8001506:	4618      	mov	r0, r3
 8001508:	f000 feb1 	bl	800226e <read_all_field_data>
 800150c:	4603      	mov	r3, r0
 800150e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

            new_fields = 0;
 8001512:	2300      	movs	r3, #0
 8001514:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 8001518:	2300      	movs	r3, #0
 800151a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800151e:	e014      	b.n	800154a <bme68x_get_data+0x108>
            {
                if (field_ptr[i]->status & BME68X_NEW_DATA_MSK)
 8001520:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	3368      	adds	r3, #104	; 0x68
 8001528:	443b      	add	r3, r7
 800152a:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	b25b      	sxtb	r3, r3
 8001532:	2b00      	cmp	r3, #0
 8001534:	da04      	bge.n	8001540 <bme68x_get_data+0xfe>
                {
                    new_fields++;
 8001536:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800153a:	3301      	adds	r3, #1
 800153c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 8001540:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001544:	3301      	adds	r3, #1
 8001546:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800154a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800154e:	2b02      	cmp	r3, #2
 8001550:	d803      	bhi.n	800155a <bme68x_get_data+0x118>
 8001552:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8001556:	2b00      	cmp	r3, #0
 8001558:	d0e2      	beq.n	8001520 <bme68x_get_data+0xde>
                }
            }

            /* Sort the sensor data in parallel & sequential modes*/
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
 800155a:	2300      	movs	r3, #0
 800155c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8001560:	e01c      	b.n	800159c <bme68x_get_data+0x15a>
            {
                for (j = i + 1; j < 3; j++)
 8001562:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001566:	3301      	adds	r3, #1
 8001568:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 800156c:	e00d      	b.n	800158a <bme68x_get_data+0x148>
                {
                    sort_sensor_data(i, j, field_ptr);
 800156e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001572:	f897 1065 	ldrb.w	r1, [r7, #101]	; 0x65
 8001576:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800157a:	4618      	mov	r0, r3
 800157c:	f001 fb16 	bl	8002bac <sort_sensor_data>
                for (j = i + 1; j < 3; j++)
 8001580:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001584:	3301      	adds	r3, #1
 8001586:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 800158a:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800158e:	2b02      	cmp	r3, #2
 8001590:	d9ed      	bls.n	800156e <bme68x_get_data+0x12c>
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
 8001592:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001596:	3301      	adds	r3, #1
 8001598:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800159c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d803      	bhi.n	80015ac <bme68x_get_data+0x16a>
 80015a4:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d0da      	beq.n	8001562 <bme68x_get_data+0x120>
                }
            }

            /* Copy the sorted data */
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 80015ac:	2300      	movs	r3, #0
 80015ae:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80015b2:	e01c      	b.n	80015ee <bme68x_get_data+0x1ac>
            {
                data[i] = *field_ptr[i];
 80015b4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	3368      	adds	r3, #104	; 0x68
 80015bc:	443b      	add	r3, r7
 80015be:	f853 1c10 	ldr.w	r1, [r3, #-16]
 80015c2:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 80015c6:	4613      	mov	r3, r2
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	4413      	add	r3, r2
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	461a      	mov	r2, r3
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	4413      	add	r3, r2
 80015d4:	461c      	mov	r4, r3
 80015d6:	460d      	mov	r5, r1
 80015d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015dc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80015e0:	e884 0003 	stmia.w	r4, {r0, r1}
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 80015e4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80015e8:	3301      	adds	r3, #1
 80015ea:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80015ee:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d803      	bhi.n	80015fe <bme68x_get_data+0x1bc>
 80015f6:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d0da      	beq.n	80015b4 <bme68x_get_data+0x172>
            }

            if (new_fields == 0)
 80015fe:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001602:	2b00      	cmp	r3, #0
 8001604:	d106      	bne.n	8001614 <bme68x_get_data+0x1d2>
            {
                rslt = BME68X_W_NO_NEW_DATA;
 8001606:	2302      	movs	r3, #2
 8001608:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            if (new_fields == 0)
 800160c:	e002      	b.n	8001614 <bme68x_get_data+0x1d2>
            }
        }
        else
        {
            rslt = BME68X_W_DEFINE_OP_MODE;
 800160e:	2301      	movs	r3, #1
 8001610:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        }

        if (n_data == NULL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d103      	bne.n	8001622 <bme68x_get_data+0x1e0>
        {
            rslt = BME68X_E_NULL_PTR;
 800161a:	23ff      	movs	r3, #255	; 0xff
 800161c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        if (n_data == NULL)
 8001620:	e007      	b.n	8001632 <bme68x_get_data+0x1f0>
        }
        else
        {
            *n_data = new_fields;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8001628:	701a      	strb	r2, [r3, #0]
        if (n_data == NULL)
 800162a:	e002      	b.n	8001632 <bme68x_get_data+0x1f0>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 800162c:	23ff      	movs	r3, #255	; 0xff
 800162e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    }

    return rslt;
 8001632:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 8001636:	4618      	mov	r0, r3
 8001638:	3768      	adds	r7, #104	; 0x68
 800163a:	46bd      	mov	sp, r7
 800163c:	bdb0      	pop	{r4, r5, r7, pc}

0800163e <bme68x_set_heatr_conf>:

/*
 * @brief This API is used to set the gas configuration of the sensor.
 */
int8_t bme68x_set_heatr_conf(uint8_t op_mode, const struct bme68x_heatr_conf *conf, struct bme68x_dev *dev)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b088      	sub	sp, #32
 8001642:	af00      	add	r7, sp, #0
 8001644:	4603      	mov	r3, r0
 8001646:	60b9      	str	r1, [r7, #8]
 8001648:	607a      	str	r2, [r7, #4]
 800164a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t nb_conv = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	773b      	strb	r3, [r7, #28]
    uint8_t hctrl, run_gas = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	777b      	strb	r3, [r7, #29]
    uint8_t ctrl_gas_data[2];
    uint8_t ctrl_gas_addr[2] = { BME68X_REG_CTRL_GAS_0, BME68X_REG_CTRL_GAS_1 };
 8001654:	f247 1370 	movw	r3, #29040	; 0x7170
 8001658:	82bb      	strh	r3, [r7, #20]

    if (conf != NULL)
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d06e      	beq.n	800173e <bme68x_set_heatr_conf+0x100>
    {
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 8001660:	6879      	ldr	r1, [r7, #4]
 8001662:	2000      	movs	r0, #0
 8001664:	f7ff fe6c 	bl	8001340 <bme68x_set_op_mode>
 8001668:	4603      	mov	r3, r0
 800166a:	77fb      	strb	r3, [r7, #31]
        if (rslt == BME68X_OK)
 800166c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d108      	bne.n	8001686 <bme68x_set_heatr_conf+0x48>
        {
            rslt = set_conf(conf, op_mode, &nb_conv, dev);
 8001674:	f107 021c 	add.w	r2, r7, #28
 8001678:	7bf9      	ldrb	r1, [r7, #15]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	68b8      	ldr	r0, [r7, #8]
 800167e:	f001 f909 	bl	8002894 <set_conf>
 8001682:	4603      	mov	r3, r0
 8001684:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8001686:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d159      	bne.n	8001742 <bme68x_set_heatr_conf+0x104>
        {
            rslt = bme68x_get_regs(BME68X_REG_CTRL_GAS_0, ctrl_gas_data, 2, dev);
 800168e:	f107 0118 	add.w	r1, r7, #24
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2202      	movs	r2, #2
 8001696:	2070      	movs	r0, #112	; 0x70
 8001698:	f7ff fcc6 	bl	8001028 <bme68x_get_regs>
 800169c:	4603      	mov	r3, r0
 800169e:	77fb      	strb	r3, [r7, #31]
            if (rslt == BME68X_OK)
 80016a0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d14c      	bne.n	8001742 <bme68x_set_heatr_conf+0x104>
            {
                if (conf->enable == BME68X_ENABLE)
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d10b      	bne.n	80016c8 <bme68x_set_heatr_conf+0x8a>
                {
                    hctrl = BME68X_ENABLE_HEATER;
 80016b0:	2300      	movs	r3, #0
 80016b2:	77bb      	strb	r3, [r7, #30]
                    if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d102      	bne.n	80016c2 <bme68x_set_heatr_conf+0x84>
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_H;
 80016bc:	2302      	movs	r3, #2
 80016be:	777b      	strb	r3, [r7, #29]
 80016c0:	e006      	b.n	80016d0 <bme68x_set_heatr_conf+0x92>
                    }
                    else
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_L;
 80016c2:	2301      	movs	r3, #1
 80016c4:	777b      	strb	r3, [r7, #29]
 80016c6:	e003      	b.n	80016d0 <bme68x_set_heatr_conf+0x92>
                    }
                }
                else
                {
                    hctrl = BME68X_DISABLE_HEATER;
 80016c8:	2301      	movs	r3, #1
 80016ca:	77bb      	strb	r3, [r7, #30]
                    run_gas = BME68X_DISABLE_GAS_MEAS;
 80016cc:	2300      	movs	r3, #0
 80016ce:	777b      	strb	r3, [r7, #29]
                }

                ctrl_gas_data[0] = BME68X_SET_BITS(ctrl_gas_data[0], BME68X_HCTRL, hctrl);
 80016d0:	7e3b      	ldrb	r3, [r7, #24]
 80016d2:	b25b      	sxtb	r3, r3
 80016d4:	f023 0308 	bic.w	r3, r3, #8
 80016d8:	b25a      	sxtb	r2, r3
 80016da:	7fbb      	ldrb	r3, [r7, #30]
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	b25b      	sxtb	r3, r3
 80016e0:	f003 0308 	and.w	r3, r3, #8
 80016e4:	b25b      	sxtb	r3, r3
 80016e6:	4313      	orrs	r3, r2
 80016e8:	b25b      	sxtb	r3, r3
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	763b      	strb	r3, [r7, #24]
                ctrl_gas_data[1] = BME68X_SET_BITS_POS_0(ctrl_gas_data[1], BME68X_NBCONV, nb_conv);
 80016ee:	7e7b      	ldrb	r3, [r7, #25]
 80016f0:	b25b      	sxtb	r3, r3
 80016f2:	f023 030f 	bic.w	r3, r3, #15
 80016f6:	b25a      	sxtb	r2, r3
 80016f8:	7f3b      	ldrb	r3, [r7, #28]
 80016fa:	b25b      	sxtb	r3, r3
 80016fc:	f003 030f 	and.w	r3, r3, #15
 8001700:	b25b      	sxtb	r3, r3
 8001702:	4313      	orrs	r3, r2
 8001704:	b25b      	sxtb	r3, r3
 8001706:	b2db      	uxtb	r3, r3
 8001708:	767b      	strb	r3, [r7, #25]
                ctrl_gas_data[1] = BME68X_SET_BITS(ctrl_gas_data[1], BME68X_RUN_GAS, run_gas);
 800170a:	7e7b      	ldrb	r3, [r7, #25]
 800170c:	b25b      	sxtb	r3, r3
 800170e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001712:	b25a      	sxtb	r2, r3
 8001714:	7f7b      	ldrb	r3, [r7, #29]
 8001716:	011b      	lsls	r3, r3, #4
 8001718:	b25b      	sxtb	r3, r3
 800171a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800171e:	b25b      	sxtb	r3, r3
 8001720:	4313      	orrs	r3, r2
 8001722:	b25b      	sxtb	r3, r3
 8001724:	b2db      	uxtb	r3, r3
 8001726:	767b      	strb	r3, [r7, #25]
                rslt = bme68x_set_regs(ctrl_gas_addr, ctrl_gas_data, 2, dev);
 8001728:	f107 0118 	add.w	r1, r7, #24
 800172c:	f107 0014 	add.w	r0, r7, #20
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2202      	movs	r2, #2
 8001734:	f7ff fbe8 	bl	8000f08 <bme68x_set_regs>
 8001738:	4603      	mov	r3, r0
 800173a:	77fb      	strb	r3, [r7, #31]
 800173c:	e001      	b.n	8001742 <bme68x_set_heatr_conf+0x104>
            }
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 800173e:	23ff      	movs	r3, #255	; 0xff
 8001740:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8001742:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3720      	adds	r7, #32
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <calc_temperature>:

#else

/* @brief This internal API is used to calculate the temperature value. */
static float calc_temperature(uint32_t temp_adc, struct bme68x_dev *dev)
{
 8001750:	b480      	push	{r7}
 8001752:	b087      	sub	sp, #28
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
    float var1;
    float var2;
    float calc_temp;

    /* calculate var1 data */
    var1 = ((((float)temp_adc / 16384.0f) - ((float)dev->calib.par_t1 / 1024.0f)) * ((float)dev->calib.par_t2));
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	ee07 3a90 	vmov	s15, r3
 8001760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001764:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001848 <calc_temperature+0xf8>
 8001768:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	8bdb      	ldrh	r3, [r3, #30]
 8001770:	ee07 3a90 	vmov	s15, r3
 8001774:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001778:	ed9f 6a34 	vldr	s12, [pc, #208]	; 800184c <calc_temperature+0xfc>
 800177c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001780:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800178a:	ee07 3a90 	vmov	s15, r3
 800178e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001796:	edc7 7a05 	vstr	s15, [r7, #20]

    /* calculate var2 data */
    var2 =
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	ee07 3a90 	vmov	s15, r3
 80017a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017a4:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8001850 <calc_temperature+0x100>
 80017a8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	8bdb      	ldrh	r3, [r3, #30]
 80017b0:	ee07 3a90 	vmov	s15, r3
 80017b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80017b8:	ed9f 6a26 	vldr	s12, [pc, #152]	; 8001854 <calc_temperature+0x104>
 80017bc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80017c0:	ee37 7a67 	vsub.f32	s14, s14, s15
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	ee07 3a90 	vmov	s15, r3
 80017ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017ce:	ed9f 6a20 	vldr	s12, [pc, #128]	; 8001850 <calc_temperature+0x100>
 80017d2:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	8bdb      	ldrh	r3, [r3, #30]
 80017da:	ee07 3a90 	vmov	s15, r3
 80017de:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 80017e2:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8001854 <calc_temperature+0x104>
 80017e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80017ea:	ee76 7ae7 	vsub.f32	s15, s13, s15
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 80017ee:	ee27 7a27 	vmul.f32	s14, s14, s15
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 80017f8:	ee07 3a90 	vmov	s15, r3
 80017fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001800:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001804:	ee67 7aa6 	vmul.f32	s15, s15, s13
    var2 =
 8001808:	ee67 7a27 	vmul.f32	s15, s14, s15
 800180c:	edc7 7a04 	vstr	s15, [r7, #16]

    /* t_fine value*/
    dev->calib.t_fine = (var1 + var2);
 8001810:	ed97 7a05 	vldr	s14, [r7, #20]
 8001814:	edd7 7a04 	vldr	s15, [r7, #16]
 8001818:	ee77 7a27 	vadd.f32	s15, s14, s15
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

    /* compensated temperature data*/
    calc_temp = ((dev->calib.t_fine) / 5120.0f);
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8001828:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001858 <calc_temperature+0x108>
 800182c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001830:	edc7 7a03 	vstr	s15, [r7, #12]

    return calc_temp;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	ee07 3a90 	vmov	s15, r3
}
 800183a:	eeb0 0a67 	vmov.f32	s0, s15
 800183e:	371c      	adds	r7, #28
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	46800000 	.word	0x46800000
 800184c:	44800000 	.word	0x44800000
 8001850:	48000000 	.word	0x48000000
 8001854:	46000000 	.word	0x46000000
 8001858:	45a00000 	.word	0x45a00000

0800185c <calc_pressure>:

/* @brief This internal API is used to calculate the pressure value. */
static float calc_pressure(uint32_t pres_adc, const struct bme68x_dev *dev)
{
 800185c:	b480      	push	{r7}
 800185e:	b087      	sub	sp, #28
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
    float var1;
    float var2;
    float var3;
    float calc_pres;

    var1 = (((float)dev->calib.t_fine / 2.0f) - 64000.0f);
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800186c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001870:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001874:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8001ab0 <calc_pressure+0x254>
 8001878:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800187c:	edc7 7a04 	vstr	s15, [r7, #16]
    var2 = var1 * var1 * (((float)dev->calib.par_p6) / (131072.0f));
 8001880:	edd7 7a04 	vldr	s15, [r7, #16]
 8001884:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	f993 302e 	ldrsb.w	r3, [r3, #46]	; 0x2e
 800188e:	ee07 3a90 	vmov	s15, r3
 8001892:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001896:	ed9f 6a87 	vldr	s12, [pc, #540]	; 8001ab4 <calc_pressure+0x258>
 800189a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800189e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018a2:	edc7 7a03 	vstr	s15, [r7, #12]
    var2 = var2 + (var1 * ((float)dev->calib.par_p5) * 2.0f);
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80018ac:	ee07 3a90 	vmov	s15, r3
 80018b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80018b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018bc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80018c0:	ed97 7a03 	vldr	s14, [r7, #12]
 80018c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018c8:	edc7 7a03 	vstr	s15, [r7, #12]
    var2 = (var2 / 4.0f) + (((float)dev->calib.par_p4) * 65536.0f);
 80018cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80018d0:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80018d4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80018de:	ee07 3a90 	vmov	s15, r3
 80018e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018e6:	eddf 6a74 	vldr	s13, [pc, #464]	; 8001ab8 <calc_pressure+0x25c>
 80018ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80018ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018f2:	edc7 7a03 	vstr	s15, [r7, #12]
    var1 = (((((float)dev->calib.par_p3 * var1 * var1) / 16384.0f) + ((float)dev->calib.par_p2 * var1)) / 524288.0f);
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
 80018fc:	ee07 3a90 	vmov	s15, r3
 8001900:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001904:	edd7 7a04 	vldr	s15, [r7, #16]
 8001908:	ee27 7a27 	vmul.f32	s14, s14, s15
 800190c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001910:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001914:	eddf 6a69 	vldr	s13, [pc, #420]	; 8001abc <calc_pressure+0x260>
 8001918:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8001922:	ee07 3a90 	vmov	s15, r3
 8001926:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800192a:	edd7 7a04 	vldr	s15, [r7, #16]
 800192e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001932:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001936:	eddf 6a62 	vldr	s13, [pc, #392]	; 8001ac0 <calc_pressure+0x264>
 800193a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800193e:	edc7 7a04 	vstr	s15, [r7, #16]
    var1 = ((1.0f + (var1 / 32768.0f)) * ((float)dev->calib.par_p1));
 8001942:	ed97 7a04 	vldr	s14, [r7, #16]
 8001946:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8001ac4 <calc_pressure+0x268>
 800194a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800194e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001952:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800195a:	ee07 3a90 	vmov	s15, r3
 800195e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001966:	edc7 7a04 	vstr	s15, [r7, #16]
    calc_pres = (1048576.0f - ((float)pres_adc));
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	ee07 3a90 	vmov	s15, r3
 8001970:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001974:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001ac8 <calc_pressure+0x26c>
 8001978:	ee77 7a67 	vsub.f32	s15, s14, s15
 800197c:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Avoid exception caused by division by zero */
    if ((int)var1 != 0)
 8001980:	edd7 7a04 	vldr	s15, [r7, #16]
 8001984:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001988:	ee17 3a90 	vmov	r3, s15
 800198c:	2b00      	cmp	r3, #0
 800198e:	f000 8081 	beq.w	8001a94 <calc_pressure+0x238>
    {
        calc_pres = (((calc_pres - (var2 / 4096.0f)) * 6250.0f) / var1);
 8001992:	ed97 7a03 	vldr	s14, [r7, #12]
 8001996:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8001acc <calc_pressure+0x270>
 800199a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800199e:	ed97 7a05 	vldr	s14, [r7, #20]
 80019a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019a6:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001ad0 <calc_pressure+0x274>
 80019aa:	ee67 6a87 	vmul.f32	s13, s15, s14
 80019ae:	ed97 7a04 	vldr	s14, [r7, #16]
 80019b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019b6:	edc7 7a05 	vstr	s15, [r7, #20]
        var1 = (((float)dev->calib.par_p9) * calc_pres * calc_pres) / 2147483648.0f;
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80019c0:	ee07 3a90 	vmov	s15, r3
 80019c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80019cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80019d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019d8:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8001ad4 <calc_pressure+0x278>
 80019dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019e0:	edc7 7a04 	vstr	s15, [r7, #16]
        var2 = calc_pres * (((float)dev->calib.par_p8) / 32768.0f);
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80019ea:	ee07 3a90 	vmov	s15, r3
 80019ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019f2:	eddf 6a34 	vldr	s13, [pc, #208]	; 8001ac4 <calc_pressure+0x268>
 80019f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019fa:	ed97 7a05 	vldr	s14, [r7, #20]
 80019fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a02:	edc7 7a03 	vstr	s15, [r7, #12]
        var3 = ((calc_pres / 256.0f) * (calc_pres / 256.0f) * (calc_pres / 256.0f) * (dev->calib.par_p10 / 131072.0f));
 8001a06:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a0a:	eddf 6a33 	vldr	s13, [pc, #204]	; 8001ad8 <calc_pressure+0x27c>
 8001a0e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a12:	edd7 6a05 	vldr	s13, [r7, #20]
 8001a16:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8001ad8 <calc_pressure+0x27c>
 8001a1a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001a1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a22:	edd7 6a05 	vldr	s13, [r7, #20]
 8001a26:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8001ad8 <calc_pressure+0x27c>
 8001a2a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001a2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a38:	ee07 3a90 	vmov	s15, r3
 8001a3c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a40:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8001ab4 <calc_pressure+0x258>
 8001a44:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001a48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a4c:	edc7 7a02 	vstr	s15, [r7, #8]
        calc_pres = (calc_pres + (var1 + var2 + var3 + ((float)dev->calib.par_p7 * 128.0f)) / 16.0f);
 8001a50:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a54:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	f993 302f 	ldrsb.w	r3, [r3, #47]	; 0x2f
 8001a6a:	ee07 3a90 	vmov	s15, r3
 8001a6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a72:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001adc <calc_pressure+0x280>
 8001a76:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a7e:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001a82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a86:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a8e:	edc7 7a05 	vstr	s15, [r7, #20]
 8001a92:	e002      	b.n	8001a9a <calc_pressure+0x23e>
    }
    else
    {
        calc_pres = 0;
 8001a94:	f04f 0300 	mov.w	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
    }

    return calc_pres;
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	ee07 3a90 	vmov	s15, r3
}
 8001aa0:	eeb0 0a67 	vmov.f32	s0, s15
 8001aa4:	371c      	adds	r7, #28
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	477a0000 	.word	0x477a0000
 8001ab4:	48000000 	.word	0x48000000
 8001ab8:	47800000 	.word	0x47800000
 8001abc:	46800000 	.word	0x46800000
 8001ac0:	49000000 	.word	0x49000000
 8001ac4:	47000000 	.word	0x47000000
 8001ac8:	49800000 	.word	0x49800000
 8001acc:	45800000 	.word	0x45800000
 8001ad0:	45c35000 	.word	0x45c35000
 8001ad4:	4f000000 	.word	0x4f000000
 8001ad8:	43800000 	.word	0x43800000
 8001adc:	43000000 	.word	0x43000000

08001ae0 <calc_humidity>:

/* This internal API is used to calculate the humidity in integer */
static float calc_humidity(uint16_t hum_adc, const struct bme68x_dev *dev)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b089      	sub	sp, #36	; 0x24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	6039      	str	r1, [r7, #0]
 8001aea:	80fb      	strh	r3, [r7, #6]
    float var3;
    float var4;
    float temp_comp;

    /* compensated temperature data*/
    temp_comp = ((dev->calib.t_fine) / 5120.0f);
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8001af2:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8001c5c <calc_humidity+0x17c>
 8001af6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001afa:	edc7 7a06 	vstr	s15, [r7, #24]
    var1 = (float)((float)hum_adc) -
 8001afe:	88fb      	ldrh	r3, [r7, #6]
 8001b00:	ee07 3a90 	vmov	s15, r3
 8001b04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
           (((float)dev->calib.par_h1 * 16.0f) + (((float)dev->calib.par_h3 / 2.0f) * temp_comp));
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	8a1b      	ldrh	r3, [r3, #16]
 8001b0c:	ee07 3a90 	vmov	s15, r3
 8001b10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b14:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001b18:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8001b22:	ee07 3a90 	vmov	s15, r3
 8001b26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b2a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001b2e:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8001b32:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b36:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
    var1 = (float)((float)hum_adc) -
 8001b3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b42:	edc7 7a05 	vstr	s15, [r7, #20]
    var2 = var1 *
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	8a5b      	ldrh	r3, [r3, #18]
 8001b4a:	ee07 3a90 	vmov	s15, r3
 8001b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b52:	eddf 6a43 	vldr	s13, [pc, #268]	; 8001c60 <calc_humidity+0x180>
 8001b56:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8001b60:	ee07 3a90 	vmov	s15, r3
 8001b64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b68:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8001c64 <calc_humidity+0x184>
 8001b6c:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001b70:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b7c:	ee77 6aa6 	vadd.f32	s13, s15, s13
                     (((float)dev->calib.par_h5 / 1048576.0f) * temp_comp * temp_comp))));
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001b86:	ee07 3a90 	vmov	s15, r3
 8001b8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b8e:	eddf 5a36 	vldr	s11, [pc, #216]	; 8001c68 <calc_humidity+0x188>
 8001b92:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8001b96:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b9a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001b9e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ba2:	ee66 7a27 	vmul.f32	s15, s12, s15
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
 8001ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
 8001baa:	ee67 7a27 	vmul.f32	s15, s14, s15
    var2 = var1 *
 8001bae:	ed97 7a05 	vldr	s14, [r7, #20]
 8001bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bb6:	edc7 7a04 	vstr	s15, [r7, #16]
    var3 = (float)dev->calib.par_h6 / 16384.0f;
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	7ddb      	ldrb	r3, [r3, #23]
 8001bbe:	ee07 3a90 	vmov	s15, r3
 8001bc2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bc6:	eddf 6a27 	vldr	s13, [pc, #156]	; 8001c64 <calc_humidity+0x184>
 8001bca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bce:	edc7 7a03 	vstr	s15, [r7, #12]
    var4 = (float)dev->calib.par_h7 / 2097152.0f;
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8001bd8:	ee07 3a90 	vmov	s15, r3
 8001bdc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001be0:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001c6c <calc_humidity+0x18c>
 8001be4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001be8:	edc7 7a02 	vstr	s15, [r7, #8]
    calc_hum = var2 + ((var3 + (var4 * temp_comp)) * var2 * var2);
 8001bec:	ed97 7a02 	vldr	s14, [r7, #8]
 8001bf0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bf8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bfc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c00:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c08:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c10:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c18:	edc7 7a07 	vstr	s15, [r7, #28]
    if (calc_hum > 100.0f)
 8001c1c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c20:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001c70 <calc_humidity+0x190>
 8001c24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c2c:	dd02      	ble.n	8001c34 <calc_humidity+0x154>
    {
        calc_hum = 100.0f;
 8001c2e:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <calc_humidity+0x194>)
 8001c30:	61fb      	str	r3, [r7, #28]
 8001c32:	e009      	b.n	8001c48 <calc_humidity+0x168>
    }
    else if (calc_hum < 0.0f)
 8001c34:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c40:	d502      	bpl.n	8001c48 <calc_humidity+0x168>
    {
        calc_hum = 0.0f;
 8001c42:	f04f 0300 	mov.w	r3, #0
 8001c46:	61fb      	str	r3, [r7, #28]
    }

    return calc_hum;
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	ee07 3a90 	vmov	s15, r3
}
 8001c4e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c52:	3724      	adds	r7, #36	; 0x24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	45a00000 	.word	0x45a00000
 8001c60:	48800000 	.word	0x48800000
 8001c64:	46800000 	.word	0x46800000
 8001c68:	49800000 	.word	0x49800000
 8001c6c:	4a000000 	.word	0x4a000000
 8001c70:	42c80000 	.word	0x42c80000
 8001c74:	42c80000 	.word	0x42c80000

08001c78 <calc_gas_resistance_low>:

/* This internal API is used to calculate the gas resistance low value in float */
static float calc_gas_resistance_low(uint16_t gas_res_adc, uint8_t gas_range, const struct bme68x_dev *dev)
{
 8001c78:	b4b0      	push	{r4, r5, r7}
 8001c7a:	b0a9      	sub	sp, #164	; 0xa4
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	603a      	str	r2, [r7, #0]
 8001c82:	80fb      	strh	r3, [r7, #6]
 8001c84:	460b      	mov	r3, r1
 8001c86:	717b      	strb	r3, [r7, #5]
    float calc_gas_res;
    float var1;
    float var2;
    float var3;
    float gas_res_f = gas_res_adc;
 8001c88:	88fb      	ldrh	r3, [r7, #6]
 8001c8a:	ee07 3a90 	vmov	s15, r3
 8001c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c92:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
    float gas_range_f = (1U << gas_range); /*lint !e790 / Suspicious truncation, integral to float */
 8001c96:	797b      	ldrb	r3, [r7, #5]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	ee07 3a90 	vmov	s15, r3
 8001ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ca6:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
    const float lookup_k1_range[16] = {
 8001caa:	4b3e      	ldr	r3, [pc, #248]	; (8001da4 <calc_gas_resistance_low+0x12c>)
 8001cac:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8001cb0:	461d      	mov	r5, r3
 8001cb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cbe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001cc2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, -1.0f, 0.0f, -0.8f, 0.0f, 0.0f, -0.2f, -0.5f, 0.0f, -1.0f, 0.0f, 0.0f
    };
    const float lookup_k2_range[16] = {
 8001cc6:	4b38      	ldr	r3, [pc, #224]	; (8001da8 <calc_gas_resistance_low+0x130>)
 8001cc8:	f107 0408 	add.w	r4, r7, #8
 8001ccc:	461d      	mov	r5, r3
 8001cce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cda:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001cde:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0.0f, 0.0f, 0.0f, 0.0f, 0.1f, 0.7f, 0.0f, -0.8f, -0.1f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f
    };

    var1 = (1340.0f + (5.0f * dev->calib.range_sw_err));
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	f993 303e 	ldrsb.w	r3, [r3, #62]	; 0x3e
 8001ce8:	ee07 3a90 	vmov	s15, r3
 8001cec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cf0:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001cf4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cf8:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001dac <calc_gas_resistance_low+0x134>
 8001cfc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d00:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
    var2 = (var1) * (1.0f + lookup_k1_range[gas_range] / 100.0f);
 8001d04:	797b      	ldrb	r3, [r7, #5]
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	33a0      	adds	r3, #160	; 0xa0
 8001d0a:	443b      	add	r3, r7
 8001d0c:	3b58      	subs	r3, #88	; 0x58
 8001d0e:	ed93 7a00 	vldr	s14, [r3]
 8001d12:	eddf 6a27 	vldr	s13, [pc, #156]	; 8001db0 <calc_gas_resistance_low+0x138>
 8001d16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d22:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8001d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d2a:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
    var3 = 1.0f + (lookup_k2_range[gas_range] / 100.0f);
 8001d2e:	797b      	ldrb	r3, [r7, #5]
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	33a0      	adds	r3, #160	; 0xa0
 8001d34:	443b      	add	r3, r7
 8001d36:	3b98      	subs	r3, #152	; 0x98
 8001d38:	ed93 7a00 	vldr	s14, [r3]
 8001d3c:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001db0 <calc_gas_resistance_low+0x138>
 8001d40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d4c:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
    calc_gas_res = 1.0f / (float)(var3 * (0.000000125f) * gas_range_f * (((gas_res_f - 512.0f) / var2) + 1.0f));
 8001d50:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001d54:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001db4 <calc_gas_resistance_low+0x13c>
 8001d58:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d5c:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001d60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d64:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001d68:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001db8 <calc_gas_resistance_low+0x140>
 8001d6c:	ee37 6ae6 	vsub.f32	s12, s15, s13
 8001d70:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 8001d74:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001d78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d8c:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88

    return calc_gas_res;
 8001d90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d94:	ee07 3a90 	vmov	s15, r3
}
 8001d98:	eeb0 0a67 	vmov.f32	s0, s15
 8001d9c:	37a4      	adds	r7, #164	; 0xa4
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bcb0      	pop	{r4, r5, r7}
 8001da2:	4770      	bx	lr
 8001da4:	080098c8 	.word	0x080098c8
 8001da8:	08009908 	.word	0x08009908
 8001dac:	44a78000 	.word	0x44a78000
 8001db0:	42c80000 	.word	0x42c80000
 8001db4:	340637bd 	.word	0x340637bd
 8001db8:	44000000 	.word	0x44000000

08001dbc <calc_gas_resistance_high>:

/* This internal API is used to calculate the gas resistance value in float */
static float calc_gas_resistance_high(uint16_t gas_res_adc, uint8_t gas_range)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b087      	sub	sp, #28
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	460a      	mov	r2, r1
 8001dc6:	80fb      	strh	r3, [r7, #6]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	717b      	strb	r3, [r7, #5]
    float calc_gas_res;
    uint32_t var1 = UINT32_C(262144) >> gas_range;
 8001dcc:	797b      	ldrb	r3, [r7, #5]
 8001dce:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd6:	617b      	str	r3, [r7, #20]
    int32_t var2 = (int32_t)gas_res_adc - INT32_C(512);
 8001dd8:	88fb      	ldrh	r3, [r7, #6]
 8001dda:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001dde:	613b      	str	r3, [r7, #16]

    var2 *= INT32_C(3);
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	4613      	mov	r3, r2
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	4413      	add	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
    var2 = INT32_C(4096) + var2;
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001df0:	613b      	str	r3, [r7, #16]

    calc_gas_res = 1000000.0f * (float)var1 / (float)var2;
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	ee07 3a90 	vmov	s15, r3
 8001df8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dfc:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001e2c <calc_gas_resistance_high+0x70>
 8001e00:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	ee07 3a90 	vmov	s15, r3
 8001e0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e12:	edc7 7a03 	vstr	s15, [r7, #12]

    return calc_gas_res;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	ee07 3a90 	vmov	s15, r3
}
 8001e1c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e20:	371c      	adds	r7, #28
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	49742400 	.word	0x49742400

08001e30 <calc_res_heat>:

/* This internal API is used to calculate the heater resistance value using float */
static uint8_t calc_res_heat(uint16_t temp, const struct bme68x_dev *dev)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b08b      	sub	sp, #44	; 0x2c
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	81fb      	strh	r3, [r7, #14]
    float var3;
    float var4;
    float var5;
    uint8_t res_heat;

    if (temp > 400) /* Cap temperature */
 8001e3c:	89fb      	ldrh	r3, [r7, #14]
 8001e3e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001e42:	d902      	bls.n	8001e4a <calc_res_heat+0x1a>
    {
        temp = 400;
 8001e44:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001e48:	81fb      	strh	r3, [r7, #14]
    }

    var1 = (((float)dev->calib.par_gh1 / (16.0f)) + 49.0f);
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	f993 3019 	ldrsb.w	r3, [r3, #25]
 8001e50:	ee07 3a90 	vmov	s15, r3
 8001e54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e58:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001e5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e60:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8001f74 <calc_res_heat+0x144>
 8001e64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e68:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    var2 = ((((float)dev->calib.par_gh2 / (32768.0f)) * (0.0005f)) + 0.00235f);
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001e72:	ee07 3a90 	vmov	s15, r3
 8001e76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e7a:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8001f78 <calc_res_heat+0x148>
 8001e7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e82:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8001f7c <calc_res_heat+0x14c>
 8001e86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e8a:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001f80 <calc_res_heat+0x150>
 8001e8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e92:	edc7 7a08 	vstr	s15, [r7, #32]
    var3 = ((float)dev->calib.par_gh3 / (1024.0f));
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	f993 301c 	ldrsb.w	r3, [r3, #28]
 8001e9c:	ee07 3a90 	vmov	s15, r3
 8001ea0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ea4:	eddf 6a37 	vldr	s13, [pc, #220]	; 8001f84 <calc_res_heat+0x154>
 8001ea8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eac:	edc7 7a07 	vstr	s15, [r7, #28]
    var4 = (var1 * (1.0f + (var2 * (float)temp)));
 8001eb0:	89fb      	ldrh	r3, [r7, #14]
 8001eb2:	ee07 3a90 	vmov	s15, r3
 8001eb6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001eba:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ec2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ec6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001eca:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ed2:	edc7 7a06 	vstr	s15, [r7, #24]
    var5 = (var4 + (var3 * (float)dev->amb_temp));
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8001edc:	ee07 3a90 	vmov	s15, r3
 8001ee0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ee4:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eec:	ed97 7a06 	vldr	s14, [r7, #24]
 8001ef0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ef4:	edc7 7a05 	vstr	s15, [r7, #20]
    res_heat =
        (uint8_t)(3.4f *
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001efe:	ee07 3a90 	vmov	s15, r3
 8001f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f06:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001f0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f0e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f16:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f1a:	ee27 7a27 	vmul.f32	s14, s14, s15
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	f993 303d 	ldrsb.w	r3, [r3, #61]	; 0x3d
 8001f24:	ee07 3a90 	vmov	s15, r3
 8001f28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f2c:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001f88 <calc_res_heat+0x158>
 8001f30:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f38:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8001f3c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001f40:	eec6 7a26 	vdiv.f32	s15, s12, s13
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 8001f44:	ee67 7a27 	vmul.f32	s15, s14, s15
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 8001f48:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001f4c:	ee77 7ac7 	vsub.f32	s15, s15, s14
        (uint8_t)(3.4f *
 8001f50:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001f8c <calc_res_heat+0x15c>
 8001f54:	ee67 7a87 	vmul.f32	s15, s15, s14
    res_heat =
 8001f58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f5c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001f60:	793b      	ldrb	r3, [r7, #4]
 8001f62:	74fb      	strb	r3, [r7, #19]
                   25));

    return res_heat;
 8001f64:	7cfb      	ldrb	r3, [r7, #19]
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	372c      	adds	r7, #44	; 0x2c
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	42440000 	.word	0x42440000
 8001f78:	47000000 	.word	0x47000000
 8001f7c:	3a03126f 	.word	0x3a03126f
 8001f80:	3b1a0275 	.word	0x3b1a0275
 8001f84:	44800000 	.word	0x44800000
 8001f88:	3b03126f 	.word	0x3b03126f
 8001f8c:	4059999a 	.word	0x4059999a

08001f90 <calc_gas_wait>:

#endif

/* This internal API is used to calculate the gas wait */
static uint8_t calc_gas_wait(uint16_t dur)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	80fb      	strh	r3, [r7, #6]
    uint8_t factor = 0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	73fb      	strb	r3, [r7, #15]
    uint8_t durval;

    if (dur >= 0xfc0)
 8001f9e:	88fb      	ldrh	r3, [r7, #6]
 8001fa0:	f5b3 6f7c 	cmp.w	r3, #4032	; 0xfc0
 8001fa4:	d308      	bcc.n	8001fb8 <calc_gas_wait+0x28>
    {
        durval = 0xff; /* Max duration*/
 8001fa6:	23ff      	movs	r3, #255	; 0xff
 8001fa8:	73bb      	strb	r3, [r7, #14]
 8001faa:	e00f      	b.n	8001fcc <calc_gas_wait+0x3c>
    }
    else
    {
        while (dur > 0x3F)
        {
            dur = dur / 4;
 8001fac:	88fb      	ldrh	r3, [r7, #6]
 8001fae:	089b      	lsrs	r3, r3, #2
 8001fb0:	80fb      	strh	r3, [r7, #6]
            factor += 1;
 8001fb2:	7bfb      	ldrb	r3, [r7, #15]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	73fb      	strb	r3, [r7, #15]
        while (dur > 0x3F)
 8001fb8:	88fb      	ldrh	r3, [r7, #6]
 8001fba:	2b3f      	cmp	r3, #63	; 0x3f
 8001fbc:	d8f6      	bhi.n	8001fac <calc_gas_wait+0x1c>
        }

        durval = (uint8_t)(dur + (factor * 64));
 8001fbe:	88fb      	ldrh	r3, [r7, #6]
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	7bfb      	ldrb	r3, [r7, #15]
 8001fc4:	019b      	lsls	r3, r3, #6
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	4413      	add	r3, r2
 8001fca:	73bb      	strb	r3, [r7, #14]
    }

    return durval;
 8001fcc:	7bbb      	ldrb	r3, [r7, #14]
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <read_field_data>:

/* This internal API is used to read a single data of the sensor */
static int8_t read_field_data(uint8_t index, struct bme68x_data *data, struct bme68x_dev *dev)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b08e      	sub	sp, #56	; 0x38
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	60b9      	str	r1, [r7, #8]
 8001fe4:	607a      	str	r2, [r7, #4]
 8001fe6:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME68X_OK;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint8_t buff[BME68X_LEN_FIELD] = { 0 };
 8001fee:	2300      	movs	r3, #0
 8001ff0:	613b      	str	r3, [r7, #16]
 8001ff2:	f107 0314 	add.w	r3, r7, #20
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	605a      	str	r2, [r3, #4]
 8001ffc:	609a      	str	r2, [r3, #8]
 8001ffe:	731a      	strb	r2, [r3, #12]
    uint8_t gas_range_l, gas_range_h;
    uint32_t adc_temp;
    uint32_t adc_pres;
    uint16_t adc_hum;
    uint16_t adc_gas_res_low, adc_gas_res_high;
    uint8_t tries = 5;
 8002000:	2305      	movs	r3, #5
 8002002:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    while ((tries) && (rslt == BME68X_OK))
 8002006:	e123      	b.n	8002250 <read_field_data+0x276>
    {
        rslt = bme68x_get_regs(((uint8_t)(BME68X_REG_FIELD0 + (index * BME68X_LEN_FIELD_OFFSET))),
 8002008:	7bfb      	ldrb	r3, [r7, #15]
 800200a:	461a      	mov	r2, r3
 800200c:	0112      	lsls	r2, r2, #4
 800200e:	4413      	add	r3, r2
 8002010:	b2db      	uxtb	r3, r3
 8002012:	331d      	adds	r3, #29
 8002014:	b2d8      	uxtb	r0, r3
 8002016:	f107 0110 	add.w	r1, r7, #16
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2211      	movs	r2, #17
 800201e:	f7ff f803 	bl	8001028 <bme68x_get_regs>
 8002022:	4603      	mov	r3, r0
 8002024:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                               buff,
                               (uint16_t)BME68X_LEN_FIELD,
                               dev);
        if (!data)
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d103      	bne.n	8002036 <read_field_data+0x5c>
        {
            rslt = BME68X_E_NULL_PTR;
 800202e:	23ff      	movs	r3, #255	; 0xff
 8002030:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            break;
 8002034:	e115      	b.n	8002262 <read_field_data+0x288>
        }

        data->status = buff[0] & BME68X_NEW_DATA_MSK;
 8002036:	7c3b      	ldrb	r3, [r7, #16]
 8002038:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800203c:	b2da      	uxtb	r2, r3
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	701a      	strb	r2, [r3, #0]
        data->gas_index = buff[0] & BME68X_GAS_INDEX_MSK;
 8002042:	7c3b      	ldrb	r3, [r7, #16]
 8002044:	f003 030f 	and.w	r3, r3, #15
 8002048:	b2da      	uxtb	r2, r3
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	705a      	strb	r2, [r3, #1]
        data->meas_index = buff[1];
 800204e:	7c7a      	ldrb	r2, [r7, #17]
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	709a      	strb	r2, [r3, #2]

        /* read the raw data from the sensor */
        adc_pres = (uint32_t)(((uint32_t)buff[2] * 4096) | ((uint32_t)buff[3] * 16) | ((uint32_t)buff[4] / 16));
 8002054:	7cbb      	ldrb	r3, [r7, #18]
 8002056:	031a      	lsls	r2, r3, #12
 8002058:	7cfb      	ldrb	r3, [r7, #19]
 800205a:	011b      	lsls	r3, r3, #4
 800205c:	4313      	orrs	r3, r2
 800205e:	7d3a      	ldrb	r2, [r7, #20]
 8002060:	0912      	lsrs	r2, r2, #4
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	4313      	orrs	r3, r2
 8002066:	633b      	str	r3, [r7, #48]	; 0x30
        adc_temp = (uint32_t)(((uint32_t)buff[5] * 4096) | ((uint32_t)buff[6] * 16) | ((uint32_t)buff[7] / 16));
 8002068:	7d7b      	ldrb	r3, [r7, #21]
 800206a:	031a      	lsls	r2, r3, #12
 800206c:	7dbb      	ldrb	r3, [r7, #22]
 800206e:	011b      	lsls	r3, r3, #4
 8002070:	4313      	orrs	r3, r2
 8002072:	7dfa      	ldrb	r2, [r7, #23]
 8002074:	0912      	lsrs	r2, r2, #4
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	4313      	orrs	r3, r2
 800207a:	62fb      	str	r3, [r7, #44]	; 0x2c
        adc_hum = (uint16_t)(((uint32_t)buff[8] * 256) | (uint32_t)buff[9]);
 800207c:	7e3b      	ldrb	r3, [r7, #24]
 800207e:	b29b      	uxth	r3, r3
 8002080:	021b      	lsls	r3, r3, #8
 8002082:	b29a      	uxth	r2, r3
 8002084:	7e7b      	ldrb	r3, [r7, #25]
 8002086:	b29b      	uxth	r3, r3
 8002088:	4313      	orrs	r3, r2
 800208a:	857b      	strh	r3, [r7, #42]	; 0x2a
        adc_gas_res_low = (uint16_t)((uint32_t)buff[13] * 4 | (((uint32_t)buff[14]) / 64));
 800208c:	7f7b      	ldrb	r3, [r7, #29]
 800208e:	b29b      	uxth	r3, r3
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	b29a      	uxth	r2, r3
 8002094:	7fbb      	ldrb	r3, [r7, #30]
 8002096:	099b      	lsrs	r3, r3, #6
 8002098:	b2db      	uxtb	r3, r3
 800209a:	b29b      	uxth	r3, r3
 800209c:	4313      	orrs	r3, r2
 800209e:	853b      	strh	r3, [r7, #40]	; 0x28
        adc_gas_res_high = (uint16_t)((uint32_t)buff[15] * 4 | (((uint32_t)buff[16]) / 64));
 80020a0:	7ffb      	ldrb	r3, [r7, #31]
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80020ac:	099b      	lsrs	r3, r3, #6
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	4313      	orrs	r3, r2
 80020b4:	84fb      	strh	r3, [r7, #38]	; 0x26
        gas_range_l = buff[14] & BME68X_GAS_RANGE_MSK;
 80020b6:	7fbb      	ldrb	r3, [r7, #30]
 80020b8:	f003 030f 	and.w	r3, r3, #15
 80020bc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        gas_range_h = buff[16] & BME68X_GAS_RANGE_MSK;
 80020c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80020c4:	f003 030f 	and.w	r3, r3, #15
 80020c8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d11c      	bne.n	800210e <read_field_data+0x134>
        {
            data->status |= buff[16] & BME68X_GASM_VALID_MSK;
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	b25a      	sxtb	r2, r3
 80020da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80020de:	b25b      	sxtb	r3, r3
 80020e0:	f003 0320 	and.w	r3, r3, #32
 80020e4:	b25b      	sxtb	r3, r3
 80020e6:	4313      	orrs	r3, r2
 80020e8:	b25b      	sxtb	r3, r3
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	701a      	strb	r2, [r3, #0]
            data->status |= buff[16] & BME68X_HEAT_STAB_MSK;
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	b25a      	sxtb	r2, r3
 80020f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80020fa:	b25b      	sxtb	r3, r3
 80020fc:	f003 0310 	and.w	r3, r3, #16
 8002100:	b25b      	sxtb	r3, r3
 8002102:	4313      	orrs	r3, r2
 8002104:	b25b      	sxtb	r3, r3
 8002106:	b2da      	uxtb	r2, r3
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	701a      	strb	r2, [r3, #0]
 800210c:	e019      	b.n	8002142 <read_field_data+0x168>
        }
        else
        {
            data->status |= buff[14] & BME68X_GASM_VALID_MSK;
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	b25a      	sxtb	r2, r3
 8002114:	7fbb      	ldrb	r3, [r7, #30]
 8002116:	b25b      	sxtb	r3, r3
 8002118:	f003 0320 	and.w	r3, r3, #32
 800211c:	b25b      	sxtb	r3, r3
 800211e:	4313      	orrs	r3, r2
 8002120:	b25b      	sxtb	r3, r3
 8002122:	b2da      	uxtb	r2, r3
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	701a      	strb	r2, [r3, #0]
            data->status |= buff[14] & BME68X_HEAT_STAB_MSK;
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	b25a      	sxtb	r2, r3
 800212e:	7fbb      	ldrb	r3, [r7, #30]
 8002130:	b25b      	sxtb	r3, r3
 8002132:	f003 0310 	and.w	r3, r3, #16
 8002136:	b25b      	sxtb	r3, r3
 8002138:	4313      	orrs	r3, r2
 800213a:	b25b      	sxtb	r3, r3
 800213c:	b2da      	uxtb	r2, r3
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	701a      	strb	r2, [r3, #0]
        }

        if ((data->status & BME68X_NEW_DATA_MSK) && (rslt == BME68X_OK))
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	b25b      	sxtb	r3, r3
 8002148:	2b00      	cmp	r3, #0
 800214a:	da70      	bge.n	800222e <read_field_data+0x254>
 800214c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002150:	2b00      	cmp	r3, #0
 8002152:	d16c      	bne.n	800222e <read_field_data+0x254>
        {
            rslt = bme68x_get_regs(BME68X_REG_RES_HEAT0 + data->gas_index, &data->res_heat, 1, dev);
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	785b      	ldrb	r3, [r3, #1]
 8002158:	335a      	adds	r3, #90	; 0x5a
 800215a:	b2d8      	uxtb	r0, r3
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	1cd9      	adds	r1, r3, #3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f7fe ff60 	bl	8001028 <bme68x_get_regs>
 8002168:	4603      	mov	r3, r0
 800216a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            if (rslt == BME68X_OK)
 800216e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10c      	bne.n	8002190 <read_field_data+0x1b6>
            {
                rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0 + data->gas_index, &data->idac, 1, dev);
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	785b      	ldrb	r3, [r3, #1]
 800217a:	3350      	adds	r3, #80	; 0x50
 800217c:	b2d8      	uxtb	r0, r3
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	1d19      	adds	r1, r3, #4
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2201      	movs	r2, #1
 8002186:	f7fe ff4f 	bl	8001028 <bme68x_get_regs>
 800218a:	4603      	mov	r3, r0
 800218c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            }

            if (rslt == BME68X_OK)
 8002190:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002194:	2b00      	cmp	r3, #0
 8002196:	d10c      	bne.n	80021b2 <read_field_data+0x1d8>
            {
                rslt = bme68x_get_regs(BME68X_REG_GAS_WAIT0 + data->gas_index, &data->gas_wait, 1, dev);
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	785b      	ldrb	r3, [r3, #1]
 800219c:	3364      	adds	r3, #100	; 0x64
 800219e:	b2d8      	uxtb	r0, r3
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	1d59      	adds	r1, r3, #5
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f7fe ff3e 	bl	8001028 <bme68x_get_regs>
 80021ac:	4603      	mov	r3, r0
 80021ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            }

            if (rslt == BME68X_OK)
 80021b2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d139      	bne.n	800222e <read_field_data+0x254>
            {
                data->temperature = calc_temperature(adc_temp, dev);
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80021be:	f7ff fac7 	bl	8001750 <calc_temperature>
 80021c2:	eef0 7a40 	vmov.f32	s15, s0
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	edc3 7a02 	vstr	s15, [r3, #8]
                data->pressure = calc_pressure(adc_pres, dev);
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021d0:	f7ff fb44 	bl	800185c <calc_pressure>
 80021d4:	eef0 7a40 	vmov.f32	s15, s0
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	edc3 7a03 	vstr	s15, [r3, #12]
                data->humidity = calc_humidity(adc_hum, dev);
 80021de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80021e0:	6879      	ldr	r1, [r7, #4]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff fc7c 	bl	8001ae0 <calc_humidity>
 80021e8:	eef0 7a40 	vmov.f32	s15, s0
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	edc3 7a04 	vstr	s15, [r3, #16]
                if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d10c      	bne.n	8002214 <read_field_data+0x23a>
                {
                    data->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
 80021fa:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80021fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002200:	4611      	mov	r1, r2
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff fdda 	bl	8001dbc <calc_gas_resistance_high>
 8002208:	eef0 7a40 	vmov.f32	s15, s0
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	edc3 7a05 	vstr	s15, [r3, #20]
                else
                {
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
                }

                break;
 8002212:	e026      	b.n	8002262 <read_field_data+0x288>
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 8002214:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8002218:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff fd2b 	bl	8001c78 <calc_gas_resistance_low>
 8002222:	eef0 7a40 	vmov.f32	s15, s0
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	edc3 7a05 	vstr	s15, [r3, #20]
                break;
 800222c:	e019      	b.n	8002262 <read_field_data+0x288>
            }
        }

        if (rslt == BME68X_OK)
 800222e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002232:	2b00      	cmp	r3, #0
 8002234:	d107      	bne.n	8002246 <read_field_data+0x26c>
        {
            dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6852      	ldr	r2, [r2, #4]
 800223e:	4611      	mov	r1, r2
 8002240:	f242 7010 	movw	r0, #10000	; 0x2710
 8002244:	4798      	blx	r3
        }

        tries--;
 8002246:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800224a:	3b01      	subs	r3, #1
 800224c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    while ((tries) && (rslt == BME68X_OK))
 8002250:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002254:	2b00      	cmp	r3, #0
 8002256:	d004      	beq.n	8002262 <read_field_data+0x288>
 8002258:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800225c:	2b00      	cmp	r3, #0
 800225e:	f43f aed3 	beq.w	8002008 <read_field_data+0x2e>
    }

    return rslt;
 8002262:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8002266:	4618      	mov	r0, r3
 8002268:	3738      	adds	r7, #56	; 0x38
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <read_all_field_data>:

/* This internal API is used to read all data fields of the sensor */
static int8_t read_all_field_data(struct bme68x_data * const data[], struct bme68x_dev *dev)
{
 800226e:	b590      	push	{r4, r7, lr}
 8002270:	b09d      	sub	sp, #116	; 0x74
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
 8002276:	6039      	str	r1, [r7, #0]
    int8_t rslt = BME68X_OK;
 8002278:	2300      	movs	r3, #0
 800227a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    uint8_t buff[BME68X_LEN_FIELD * 3] = { 0 };
 800227e:	2300      	movs	r3, #0
 8002280:	62bb      	str	r3, [r7, #40]	; 0x28
 8002282:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002286:	222f      	movs	r2, #47	; 0x2f
 8002288:	2100      	movs	r1, #0
 800228a:	4618      	mov	r0, r3
 800228c:	f004 fc08 	bl	8006aa0 <memset>
    uint32_t adc_temp;
    uint32_t adc_pres;
    uint16_t adc_hum;
    uint16_t adc_gas_res_low, adc_gas_res_high;
    uint8_t off;
    uint8_t set_val[30] = { 0 }; /* idac, res_heat, gas_wait */
 8002290:	2300      	movs	r3, #0
 8002292:	60bb      	str	r3, [r7, #8]
 8002294:	f107 030c 	add.w	r3, r7, #12
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	605a      	str	r2, [r3, #4]
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	60da      	str	r2, [r3, #12]
 80022a2:	611a      	str	r2, [r3, #16]
 80022a4:	615a      	str	r2, [r3, #20]
 80022a6:	831a      	strh	r2, [r3, #24]
    uint8_t i;

    if (!data[0] && !data[1] && !data[2])
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d10c      	bne.n	80022ca <read_all_field_data+0x5c>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3304      	adds	r3, #4
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d107      	bne.n	80022ca <read_all_field_data+0x5c>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	3308      	adds	r3, #8
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d102      	bne.n	80022ca <read_all_field_data+0x5c>
    {
        rslt = BME68X_E_NULL_PTR;
 80022c4:	23ff      	movs	r3, #255	; 0xff
 80022c6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }

    if (rslt == BME68X_OK)
 80022ca:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d109      	bne.n	80022e6 <read_all_field_data+0x78>
    {
        rslt = bme68x_get_regs(BME68X_REG_FIELD0, buff, (uint32_t) BME68X_LEN_FIELD * 3, dev);
 80022d2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	2233      	movs	r2, #51	; 0x33
 80022da:	201d      	movs	r0, #29
 80022dc:	f7fe fea4 	bl	8001028 <bme68x_get_regs>
 80022e0:	4603      	mov	r3, r0
 80022e2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }

    if (rslt == BME68X_OK)
 80022e6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d109      	bne.n	8002302 <read_all_field_data+0x94>
    {
        rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0, set_val, 30, dev);
 80022ee:	f107 0108 	add.w	r1, r7, #8
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	221e      	movs	r2, #30
 80022f6:	2050      	movs	r0, #80	; 0x50
 80022f8:	f7fe fe96 	bl	8001028 <bme68x_get_regs>
 80022fc:	4603      	mov	r3, r0
 80022fe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }

    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8002302:	2300      	movs	r3, #0
 8002304:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8002308:	e1d4      	b.n	80026b4 <read_all_field_data+0x446>
    {
        off = (uint8_t)(i * BME68X_LEN_FIELD);
 800230a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800230e:	461a      	mov	r2, r3
 8002310:	0112      	lsls	r2, r2, #4
 8002312:	4413      	add	r3, r2
 8002314:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
        data[i]->status = buff[off] & BME68X_NEW_DATA_MSK;
 8002318:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800231c:	3370      	adds	r3, #112	; 0x70
 800231e:	443b      	add	r3, r7
 8002320:	f813 2c48 	ldrb.w	r2, [r3, #-72]
 8002324:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	440b      	add	r3, r1
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8002334:	b2d2      	uxtb	r2, r2
 8002336:	701a      	strb	r2, [r3, #0]
        data[i]->gas_index = buff[off] & BME68X_GAS_INDEX_MSK;
 8002338:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800233c:	3370      	adds	r3, #112	; 0x70
 800233e:	443b      	add	r3, r7
 8002340:	f813 2c48 	ldrb.w	r2, [r3, #-72]
 8002344:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	440b      	add	r3, r1
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f002 020f 	and.w	r2, r2, #15
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	705a      	strb	r2, [r3, #1]
        data[i]->meas_index = buff[off + 1];
 8002358:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800235c:	1c5a      	adds	r2, r3, #1
 800235e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	440b      	add	r3, r1
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	3270      	adds	r2, #112	; 0x70
 800236c:	443a      	add	r2, r7
 800236e:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8002372:	709a      	strb	r2, [r3, #2]

        /* read the raw data from the sensor */
        adc_pres =
            (uint32_t) (((uint32_t) buff[off + 2] * 4096) | ((uint32_t) buff[off + 3] * 16) |
 8002374:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002378:	3302      	adds	r3, #2
 800237a:	3370      	adds	r3, #112	; 0x70
 800237c:	443b      	add	r3, r7
 800237e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002382:	031a      	lsls	r2, r3, #12
 8002384:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002388:	3303      	adds	r3, #3
 800238a:	3370      	adds	r3, #112	; 0x70
 800238c:	443b      	add	r3, r7
 800238e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002392:	011b      	lsls	r3, r3, #4
 8002394:	4313      	orrs	r3, r2
                        ((uint32_t) buff[off + 4] / 16));
 8002396:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 800239a:	3204      	adds	r2, #4
 800239c:	3270      	adds	r2, #112	; 0x70
 800239e:	443a      	add	r2, r7
 80023a0:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 80023a4:	0912      	lsrs	r2, r2, #4
 80023a6:	b2d2      	uxtb	r2, r2
        adc_pres =
 80023a8:	4313      	orrs	r3, r2
 80023aa:	66bb      	str	r3, [r7, #104]	; 0x68
        adc_temp =
            (uint32_t) (((uint32_t) buff[off + 5] * 4096) | ((uint32_t) buff[off + 6] * 16) |
 80023ac:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80023b0:	3305      	adds	r3, #5
 80023b2:	3370      	adds	r3, #112	; 0x70
 80023b4:	443b      	add	r3, r7
 80023b6:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80023ba:	031a      	lsls	r2, r3, #12
 80023bc:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80023c0:	3306      	adds	r3, #6
 80023c2:	3370      	adds	r3, #112	; 0x70
 80023c4:	443b      	add	r3, r7
 80023c6:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	4313      	orrs	r3, r2
                        ((uint32_t) buff[off + 7] / 16));
 80023ce:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 80023d2:	3207      	adds	r2, #7
 80023d4:	3270      	adds	r2, #112	; 0x70
 80023d6:	443a      	add	r2, r7
 80023d8:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 80023dc:	0912      	lsrs	r2, r2, #4
 80023de:	b2d2      	uxtb	r2, r2
        adc_temp =
 80023e0:	4313      	orrs	r3, r2
 80023e2:	667b      	str	r3, [r7, #100]	; 0x64
        adc_hum = (uint16_t) (((uint32_t) buff[off + 8] * 256) | (uint32_t) buff[off + 9]);
 80023e4:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80023e8:	3308      	adds	r3, #8
 80023ea:	3370      	adds	r3, #112	; 0x70
 80023ec:	443b      	add	r3, r7
 80023ee:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	021b      	lsls	r3, r3, #8
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80023fc:	3309      	adds	r3, #9
 80023fe:	3370      	adds	r3, #112	; 0x70
 8002400:	443b      	add	r3, r7
 8002402:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002406:	b29b      	uxth	r3, r3
 8002408:	4313      	orrs	r3, r2
 800240a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        adc_gas_res_low = (uint16_t) ((uint32_t) buff[off + 13] * 4 | (((uint32_t) buff[off + 14]) / 64));
 800240e:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002412:	330d      	adds	r3, #13
 8002414:	3370      	adds	r3, #112	; 0x70
 8002416:	443b      	add	r3, r7
 8002418:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800241c:	b29b      	uxth	r3, r3
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	b29a      	uxth	r2, r3
 8002422:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002426:	330e      	adds	r3, #14
 8002428:	3370      	adds	r3, #112	; 0x70
 800242a:	443b      	add	r3, r7
 800242c:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002430:	099b      	lsrs	r3, r3, #6
 8002432:	b2db      	uxtb	r3, r3
 8002434:	b29b      	uxth	r3, r3
 8002436:	4313      	orrs	r3, r2
 8002438:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4 | (((uint32_t) buff[off + 16]) / 64));
 800243c:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002440:	330f      	adds	r3, #15
 8002442:	3370      	adds	r3, #112	; 0x70
 8002444:	443b      	add	r3, r7
 8002446:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800244a:	b29b      	uxth	r3, r3
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	b29a      	uxth	r2, r3
 8002450:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002454:	3310      	adds	r3, #16
 8002456:	3370      	adds	r3, #112	; 0x70
 8002458:	443b      	add	r3, r7
 800245a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800245e:	099b      	lsrs	r3, r3, #6
 8002460:	b2db      	uxtb	r3, r3
 8002462:	b29b      	uxth	r3, r3
 8002464:	4313      	orrs	r3, r2
 8002466:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
        gas_range_l = buff[off + 14] & BME68X_GAS_RANGE_MSK;
 800246a:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800246e:	330e      	adds	r3, #14
 8002470:	3370      	adds	r3, #112	; 0x70
 8002472:	443b      	add	r3, r7
 8002474:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002478:	f003 030f 	and.w	r3, r3, #15
 800247c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        gas_range_h = buff[off + 16] & BME68X_GAS_RANGE_MSK;
 8002480:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002484:	3310      	adds	r3, #16
 8002486:	3370      	adds	r3, #112	; 0x70
 8002488:	443b      	add	r3, r7
 800248a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d13a      	bne.n	8002514 <read_all_field_data+0x2a6>
        {
            data[i]->status |= buff[off + 16] & BME68X_GASM_VALID_MSK;
 800249e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	4413      	add	r3, r2
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	b25a      	sxtb	r2, r3
 80024ae:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80024b2:	3310      	adds	r3, #16
 80024b4:	3370      	adds	r3, #112	; 0x70
 80024b6:	443b      	add	r3, r7
 80024b8:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80024bc:	b25b      	sxtb	r3, r3
 80024be:	f003 0320 	and.w	r3, r3, #32
 80024c2:	b25b      	sxtb	r3, r3
 80024c4:	4313      	orrs	r3, r2
 80024c6:	b259      	sxtb	r1, r3
 80024c8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	4413      	add	r3, r2
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	b2ca      	uxtb	r2, r1
 80024d6:	701a      	strb	r2, [r3, #0]
            data[i]->status |= buff[off + 16] & BME68X_HEAT_STAB_MSK;
 80024d8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	4413      	add	r3, r2
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	b25a      	sxtb	r2, r3
 80024e8:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80024ec:	3310      	adds	r3, #16
 80024ee:	3370      	adds	r3, #112	; 0x70
 80024f0:	443b      	add	r3, r7
 80024f2:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80024f6:	b25b      	sxtb	r3, r3
 80024f8:	f003 0310 	and.w	r3, r3, #16
 80024fc:	b25b      	sxtb	r3, r3
 80024fe:	4313      	orrs	r3, r2
 8002500:	b259      	sxtb	r1, r3
 8002502:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	4413      	add	r3, r2
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	b2ca      	uxtb	r2, r1
 8002510:	701a      	strb	r2, [r3, #0]
 8002512:	e039      	b.n	8002588 <read_all_field_data+0x31a>
        }
        else
        {
            data[i]->status |= buff[off + 14] & BME68X_GASM_VALID_MSK;
 8002514:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	4413      	add	r3, r2
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	b25a      	sxtb	r2, r3
 8002524:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002528:	330e      	adds	r3, #14
 800252a:	3370      	adds	r3, #112	; 0x70
 800252c:	443b      	add	r3, r7
 800252e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002532:	b25b      	sxtb	r3, r3
 8002534:	f003 0320 	and.w	r3, r3, #32
 8002538:	b25b      	sxtb	r3, r3
 800253a:	4313      	orrs	r3, r2
 800253c:	b259      	sxtb	r1, r3
 800253e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	4413      	add	r3, r2
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	b2ca      	uxtb	r2, r1
 800254c:	701a      	strb	r2, [r3, #0]
            data[i]->status |= buff[off + 14] & BME68X_HEAT_STAB_MSK;
 800254e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	4413      	add	r3, r2
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	b25a      	sxtb	r2, r3
 800255e:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002562:	330e      	adds	r3, #14
 8002564:	3370      	adds	r3, #112	; 0x70
 8002566:	443b      	add	r3, r7
 8002568:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800256c:	b25b      	sxtb	r3, r3
 800256e:	f003 0310 	and.w	r3, r3, #16
 8002572:	b25b      	sxtb	r3, r3
 8002574:	4313      	orrs	r3, r2
 8002576:	b259      	sxtb	r1, r3
 8002578:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	4413      	add	r3, r2
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	b2ca      	uxtb	r2, r1
 8002586:	701a      	strb	r2, [r3, #0]
        }

        data[i]->idac = set_val[data[i]->gas_index];
 8002588:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	4413      	add	r3, r2
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	785b      	ldrb	r3, [r3, #1]
 8002596:	4619      	mov	r1, r3
 8002598:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	4413      	add	r3, r2
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f101 0270 	add.w	r2, r1, #112	; 0x70
 80025a8:	443a      	add	r2, r7
 80025aa:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 80025ae:	711a      	strb	r2, [r3, #4]
        data[i]->res_heat = set_val[10 + data[i]->gas_index];
 80025b0:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	4413      	add	r3, r2
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	785b      	ldrb	r3, [r3, #1]
 80025be:	f103 020a 	add.w	r2, r3, #10
 80025c2:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	6879      	ldr	r1, [r7, #4]
 80025ca:	440b      	add	r3, r1
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	3270      	adds	r2, #112	; 0x70
 80025d0:	443a      	add	r2, r7
 80025d2:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 80025d6:	70da      	strb	r2, [r3, #3]
        data[i]->gas_wait = set_val[20 + data[i]->gas_index];
 80025d8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	4413      	add	r3, r2
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	785b      	ldrb	r3, [r3, #1]
 80025e6:	f103 0214 	add.w	r2, r3, #20
 80025ea:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	6879      	ldr	r1, [r7, #4]
 80025f2:	440b      	add	r3, r1
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	3270      	adds	r2, #112	; 0x70
 80025f8:	443a      	add	r2, r7
 80025fa:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 80025fe:	715a      	strb	r2, [r3, #5]
        data[i]->temperature = calc_temperature(adc_temp, dev);
 8002600:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	4413      	add	r3, r2
 800260a:	681c      	ldr	r4, [r3, #0]
 800260c:	6839      	ldr	r1, [r7, #0]
 800260e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002610:	f7ff f89e 	bl	8001750 <calc_temperature>
 8002614:	eef0 7a40 	vmov.f32	s15, s0
 8002618:	edc4 7a02 	vstr	s15, [r4, #8]
        data[i]->pressure = calc_pressure(adc_pres, dev);
 800261c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	4413      	add	r3, r2
 8002626:	681c      	ldr	r4, [r3, #0]
 8002628:	6839      	ldr	r1, [r7, #0]
 800262a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800262c:	f7ff f916 	bl	800185c <calc_pressure>
 8002630:	eef0 7a40 	vmov.f32	s15, s0
 8002634:	edc4 7a03 	vstr	s15, [r4, #12]
        data[i]->humidity = calc_humidity(adc_hum, dev);
 8002638:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	4413      	add	r3, r2
 8002642:	681c      	ldr	r4, [r3, #0]
 8002644:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8002648:	6839      	ldr	r1, [r7, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff fa48 	bl	8001ae0 <calc_humidity>
 8002650:	eef0 7a40 	vmov.f32	s15, s0
 8002654:	edc4 7a04 	vstr	s15, [r4, #16]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d112      	bne.n	8002686 <read_all_field_data+0x418>
        {
            data[i]->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
 8002660:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	4413      	add	r3, r2
 800266a:	681c      	ldr	r4, [r3, #0]
 800266c:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8002670:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002674:	4611      	mov	r1, r2
 8002676:	4618      	mov	r0, r3
 8002678:	f7ff fba0 	bl	8001dbc <calc_gas_resistance_high>
 800267c:	eef0 7a40 	vmov.f32	s15, s0
 8002680:	edc4 7a05 	vstr	s15, [r4, #20]
 8002684:	e011      	b.n	80026aa <read_all_field_data+0x43c>
        }
        else
        {
            data[i]->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 8002686:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	4413      	add	r3, r2
 8002690:	681c      	ldr	r4, [r3, #0]
 8002692:	f897 105d 	ldrb.w	r1, [r7, #93]	; 0x5d
 8002696:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff faeb 	bl	8001c78 <calc_gas_resistance_low>
 80026a2:	eef0 7a40 	vmov.f32	s15, s0
 80026a6:	edc4 7a05 	vstr	s15, [r4, #20]
    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 80026aa:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80026ae:	3301      	adds	r3, #1
 80026b0:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 80026b4:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d804      	bhi.n	80026c6 <read_all_field_data+0x458>
 80026bc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f43f ae22 	beq.w	800230a <read_all_field_data+0x9c>
        }
    }

    return rslt;
 80026c6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3774      	adds	r7, #116	; 0x74
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd90      	pop	{r4, r7, pc}

080026d2 <set_mem_page>:

/* This internal API is used to switch between SPI memory pages */
static int8_t set_mem_page(uint8_t reg_addr, struct bme68x_dev *dev)
{
 80026d2:	b590      	push	{r4, r7, lr}
 80026d4:	b085      	sub	sp, #20
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	4603      	mov	r3, r0
 80026da:	6039      	str	r1, [r7, #0]
 80026dc:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg;
    uint8_t mem_page;

    /* Check for null pointers in the device structure*/
    rslt = null_ptr_check(dev);
 80026de:	6838      	ldr	r0, [r7, #0]
 80026e0:	f000 f8b8 	bl	8002854 <null_ptr_check>
 80026e4:	4603      	mov	r3, r0
 80026e6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 80026e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d14f      	bne.n	8002790 <set_mem_page+0xbe>
    {
        if (reg_addr > 0x7f)
 80026f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	da02      	bge.n	80026fe <set_mem_page+0x2c>
        {
            mem_page = BME68X_MEM_PAGE1;
 80026f8:	2300      	movs	r3, #0
 80026fa:	73bb      	strb	r3, [r7, #14]
 80026fc:	e001      	b.n	8002702 <set_mem_page+0x30>
        }
        else
        {
            mem_page = BME68X_MEM_PAGE0;
 80026fe:	2310      	movs	r3, #16
 8002700:	73bb      	strb	r3, [r7, #14]
        }

        if (mem_page != dev->mem_page)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	7b5b      	ldrb	r3, [r3, #13]
 8002706:	7bba      	ldrb	r2, [r7, #14]
 8002708:	429a      	cmp	r2, r3
 800270a:	d041      	beq.n	8002790 <set_mem_page+0xbe>
        {
            dev->mem_page = mem_page;
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	7bba      	ldrb	r2, [r7, #14]
 8002710:	735a      	strb	r2, [r3, #13]
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f107 010d 	add.w	r1, r7, #13
 800271e:	2201      	movs	r2, #1
 8002720:	20f3      	movs	r0, #243	; 0xf3
 8002722:	47a0      	blx	r4
 8002724:	4603      	mov	r3, r0
 8002726:	461a      	mov	r2, r3
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            if (dev->intf_rslt != 0)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <set_mem_page+0x6a>
            {
                rslt = BME68X_E_COM_FAIL;
 8002738:	23fe      	movs	r3, #254	; 0xfe
 800273a:	73fb      	strb	r3, [r7, #15]
            }

            if (rslt == BME68X_OK)
 800273c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d125      	bne.n	8002790 <set_mem_page+0xbe>
            {
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 8002744:	7b7b      	ldrb	r3, [r7, #13]
 8002746:	f023 0310 	bic.w	r3, r3, #16
 800274a:	b2db      	uxtb	r3, r3
 800274c:	737b      	strb	r3, [r7, #13]
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	7b5b      	ldrb	r3, [r3, #13]
 8002752:	b25b      	sxtb	r3, r3
 8002754:	f003 0310 	and.w	r3, r3, #16
 8002758:	b25a      	sxtb	r2, r3
 800275a:	7b7b      	ldrb	r3, [r7, #13]
 800275c:	b25b      	sxtb	r3, r3
 800275e:	4313      	orrs	r3, r2
 8002760:	b25b      	sxtb	r3, r3
 8002762:	b2db      	uxtb	r3, r3
 8002764:	737b      	strb	r3, [r7, #13]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f107 010d 	add.w	r1, r7, #13
 8002772:	2201      	movs	r2, #1
 8002774:	2073      	movs	r0, #115	; 0x73
 8002776:	47a0      	blx	r4
 8002778:	4603      	mov	r3, r0
 800277a:	461a      	mov	r2, r3
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
                if (dev->intf_rslt != 0)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <set_mem_page+0xbe>
                {
                    rslt = BME68X_E_COM_FAIL;
 800278c:	23fe      	movs	r3, #254	; 0xfe
 800278e:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8002790:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002794:	4618      	mov	r0, r3
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	bd90      	pop	{r4, r7, pc}

0800279c <get_mem_page>:

/* This internal API is used to get the current SPI memory page */
static int8_t get_mem_page(struct bme68x_dev *dev)
{
 800279c:	b590      	push	{r4, r7, lr}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 f855 	bl	8002854 <null_ptr_check>
 80027aa:	4603      	mov	r3, r0
 80027ac:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 80027ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d11b      	bne.n	80027ee <get_mem_page+0x52>
    {
        dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f107 010e 	add.w	r1, r7, #14
 80027c2:	2201      	movs	r2, #1
 80027c4:	20f3      	movs	r0, #243	; 0xf3
 80027c6:	47a0      	blx	r4
 80027c8:	4603      	mov	r3, r0
 80027ca:	461a      	mov	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (dev->intf_rslt != 0)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d002      	beq.n	80027e2 <get_mem_page+0x46>
        {
            rslt = BME68X_E_COM_FAIL;
 80027dc:	23fe      	movs	r3, #254	; 0xfe
 80027de:	73fb      	strb	r3, [r7, #15]
 80027e0:	e005      	b.n	80027ee <get_mem_page+0x52>
        }
        else
        {
            dev->mem_page = reg & BME68X_MEM_PAGE_MSK;
 80027e2:	7bbb      	ldrb	r3, [r7, #14]
 80027e4:	f003 0310 	and.w	r3, r3, #16
 80027e8:	b2da      	uxtb	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	735a      	strb	r2, [r3, #13]
        }
    }

    return rslt;
 80027ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd90      	pop	{r4, r7, pc}

080027fa <boundary_check>:

/* This internal API is used to limit the max value of a parameter */
static int8_t boundary_check(uint8_t *value, uint8_t max, struct bme68x_dev *dev)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b086      	sub	sp, #24
 80027fe:	af00      	add	r7, sp, #0
 8002800:	60f8      	str	r0, [r7, #12]
 8002802:	460b      	mov	r3, r1
 8002804:	607a      	str	r2, [r7, #4]
 8002806:	72fb      	strb	r3, [r7, #11]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 f823 	bl	8002854 <null_ptr_check>
 800280e:	4603      	mov	r3, r0
 8002810:	75fb      	strb	r3, [r7, #23]
    if ((value != NULL) && (rslt == BME68X_OK))
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d015      	beq.n	8002844 <boundary_check+0x4a>
 8002818:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d111      	bne.n	8002844 <boundary_check+0x4a>
    {
        /* Check if value is above maximum value */
        if (*value > max)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	7afa      	ldrb	r2, [r7, #11]
 8002826:	429a      	cmp	r2, r3
 8002828:	d20e      	bcs.n	8002848 <boundary_check+0x4e>
        {
            /* Auto correct the invalid value to maximum value */
            *value = max;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	7afa      	ldrb	r2, [r7, #11]
 800282e:	701a      	strb	r2, [r3, #0]
            dev->info_msg |= BME68X_I_PARAM_CORR;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002836:	f043 0301 	orr.w	r3, r3, #1
 800283a:	b2da      	uxtb	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        if (*value > max)
 8002842:	e001      	b.n	8002848 <boundary_check+0x4e>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8002844:	23ff      	movs	r3, #255	; 0xff
 8002846:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002848:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800284c:	4618      	mov	r0, r3
 800284e:	3718      	adds	r7, #24
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <null_ptr_check>:

/* This internal API is used to check the bme68x_dev for null pointers */
static int8_t null_ptr_check(const struct bme68x_dev *dev)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
    int8_t rslt = BME68X_OK;
 800285c:	2300      	movs	r3, #0
 800285e:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00b      	beq.n	800287e <null_ptr_check+0x2a>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	2b00      	cmp	r3, #0
 800286c:	d007      	beq.n	800287e <null_ptr_check+0x2a>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <null_ptr_check+0x2a>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <null_ptr_check+0x2e>
    {
        /* Device structure pointer is not valid */
        rslt = BME68X_E_NULL_PTR;
 800287e:	23ff      	movs	r3, #255	; 0xff
 8002880:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002882:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002886:	4618      	mov	r0, r3
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
	...

08002894 <set_conf>:

/* This internal API is used to set heater configurations */
static int8_t set_conf(const struct bme68x_heatr_conf *conf, uint8_t op_mode, uint8_t *nb_conv, struct bme68x_dev *dev)
{
 8002894:	b590      	push	{r4, r7, lr}
 8002896:	b093      	sub	sp, #76	; 0x4c
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	607a      	str	r2, [r7, #4]
 800289e:	603b      	str	r3, [r7, #0]
 80028a0:	460b      	mov	r3, r1
 80028a2:	72fb      	strb	r3, [r7, #11]
    int8_t rslt = BME68X_OK;
 80028a4:	2300      	movs	r3, #0
 80028a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t i;
    uint8_t shared_dur;
    uint8_t write_len = 0;
 80028aa:	2300      	movs	r3, #0
 80028ac:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    uint8_t heater_dur_shared_addr = BME68X_REG_SHD_HEATR_DUR;
 80028b0:	236e      	movs	r3, #110	; 0x6e
 80028b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80028b6:	4aa1      	ldr	r2, [pc, #644]	; (8002b3c <set_conf+0x2a8>)
 80028b8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80028bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80028be:	c303      	stmia	r3!, {r0, r1}
 80028c0:	801a      	strh	r2, [r3, #0]
    uint8_t rh_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80028c2:	4a9e      	ldr	r2, [pc, #632]	; (8002b3c <set_conf+0x2a8>)
 80028c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80028ca:	c303      	stmia	r3!, {r0, r1}
 80028cc:	801a      	strh	r2, [r3, #0]
    uint8_t gw_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80028ce:	4a9b      	ldr	r2, [pc, #620]	; (8002b3c <set_conf+0x2a8>)
 80028d0:	f107 0320 	add.w	r3, r7, #32
 80028d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80028d6:	c303      	stmia	r3!, {r0, r1}
 80028d8:	801a      	strh	r2, [r3, #0]
    uint8_t gw_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80028da:	4a98      	ldr	r2, [pc, #608]	; (8002b3c <set_conf+0x2a8>)
 80028dc:	f107 0314 	add.w	r3, r7, #20
 80028e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80028e2:	c303      	stmia	r3!, {r0, r1}
 80028e4:	801a      	strh	r2, [r3, #0]

    switch (op_mode)
 80028e6:	7afb      	ldrb	r3, [r7, #11]
 80028e8:	2b03      	cmp	r3, #3
 80028ea:	d024      	beq.n	8002936 <set_conf+0xa2>
 80028ec:	2b03      	cmp	r3, #3
 80028ee:	f300 80f9 	bgt.w	8002ae4 <set_conf+0x250>
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d002      	beq.n	80028fc <set_conf+0x68>
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d07c      	beq.n	80029f4 <set_conf+0x160>
 80028fa:	e0f3      	b.n	8002ae4 <set_conf+0x250>
    {
        case BME68X_FORCED_MODE:
            rh_reg_addr[0] = BME68X_REG_RES_HEAT0;
 80028fc:	235a      	movs	r3, #90	; 0x5a
 80028fe:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
            rh_reg_data[0] = calc_res_heat(conf->heatr_temp, dev);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	885b      	ldrh	r3, [r3, #2]
 8002906:	6839      	ldr	r1, [r7, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff fa91 	bl	8001e30 <calc_res_heat>
 800290e:	4603      	mov	r3, r0
 8002910:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
            gw_reg_addr[0] = BME68X_REG_GAS_WAIT0;
 8002914:	2364      	movs	r3, #100	; 0x64
 8002916:	f887 3020 	strb.w	r3, [r7, #32]
            gw_reg_data[0] = calc_gas_wait(conf->heatr_dur);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	889b      	ldrh	r3, [r3, #4]
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff fb36 	bl	8001f90 <calc_gas_wait>
 8002924:	4603      	mov	r3, r0
 8002926:	753b      	strb	r3, [r7, #20]
            (*nb_conv) = 0;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	701a      	strb	r2, [r3, #0]
            write_len = 1;
 800292e:	2301      	movs	r3, #1
 8002930:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
 8002934:	e0db      	b.n	8002aee <set_conf+0x25a>
        case BME68X_SEQUENTIAL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <set_conf+0xb2>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d103      	bne.n	800294e <set_conf+0xba>
            {
                rslt = BME68X_E_NULL_PTR;
 8002946:	23ff      	movs	r3, #255	; 0xff
 8002948:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                break;
 800294c:	e0cf      	b.n	8002aee <set_conf+0x25a>
            }

            for (i = 0; i < conf->profile_len; i++)
 800294e:	2300      	movs	r3, #0
 8002950:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002954:	e03f      	b.n	80029d6 <set_conf+0x142>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8002956:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800295a:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 800295e:	325a      	adds	r2, #90	; 0x5a
 8002960:	b2d2      	uxtb	r2, r2
 8002962:	3348      	adds	r3, #72	; 0x48
 8002964:	443b      	add	r3, r7
 8002966:	f803 2c10 	strb.w	r2, [r3, #-16]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	689a      	ldr	r2, [r3, #8]
 800296e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	4413      	add	r3, r2
 8002976:	881b      	ldrh	r3, [r3, #0]
 8002978:	f897 4046 	ldrb.w	r4, [r7, #70]	; 0x46
 800297c:	6839      	ldr	r1, [r7, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff fa56 	bl	8001e30 <calc_res_heat>
 8002984:	4603      	mov	r3, r0
 8002986:	461a      	mov	r2, r3
 8002988:	f104 0348 	add.w	r3, r4, #72	; 0x48
 800298c:	443b      	add	r3, r7
 800298e:	f803 2c1c 	strb.w	r2, [r3, #-28]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 8002992:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002996:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 800299a:	3264      	adds	r2, #100	; 0x64
 800299c:	b2d2      	uxtb	r2, r2
 800299e:	3348      	adds	r3, #72	; 0x48
 80029a0:	443b      	add	r3, r7
 80029a2:	f803 2c28 	strb.w	r2, [r3, #-40]
                gw_reg_data[i] = calc_gas_wait(conf->heatr_dur_prof[i]);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	68da      	ldr	r2, [r3, #12]
 80029aa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	4413      	add	r3, r2
 80029b2:	881b      	ldrh	r3, [r3, #0]
 80029b4:	f897 4046 	ldrb.w	r4, [r7, #70]	; 0x46
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff fae9 	bl	8001f90 <calc_gas_wait>
 80029be:	4603      	mov	r3, r0
 80029c0:	461a      	mov	r2, r3
 80029c2:	f104 0348 	add.w	r3, r4, #72	; 0x48
 80029c6:	443b      	add	r3, r7
 80029c8:	f803 2c34 	strb.w	r2, [r3, #-52]
            for (i = 0; i < conf->profile_len; i++)
 80029cc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80029d0:	3301      	adds	r3, #1
 80029d2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	7c1b      	ldrb	r3, [r3, #16]
 80029da:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80029de:	429a      	cmp	r2, r3
 80029e0:	d3b9      	bcc.n	8002956 <set_conf+0xc2>
            }

            (*nb_conv) = conf->profile_len;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	7c1a      	ldrb	r2, [r3, #16]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	7c1b      	ldrb	r3, [r3, #16]
 80029ee:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
 80029f2:	e07c      	b.n	8002aee <set_conf+0x25a>
        case BME68X_PARALLEL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d003      	beq.n	8002a04 <set_conf+0x170>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d103      	bne.n	8002a0c <set_conf+0x178>
            {
                rslt = BME68X_E_NULL_PTR;
 8002a04:	23ff      	movs	r3, #255	; 0xff
 8002a06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                break;
 8002a0a:	e070      	b.n	8002aee <set_conf+0x25a>
            }

            if (conf->shared_heatr_dur == 0)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8a5b      	ldrh	r3, [r3, #18]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d102      	bne.n	8002a1a <set_conf+0x186>
            {
                rslt = BME68X_W_DEFINE_SHD_HEATR_DUR;
 8002a14:	2303      	movs	r3, #3
 8002a16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            }

            for (i = 0; i < conf->profile_len; i++)
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002a20:	e03a      	b.n	8002a98 <set_conf+0x204>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8002a22:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002a26:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8002a2a:	325a      	adds	r2, #90	; 0x5a
 8002a2c:	b2d2      	uxtb	r2, r2
 8002a2e:	3348      	adds	r3, #72	; 0x48
 8002a30:	443b      	add	r3, r7
 8002a32:	f803 2c10 	strb.w	r2, [r3, #-16]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	689a      	ldr	r2, [r3, #8]
 8002a3a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	4413      	add	r3, r2
 8002a42:	881b      	ldrh	r3, [r3, #0]
 8002a44:	f897 4046 	ldrb.w	r4, [r7, #70]	; 0x46
 8002a48:	6839      	ldr	r1, [r7, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff f9f0 	bl	8001e30 <calc_res_heat>
 8002a50:	4603      	mov	r3, r0
 8002a52:	461a      	mov	r2, r3
 8002a54:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8002a58:	443b      	add	r3, r7
 8002a5a:	f803 2c1c 	strb.w	r2, [r3, #-28]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 8002a5e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002a62:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8002a66:	3264      	adds	r2, #100	; 0x64
 8002a68:	b2d2      	uxtb	r2, r2
 8002a6a:	3348      	adds	r3, #72	; 0x48
 8002a6c:	443b      	add	r3, r7
 8002a6e:	f803 2c28 	strb.w	r2, [r3, #-40]
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	4413      	add	r3, r2
 8002a7e:	881a      	ldrh	r2, [r3, #0]
 8002a80:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002a84:	b2d2      	uxtb	r2, r2
 8002a86:	3348      	adds	r3, #72	; 0x48
 8002a88:	443b      	add	r3, r7
 8002a8a:	f803 2c34 	strb.w	r2, [r3, #-52]
            for (i = 0; i < conf->profile_len; i++)
 8002a8e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002a92:	3301      	adds	r3, #1
 8002a94:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	7c1b      	ldrb	r3, [r3, #16]
 8002a9c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d3be      	bcc.n	8002a22 <set_conf+0x18e>
            }

            (*nb_conv) = conf->profile_len;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	7c1a      	ldrb	r2, [r3, #16]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	7c1b      	ldrb	r3, [r3, #16]
 8002ab0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            shared_dur = calc_heatr_dur_shared(conf->shared_heatr_dur);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	8a5b      	ldrh	r3, [r3, #18]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f000 f841 	bl	8002b40 <calc_heatr_dur_shared>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
            if (rslt == BME68X_OK)
 8002ac4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d10f      	bne.n	8002aec <set_conf+0x258>
            {
                rslt = bme68x_set_regs(&heater_dur_shared_addr, &shared_dur, 1, dev);
 8002acc:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8002ad0:	f107 0043 	add.w	r0, r7, #67	; 0x43
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f7fe fa16 	bl	8000f08 <bme68x_set_regs>
 8002adc:	4603      	mov	r3, r0
 8002ade:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            }

            break;
 8002ae2:	e003      	b.n	8002aec <set_conf+0x258>
        default:
            rslt = BME68X_W_DEFINE_OP_MODE;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002aea:	e000      	b.n	8002aee <set_conf+0x25a>
            break;
 8002aec:	bf00      	nop
    }

    if (rslt == BME68X_OK)
 8002aee:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10b      	bne.n	8002b0e <set_conf+0x27a>
    {
        rslt = bme68x_set_regs(rh_reg_addr, rh_reg_data, write_len, dev);
 8002af6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002afa:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002afe:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	f7fe fa00 	bl	8000f08 <bme68x_set_regs>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    if (rslt == BME68X_OK)
 8002b0e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d10b      	bne.n	8002b2e <set_conf+0x29a>
    {
        rslt = bme68x_set_regs(gw_reg_addr, gw_reg_data, write_len, dev);
 8002b16:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002b1a:	f107 0114 	add.w	r1, r7, #20
 8002b1e:	f107 0020 	add.w	r0, r7, #32
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	f7fe f9f0 	bl	8000f08 <bme68x_set_regs>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    return rslt;
 8002b2e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	374c      	adds	r7, #76	; 0x4c
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd90      	pop	{r4, r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	08009948 	.word	0x08009948

08002b40 <calc_heatr_dur_shared>:

/* This internal API is used to calculate the register value for
 * shared heater duration */
static uint8_t calc_heatr_dur_shared(uint16_t dur)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	80fb      	strh	r3, [r7, #6]
    uint8_t factor = 0;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	73fb      	strb	r3, [r7, #15]
    uint8_t heatdurval;

    if (dur >= 0x783)
 8002b4e:	88fb      	ldrh	r3, [r7, #6]
 8002b50:	f240 7282 	movw	r2, #1922	; 0x782
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d902      	bls.n	8002b5e <calc_heatr_dur_shared+0x1e>
    {
        heatdurval = 0xff; /* Max duration */
 8002b58:	23ff      	movs	r3, #255	; 0xff
 8002b5a:	73bb      	strb	r3, [r7, #14]
 8002b5c:	e01d      	b.n	8002b9a <calc_heatr_dur_shared+0x5a>
    }
    else
    {
        /* Step size of 0.477ms */
        dur = (uint16_t)(((uint32_t)dur * 1000) / 477);
 8002b5e:	88fb      	ldrh	r3, [r7, #6]
 8002b60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b64:	fb03 f202 	mul.w	r2, r3, r2
 8002b68:	4b0f      	ldr	r3, [pc, #60]	; (8002ba8 <calc_heatr_dur_shared+0x68>)
 8002b6a:	fba3 1302 	umull	r1, r3, r3, r2
 8002b6e:	1ad2      	subs	r2, r2, r3
 8002b70:	0852      	lsrs	r2, r2, #1
 8002b72:	4413      	add	r3, r2
 8002b74:	0a1b      	lsrs	r3, r3, #8
 8002b76:	80fb      	strh	r3, [r7, #6]
        while (dur > 0x3F)
 8002b78:	e005      	b.n	8002b86 <calc_heatr_dur_shared+0x46>
        {
            dur = dur >> 2;
 8002b7a:	88fb      	ldrh	r3, [r7, #6]
 8002b7c:	089b      	lsrs	r3, r3, #2
 8002b7e:	80fb      	strh	r3, [r7, #6]
            factor += 1;
 8002b80:	7bfb      	ldrb	r3, [r7, #15]
 8002b82:	3301      	adds	r3, #1
 8002b84:	73fb      	strb	r3, [r7, #15]
        while (dur > 0x3F)
 8002b86:	88fb      	ldrh	r3, [r7, #6]
 8002b88:	2b3f      	cmp	r3, #63	; 0x3f
 8002b8a:	d8f6      	bhi.n	8002b7a <calc_heatr_dur_shared+0x3a>
        }

        heatdurval = (uint8_t)(dur + (factor * 64));
 8002b8c:	88fb      	ldrh	r3, [r7, #6]
 8002b8e:	b2da      	uxtb	r2, r3
 8002b90:	7bfb      	ldrb	r3, [r7, #15]
 8002b92:	019b      	lsls	r3, r3, #6
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	4413      	add	r3, r2
 8002b98:	73bb      	strb	r3, [r7, #14]
    }

    return heatdurval;
 8002b9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3714      	adds	r7, #20
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr
 8002ba8:	12c8b89f 	.word	0x12c8b89f

08002bac <sort_sensor_data>:

/* This internal API is used sort the sensor data */
static void sort_sensor_data(uint8_t low_index, uint8_t high_index, struct bme68x_data *field[])
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	603a      	str	r2, [r7, #0]
 8002bb6:	71fb      	strb	r3, [r7, #7]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	71bb      	strb	r3, [r7, #6]
    int16_t meas_index1;
    int16_t meas_index2;

    meas_index1 = (int16_t)field[low_index]->meas_index;
 8002bbc:	79fb      	ldrb	r3, [r7, #7]
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	789b      	ldrb	r3, [r3, #2]
 8002bc8:	81fb      	strh	r3, [r7, #14]
    meas_index2 = (int16_t)field[high_index]->meas_index;
 8002bca:	79bb      	ldrb	r3, [r7, #6]
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	789b      	ldrb	r3, [r3, #2]
 8002bd6:	81bb      	strh	r3, [r7, #12]
    if ((field[low_index]->status & BME68X_NEW_DATA_MSK) && (field[high_index]->status & BME68X_NEW_DATA_MSK))
 8002bd8:	79fb      	ldrb	r3, [r7, #7]
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	4413      	add	r3, r2
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	b25b      	sxtb	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	da21      	bge.n	8002c2e <sort_sensor_data+0x82>
 8002bea:	79bb      	ldrb	r3, [r7, #6]
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	b25b      	sxtb	r3, r3
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	da18      	bge.n	8002c2e <sort_sensor_data+0x82>
    {
        int16_t diff = meas_index2 - meas_index1;
 8002bfc:	89ba      	ldrh	r2, [r7, #12]
 8002bfe:	89fb      	ldrh	r3, [r7, #14]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	817b      	strh	r3, [r7, #10]
        if (((diff > -3) && (diff < 0)) || (diff > 2))
 8002c06:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002c0a:	f113 0f02 	cmn.w	r3, #2
 8002c0e:	db03      	blt.n	8002c18 <sort_sensor_data+0x6c>
 8002c10:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	db03      	blt.n	8002c20 <sort_sensor_data+0x74>
 8002c18:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	dd16      	ble.n	8002c4e <sort_sensor_data+0xa2>
        {
            swap_fields(low_index, high_index, field);
 8002c20:	79b9      	ldrb	r1, [r7, #6]
 8002c22:	79fb      	ldrb	r3, [r7, #7]
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f000 f816 	bl	8002c58 <swap_fields>
    {
 8002c2c:	e00f      	b.n	8002c4e <sort_sensor_data+0xa2>
        }
    }
    else if (field[high_index]->status & BME68X_NEW_DATA_MSK)
 8002c2e:	79bb      	ldrb	r3, [r7, #6]
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	683a      	ldr	r2, [r7, #0]
 8002c34:	4413      	add	r3, r2
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	b25b      	sxtb	r3, r3
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	da07      	bge.n	8002c50 <sort_sensor_data+0xa4>
    {
        swap_fields(low_index, high_index, field);
 8002c40:	79b9      	ldrb	r1, [r7, #6]
 8002c42:	79fb      	ldrb	r3, [r7, #7]
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 f806 	bl	8002c58 <swap_fields>
     *         - diff > 2, case 4.
     *
     *     Here the limits of -3 and 2 derive from the fact that there are 3 fields.
     *     These values decrease or increase respectively if the number of fields increases.
     */
}
 8002c4c:	e000      	b.n	8002c50 <sort_sensor_data+0xa4>
    {
 8002c4e:	bf00      	nop
}
 8002c50:	bf00      	nop
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <swap_fields>:

/* This internal API is used sort the sensor data */
static void swap_fields(uint8_t index1, uint8_t index2, struct bme68x_data *field[])
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	4603      	mov	r3, r0
 8002c60:	603a      	str	r2, [r7, #0]
 8002c62:	71fb      	strb	r3, [r7, #7]
 8002c64:	460b      	mov	r3, r1
 8002c66:	71bb      	strb	r3, [r7, #6]
    struct bme68x_data *temp;

    temp = field[index1];
 8002c68:	79fb      	ldrb	r3, [r7, #7]
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	4413      	add	r3, r2
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	60fb      	str	r3, [r7, #12]
    field[index1] = field[index2];
 8002c74:	79bb      	ldrb	r3, [r7, #6]
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	441a      	add	r2, r3
 8002c7c:	79fb      	ldrb	r3, [r7, #7]
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	6839      	ldr	r1, [r7, #0]
 8002c82:	440b      	add	r3, r1
 8002c84:	6812      	ldr	r2, [r2, #0]
 8002c86:	601a      	str	r2, [r3, #0]
    field[index2] = temp;
 8002c88:	79bb      	ldrb	r3, [r7, #6]
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	4413      	add	r3, r2
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	601a      	str	r2, [r3, #0]
}
 8002c94:	bf00      	nop
 8002c96:	3714      	adds	r7, #20
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <get_calib_data>:
    return rslt;
}

/* This internal API is used to read the calibration coefficients */
static int8_t get_calib_data(struct bme68x_dev *dev)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08e      	sub	sp, #56	; 0x38
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t coeff_array[BME68X_LEN_COEFF_ALL];

    rslt = bme68x_get_regs(BME68X_REG_COEFF1, coeff_array, BME68X_LEN_COEFF1, dev);
 8002ca8:	f107 010c 	add.w	r1, r7, #12
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2217      	movs	r2, #23
 8002cb0:	208a      	movs	r0, #138	; 0x8a
 8002cb2:	f7fe f9b9 	bl	8001028 <bme68x_get_regs>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (rslt == BME68X_OK)
 8002cbc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10b      	bne.n	8002cdc <get_calib_data+0x3c>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF2, &coeff_array[BME68X_LEN_COEFF1], BME68X_LEN_COEFF2, dev);
 8002cc4:	f107 030c 	add.w	r3, r7, #12
 8002cc8:	f103 0117 	add.w	r1, r3, #23
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	220e      	movs	r2, #14
 8002cd0:	20e1      	movs	r0, #225	; 0xe1
 8002cd2:	f7fe f9a9 	bl	8001028 <bme68x_get_regs>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }

    if (rslt == BME68X_OK)
 8002cdc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d10b      	bne.n	8002cfc <get_calib_data+0x5c>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF3,
 8002ce4:	f107 030c 	add.w	r3, r7, #12
 8002ce8:	f103 0125 	add.w	r1, r3, #37	; 0x25
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2205      	movs	r2, #5
 8002cf0:	2000      	movs	r0, #0
 8002cf2:	f7fe f999 	bl	8001028 <bme68x_get_regs>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                               &coeff_array[BME68X_LEN_COEFF1 + BME68X_LEN_COEFF2],
                               BME68X_LEN_COEFF3,
                               dev);
    }

    if (rslt == BME68X_OK)
 8002cfc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f040 80cb 	bne.w	8002e9c <get_calib_data+0x1fc>
    {
        /* Temperature related coefficients */
        dev->calib.par_t1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T1_MSB], coeff_array[BME68X_IDX_T1_LSB]));
 8002d06:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002d0a:	021b      	lsls	r3, r3, #8
 8002d0c:	b21a      	sxth	r2, r3
 8002d0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002d12:	b21b      	sxth	r3, r3
 8002d14:	4313      	orrs	r3, r2
 8002d16:	b21b      	sxth	r3, r3
 8002d18:	b29a      	uxth	r2, r3
        dev->calib.par_t1 =
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	83da      	strh	r2, [r3, #30]
        dev->calib.par_t2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T2_MSB], coeff_array[BME68X_IDX_T2_LSB]));
 8002d1e:	7b7b      	ldrb	r3, [r7, #13]
 8002d20:	021b      	lsls	r3, r3, #8
 8002d22:	b21a      	sxth	r2, r3
 8002d24:	7b3b      	ldrb	r3, [r7, #12]
 8002d26:	b21b      	sxth	r3, r3
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	b21a      	sxth	r2, r3
        dev->calib.par_t2 =
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	841a      	strh	r2, [r3, #32]
        dev->calib.par_t3 = (int8_t)(coeff_array[BME68X_IDX_T3]);
 8002d30:	7bbb      	ldrb	r3, [r7, #14]
 8002d32:	b25a      	sxtb	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

        /* Pressure related coefficients */
        dev->calib.par_p1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P1_MSB], coeff_array[BME68X_IDX_P1_LSB]));
 8002d3a:	7c7b      	ldrb	r3, [r7, #17]
 8002d3c:	021b      	lsls	r3, r3, #8
 8002d3e:	b21a      	sxth	r2, r3
 8002d40:	7c3b      	ldrb	r3, [r7, #16]
 8002d42:	b21b      	sxth	r3, r3
 8002d44:	4313      	orrs	r3, r2
 8002d46:	b21b      	sxth	r3, r3
 8002d48:	b29a      	uxth	r2, r3
        dev->calib.par_p1 =
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	849a      	strh	r2, [r3, #36]	; 0x24
        dev->calib.par_p2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P2_MSB], coeff_array[BME68X_IDX_P2_LSB]));
 8002d4e:	7cfb      	ldrb	r3, [r7, #19]
 8002d50:	021b      	lsls	r3, r3, #8
 8002d52:	b21a      	sxth	r2, r3
 8002d54:	7cbb      	ldrb	r3, [r7, #18]
 8002d56:	b21b      	sxth	r3, r3
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	b21a      	sxth	r2, r3
        dev->calib.par_p2 =
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	84da      	strh	r2, [r3, #38]	; 0x26
        dev->calib.par_p3 = (int8_t)coeff_array[BME68X_IDX_P3];
 8002d60:	7d3b      	ldrb	r3, [r7, #20]
 8002d62:	b25a      	sxtb	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        dev->calib.par_p4 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P4_MSB], coeff_array[BME68X_IDX_P4_LSB]));
 8002d6a:	7dfb      	ldrb	r3, [r7, #23]
 8002d6c:	021b      	lsls	r3, r3, #8
 8002d6e:	b21a      	sxth	r2, r3
 8002d70:	7dbb      	ldrb	r3, [r7, #22]
 8002d72:	b21b      	sxth	r3, r3
 8002d74:	4313      	orrs	r3, r2
 8002d76:	b21a      	sxth	r2, r3
        dev->calib.par_p4 =
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	855a      	strh	r2, [r3, #42]	; 0x2a
        dev->calib.par_p5 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P5_MSB], coeff_array[BME68X_IDX_P5_LSB]));
 8002d7c:	7e7b      	ldrb	r3, [r7, #25]
 8002d7e:	021b      	lsls	r3, r3, #8
 8002d80:	b21a      	sxth	r2, r3
 8002d82:	7e3b      	ldrb	r3, [r7, #24]
 8002d84:	b21b      	sxth	r3, r3
 8002d86:	4313      	orrs	r3, r2
 8002d88:	b21a      	sxth	r2, r3
        dev->calib.par_p5 =
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	859a      	strh	r2, [r3, #44]	; 0x2c
        dev->calib.par_p6 = (int8_t)(coeff_array[BME68X_IDX_P6]);
 8002d8e:	7efb      	ldrb	r3, [r7, #27]
 8002d90:	b25a      	sxtb	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        dev->calib.par_p7 = (int8_t)(coeff_array[BME68X_IDX_P7]);
 8002d98:	7ebb      	ldrb	r3, [r7, #26]
 8002d9a:	b25a      	sxtb	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
        dev->calib.par_p8 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P8_MSB], coeff_array[BME68X_IDX_P8_LSB]));
 8002da2:	7ffb      	ldrb	r3, [r7, #31]
 8002da4:	021b      	lsls	r3, r3, #8
 8002da6:	b21a      	sxth	r2, r3
 8002da8:	7fbb      	ldrb	r3, [r7, #30]
 8002daa:	b21b      	sxth	r3, r3
 8002dac:	4313      	orrs	r3, r2
 8002dae:	b21a      	sxth	r2, r3
        dev->calib.par_p8 =
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	861a      	strh	r2, [r3, #48]	; 0x30
        dev->calib.par_p9 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P9_MSB], coeff_array[BME68X_IDX_P9_LSB]));
 8002db4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002db8:	021b      	lsls	r3, r3, #8
 8002dba:	b21a      	sxth	r2, r3
 8002dbc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002dc0:	b21b      	sxth	r3, r3
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	b21a      	sxth	r2, r3
        dev->calib.par_p9 =
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	865a      	strh	r2, [r3, #50]	; 0x32
        dev->calib.par_p10 = (uint8_t)(coeff_array[BME68X_IDX_P10]);
 8002dca:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Humidity related coefficients */
        dev->calib.par_h1 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 8002dd4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002dd8:	011b      	lsls	r3, r3, #4
 8002dda:	b21a      	sxth	r2, r3
                       (coeff_array[BME68X_IDX_H1_LSB] & BME68X_BIT_H1_DATA_MSK));
 8002ddc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002de0:	b21b      	sxth	r3, r3
 8002de2:	f003 030f 	and.w	r3, r3, #15
 8002de6:	b21b      	sxth	r3, r3
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 8002de8:	4313      	orrs	r3, r2
 8002dea:	b21b      	sxth	r3, r3
 8002dec:	b29a      	uxth	r2, r3
        dev->calib.par_h1 =
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	821a      	strh	r2, [r3, #16]
        dev->calib.par_h2 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H2_MSB] << 4) | ((coeff_array[BME68X_IDX_H2_LSB]) >> 4));
 8002df2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002df6:	011b      	lsls	r3, r3, #4
 8002df8:	b21a      	sxth	r2, r3
 8002dfa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002dfe:	091b      	lsrs	r3, r3, #4
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	b21b      	sxth	r3, r3
 8002e04:	4313      	orrs	r3, r2
 8002e06:	b21b      	sxth	r3, r3
 8002e08:	b29a      	uxth	r2, r3
        dev->calib.par_h2 =
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	825a      	strh	r2, [r3, #18]
        dev->calib.par_h3 = (int8_t)coeff_array[BME68X_IDX_H3];
 8002e0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002e12:	b25a      	sxtb	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	751a      	strb	r2, [r3, #20]
        dev->calib.par_h4 = (int8_t)coeff_array[BME68X_IDX_H4];
 8002e18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e1c:	b25a      	sxtb	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	755a      	strb	r2, [r3, #21]
        dev->calib.par_h5 = (int8_t)coeff_array[BME68X_IDX_H5];
 8002e22:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002e26:	b25a      	sxtb	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	759a      	strb	r2, [r3, #22]
        dev->calib.par_h6 = (uint8_t)coeff_array[BME68X_IDX_H6];
 8002e2c:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	75da      	strb	r2, [r3, #23]
        dev->calib.par_h7 = (int8_t)coeff_array[BME68X_IDX_H7];
 8002e34:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002e38:	b25a      	sxtb	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	761a      	strb	r2, [r3, #24]

        /* Gas heater related coefficients */
        dev->calib.par_gh1 = (int8_t)coeff_array[BME68X_IDX_GH1];
 8002e3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002e42:	b25a      	sxtb	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	765a      	strb	r2, [r3, #25]
        dev->calib.par_gh2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_GH2_MSB], coeff_array[BME68X_IDX_GH2_LSB]));
 8002e48:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002e4c:	021b      	lsls	r3, r3, #8
 8002e4e:	b21a      	sxth	r2, r3
 8002e50:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002e54:	b21b      	sxth	r3, r3
 8002e56:	4313      	orrs	r3, r2
 8002e58:	b21a      	sxth	r2, r3
        dev->calib.par_gh2 =
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	835a      	strh	r2, [r3, #26]
        dev->calib.par_gh3 = (int8_t)coeff_array[BME68X_IDX_GH3];
 8002e5e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002e62:	b25a      	sxtb	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	771a      	strb	r2, [r3, #28]

        /* Other coefficients */
        dev->calib.res_heat_range = ((coeff_array[BME68X_IDX_RES_HEAT_RANGE] & BME68X_RHRANGE_MSK) / 16);
 8002e68:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002e6c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	da00      	bge.n	8002e76 <get_calib_data+0x1d6>
 8002e74:	330f      	adds	r3, #15
 8002e76:	111b      	asrs	r3, r3, #4
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        dev->calib.res_heat_val = (int8_t)coeff_array[BME68X_IDX_RES_HEAT_VAL];
 8002e80:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002e84:	b25a      	sxtb	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        dev->calib.range_sw_err = ((int8_t)(coeff_array[BME68X_IDX_RANGE_SW_ERR] & BME68X_RSERROR_MSK)) / 16;
 8002e8c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002e90:	b25b      	sxtb	r3, r3
 8002e92:	111b      	asrs	r3, r3, #4
 8002e94:	b25a      	sxtb	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }

    return rslt;
 8002e9c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3738      	adds	r7, #56	; 0x38
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <read_variant_id>:

/* This internal API is used to read variant ID information from the register */
static int8_t read_variant_id(struct bme68x_dev *dev)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data = 0;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	73bb      	strb	r3, [r7, #14]

    /* Read variant ID information register */
    rslt = bme68x_get_regs(BME68X_REG_VARIANT_ID, &reg_data, 1, dev);
 8002eb4:	f107 010e 	add.w	r1, r7, #14
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	20f0      	movs	r0, #240	; 0xf0
 8002ebe:	f7fe f8b3 	bl	8001028 <bme68x_get_regs>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME68X_OK)
 8002ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d103      	bne.n	8002ed6 <read_variant_id+0x2e>
    {
        dev->variant_id = reg_data;
 8002ece:	7bbb      	ldrb	r3, [r7, #14]
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	609a      	str	r2, [r3, #8]
    }

    return rslt;
 8002ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
	...

08002ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ee4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ee8:	b0bc      	sub	sp, #240	; 0xf0
 8002eea:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002eec:	f000 fd52 	bl	8003994 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ef0:	f000 f89a 	bl	8003028 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ef4:	f000 f95a 	bl	80031ac <MX_GPIO_Init>
  MX_I2C1_Init();
 8002ef8:	f000 f900 	bl	80030fc <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8002efc:	f000 f92c 	bl	8003158 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  struct bme68x_dev bme;
  struct bme68x_data data;
  char msg[100];

  bme.chip_id = BME68X_I2C_ADDR_LOW;
 8002f00:	2376      	movs	r3, #118	; 0x76
 8002f02:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  bme.intf = BME68X_I2C_INTF;
 8002f06:	2301      	movs	r3, #1
 8002f08:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  bme.read = user_i2c_read;
 8002f0c:	4b3c      	ldr	r3, [pc, #240]	; (8003000 <main+0x11c>)
 8002f0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  bme.write = user_i2c_write;
 8002f12:	4b3c      	ldr	r3, [pc, #240]	; (8003004 <main+0x120>)
 8002f14:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  bme.delay_us = bme68x_delay_us;
 8002f18:	4b3b      	ldr	r3, [pc, #236]	; (8003008 <main+0x124>)
 8002f1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  // initialise
  int8_t result = bme68x_init(&bme);
 8002f1e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fd ffc2 	bl	8000eac <bme68x_init>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  if(result != BME68X_OK)
 8002f2e:	f997 30d7 	ldrsb.w	r3, [r7, #215]	; 0xd7
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d004      	beq.n	8002f40 <main+0x5c>
  {
  	// print error using UART
  	printmsg(init_fail);
 8002f36:	4b35      	ldr	r3, [pc, #212]	; (800300c <main+0x128>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f000 fa82 	bl	8003444 <printmsg>
  }
  // configure oversampling
  result = bme680_config(&bme);
 8002f40:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002f44:	4618      	mov	r0, r3
 8002f46:	f000 faf3 	bl	8003530 <bme680_config>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  if(result != BME68X_OK)
 8002f50:	f997 30d7 	ldrsb.w	r3, [r7, #215]	; 0xd7
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d004      	beq.n	8002f62 <main+0x7e>
  {
  	// print error using UART
  	printmsg(conf_failt);
 8002f58:	4b2d      	ldr	r3, [pc, #180]	; (8003010 <main+0x12c>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f000 fa71 	bl	8003444 <printmsg>
  }
  // configure heater
  result = bme680_htr_config(&bme);
 8002f62:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002f66:	4618      	mov	r0, r3
 8002f68:	f000 fafe 	bl	8003568 <bme680_htr_config>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  if(result != BME68X_OK)
 8002f72:	f997 30d7 	ldrsb.w	r3, [r7, #215]	; 0xd7
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d004      	beq.n	8002f84 <main+0xa0>
  {
  	// print error using UART
  	printmsg(htr_conf_fail);
 8002f7a:	4b26      	ldr	r3, [pc, #152]	; (8003014 <main+0x130>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f000 fa60 	bl	8003444 <printmsg>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
  	if(bme68x_get_data(BME68X_FORCED_MODE, &data, &n_fields, &bme) == 0)
 8002f84:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002f88:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8002f8c:	4a22      	ldr	r2, [pc, #136]	; (8003018 <main+0x134>)
 8002f8e:	2001      	movs	r0, #1
 8002f90:	f7fe fa57 	bl	8001442 <bme68x_get_data>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d128      	bne.n	8002fec <main+0x108>
  	{
  		// print out data
  		int len = snprintf(msg, 100, "Temperature: %.2f, Pressure: %.2f, Humidity: %.2f", data.temperature, data.pressure, data.humidity);
 8002f9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7fd fad3 	bl	8000548 <__aeabi_f2d>
 8002fa2:	4604      	mov	r4, r0
 8002fa4:	460d      	mov	r5, r1
 8002fa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7fd facd 	bl	8000548 <__aeabi_f2d>
 8002fae:	4680      	mov	r8, r0
 8002fb0:	4689      	mov	r9, r1
 8002fb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7fd fac7 	bl	8000548 <__aeabi_f2d>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	1d38      	adds	r0, r7, #4
 8002fc0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002fc4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002fc8:	e9cd 4500 	strd	r4, r5, [sp]
 8002fcc:	4a13      	ldr	r2, [pc, #76]	; (800301c <main+0x138>)
 8002fce:	2164      	movs	r1, #100	; 0x64
 8002fd0:	f004 f9d8 	bl	8007384 <sniprintf>
 8002fd4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
  		HAL_UART_Transmit(&huart2, (uint8_t *)msg, len, HAL_MAX_DELAY);
 8002fd8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	1d39      	adds	r1, r7, #4
 8002fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8002fe4:	480e      	ldr	r0, [pc, #56]	; (8003020 <main+0x13c>)
 8002fe6:	f002 fd6a 	bl	8005abe <HAL_UART_Transmit>
 8002fea:	e004      	b.n	8002ff6 <main+0x112>
  	}
  	else
  	{
  		// print out error
  		printmsg(rd_dt_fail);
 8002fec:	4b0d      	ldr	r3, [pc, #52]	; (8003024 <main+0x140>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f000 fa27 	bl	8003444 <printmsg>
  	}
  	HAL_Delay(1000);
 8002ff6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ffa:	f000 fd3d 	bl	8003a78 <HAL_Delay>
  	if(bme68x_get_data(BME68X_FORCED_MODE, &data, &n_fields, &bme) == 0)
 8002ffe:	e7c1      	b.n	8002f84 <main+0xa0>
 8003000:	08003471 	.word	0x08003471
 8003004:	080034bd 	.word	0x080034bd
 8003008:	08003509 	.word	0x08003509
 800300c:	20000000 	.word	0x20000000
 8003010:	20000004 	.word	0x20000004
 8003014:	20000008 	.word	0x20000008
 8003018:	200002a0 	.word	0x200002a0
 800301c:	080099b8 	.word	0x080099b8
 8003020:	2000025c 	.word	0x2000025c
 8003024:	2000000c 	.word	0x2000000c

08003028 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b094      	sub	sp, #80	; 0x50
 800302c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800302e:	f107 0320 	add.w	r3, r7, #32
 8003032:	2230      	movs	r2, #48	; 0x30
 8003034:	2100      	movs	r1, #0
 8003036:	4618      	mov	r0, r3
 8003038:	f003 fd32 	bl	8006aa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800303c:	f107 030c 	add.w	r3, r7, #12
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	605a      	str	r2, [r3, #4]
 8003046:	609a      	str	r2, [r3, #8]
 8003048:	60da      	str	r2, [r3, #12]
 800304a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800304c:	2300      	movs	r3, #0
 800304e:	60bb      	str	r3, [r7, #8]
 8003050:	4b28      	ldr	r3, [pc, #160]	; (80030f4 <SystemClock_Config+0xcc>)
 8003052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003054:	4a27      	ldr	r2, [pc, #156]	; (80030f4 <SystemClock_Config+0xcc>)
 8003056:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800305a:	6413      	str	r3, [r2, #64]	; 0x40
 800305c:	4b25      	ldr	r3, [pc, #148]	; (80030f4 <SystemClock_Config+0xcc>)
 800305e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003064:	60bb      	str	r3, [r7, #8]
 8003066:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003068:	2300      	movs	r3, #0
 800306a:	607b      	str	r3, [r7, #4]
 800306c:	4b22      	ldr	r3, [pc, #136]	; (80030f8 <SystemClock_Config+0xd0>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a21      	ldr	r2, [pc, #132]	; (80030f8 <SystemClock_Config+0xd0>)
 8003072:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003076:	6013      	str	r3, [r2, #0]
 8003078:	4b1f      	ldr	r3, [pc, #124]	; (80030f8 <SystemClock_Config+0xd0>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003080:	607b      	str	r3, [r7, #4]
 8003082:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003084:	2302      	movs	r3, #2
 8003086:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003088:	2301      	movs	r3, #1
 800308a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800308c:	2310      	movs	r3, #16
 800308e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003090:	2302      	movs	r3, #2
 8003092:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003094:	2300      	movs	r3, #0
 8003096:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003098:	2308      	movs	r3, #8
 800309a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800309c:	2332      	movs	r3, #50	; 0x32
 800309e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80030a0:	2304      	movs	r3, #4
 80030a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80030a4:	2307      	movs	r3, #7
 80030a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030a8:	f107 0320 	add.w	r3, r7, #32
 80030ac:	4618      	mov	r0, r3
 80030ae:	f002 f821 	bl	80050f4 <HAL_RCC_OscConfig>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80030b8:	f000 fa71 	bl	800359e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030bc:	230f      	movs	r3, #15
 80030be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030c0:	2302      	movs	r3, #2
 80030c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030c4:	2300      	movs	r3, #0
 80030c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80030c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80030cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80030ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80030d4:	f107 030c 	add.w	r3, r7, #12
 80030d8:	2100      	movs	r1, #0
 80030da:	4618      	mov	r0, r3
 80030dc:	f002 fa82 	bl	80055e4 <HAL_RCC_ClockConfig>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80030e6:	f000 fa5a 	bl	800359e <Error_Handler>
  }
}
 80030ea:	bf00      	nop
 80030ec:	3750      	adds	r7, #80	; 0x50
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	40023800 	.word	0x40023800
 80030f8:	40007000 	.word	0x40007000

080030fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003100:	4b12      	ldr	r3, [pc, #72]	; (800314c <MX_I2C1_Init+0x50>)
 8003102:	4a13      	ldr	r2, [pc, #76]	; (8003150 <MX_I2C1_Init+0x54>)
 8003104:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003106:	4b11      	ldr	r3, [pc, #68]	; (800314c <MX_I2C1_Init+0x50>)
 8003108:	4a12      	ldr	r2, [pc, #72]	; (8003154 <MX_I2C1_Init+0x58>)
 800310a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800310c:	4b0f      	ldr	r3, [pc, #60]	; (800314c <MX_I2C1_Init+0x50>)
 800310e:	2200      	movs	r2, #0
 8003110:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003112:	4b0e      	ldr	r3, [pc, #56]	; (800314c <MX_I2C1_Init+0x50>)
 8003114:	2200      	movs	r2, #0
 8003116:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003118:	4b0c      	ldr	r3, [pc, #48]	; (800314c <MX_I2C1_Init+0x50>)
 800311a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800311e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003120:	4b0a      	ldr	r3, [pc, #40]	; (800314c <MX_I2C1_Init+0x50>)
 8003122:	2200      	movs	r2, #0
 8003124:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003126:	4b09      	ldr	r3, [pc, #36]	; (800314c <MX_I2C1_Init+0x50>)
 8003128:	2200      	movs	r2, #0
 800312a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800312c:	4b07      	ldr	r3, [pc, #28]	; (800314c <MX_I2C1_Init+0x50>)
 800312e:	2200      	movs	r2, #0
 8003130:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003132:	4b06      	ldr	r3, [pc, #24]	; (800314c <MX_I2C1_Init+0x50>)
 8003134:	2200      	movs	r2, #0
 8003136:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003138:	4804      	ldr	r0, [pc, #16]	; (800314c <MX_I2C1_Init+0x50>)
 800313a:	f001 f81b 	bl	8004174 <HAL_I2C_Init>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003144:	f000 fa2b 	bl	800359e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003148:	bf00      	nop
 800314a:	bd80      	pop	{r7, pc}
 800314c:	20000208 	.word	0x20000208
 8003150:	40005400 	.word	0x40005400
 8003154:	000186a0 	.word	0x000186a0

08003158 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800315c:	4b11      	ldr	r3, [pc, #68]	; (80031a4 <MX_USART2_UART_Init+0x4c>)
 800315e:	4a12      	ldr	r2, [pc, #72]	; (80031a8 <MX_USART2_UART_Init+0x50>)
 8003160:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003162:	4b10      	ldr	r3, [pc, #64]	; (80031a4 <MX_USART2_UART_Init+0x4c>)
 8003164:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003168:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800316a:	4b0e      	ldr	r3, [pc, #56]	; (80031a4 <MX_USART2_UART_Init+0x4c>)
 800316c:	2200      	movs	r2, #0
 800316e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003170:	4b0c      	ldr	r3, [pc, #48]	; (80031a4 <MX_USART2_UART_Init+0x4c>)
 8003172:	2200      	movs	r2, #0
 8003174:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003176:	4b0b      	ldr	r3, [pc, #44]	; (80031a4 <MX_USART2_UART_Init+0x4c>)
 8003178:	2200      	movs	r2, #0
 800317a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800317c:	4b09      	ldr	r3, [pc, #36]	; (80031a4 <MX_USART2_UART_Init+0x4c>)
 800317e:	220c      	movs	r2, #12
 8003180:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003182:	4b08      	ldr	r3, [pc, #32]	; (80031a4 <MX_USART2_UART_Init+0x4c>)
 8003184:	2200      	movs	r2, #0
 8003186:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003188:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <MX_USART2_UART_Init+0x4c>)
 800318a:	2200      	movs	r2, #0
 800318c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800318e:	4805      	ldr	r0, [pc, #20]	; (80031a4 <MX_USART2_UART_Init+0x4c>)
 8003190:	f002 fc48 	bl	8005a24 <HAL_UART_Init>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800319a:	f000 fa00 	bl	800359e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800319e:	bf00      	nop
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	2000025c 	.word	0x2000025c
 80031a8:	40004400 	.word	0x40004400

080031ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b08c      	sub	sp, #48	; 0x30
 80031b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031b2:	f107 031c 	add.w	r3, r7, #28
 80031b6:	2200      	movs	r2, #0
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	605a      	str	r2, [r3, #4]
 80031bc:	609a      	str	r2, [r3, #8]
 80031be:	60da      	str	r2, [r3, #12]
 80031c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80031c2:	2300      	movs	r3, #0
 80031c4:	61bb      	str	r3, [r7, #24]
 80031c6:	4b99      	ldr	r3, [pc, #612]	; (800342c <MX_GPIO_Init+0x280>)
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	4a98      	ldr	r2, [pc, #608]	; (800342c <MX_GPIO_Init+0x280>)
 80031cc:	f043 0310 	orr.w	r3, r3, #16
 80031d0:	6313      	str	r3, [r2, #48]	; 0x30
 80031d2:	4b96      	ldr	r3, [pc, #600]	; (800342c <MX_GPIO_Init+0x280>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	f003 0310 	and.w	r3, r3, #16
 80031da:	61bb      	str	r3, [r7, #24]
 80031dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031de:	2300      	movs	r3, #0
 80031e0:	617b      	str	r3, [r7, #20]
 80031e2:	4b92      	ldr	r3, [pc, #584]	; (800342c <MX_GPIO_Init+0x280>)
 80031e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e6:	4a91      	ldr	r2, [pc, #580]	; (800342c <MX_GPIO_Init+0x280>)
 80031e8:	f043 0304 	orr.w	r3, r3, #4
 80031ec:	6313      	str	r3, [r2, #48]	; 0x30
 80031ee:	4b8f      	ldr	r3, [pc, #572]	; (800342c <MX_GPIO_Init+0x280>)
 80031f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f2:	f003 0304 	and.w	r3, r3, #4
 80031f6:	617b      	str	r3, [r7, #20]
 80031f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80031fa:	2300      	movs	r3, #0
 80031fc:	613b      	str	r3, [r7, #16]
 80031fe:	4b8b      	ldr	r3, [pc, #556]	; (800342c <MX_GPIO_Init+0x280>)
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	4a8a      	ldr	r2, [pc, #552]	; (800342c <MX_GPIO_Init+0x280>)
 8003204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003208:	6313      	str	r3, [r2, #48]	; 0x30
 800320a:	4b88      	ldr	r3, [pc, #544]	; (800342c <MX_GPIO_Init+0x280>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003212:	613b      	str	r3, [r7, #16]
 8003214:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003216:	2300      	movs	r3, #0
 8003218:	60fb      	str	r3, [r7, #12]
 800321a:	4b84      	ldr	r3, [pc, #528]	; (800342c <MX_GPIO_Init+0x280>)
 800321c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321e:	4a83      	ldr	r2, [pc, #524]	; (800342c <MX_GPIO_Init+0x280>)
 8003220:	f043 0301 	orr.w	r3, r3, #1
 8003224:	6313      	str	r3, [r2, #48]	; 0x30
 8003226:	4b81      	ldr	r3, [pc, #516]	; (800342c <MX_GPIO_Init+0x280>)
 8003228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003232:	2300      	movs	r3, #0
 8003234:	60bb      	str	r3, [r7, #8]
 8003236:	4b7d      	ldr	r3, [pc, #500]	; (800342c <MX_GPIO_Init+0x280>)
 8003238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323a:	4a7c      	ldr	r2, [pc, #496]	; (800342c <MX_GPIO_Init+0x280>)
 800323c:	f043 0302 	orr.w	r3, r3, #2
 8003240:	6313      	str	r3, [r2, #48]	; 0x30
 8003242:	4b7a      	ldr	r3, [pc, #488]	; (800342c <MX_GPIO_Init+0x280>)
 8003244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	60bb      	str	r3, [r7, #8]
 800324c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800324e:	2300      	movs	r3, #0
 8003250:	607b      	str	r3, [r7, #4]
 8003252:	4b76      	ldr	r3, [pc, #472]	; (800342c <MX_GPIO_Init+0x280>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	4a75      	ldr	r2, [pc, #468]	; (800342c <MX_GPIO_Init+0x280>)
 8003258:	f043 0308 	orr.w	r3, r3, #8
 800325c:	6313      	str	r3, [r2, #48]	; 0x30
 800325e:	4b73      	ldr	r3, [pc, #460]	; (800342c <MX_GPIO_Init+0x280>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	607b      	str	r3, [r7, #4]
 8003268:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800326a:	2200      	movs	r2, #0
 800326c:	2108      	movs	r1, #8
 800326e:	4870      	ldr	r0, [pc, #448]	; (8003430 <MX_GPIO_Init+0x284>)
 8003270:	f000 ff66 	bl	8004140 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8003274:	2201      	movs	r2, #1
 8003276:	2101      	movs	r1, #1
 8003278:	486e      	ldr	r0, [pc, #440]	; (8003434 <MX_GPIO_Init+0x288>)
 800327a:	f000 ff61 	bl	8004140 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800327e:	2200      	movs	r2, #0
 8003280:	f24f 0110 	movw	r1, #61456	; 0xf010
 8003284:	486c      	ldr	r0, [pc, #432]	; (8003438 <MX_GPIO_Init+0x28c>)
 8003286:	f000 ff5b 	bl	8004140 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800328a:	2308      	movs	r3, #8
 800328c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800328e:	2301      	movs	r3, #1
 8003290:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003292:	2300      	movs	r3, #0
 8003294:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003296:	2300      	movs	r3, #0
 8003298:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800329a:	f107 031c 	add.w	r3, r7, #28
 800329e:	4619      	mov	r1, r3
 80032a0:	4863      	ldr	r0, [pc, #396]	; (8003430 <MX_GPIO_Init+0x284>)
 80032a2:	f000 fdb1 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80032a6:	2301      	movs	r3, #1
 80032a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032aa:	2301      	movs	r3, #1
 80032ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ae:	2300      	movs	r3, #0
 80032b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b2:	2300      	movs	r3, #0
 80032b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80032b6:	f107 031c 	add.w	r3, r7, #28
 80032ba:	4619      	mov	r1, r3
 80032bc:	485d      	ldr	r0, [pc, #372]	; (8003434 <MX_GPIO_Init+0x288>)
 80032be:	f000 fda3 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80032c2:	2308      	movs	r3, #8
 80032c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c6:	2302      	movs	r3, #2
 80032c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ca:	2300      	movs	r3, #0
 80032cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ce:	2300      	movs	r3, #0
 80032d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80032d2:	2305      	movs	r3, #5
 80032d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80032d6:	f107 031c 	add.w	r3, r7, #28
 80032da:	4619      	mov	r1, r3
 80032dc:	4855      	ldr	r0, [pc, #340]	; (8003434 <MX_GPIO_Init+0x288>)
 80032de:	f000 fd93 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80032e2:	2301      	movs	r3, #1
 80032e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80032e6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80032ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ec:	2300      	movs	r3, #0
 80032ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80032f0:	f107 031c 	add.w	r3, r7, #28
 80032f4:	4619      	mov	r1, r3
 80032f6:	4851      	ldr	r0, [pc, #324]	; (800343c <MX_GPIO_Init+0x290>)
 80032f8:	f000 fd86 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80032fc:	2310      	movs	r3, #16
 80032fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003300:	2302      	movs	r3, #2
 8003302:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003304:	2300      	movs	r3, #0
 8003306:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003308:	2300      	movs	r3, #0
 800330a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800330c:	2306      	movs	r3, #6
 800330e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8003310:	f107 031c 	add.w	r3, r7, #28
 8003314:	4619      	mov	r1, r3
 8003316:	4849      	ldr	r0, [pc, #292]	; (800343c <MX_GPIO_Init+0x290>)
 8003318:	f000 fd76 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800331c:	23e0      	movs	r3, #224	; 0xe0
 800331e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003320:	2302      	movs	r3, #2
 8003322:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003324:	2300      	movs	r3, #0
 8003326:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003328:	2300      	movs	r3, #0
 800332a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800332c:	2305      	movs	r3, #5
 800332e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003330:	f107 031c 	add.w	r3, r7, #28
 8003334:	4619      	mov	r1, r3
 8003336:	4841      	ldr	r0, [pc, #260]	; (800343c <MX_GPIO_Init+0x290>)
 8003338:	f000 fd66 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800333c:	2304      	movs	r3, #4
 800333e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003340:	2300      	movs	r3, #0
 8003342:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003344:	2300      	movs	r3, #0
 8003346:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8003348:	f107 031c 	add.w	r3, r7, #28
 800334c:	4619      	mov	r1, r3
 800334e:	483c      	ldr	r0, [pc, #240]	; (8003440 <MX_GPIO_Init+0x294>)
 8003350:	f000 fd5a 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8003354:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003358:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800335a:	2302      	movs	r3, #2
 800335c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335e:	2300      	movs	r3, #0
 8003360:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003362:	2300      	movs	r3, #0
 8003364:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003366:	2305      	movs	r3, #5
 8003368:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800336a:	f107 031c 	add.w	r3, r7, #28
 800336e:	4619      	mov	r1, r3
 8003370:	4833      	ldr	r0, [pc, #204]	; (8003440 <MX_GPIO_Init+0x294>)
 8003372:	f000 fd49 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8003376:	f24f 0310 	movw	r3, #61456	; 0xf010
 800337a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800337c:	2301      	movs	r3, #1
 800337e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003380:	2300      	movs	r3, #0
 8003382:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003384:	2300      	movs	r3, #0
 8003386:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003388:	f107 031c 	add.w	r3, r7, #28
 800338c:	4619      	mov	r1, r3
 800338e:	482a      	ldr	r0, [pc, #168]	; (8003438 <MX_GPIO_Init+0x28c>)
 8003390:	f000 fd3a 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8003394:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8003398:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800339a:	2302      	movs	r3, #2
 800339c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339e:	2300      	movs	r3, #0
 80033a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a2:	2300      	movs	r3, #0
 80033a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80033a6:	2306      	movs	r3, #6
 80033a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033aa:	f107 031c 	add.w	r3, r7, #28
 80033ae:	4619      	mov	r1, r3
 80033b0:	4820      	ldr	r0, [pc, #128]	; (8003434 <MX_GPIO_Init+0x288>)
 80033b2:	f000 fd29 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80033b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033bc:	2300      	movs	r3, #0
 80033be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c0:	2300      	movs	r3, #0
 80033c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80033c4:	f107 031c 	add.w	r3, r7, #28
 80033c8:	4619      	mov	r1, r3
 80033ca:	481c      	ldr	r0, [pc, #112]	; (800343c <MX_GPIO_Init+0x290>)
 80033cc:	f000 fd1c 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80033d0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80033d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d6:	2302      	movs	r3, #2
 80033d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033da:	2300      	movs	r3, #0
 80033dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033de:	2300      	movs	r3, #0
 80033e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80033e2:	230a      	movs	r3, #10
 80033e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033e6:	f107 031c 	add.w	r3, r7, #28
 80033ea:	4619      	mov	r1, r3
 80033ec:	4813      	ldr	r0, [pc, #76]	; (800343c <MX_GPIO_Init+0x290>)
 80033ee:	f000 fd0b 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80033f2:	2320      	movs	r3, #32
 80033f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033f6:	2300      	movs	r3, #0
 80033f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fa:	2300      	movs	r3, #0
 80033fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80033fe:	f107 031c 	add.w	r3, r7, #28
 8003402:	4619      	mov	r1, r3
 8003404:	480c      	ldr	r0, [pc, #48]	; (8003438 <MX_GPIO_Init+0x28c>)
 8003406:	f000 fcff 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800340a:	2302      	movs	r3, #2
 800340c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800340e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8003412:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003414:	2300      	movs	r3, #0
 8003416:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8003418:	f107 031c 	add.w	r3, r7, #28
 800341c:	4619      	mov	r1, r3
 800341e:	4804      	ldr	r0, [pc, #16]	; (8003430 <MX_GPIO_Init+0x284>)
 8003420:	f000 fcf2 	bl	8003e08 <HAL_GPIO_Init>

}
 8003424:	bf00      	nop
 8003426:	3730      	adds	r7, #48	; 0x30
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	40023800 	.word	0x40023800
 8003430:	40021000 	.word	0x40021000
 8003434:	40020800 	.word	0x40020800
 8003438:	40020c00 	.word	0x40020c00
 800343c:	40020000 	.word	0x40020000
 8003440:	40020400 	.word	0x40020400

08003444 <printmsg>:

/* USER CODE BEGIN 4 */
static void printmsg(const char* msg)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f7fc febf 	bl	80001d0 <strlen>
 8003452:	4603      	mov	r3, r0
 8003454:	b29a      	uxth	r2, r3
 8003456:	f04f 33ff 	mov.w	r3, #4294967295
 800345a:	6879      	ldr	r1, [r7, #4]
 800345c:	4803      	ldr	r0, [pc, #12]	; (800346c <printmsg+0x28>)
 800345e:	f002 fb2e 	bl	8005abe <HAL_UART_Transmit>
}
 8003462:	bf00      	nop
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	2000025c 	.word	0x2000025c

08003470 <user_i2c_read>:

BME68X_INTF_RET_TYPE user_i2c_read(uint8_t reg_addr, uint8_t *data, uint32_t len, void *intf_ptr)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b08a      	sub	sp, #40	; 0x28
 8003474:	af04      	add	r7, sp, #16
 8003476:	60b9      	str	r1, [r7, #8]
 8003478:	607a      	str	r2, [r7, #4]
 800347a:	603b      	str	r3, [r7, #0]
 800347c:	4603      	mov	r3, r0
 800347e:	73fb      	strb	r3, [r7, #15]
	uint8_t dev_addr = *(uint8_t*)intf_ptr;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	75fb      	strb	r3, [r7, #23]
	(void)intf_ptr;
	HAL_I2C_Mem_Read(&hi2c1, (dev_addr << 1) | 0x01, reg_addr, 1, data, len, 15);
 8003486:	7dfb      	ldrb	r3, [r7, #23]
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	b21b      	sxth	r3, r3
 800348c:	f043 0301 	orr.w	r3, r3, #1
 8003490:	b21b      	sxth	r3, r3
 8003492:	b299      	uxth	r1, r3
 8003494:	7bfb      	ldrb	r3, [r7, #15]
 8003496:	b29a      	uxth	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	b29b      	uxth	r3, r3
 800349c:	200f      	movs	r0, #15
 800349e:	9002      	str	r0, [sp, #8]
 80034a0:	9301      	str	r3, [sp, #4]
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	2301      	movs	r3, #1
 80034a8:	4803      	ldr	r0, [pc, #12]	; (80034b8 <user_i2c_read+0x48>)
 80034aa:	f001 f8a1 	bl	80045f0 <HAL_I2C_Mem_Read>
  return 0; // Success
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3718      	adds	r7, #24
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	20000208 	.word	0x20000208

080034bc <user_i2c_write>:

BME68X_INTF_RET_TYPE user_i2c_write(uint8_t reg_addr, const uint8_t *data, uint32_t len, void *intf_ptr)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b08a      	sub	sp, #40	; 0x28
 80034c0:	af04      	add	r7, sp, #16
 80034c2:	60b9      	str	r1, [r7, #8]
 80034c4:	607a      	str	r2, [r7, #4]
 80034c6:	603b      	str	r3, [r7, #0]
 80034c8:	4603      	mov	r3, r0
 80034ca:	73fb      	strb	r3, [r7, #15]
	uint8_t dev_addr = *(uint8_t*)intf_ptr;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	75fb      	strb	r3, [r7, #23]
	(void)intf_ptr;
  HAL_I2C_Mem_Write(&hi2c1, (dev_addr << 1) | 0x01, reg_addr, 1, (uint8_t*)data, len, 15);
 80034d2:	7dfb      	ldrb	r3, [r7, #23]
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	b21b      	sxth	r3, r3
 80034d8:	f043 0301 	orr.w	r3, r3, #1
 80034dc:	b21b      	sxth	r3, r3
 80034de:	b299      	uxth	r1, r3
 80034e0:	7bfb      	ldrb	r3, [r7, #15]
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	200f      	movs	r0, #15
 80034ea:	9002      	str	r0, [sp, #8]
 80034ec:	9301      	str	r3, [sp, #4]
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	2301      	movs	r3, #1
 80034f4:	4803      	ldr	r0, [pc, #12]	; (8003504 <user_i2c_write+0x48>)
 80034f6:	f000 ff81 	bl	80043fc <HAL_I2C_Mem_Write>
  return 0; // Success
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	20000208 	.word	0x20000208

08003508 <bme68x_delay_us>:

void bme68x_delay_us(uint32_t period, void *ntf_ptr)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
	HAL_Delay(period/1000);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a05      	ldr	r2, [pc, #20]	; (800352c <bme68x_delay_us+0x24>)
 8003516:	fba2 2303 	umull	r2, r3, r2, r3
 800351a:	099b      	lsrs	r3, r3, #6
 800351c:	4618      	mov	r0, r3
 800351e:	f000 faab 	bl	8003a78 <HAL_Delay>
}
 8003522:	bf00      	nop
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	10624dd3 	.word	0x10624dd3

08003530 <bme680_config>:

static int8_t bme680_config(struct bme68x_dev* bme680_ptr)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
	struct bme68x_conf sensor_conf;
	sensor_conf.filter = iir_filter;
 8003538:	2300      	movs	r3, #0
 800353a:	72fb      	strb	r3, [r7, #11]
	sensor_conf.odr = odr_time;
 800353c:	2308      	movs	r3, #8
 800353e:	733b      	strb	r3, [r7, #12]
	sensor_conf.os_hum = hum_os;
 8003540:	2305      	movs	r3, #5
 8003542:	723b      	strb	r3, [r7, #8]
	sensor_conf.os_pres = pres_os;
 8003544:	2301      	movs	r3, #1
 8003546:	72bb      	strb	r3, [r7, #10]
	sensor_conf.os_temp = temp_os;
 8003548:	2302      	movs	r3, #2
 800354a:	727b      	strb	r3, [r7, #9]

	int8_t rslt = bme68x_set_conf(&sensor_conf, bme680_ptr);
 800354c:	f107 0308 	add.w	r3, r7, #8
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	4618      	mov	r0, r3
 8003554:	f7fd fdf0 	bl	8001138 <bme68x_set_conf>
 8003558:	4603      	mov	r3, r0
 800355a:	73fb      	strb	r3, [r7, #15]
	return rslt;
 800355c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003560:	4618      	mov	r0, r3
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <bme680_htr_config>:

static int8_t bme680_htr_config(struct bme68x_dev* bme680_ptr)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b088      	sub	sp, #32
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
	struct bme68x_heatr_conf htr_conf;
	htr_conf.enable = htr_enable;
 8003570:	2301      	movs	r3, #1
 8003572:	723b      	strb	r3, [r7, #8]
	htr_conf.heatr_dur = htr_dur;
 8003574:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003578:	81bb      	strh	r3, [r7, #12]
	htr_conf.heatr_temp = htr_temp;
 800357a:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800357e:	817b      	strh	r3, [r7, #10]

	int8_t rslt = bme68x_set_heatr_conf(BME68X_FORCED_MODE, &htr_conf, bme680_ptr);
 8003580:	f107 0308 	add.w	r3, r7, #8
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	4619      	mov	r1, r3
 8003588:	2001      	movs	r0, #1
 800358a:	f7fe f858 	bl	800163e <bme68x_set_heatr_conf>
 800358e:	4603      	mov	r3, r0
 8003590:	77fb      	strb	r3, [r7, #31]
	return rslt;
 8003592:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003596:	4618      	mov	r0, r3
 8003598:	3720      	adds	r7, #32
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800359e:	b480      	push	{r7}
 80035a0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035a2:	b672      	cpsid	i
}
 80035a4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80035a6:	e7fe      	b.n	80035a6 <Error_Handler+0x8>

080035a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035ae:	2300      	movs	r3, #0
 80035b0:	607b      	str	r3, [r7, #4]
 80035b2:	4b10      	ldr	r3, [pc, #64]	; (80035f4 <HAL_MspInit+0x4c>)
 80035b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b6:	4a0f      	ldr	r2, [pc, #60]	; (80035f4 <HAL_MspInit+0x4c>)
 80035b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035bc:	6453      	str	r3, [r2, #68]	; 0x44
 80035be:	4b0d      	ldr	r3, [pc, #52]	; (80035f4 <HAL_MspInit+0x4c>)
 80035c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035c6:	607b      	str	r3, [r7, #4]
 80035c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035ca:	2300      	movs	r3, #0
 80035cc:	603b      	str	r3, [r7, #0]
 80035ce:	4b09      	ldr	r3, [pc, #36]	; (80035f4 <HAL_MspInit+0x4c>)
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	4a08      	ldr	r2, [pc, #32]	; (80035f4 <HAL_MspInit+0x4c>)
 80035d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035d8:	6413      	str	r3, [r2, #64]	; 0x40
 80035da:	4b06      	ldr	r3, [pc, #24]	; (80035f4 <HAL_MspInit+0x4c>)
 80035dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e2:	603b      	str	r3, [r7, #0]
 80035e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80035e6:	2007      	movs	r0, #7
 80035e8:	f000 fb3a 	bl	8003c60 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035ec:	bf00      	nop
 80035ee:	3708      	adds	r7, #8
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	40023800 	.word	0x40023800

080035f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b08a      	sub	sp, #40	; 0x28
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003600:	f107 0314 	add.w	r3, r7, #20
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	605a      	str	r2, [r3, #4]
 800360a:	609a      	str	r2, [r3, #8]
 800360c:	60da      	str	r2, [r3, #12]
 800360e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a19      	ldr	r2, [pc, #100]	; (800367c <HAL_I2C_MspInit+0x84>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d12c      	bne.n	8003674 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800361a:	2300      	movs	r3, #0
 800361c:	613b      	str	r3, [r7, #16]
 800361e:	4b18      	ldr	r3, [pc, #96]	; (8003680 <HAL_I2C_MspInit+0x88>)
 8003620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003622:	4a17      	ldr	r2, [pc, #92]	; (8003680 <HAL_I2C_MspInit+0x88>)
 8003624:	f043 0302 	orr.w	r3, r3, #2
 8003628:	6313      	str	r3, [r2, #48]	; 0x30
 800362a:	4b15      	ldr	r3, [pc, #84]	; (8003680 <HAL_I2C_MspInit+0x88>)
 800362c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	613b      	str	r3, [r7, #16]
 8003634:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8003636:	f44f 7310 	mov.w	r3, #576	; 0x240
 800363a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800363c:	2312      	movs	r3, #18
 800363e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003640:	2300      	movs	r3, #0
 8003642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003644:	2300      	movs	r3, #0
 8003646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003648:	2304      	movs	r3, #4
 800364a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800364c:	f107 0314 	add.w	r3, r7, #20
 8003650:	4619      	mov	r1, r3
 8003652:	480c      	ldr	r0, [pc, #48]	; (8003684 <HAL_I2C_MspInit+0x8c>)
 8003654:	f000 fbd8 	bl	8003e08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003658:	2300      	movs	r3, #0
 800365a:	60fb      	str	r3, [r7, #12]
 800365c:	4b08      	ldr	r3, [pc, #32]	; (8003680 <HAL_I2C_MspInit+0x88>)
 800365e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003660:	4a07      	ldr	r2, [pc, #28]	; (8003680 <HAL_I2C_MspInit+0x88>)
 8003662:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003666:	6413      	str	r3, [r2, #64]	; 0x40
 8003668:	4b05      	ldr	r3, [pc, #20]	; (8003680 <HAL_I2C_MspInit+0x88>)
 800366a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003670:	60fb      	str	r3, [r7, #12]
 8003672:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003674:	bf00      	nop
 8003676:	3728      	adds	r7, #40	; 0x28
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40005400 	.word	0x40005400
 8003680:	40023800 	.word	0x40023800
 8003684:	40020400 	.word	0x40020400

08003688 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b08a      	sub	sp, #40	; 0x28
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003690:	f107 0314 	add.w	r3, r7, #20
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	605a      	str	r2, [r3, #4]
 800369a:	609a      	str	r2, [r3, #8]
 800369c:	60da      	str	r2, [r3, #12]
 800369e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a1d      	ldr	r2, [pc, #116]	; (800371c <HAL_UART_MspInit+0x94>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d133      	bne.n	8003712 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80036aa:	2300      	movs	r3, #0
 80036ac:	613b      	str	r3, [r7, #16]
 80036ae:	4b1c      	ldr	r3, [pc, #112]	; (8003720 <HAL_UART_MspInit+0x98>)
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	4a1b      	ldr	r2, [pc, #108]	; (8003720 <HAL_UART_MspInit+0x98>)
 80036b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036b8:	6413      	str	r3, [r2, #64]	; 0x40
 80036ba:	4b19      	ldr	r3, [pc, #100]	; (8003720 <HAL_UART_MspInit+0x98>)
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c2:	613b      	str	r3, [r7, #16]
 80036c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036c6:	2300      	movs	r3, #0
 80036c8:	60fb      	str	r3, [r7, #12]
 80036ca:	4b15      	ldr	r3, [pc, #84]	; (8003720 <HAL_UART_MspInit+0x98>)
 80036cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ce:	4a14      	ldr	r2, [pc, #80]	; (8003720 <HAL_UART_MspInit+0x98>)
 80036d0:	f043 0301 	orr.w	r3, r3, #1
 80036d4:	6313      	str	r3, [r2, #48]	; 0x30
 80036d6:	4b12      	ldr	r3, [pc, #72]	; (8003720 <HAL_UART_MspInit+0x98>)
 80036d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	60fb      	str	r3, [r7, #12]
 80036e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80036e2:	230c      	movs	r3, #12
 80036e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e6:	2302      	movs	r3, #2
 80036e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ea:	2300      	movs	r3, #0
 80036ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036ee:	2303      	movs	r3, #3
 80036f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80036f2:	2307      	movs	r3, #7
 80036f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036f6:	f107 0314 	add.w	r3, r7, #20
 80036fa:	4619      	mov	r1, r3
 80036fc:	4809      	ldr	r0, [pc, #36]	; (8003724 <HAL_UART_MspInit+0x9c>)
 80036fe:	f000 fb83 	bl	8003e08 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003702:	2200      	movs	r2, #0
 8003704:	2100      	movs	r1, #0
 8003706:	2026      	movs	r0, #38	; 0x26
 8003708:	f000 fab5 	bl	8003c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800370c:	2026      	movs	r0, #38	; 0x26
 800370e:	f000 face 	bl	8003cae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003712:	bf00      	nop
 8003714:	3728      	adds	r7, #40	; 0x28
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	40004400 	.word	0x40004400
 8003720:	40023800 	.word	0x40023800
 8003724:	40020000 	.word	0x40020000

08003728 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800372c:	e7fe      	b.n	800372c <NMI_Handler+0x4>

0800372e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800372e:	b480      	push	{r7}
 8003730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003732:	e7fe      	b.n	8003732 <HardFault_Handler+0x4>

08003734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003738:	e7fe      	b.n	8003738 <MemManage_Handler+0x4>

0800373a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800373a:	b480      	push	{r7}
 800373c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800373e:	e7fe      	b.n	800373e <BusFault_Handler+0x4>

08003740 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003744:	e7fe      	b.n	8003744 <UsageFault_Handler+0x4>

08003746 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003746:	b480      	push	{r7}
 8003748:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800374a:	bf00      	nop
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003754:	b480      	push	{r7}
 8003756:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003758:	bf00      	nop
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr

08003762 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003762:	b480      	push	{r7}
 8003764:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003766:	bf00      	nop
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003774:	f000 f960 	bl	8003a38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003778:	bf00      	nop
 800377a:	bd80      	pop	{r7, pc}

0800377c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003780:	4802      	ldr	r0, [pc, #8]	; (800378c <USART2_IRQHandler+0x10>)
 8003782:	f002 fa2f 	bl	8005be4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003786:	bf00      	nop
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	2000025c 	.word	0x2000025c

08003790 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
	return 1;
 8003794:	2301      	movs	r3, #1
}
 8003796:	4618      	mov	r0, r3
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <_kill>:

int _kill(int pid, int sig)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80037aa:	f003 f94f 	bl	8006a4c <__errno>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2216      	movs	r2, #22
 80037b2:	601a      	str	r2, [r3, #0]
	return -1;
 80037b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3708      	adds	r7, #8
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <_exit>:

void _exit (int status)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80037c8:	f04f 31ff 	mov.w	r1, #4294967295
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f7ff ffe7 	bl	80037a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80037d2:	e7fe      	b.n	80037d2 <_exit+0x12>

080037d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037e0:	2300      	movs	r3, #0
 80037e2:	617b      	str	r3, [r7, #20]
 80037e4:	e00a      	b.n	80037fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80037e6:	f3af 8000 	nop.w
 80037ea:	4601      	mov	r1, r0
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	1c5a      	adds	r2, r3, #1
 80037f0:	60ba      	str	r2, [r7, #8]
 80037f2:	b2ca      	uxtb	r2, r1
 80037f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	3301      	adds	r3, #1
 80037fa:	617b      	str	r3, [r7, #20]
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	429a      	cmp	r2, r3
 8003802:	dbf0      	blt.n	80037e6 <_read+0x12>
	}

return len;
 8003804:	687b      	ldr	r3, [r7, #4]
}
 8003806:	4618      	mov	r0, r3
 8003808:	3718      	adds	r7, #24
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b086      	sub	sp, #24
 8003812:	af00      	add	r7, sp, #0
 8003814:	60f8      	str	r0, [r7, #12]
 8003816:	60b9      	str	r1, [r7, #8]
 8003818:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800381a:	2300      	movs	r3, #0
 800381c:	617b      	str	r3, [r7, #20]
 800381e:	e009      	b.n	8003834 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	1c5a      	adds	r2, r3, #1
 8003824:	60ba      	str	r2, [r7, #8]
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	4618      	mov	r0, r3
 800382a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	3301      	adds	r3, #1
 8003832:	617b      	str	r3, [r7, #20]
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	429a      	cmp	r2, r3
 800383a:	dbf1      	blt.n	8003820 <_write+0x12>
	}
	return len;
 800383c:	687b      	ldr	r3, [r7, #4]
}
 800383e:	4618      	mov	r0, r3
 8003840:	3718      	adds	r7, #24
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <_close>:

int _close(int file)
{
 8003846:	b480      	push	{r7}
 8003848:	b083      	sub	sp, #12
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
	return -1;
 800384e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003852:	4618      	mov	r0, r3
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr

0800385e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800385e:	b480      	push	{r7}
 8003860:	b083      	sub	sp, #12
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
 8003866:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800386e:	605a      	str	r2, [r3, #4]
	return 0;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <_isatty>:

int _isatty(int file)
{
 800387e:	b480      	push	{r7}
 8003880:	b083      	sub	sp, #12
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
	return 1;
 8003886:	2301      	movs	r3, #1
}
 8003888:	4618      	mov	r0, r3
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
	return 0;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3714      	adds	r7, #20
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
	...

080038b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038b8:	4a14      	ldr	r2, [pc, #80]	; (800390c <_sbrk+0x5c>)
 80038ba:	4b15      	ldr	r3, [pc, #84]	; (8003910 <_sbrk+0x60>)
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038c4:	4b13      	ldr	r3, [pc, #76]	; (8003914 <_sbrk+0x64>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d102      	bne.n	80038d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038cc:	4b11      	ldr	r3, [pc, #68]	; (8003914 <_sbrk+0x64>)
 80038ce:	4a12      	ldr	r2, [pc, #72]	; (8003918 <_sbrk+0x68>)
 80038d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038d2:	4b10      	ldr	r3, [pc, #64]	; (8003914 <_sbrk+0x64>)
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4413      	add	r3, r2
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d207      	bcs.n	80038f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038e0:	f003 f8b4 	bl	8006a4c <__errno>
 80038e4:	4603      	mov	r3, r0
 80038e6:	220c      	movs	r2, #12
 80038e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038ea:	f04f 33ff 	mov.w	r3, #4294967295
 80038ee:	e009      	b.n	8003904 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038f0:	4b08      	ldr	r3, [pc, #32]	; (8003914 <_sbrk+0x64>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038f6:	4b07      	ldr	r3, [pc, #28]	; (8003914 <_sbrk+0x64>)
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4413      	add	r3, r2
 80038fe:	4a05      	ldr	r2, [pc, #20]	; (8003914 <_sbrk+0x64>)
 8003900:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003902:	68fb      	ldr	r3, [r7, #12]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3718      	adds	r7, #24
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	20020000 	.word	0x20020000
 8003910:	00000400 	.word	0x00000400
 8003914:	200002a4 	.word	0x200002a4
 8003918:	200002c0 	.word	0x200002c0

0800391c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003920:	4b06      	ldr	r3, [pc, #24]	; (800393c <SystemInit+0x20>)
 8003922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003926:	4a05      	ldr	r2, [pc, #20]	; (800393c <SystemInit+0x20>)
 8003928:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800392c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003930:	bf00      	nop
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	e000ed00 	.word	0xe000ed00

08003940 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003940:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003978 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003944:	480d      	ldr	r0, [pc, #52]	; (800397c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003946:	490e      	ldr	r1, [pc, #56]	; (8003980 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003948:	4a0e      	ldr	r2, [pc, #56]	; (8003984 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800394a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800394c:	e002      	b.n	8003954 <LoopCopyDataInit>

0800394e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800394e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003950:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003952:	3304      	adds	r3, #4

08003954 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003954:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003956:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003958:	d3f9      	bcc.n	800394e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800395a:	4a0b      	ldr	r2, [pc, #44]	; (8003988 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800395c:	4c0b      	ldr	r4, [pc, #44]	; (800398c <LoopFillZerobss+0x26>)
  movs r3, #0
 800395e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003960:	e001      	b.n	8003966 <LoopFillZerobss>

08003962 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003962:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003964:	3204      	adds	r2, #4

08003966 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003966:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003968:	d3fb      	bcc.n	8003962 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800396a:	f7ff ffd7 	bl	800391c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800396e:	f003 f873 	bl	8006a58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003972:	f7ff fab7 	bl	8002ee4 <main>
  bx  lr    
 8003976:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003978:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800397c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003980:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8003984:	08009dec 	.word	0x08009dec
  ldr r2, =_sbss
 8003988:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 800398c:	200002bc 	.word	0x200002bc

08003990 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003990:	e7fe      	b.n	8003990 <ADC_IRQHandler>
	...

08003994 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003998:	4b0e      	ldr	r3, [pc, #56]	; (80039d4 <HAL_Init+0x40>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a0d      	ldr	r2, [pc, #52]	; (80039d4 <HAL_Init+0x40>)
 800399e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80039a4:	4b0b      	ldr	r3, [pc, #44]	; (80039d4 <HAL_Init+0x40>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a0a      	ldr	r2, [pc, #40]	; (80039d4 <HAL_Init+0x40>)
 80039aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039b0:	4b08      	ldr	r3, [pc, #32]	; (80039d4 <HAL_Init+0x40>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a07      	ldr	r2, [pc, #28]	; (80039d4 <HAL_Init+0x40>)
 80039b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039bc:	2003      	movs	r0, #3
 80039be:	f000 f94f 	bl	8003c60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039c2:	2000      	movs	r0, #0
 80039c4:	f000 f808 	bl	80039d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039c8:	f7ff fdee 	bl	80035a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	40023c00 	.word	0x40023c00

080039d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80039e0:	4b12      	ldr	r3, [pc, #72]	; (8003a2c <HAL_InitTick+0x54>)
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	4b12      	ldr	r3, [pc, #72]	; (8003a30 <HAL_InitTick+0x58>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	4619      	mov	r1, r3
 80039ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80039f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f6:	4618      	mov	r0, r3
 80039f8:	f000 f967 	bl	8003cca <HAL_SYSTICK_Config>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e00e      	b.n	8003a24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b0f      	cmp	r3, #15
 8003a0a:	d80a      	bhi.n	8003a22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	6879      	ldr	r1, [r7, #4]
 8003a10:	f04f 30ff 	mov.w	r0, #4294967295
 8003a14:	f000 f92f 	bl	8003c76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a18:	4a06      	ldr	r2, [pc, #24]	; (8003a34 <HAL_InitTick+0x5c>)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	e000      	b.n	8003a24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	20000010 	.word	0x20000010
 8003a30:	20000018 	.word	0x20000018
 8003a34:	20000014 	.word	0x20000014

08003a38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a3c:	4b06      	ldr	r3, [pc, #24]	; (8003a58 <HAL_IncTick+0x20>)
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	461a      	mov	r2, r3
 8003a42:	4b06      	ldr	r3, [pc, #24]	; (8003a5c <HAL_IncTick+0x24>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4413      	add	r3, r2
 8003a48:	4a04      	ldr	r2, [pc, #16]	; (8003a5c <HAL_IncTick+0x24>)
 8003a4a:	6013      	str	r3, [r2, #0]
}
 8003a4c:	bf00      	nop
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	20000018 	.word	0x20000018
 8003a5c:	200002a8 	.word	0x200002a8

08003a60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
  return uwTick;
 8003a64:	4b03      	ldr	r3, [pc, #12]	; (8003a74 <HAL_GetTick+0x14>)
 8003a66:	681b      	ldr	r3, [r3, #0]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	200002a8 	.word	0x200002a8

08003a78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a80:	f7ff ffee 	bl	8003a60 <HAL_GetTick>
 8003a84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a90:	d005      	beq.n	8003a9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a92:	4b0a      	ldr	r3, [pc, #40]	; (8003abc <HAL_Delay+0x44>)
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	461a      	mov	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003a9e:	bf00      	nop
 8003aa0:	f7ff ffde 	bl	8003a60 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d8f7      	bhi.n	8003aa0 <HAL_Delay+0x28>
  {
  }
}
 8003ab0:	bf00      	nop
 8003ab2:	bf00      	nop
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	20000018 	.word	0x20000018

08003ac0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f003 0307 	and.w	r3, r3, #7
 8003ace:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ad0:	4b0c      	ldr	r3, [pc, #48]	; (8003b04 <__NVIC_SetPriorityGrouping+0x44>)
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ad6:	68ba      	ldr	r2, [r7, #8]
 8003ad8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003adc:	4013      	ands	r3, r2
 8003ade:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ae8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003af0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003af2:	4a04      	ldr	r2, [pc, #16]	; (8003b04 <__NVIC_SetPriorityGrouping+0x44>)
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	60d3      	str	r3, [r2, #12]
}
 8003af8:	bf00      	nop
 8003afa:	3714      	adds	r7, #20
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr
 8003b04:	e000ed00 	.word	0xe000ed00

08003b08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b0c:	4b04      	ldr	r3, [pc, #16]	; (8003b20 <__NVIC_GetPriorityGrouping+0x18>)
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	0a1b      	lsrs	r3, r3, #8
 8003b12:	f003 0307 	and.w	r3, r3, #7
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr
 8003b20:	e000ed00 	.word	0xe000ed00

08003b24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	db0b      	blt.n	8003b4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b36:	79fb      	ldrb	r3, [r7, #7]
 8003b38:	f003 021f 	and.w	r2, r3, #31
 8003b3c:	4907      	ldr	r1, [pc, #28]	; (8003b5c <__NVIC_EnableIRQ+0x38>)
 8003b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b42:	095b      	lsrs	r3, r3, #5
 8003b44:	2001      	movs	r0, #1
 8003b46:	fa00 f202 	lsl.w	r2, r0, r2
 8003b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	e000e100 	.word	0xe000e100

08003b60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	4603      	mov	r3, r0
 8003b68:	6039      	str	r1, [r7, #0]
 8003b6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	db0a      	blt.n	8003b8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	490c      	ldr	r1, [pc, #48]	; (8003bac <__NVIC_SetPriority+0x4c>)
 8003b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b7e:	0112      	lsls	r2, r2, #4
 8003b80:	b2d2      	uxtb	r2, r2
 8003b82:	440b      	add	r3, r1
 8003b84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b88:	e00a      	b.n	8003ba0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	b2da      	uxtb	r2, r3
 8003b8e:	4908      	ldr	r1, [pc, #32]	; (8003bb0 <__NVIC_SetPriority+0x50>)
 8003b90:	79fb      	ldrb	r3, [r7, #7]
 8003b92:	f003 030f 	and.w	r3, r3, #15
 8003b96:	3b04      	subs	r3, #4
 8003b98:	0112      	lsls	r2, r2, #4
 8003b9a:	b2d2      	uxtb	r2, r2
 8003b9c:	440b      	add	r3, r1
 8003b9e:	761a      	strb	r2, [r3, #24]
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr
 8003bac:	e000e100 	.word	0xe000e100
 8003bb0:	e000ed00 	.word	0xe000ed00

08003bb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b089      	sub	sp, #36	; 0x24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f003 0307 	and.w	r3, r3, #7
 8003bc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	f1c3 0307 	rsb	r3, r3, #7
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	bf28      	it	cs
 8003bd2:	2304      	movcs	r3, #4
 8003bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	3304      	adds	r3, #4
 8003bda:	2b06      	cmp	r3, #6
 8003bdc:	d902      	bls.n	8003be4 <NVIC_EncodePriority+0x30>
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	3b03      	subs	r3, #3
 8003be2:	e000      	b.n	8003be6 <NVIC_EncodePriority+0x32>
 8003be4:	2300      	movs	r3, #0
 8003be6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003be8:	f04f 32ff 	mov.w	r2, #4294967295
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf2:	43da      	mvns	r2, r3
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	401a      	ands	r2, r3
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	fa01 f303 	lsl.w	r3, r1, r3
 8003c06:	43d9      	mvns	r1, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c0c:	4313      	orrs	r3, r2
         );
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3724      	adds	r7, #36	; 0x24
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
	...

08003c1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	3b01      	subs	r3, #1
 8003c28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c2c:	d301      	bcc.n	8003c32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e00f      	b.n	8003c52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c32:	4a0a      	ldr	r2, [pc, #40]	; (8003c5c <SysTick_Config+0x40>)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	3b01      	subs	r3, #1
 8003c38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c3a:	210f      	movs	r1, #15
 8003c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c40:	f7ff ff8e 	bl	8003b60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c44:	4b05      	ldr	r3, [pc, #20]	; (8003c5c <SysTick_Config+0x40>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c4a:	4b04      	ldr	r3, [pc, #16]	; (8003c5c <SysTick_Config+0x40>)
 8003c4c:	2207      	movs	r2, #7
 8003c4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	e000e010 	.word	0xe000e010

08003c60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f7ff ff29 	bl	8003ac0 <__NVIC_SetPriorityGrouping>
}
 8003c6e:	bf00      	nop
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b086      	sub	sp, #24
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	60b9      	str	r1, [r7, #8]
 8003c80:	607a      	str	r2, [r7, #4]
 8003c82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c84:	2300      	movs	r3, #0
 8003c86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c88:	f7ff ff3e 	bl	8003b08 <__NVIC_GetPriorityGrouping>
 8003c8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	68b9      	ldr	r1, [r7, #8]
 8003c92:	6978      	ldr	r0, [r7, #20]
 8003c94:	f7ff ff8e 	bl	8003bb4 <NVIC_EncodePriority>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c9e:	4611      	mov	r1, r2
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7ff ff5d 	bl	8003b60 <__NVIC_SetPriority>
}
 8003ca6:	bf00      	nop
 8003ca8:	3718      	adds	r7, #24
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b082      	sub	sp, #8
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7ff ff31 	bl	8003b24 <__NVIC_EnableIRQ>
}
 8003cc2:	bf00      	nop
 8003cc4:	3708      	adds	r7, #8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b082      	sub	sp, #8
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f7ff ffa2 	bl	8003c1c <SysTick_Config>
 8003cd8:	4603      	mov	r3, r0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b084      	sub	sp, #16
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cee:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003cf0:	f7ff feb6 	bl	8003a60 <HAL_GetTick>
 8003cf4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d008      	beq.n	8003d14 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2280      	movs	r2, #128	; 0x80
 8003d06:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e052      	b.n	8003dba <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 0216 	bic.w	r2, r2, #22
 8003d22:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	695a      	ldr	r2, [r3, #20]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d32:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d103      	bne.n	8003d44 <HAL_DMA_Abort+0x62>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d007      	beq.n	8003d54 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 0208 	bic.w	r2, r2, #8
 8003d52:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 0201 	bic.w	r2, r2, #1
 8003d62:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d64:	e013      	b.n	8003d8e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d66:	f7ff fe7b 	bl	8003a60 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	2b05      	cmp	r3, #5
 8003d72:	d90c      	bls.n	8003d8e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2220      	movs	r2, #32
 8003d78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2203      	movs	r2, #3
 8003d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e015      	b.n	8003dba <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0301 	and.w	r3, r3, #1
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1e4      	bne.n	8003d66 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da0:	223f      	movs	r2, #63	; 0x3f
 8003da2:	409a      	lsls	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	b083      	sub	sp, #12
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d004      	beq.n	8003de0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2280      	movs	r2, #128	; 0x80
 8003dda:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e00c      	b.n	8003dfa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2205      	movs	r2, #5
 8003de4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f022 0201 	bic.w	r2, r2, #1
 8003df6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
	...

08003e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b089      	sub	sp, #36	; 0x24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e12:	2300      	movs	r3, #0
 8003e14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e16:	2300      	movs	r3, #0
 8003e18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e1e:	2300      	movs	r3, #0
 8003e20:	61fb      	str	r3, [r7, #28]
 8003e22:	e16b      	b.n	80040fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e24:	2201      	movs	r2, #1
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	4013      	ands	r3, r2
 8003e36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	f040 815a 	bne.w	80040f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f003 0303 	and.w	r3, r3, #3
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d005      	beq.n	8003e5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d130      	bne.n	8003ebc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	2203      	movs	r2, #3
 8003e66:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6a:	43db      	mvns	r3, r3
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	68da      	ldr	r2, [r3, #12]
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e90:	2201      	movs	r2, #1
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	43db      	mvns	r3, r3
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	091b      	lsrs	r3, r3, #4
 8003ea6:	f003 0201 	and.w	r2, r3, #1
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f003 0303 	and.w	r3, r3, #3
 8003ec4:	2b03      	cmp	r3, #3
 8003ec6:	d017      	beq.n	8003ef8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	2203      	movs	r2, #3
 8003ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed8:	43db      	mvns	r3, r3
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	4013      	ands	r3, r2
 8003ede:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	689a      	ldr	r2, [r3, #8]
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f003 0303 	and.w	r3, r3, #3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d123      	bne.n	8003f4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	08da      	lsrs	r2, r3, #3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	3208      	adds	r2, #8
 8003f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	f003 0307 	and.w	r3, r3, #7
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	220f      	movs	r2, #15
 8003f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f20:	43db      	mvns	r3, r3
 8003f22:	69ba      	ldr	r2, [r7, #24]
 8003f24:	4013      	ands	r3, r2
 8003f26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	691a      	ldr	r2, [r3, #16]
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	f003 0307 	and.w	r3, r3, #7
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	fa02 f303 	lsl.w	r3, r2, r3
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	08da      	lsrs	r2, r3, #3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	3208      	adds	r2, #8
 8003f46:	69b9      	ldr	r1, [r7, #24]
 8003f48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	005b      	lsls	r3, r3, #1
 8003f56:	2203      	movs	r2, #3
 8003f58:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5c:	43db      	mvns	r3, r3
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	4013      	ands	r3, r2
 8003f62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f003 0203 	and.w	r2, r3, #3
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	005b      	lsls	r3, r3, #1
 8003f70:	fa02 f303 	lsl.w	r3, r2, r3
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f000 80b4 	beq.w	80040f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f8e:	2300      	movs	r3, #0
 8003f90:	60fb      	str	r3, [r7, #12]
 8003f92:	4b60      	ldr	r3, [pc, #384]	; (8004114 <HAL_GPIO_Init+0x30c>)
 8003f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f96:	4a5f      	ldr	r2, [pc, #380]	; (8004114 <HAL_GPIO_Init+0x30c>)
 8003f98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f9c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f9e:	4b5d      	ldr	r3, [pc, #372]	; (8004114 <HAL_GPIO_Init+0x30c>)
 8003fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003faa:	4a5b      	ldr	r2, [pc, #364]	; (8004118 <HAL_GPIO_Init+0x310>)
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	089b      	lsrs	r3, r3, #2
 8003fb0:	3302      	adds	r3, #2
 8003fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	f003 0303 	and.w	r3, r3, #3
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	220f      	movs	r2, #15
 8003fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc6:	43db      	mvns	r3, r3
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	4013      	ands	r3, r2
 8003fcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a52      	ldr	r2, [pc, #328]	; (800411c <HAL_GPIO_Init+0x314>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d02b      	beq.n	800402e <HAL_GPIO_Init+0x226>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a51      	ldr	r2, [pc, #324]	; (8004120 <HAL_GPIO_Init+0x318>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d025      	beq.n	800402a <HAL_GPIO_Init+0x222>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a50      	ldr	r2, [pc, #320]	; (8004124 <HAL_GPIO_Init+0x31c>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d01f      	beq.n	8004026 <HAL_GPIO_Init+0x21e>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a4f      	ldr	r2, [pc, #316]	; (8004128 <HAL_GPIO_Init+0x320>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d019      	beq.n	8004022 <HAL_GPIO_Init+0x21a>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a4e      	ldr	r2, [pc, #312]	; (800412c <HAL_GPIO_Init+0x324>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d013      	beq.n	800401e <HAL_GPIO_Init+0x216>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a4d      	ldr	r2, [pc, #308]	; (8004130 <HAL_GPIO_Init+0x328>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d00d      	beq.n	800401a <HAL_GPIO_Init+0x212>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a4c      	ldr	r2, [pc, #304]	; (8004134 <HAL_GPIO_Init+0x32c>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d007      	beq.n	8004016 <HAL_GPIO_Init+0x20e>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a4b      	ldr	r2, [pc, #300]	; (8004138 <HAL_GPIO_Init+0x330>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d101      	bne.n	8004012 <HAL_GPIO_Init+0x20a>
 800400e:	2307      	movs	r3, #7
 8004010:	e00e      	b.n	8004030 <HAL_GPIO_Init+0x228>
 8004012:	2308      	movs	r3, #8
 8004014:	e00c      	b.n	8004030 <HAL_GPIO_Init+0x228>
 8004016:	2306      	movs	r3, #6
 8004018:	e00a      	b.n	8004030 <HAL_GPIO_Init+0x228>
 800401a:	2305      	movs	r3, #5
 800401c:	e008      	b.n	8004030 <HAL_GPIO_Init+0x228>
 800401e:	2304      	movs	r3, #4
 8004020:	e006      	b.n	8004030 <HAL_GPIO_Init+0x228>
 8004022:	2303      	movs	r3, #3
 8004024:	e004      	b.n	8004030 <HAL_GPIO_Init+0x228>
 8004026:	2302      	movs	r3, #2
 8004028:	e002      	b.n	8004030 <HAL_GPIO_Init+0x228>
 800402a:	2301      	movs	r3, #1
 800402c:	e000      	b.n	8004030 <HAL_GPIO_Init+0x228>
 800402e:	2300      	movs	r3, #0
 8004030:	69fa      	ldr	r2, [r7, #28]
 8004032:	f002 0203 	and.w	r2, r2, #3
 8004036:	0092      	lsls	r2, r2, #2
 8004038:	4093      	lsls	r3, r2
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	4313      	orrs	r3, r2
 800403e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004040:	4935      	ldr	r1, [pc, #212]	; (8004118 <HAL_GPIO_Init+0x310>)
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	089b      	lsrs	r3, r3, #2
 8004046:	3302      	adds	r3, #2
 8004048:	69ba      	ldr	r2, [r7, #24]
 800404a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800404e:	4b3b      	ldr	r3, [pc, #236]	; (800413c <HAL_GPIO_Init+0x334>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	43db      	mvns	r3, r3
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	4013      	ands	r3, r2
 800405c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800406a:	69ba      	ldr	r2, [r7, #24]
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	4313      	orrs	r3, r2
 8004070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004072:	4a32      	ldr	r2, [pc, #200]	; (800413c <HAL_GPIO_Init+0x334>)
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004078:	4b30      	ldr	r3, [pc, #192]	; (800413c <HAL_GPIO_Init+0x334>)
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	43db      	mvns	r3, r3
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	4013      	ands	r3, r2
 8004086:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d003      	beq.n	800409c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	4313      	orrs	r3, r2
 800409a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800409c:	4a27      	ldr	r2, [pc, #156]	; (800413c <HAL_GPIO_Init+0x334>)
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80040a2:	4b26      	ldr	r3, [pc, #152]	; (800413c <HAL_GPIO_Init+0x334>)
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	43db      	mvns	r3, r3
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	4013      	ands	r3, r2
 80040b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d003      	beq.n	80040c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040c6:	4a1d      	ldr	r2, [pc, #116]	; (800413c <HAL_GPIO_Init+0x334>)
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040cc:	4b1b      	ldr	r3, [pc, #108]	; (800413c <HAL_GPIO_Init+0x334>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	43db      	mvns	r3, r3
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	4013      	ands	r3, r2
 80040da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d003      	beq.n	80040f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040f0:	4a12      	ldr	r2, [pc, #72]	; (800413c <HAL_GPIO_Init+0x334>)
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	3301      	adds	r3, #1
 80040fa:	61fb      	str	r3, [r7, #28]
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	2b0f      	cmp	r3, #15
 8004100:	f67f ae90 	bls.w	8003e24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004104:	bf00      	nop
 8004106:	bf00      	nop
 8004108:	3724      	adds	r7, #36	; 0x24
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	40023800 	.word	0x40023800
 8004118:	40013800 	.word	0x40013800
 800411c:	40020000 	.word	0x40020000
 8004120:	40020400 	.word	0x40020400
 8004124:	40020800 	.word	0x40020800
 8004128:	40020c00 	.word	0x40020c00
 800412c:	40021000 	.word	0x40021000
 8004130:	40021400 	.word	0x40021400
 8004134:	40021800 	.word	0x40021800
 8004138:	40021c00 	.word	0x40021c00
 800413c:	40013c00 	.word	0x40013c00

08004140 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	460b      	mov	r3, r1
 800414a:	807b      	strh	r3, [r7, #2]
 800414c:	4613      	mov	r3, r2
 800414e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004150:	787b      	ldrb	r3, [r7, #1]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d003      	beq.n	800415e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004156:	887a      	ldrh	r2, [r7, #2]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800415c:	e003      	b.n	8004166 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800415e:	887b      	ldrh	r3, [r7, #2]
 8004160:	041a      	lsls	r2, r3, #16
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	619a      	str	r2, [r3, #24]
}
 8004166:	bf00      	nop
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
	...

08004174 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e12b      	b.n	80043de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d106      	bne.n	80041a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7ff fa2c 	bl	80035f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2224      	movs	r2, #36	; 0x24
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 0201 	bic.w	r2, r2, #1
 80041b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80041d8:	f001 fbfc 	bl	80059d4 <HAL_RCC_GetPCLK1Freq>
 80041dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	4a81      	ldr	r2, [pc, #516]	; (80043e8 <HAL_I2C_Init+0x274>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d807      	bhi.n	80041f8 <HAL_I2C_Init+0x84>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4a80      	ldr	r2, [pc, #512]	; (80043ec <HAL_I2C_Init+0x278>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	bf94      	ite	ls
 80041f0:	2301      	movls	r3, #1
 80041f2:	2300      	movhi	r3, #0
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	e006      	b.n	8004206 <HAL_I2C_Init+0x92>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	4a7d      	ldr	r2, [pc, #500]	; (80043f0 <HAL_I2C_Init+0x27c>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	bf94      	ite	ls
 8004200:	2301      	movls	r3, #1
 8004202:	2300      	movhi	r3, #0
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e0e7      	b.n	80043de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	4a78      	ldr	r2, [pc, #480]	; (80043f4 <HAL_I2C_Init+0x280>)
 8004212:	fba2 2303 	umull	r2, r3, r2, r3
 8004216:	0c9b      	lsrs	r3, r3, #18
 8004218:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68ba      	ldr	r2, [r7, #8]
 800422a:	430a      	orrs	r2, r1
 800422c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6a1b      	ldr	r3, [r3, #32]
 8004234:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	4a6a      	ldr	r2, [pc, #424]	; (80043e8 <HAL_I2C_Init+0x274>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d802      	bhi.n	8004248 <HAL_I2C_Init+0xd4>
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	3301      	adds	r3, #1
 8004246:	e009      	b.n	800425c <HAL_I2C_Init+0xe8>
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800424e:	fb02 f303 	mul.w	r3, r2, r3
 8004252:	4a69      	ldr	r2, [pc, #420]	; (80043f8 <HAL_I2C_Init+0x284>)
 8004254:	fba2 2303 	umull	r2, r3, r2, r3
 8004258:	099b      	lsrs	r3, r3, #6
 800425a:	3301      	adds	r3, #1
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	6812      	ldr	r2, [r2, #0]
 8004260:	430b      	orrs	r3, r1
 8004262:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	69db      	ldr	r3, [r3, #28]
 800426a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800426e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	495c      	ldr	r1, [pc, #368]	; (80043e8 <HAL_I2C_Init+0x274>)
 8004278:	428b      	cmp	r3, r1
 800427a:	d819      	bhi.n	80042b0 <HAL_I2C_Init+0x13c>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	1e59      	subs	r1, r3, #1
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	fbb1 f3f3 	udiv	r3, r1, r3
 800428a:	1c59      	adds	r1, r3, #1
 800428c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004290:	400b      	ands	r3, r1
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00a      	beq.n	80042ac <HAL_I2C_Init+0x138>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	1e59      	subs	r1, r3, #1
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	005b      	lsls	r3, r3, #1
 80042a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80042a4:	3301      	adds	r3, #1
 80042a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042aa:	e051      	b.n	8004350 <HAL_I2C_Init+0x1dc>
 80042ac:	2304      	movs	r3, #4
 80042ae:	e04f      	b.n	8004350 <HAL_I2C_Init+0x1dc>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d111      	bne.n	80042dc <HAL_I2C_Init+0x168>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	1e58      	subs	r0, r3, #1
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6859      	ldr	r1, [r3, #4]
 80042c0:	460b      	mov	r3, r1
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	440b      	add	r3, r1
 80042c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80042ca:	3301      	adds	r3, #1
 80042cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	bf0c      	ite	eq
 80042d4:	2301      	moveq	r3, #1
 80042d6:	2300      	movne	r3, #0
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	e012      	b.n	8004302 <HAL_I2C_Init+0x18e>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	1e58      	subs	r0, r3, #1
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6859      	ldr	r1, [r3, #4]
 80042e4:	460b      	mov	r3, r1
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	440b      	add	r3, r1
 80042ea:	0099      	lsls	r1, r3, #2
 80042ec:	440b      	add	r3, r1
 80042ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80042f2:	3301      	adds	r3, #1
 80042f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	bf0c      	ite	eq
 80042fc:	2301      	moveq	r3, #1
 80042fe:	2300      	movne	r3, #0
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <HAL_I2C_Init+0x196>
 8004306:	2301      	movs	r3, #1
 8004308:	e022      	b.n	8004350 <HAL_I2C_Init+0x1dc>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10e      	bne.n	8004330 <HAL_I2C_Init+0x1bc>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	1e58      	subs	r0, r3, #1
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6859      	ldr	r1, [r3, #4]
 800431a:	460b      	mov	r3, r1
 800431c:	005b      	lsls	r3, r3, #1
 800431e:	440b      	add	r3, r1
 8004320:	fbb0 f3f3 	udiv	r3, r0, r3
 8004324:	3301      	adds	r3, #1
 8004326:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800432a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800432e:	e00f      	b.n	8004350 <HAL_I2C_Init+0x1dc>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	1e58      	subs	r0, r3, #1
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6859      	ldr	r1, [r3, #4]
 8004338:	460b      	mov	r3, r1
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	440b      	add	r3, r1
 800433e:	0099      	lsls	r1, r3, #2
 8004340:	440b      	add	r3, r1
 8004342:	fbb0 f3f3 	udiv	r3, r0, r3
 8004346:	3301      	adds	r3, #1
 8004348:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800434c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004350:	6879      	ldr	r1, [r7, #4]
 8004352:	6809      	ldr	r1, [r1, #0]
 8004354:	4313      	orrs	r3, r2
 8004356:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	69da      	ldr	r2, [r3, #28]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	431a      	orrs	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	430a      	orrs	r2, r1
 8004372:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800437e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	6911      	ldr	r1, [r2, #16]
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	68d2      	ldr	r2, [r2, #12]
 800438a:	4311      	orrs	r1, r2
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	6812      	ldr	r2, [r2, #0]
 8004390:	430b      	orrs	r3, r1
 8004392:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	695a      	ldr	r2, [r3, #20]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	431a      	orrs	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	430a      	orrs	r2, r1
 80043ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f042 0201 	orr.w	r2, r2, #1
 80043be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2220      	movs	r2, #32
 80043ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	000186a0 	.word	0x000186a0
 80043ec:	001e847f 	.word	0x001e847f
 80043f0:	003d08ff 	.word	0x003d08ff
 80043f4:	431bde83 	.word	0x431bde83
 80043f8:	10624dd3 	.word	0x10624dd3

080043fc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b088      	sub	sp, #32
 8004400:	af02      	add	r7, sp, #8
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	4608      	mov	r0, r1
 8004406:	4611      	mov	r1, r2
 8004408:	461a      	mov	r2, r3
 800440a:	4603      	mov	r3, r0
 800440c:	817b      	strh	r3, [r7, #10]
 800440e:	460b      	mov	r3, r1
 8004410:	813b      	strh	r3, [r7, #8]
 8004412:	4613      	mov	r3, r2
 8004414:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004416:	f7ff fb23 	bl	8003a60 <HAL_GetTick>
 800441a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b20      	cmp	r3, #32
 8004426:	f040 80d9 	bne.w	80045dc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	9300      	str	r3, [sp, #0]
 800442e:	2319      	movs	r3, #25
 8004430:	2201      	movs	r2, #1
 8004432:	496d      	ldr	r1, [pc, #436]	; (80045e8 <HAL_I2C_Mem_Write+0x1ec>)
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f000 fc7f 	bl	8004d38 <I2C_WaitOnFlagUntilTimeout>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d001      	beq.n	8004444 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004440:	2302      	movs	r3, #2
 8004442:	e0cc      	b.n	80045de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800444a:	2b01      	cmp	r3, #1
 800444c:	d101      	bne.n	8004452 <HAL_I2C_Mem_Write+0x56>
 800444e:	2302      	movs	r3, #2
 8004450:	e0c5      	b.n	80045de <HAL_I2C_Mem_Write+0x1e2>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	2b01      	cmp	r3, #1
 8004466:	d007      	beq.n	8004478 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f042 0201 	orr.w	r2, r2, #1
 8004476:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004486:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2221      	movs	r2, #33	; 0x21
 800448c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2240      	movs	r2, #64	; 0x40
 8004494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6a3a      	ldr	r2, [r7, #32]
 80044a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80044a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	4a4d      	ldr	r2, [pc, #308]	; (80045ec <HAL_I2C_Mem_Write+0x1f0>)
 80044b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044ba:	88f8      	ldrh	r0, [r7, #6]
 80044bc:	893a      	ldrh	r2, [r7, #8]
 80044be:	8979      	ldrh	r1, [r7, #10]
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	9301      	str	r3, [sp, #4]
 80044c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	4603      	mov	r3, r0
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f000 fab6 	bl	8004a3c <I2C_RequestMemoryWrite>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d052      	beq.n	800457c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e081      	b.n	80045de <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	f000 fd00 	bl	8004ee4 <I2C_WaitOnTXEFlagUntilTimeout>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00d      	beq.n	8004506 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	2b04      	cmp	r3, #4
 80044f0:	d107      	bne.n	8004502 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004500:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e06b      	b.n	80045de <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450a:	781a      	ldrb	r2, [r3, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004516:	1c5a      	adds	r2, r3, #1
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004520:	3b01      	subs	r3, #1
 8004522:	b29a      	uxth	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800452c:	b29b      	uxth	r3, r3
 800452e:	3b01      	subs	r3, #1
 8004530:	b29a      	uxth	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	f003 0304 	and.w	r3, r3, #4
 8004540:	2b04      	cmp	r3, #4
 8004542:	d11b      	bne.n	800457c <HAL_I2C_Mem_Write+0x180>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004548:	2b00      	cmp	r3, #0
 800454a:	d017      	beq.n	800457c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004550:	781a      	ldrb	r2, [r3, #0]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455c:	1c5a      	adds	r2, r3, #1
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004566:	3b01      	subs	r3, #1
 8004568:	b29a      	uxth	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004572:	b29b      	uxth	r3, r3
 8004574:	3b01      	subs	r3, #1
 8004576:	b29a      	uxth	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1aa      	bne.n	80044da <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f000 fcec 	bl	8004f66 <I2C_WaitOnBTFFlagUntilTimeout>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00d      	beq.n	80045b0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004598:	2b04      	cmp	r3, #4
 800459a:	d107      	bne.n	80045ac <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045aa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e016      	b.n	80045de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2220      	movs	r2, #32
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80045d8:	2300      	movs	r3, #0
 80045da:	e000      	b.n	80045de <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80045dc:	2302      	movs	r3, #2
  }
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3718      	adds	r7, #24
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	00100002 	.word	0x00100002
 80045ec:	ffff0000 	.word	0xffff0000

080045f0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b08c      	sub	sp, #48	; 0x30
 80045f4:	af02      	add	r7, sp, #8
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	4608      	mov	r0, r1
 80045fa:	4611      	mov	r1, r2
 80045fc:	461a      	mov	r2, r3
 80045fe:	4603      	mov	r3, r0
 8004600:	817b      	strh	r3, [r7, #10]
 8004602:	460b      	mov	r3, r1
 8004604:	813b      	strh	r3, [r7, #8]
 8004606:	4613      	mov	r3, r2
 8004608:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800460a:	f7ff fa29 	bl	8003a60 <HAL_GetTick>
 800460e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004616:	b2db      	uxtb	r3, r3
 8004618:	2b20      	cmp	r3, #32
 800461a:	f040 8208 	bne.w	8004a2e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800461e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004620:	9300      	str	r3, [sp, #0]
 8004622:	2319      	movs	r3, #25
 8004624:	2201      	movs	r2, #1
 8004626:	497b      	ldr	r1, [pc, #492]	; (8004814 <HAL_I2C_Mem_Read+0x224>)
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f000 fb85 	bl	8004d38 <I2C_WaitOnFlagUntilTimeout>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d001      	beq.n	8004638 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004634:	2302      	movs	r3, #2
 8004636:	e1fb      	b.n	8004a30 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800463e:	2b01      	cmp	r3, #1
 8004640:	d101      	bne.n	8004646 <HAL_I2C_Mem_Read+0x56>
 8004642:	2302      	movs	r3, #2
 8004644:	e1f4      	b.n	8004a30 <HAL_I2C_Mem_Read+0x440>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	2b01      	cmp	r3, #1
 800465a:	d007      	beq.n	800466c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f042 0201 	orr.w	r2, r2, #1
 800466a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800467a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2222      	movs	r2, #34	; 0x22
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2240      	movs	r2, #64	; 0x40
 8004688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004696:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800469c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	4a5b      	ldr	r2, [pc, #364]	; (8004818 <HAL_I2C_Mem_Read+0x228>)
 80046ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046ae:	88f8      	ldrh	r0, [r7, #6]
 80046b0:	893a      	ldrh	r2, [r7, #8]
 80046b2:	8979      	ldrh	r1, [r7, #10]
 80046b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b6:	9301      	str	r3, [sp, #4]
 80046b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ba:	9300      	str	r3, [sp, #0]
 80046bc:	4603      	mov	r3, r0
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f000 fa52 	bl	8004b68 <I2C_RequestMemoryRead>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d001      	beq.n	80046ce <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e1b0      	b.n	8004a30 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d113      	bne.n	80046fe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046d6:	2300      	movs	r3, #0
 80046d8:	623b      	str	r3, [r7, #32]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	623b      	str	r3, [r7, #32]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	623b      	str	r3, [r7, #32]
 80046ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046fa:	601a      	str	r2, [r3, #0]
 80046fc:	e184      	b.n	8004a08 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004702:	2b01      	cmp	r3, #1
 8004704:	d11b      	bne.n	800473e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004714:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004716:	2300      	movs	r3, #0
 8004718:	61fb      	str	r3, [r7, #28]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	61fb      	str	r3, [r7, #28]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	61fb      	str	r3, [r7, #28]
 800472a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800473a:	601a      	str	r2, [r3, #0]
 800473c:	e164      	b.n	8004a08 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004742:	2b02      	cmp	r3, #2
 8004744:	d11b      	bne.n	800477e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004754:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004764:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004766:	2300      	movs	r3, #0
 8004768:	61bb      	str	r3, [r7, #24]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	695b      	ldr	r3, [r3, #20]
 8004770:	61bb      	str	r3, [r7, #24]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	61bb      	str	r3, [r7, #24]
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	e144      	b.n	8004a08 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800477e:	2300      	movs	r3, #0
 8004780:	617b      	str	r3, [r7, #20]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	617b      	str	r3, [r7, #20]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	617b      	str	r3, [r7, #20]
 8004792:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004794:	e138      	b.n	8004a08 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800479a:	2b03      	cmp	r3, #3
 800479c:	f200 80f1 	bhi.w	8004982 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d123      	bne.n	80047f0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80047ac:	68f8      	ldr	r0, [r7, #12]
 80047ae:	f000 fc1b 	bl	8004fe8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d001      	beq.n	80047bc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e139      	b.n	8004a30 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	691a      	ldr	r2, [r3, #16]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c6:	b2d2      	uxtb	r2, r2
 80047c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ce:	1c5a      	adds	r2, r3, #1
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d8:	3b01      	subs	r3, #1
 80047da:	b29a      	uxth	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	3b01      	subs	r3, #1
 80047e8:	b29a      	uxth	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047ee:	e10b      	b.n	8004a08 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d14e      	bne.n	8004896 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fa:	9300      	str	r3, [sp, #0]
 80047fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047fe:	2200      	movs	r2, #0
 8004800:	4906      	ldr	r1, [pc, #24]	; (800481c <HAL_I2C_Mem_Read+0x22c>)
 8004802:	68f8      	ldr	r0, [r7, #12]
 8004804:	f000 fa98 	bl	8004d38 <I2C_WaitOnFlagUntilTimeout>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d008      	beq.n	8004820 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e10e      	b.n	8004a30 <HAL_I2C_Mem_Read+0x440>
 8004812:	bf00      	nop
 8004814:	00100002 	.word	0x00100002
 8004818:	ffff0000 	.word	0xffff0000
 800481c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800482e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	691a      	ldr	r2, [r3, #16]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483a:	b2d2      	uxtb	r2, r2
 800483c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004842:	1c5a      	adds	r2, r3, #1
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800484c:	3b01      	subs	r3, #1
 800484e:	b29a      	uxth	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004858:	b29b      	uxth	r3, r3
 800485a:	3b01      	subs	r3, #1
 800485c:	b29a      	uxth	r2, r3
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	691a      	ldr	r2, [r3, #16]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486c:	b2d2      	uxtb	r2, r2
 800486e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004874:	1c5a      	adds	r2, r3, #1
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800487e:	3b01      	subs	r3, #1
 8004880:	b29a      	uxth	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800488a:	b29b      	uxth	r3, r3
 800488c:	3b01      	subs	r3, #1
 800488e:	b29a      	uxth	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004894:	e0b8      	b.n	8004a08 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004898:	9300      	str	r3, [sp, #0]
 800489a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800489c:	2200      	movs	r2, #0
 800489e:	4966      	ldr	r1, [pc, #408]	; (8004a38 <HAL_I2C_Mem_Read+0x448>)
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f000 fa49 	bl	8004d38 <I2C_WaitOnFlagUntilTimeout>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e0bf      	b.n	8004a30 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	691a      	ldr	r2, [r3, #16]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ca:	b2d2      	uxtb	r2, r2
 80048cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d2:	1c5a      	adds	r2, r3, #1
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048dc:	3b01      	subs	r3, #1
 80048de:	b29a      	uxth	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	3b01      	subs	r3, #1
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f4:	9300      	str	r3, [sp, #0]
 80048f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f8:	2200      	movs	r2, #0
 80048fa:	494f      	ldr	r1, [pc, #316]	; (8004a38 <HAL_I2C_Mem_Read+0x448>)
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f000 fa1b 	bl	8004d38 <I2C_WaitOnFlagUntilTimeout>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d001      	beq.n	800490c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e091      	b.n	8004a30 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800491a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	691a      	ldr	r2, [r3, #16]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004926:	b2d2      	uxtb	r2, r2
 8004928:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492e:	1c5a      	adds	r2, r3, #1
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004938:	3b01      	subs	r3, #1
 800493a:	b29a      	uxth	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004944:	b29b      	uxth	r3, r3
 8004946:	3b01      	subs	r3, #1
 8004948:	b29a      	uxth	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	691a      	ldr	r2, [r3, #16]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004958:	b2d2      	uxtb	r2, r2
 800495a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004960:	1c5a      	adds	r2, r3, #1
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800496a:	3b01      	subs	r3, #1
 800496c:	b29a      	uxth	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004976:	b29b      	uxth	r3, r3
 8004978:	3b01      	subs	r3, #1
 800497a:	b29a      	uxth	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004980:	e042      	b.n	8004a08 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004984:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f000 fb2e 	bl	8004fe8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e04c      	b.n	8004a30 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	691a      	ldr	r2, [r3, #16]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a0:	b2d2      	uxtb	r2, r2
 80049a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a8:	1c5a      	adds	r2, r3, #1
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049b2:	3b01      	subs	r3, #1
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049be:	b29b      	uxth	r3, r3
 80049c0:	3b01      	subs	r3, #1
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	f003 0304 	and.w	r3, r3, #4
 80049d2:	2b04      	cmp	r3, #4
 80049d4:	d118      	bne.n	8004a08 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	691a      	ldr	r2, [r3, #16]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	b2d2      	uxtb	r2, r2
 80049e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e8:	1c5a      	adds	r2, r3, #1
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f2:	3b01      	subs	r3, #1
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	3b01      	subs	r3, #1
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f47f aec2 	bne.w	8004796 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2220      	movs	r2, #32
 8004a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	e000      	b.n	8004a30 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004a2e:	2302      	movs	r3, #2
  }
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3728      	adds	r7, #40	; 0x28
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	00010004 	.word	0x00010004

08004a3c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b088      	sub	sp, #32
 8004a40:	af02      	add	r7, sp, #8
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	4608      	mov	r0, r1
 8004a46:	4611      	mov	r1, r2
 8004a48:	461a      	mov	r2, r3
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	817b      	strh	r3, [r7, #10]
 8004a4e:	460b      	mov	r3, r1
 8004a50:	813b      	strh	r3, [r7, #8]
 8004a52:	4613      	mov	r3, r2
 8004a54:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a64:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a68:	9300      	str	r3, [sp, #0]
 8004a6a:	6a3b      	ldr	r3, [r7, #32]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	f000 f960 	bl	8004d38 <I2C_WaitOnFlagUntilTimeout>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00d      	beq.n	8004a9a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a8c:	d103      	bne.n	8004a96 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a94:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e05f      	b.n	8004b5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a9a:	897b      	ldrh	r3, [r7, #10]
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004aa8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	6a3a      	ldr	r2, [r7, #32]
 8004aae:	492d      	ldr	r1, [pc, #180]	; (8004b64 <I2C_RequestMemoryWrite+0x128>)
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f000 f998 	bl	8004de6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d001      	beq.n	8004ac0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e04c      	b.n	8004b5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	617b      	str	r3, [r7, #20]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	617b      	str	r3, [r7, #20]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	617b      	str	r3, [r7, #20]
 8004ad4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ad8:	6a39      	ldr	r1, [r7, #32]
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f000 fa02 	bl	8004ee4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00d      	beq.n	8004b02 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aea:	2b04      	cmp	r3, #4
 8004aec:	d107      	bne.n	8004afe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004afc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e02b      	b.n	8004b5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b02:	88fb      	ldrh	r3, [r7, #6]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d105      	bne.n	8004b14 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b08:	893b      	ldrh	r3, [r7, #8]
 8004b0a:	b2da      	uxtb	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	611a      	str	r2, [r3, #16]
 8004b12:	e021      	b.n	8004b58 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b14:	893b      	ldrh	r3, [r7, #8]
 8004b16:	0a1b      	lsrs	r3, r3, #8
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	b2da      	uxtb	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b24:	6a39      	ldr	r1, [r7, #32]
 8004b26:	68f8      	ldr	r0, [r7, #12]
 8004b28:	f000 f9dc 	bl	8004ee4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00d      	beq.n	8004b4e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b36:	2b04      	cmp	r3, #4
 8004b38:	d107      	bne.n	8004b4a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b48:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e005      	b.n	8004b5a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b4e:	893b      	ldrh	r3, [r7, #8]
 8004b50:	b2da      	uxtb	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3718      	adds	r7, #24
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	00010002 	.word	0x00010002

08004b68 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b088      	sub	sp, #32
 8004b6c:	af02      	add	r7, sp, #8
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	4608      	mov	r0, r1
 8004b72:	4611      	mov	r1, r2
 8004b74:	461a      	mov	r2, r3
 8004b76:	4603      	mov	r3, r0
 8004b78:	817b      	strh	r3, [r7, #10]
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	813b      	strh	r3, [r7, #8]
 8004b7e:	4613      	mov	r3, r2
 8004b80:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b90:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ba0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	6a3b      	ldr	r3, [r7, #32]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004bae:	68f8      	ldr	r0, [r7, #12]
 8004bb0:	f000 f8c2 	bl	8004d38 <I2C_WaitOnFlagUntilTimeout>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00d      	beq.n	8004bd6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bc8:	d103      	bne.n	8004bd2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bd0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e0aa      	b.n	8004d2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004bd6:	897b      	ldrh	r3, [r7, #10]
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	461a      	mov	r2, r3
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004be4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be8:	6a3a      	ldr	r2, [r7, #32]
 8004bea:	4952      	ldr	r1, [pc, #328]	; (8004d34 <I2C_RequestMemoryRead+0x1cc>)
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	f000 f8fa 	bl	8004de6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d001      	beq.n	8004bfc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e097      	b.n	8004d2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	617b      	str	r3, [r7, #20]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	617b      	str	r3, [r7, #20]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	617b      	str	r3, [r7, #20]
 8004c10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c14:	6a39      	ldr	r1, [r7, #32]
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f000 f964 	bl	8004ee4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00d      	beq.n	8004c3e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c26:	2b04      	cmp	r3, #4
 8004c28:	d107      	bne.n	8004c3a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e076      	b.n	8004d2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c3e:	88fb      	ldrh	r3, [r7, #6]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d105      	bne.n	8004c50 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c44:	893b      	ldrh	r3, [r7, #8]
 8004c46:	b2da      	uxtb	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	611a      	str	r2, [r3, #16]
 8004c4e:	e021      	b.n	8004c94 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c50:	893b      	ldrh	r3, [r7, #8]
 8004c52:	0a1b      	lsrs	r3, r3, #8
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	b2da      	uxtb	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c60:	6a39      	ldr	r1, [r7, #32]
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	f000 f93e 	bl	8004ee4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00d      	beq.n	8004c8a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c72:	2b04      	cmp	r3, #4
 8004c74:	d107      	bne.n	8004c86 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e050      	b.n	8004d2c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c8a:	893b      	ldrh	r3, [r7, #8]
 8004c8c:	b2da      	uxtb	r2, r3
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c96:	6a39      	ldr	r1, [r7, #32]
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	f000 f923 	bl	8004ee4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00d      	beq.n	8004cc0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca8:	2b04      	cmp	r3, #4
 8004caa:	d107      	bne.n	8004cbc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e035      	b.n	8004d2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cce:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd2:	9300      	str	r3, [sp, #0]
 8004cd4:	6a3b      	ldr	r3, [r7, #32]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f000 f82b 	bl	8004d38 <I2C_WaitOnFlagUntilTimeout>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00d      	beq.n	8004d04 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cf6:	d103      	bne.n	8004d00 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cfe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e013      	b.n	8004d2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004d04:	897b      	ldrh	r3, [r7, #10]
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	f043 0301 	orr.w	r3, r3, #1
 8004d0c:	b2da      	uxtb	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d16:	6a3a      	ldr	r2, [r7, #32]
 8004d18:	4906      	ldr	r1, [pc, #24]	; (8004d34 <I2C_RequestMemoryRead+0x1cc>)
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f000 f863 	bl	8004de6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d001      	beq.n	8004d2a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e000      	b.n	8004d2c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3718      	adds	r7, #24
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	00010002 	.word	0x00010002

08004d38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	603b      	str	r3, [r7, #0]
 8004d44:	4613      	mov	r3, r2
 8004d46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d48:	e025      	b.n	8004d96 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d50:	d021      	beq.n	8004d96 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d52:	f7fe fe85 	bl	8003a60 <HAL_GetTick>
 8004d56:	4602      	mov	r2, r0
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	683a      	ldr	r2, [r7, #0]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d302      	bcc.n	8004d68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d116      	bne.n	8004d96 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2220      	movs	r2, #32
 8004d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d82:	f043 0220 	orr.w	r2, r3, #32
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e023      	b.n	8004dde <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	0c1b      	lsrs	r3, r3, #16
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d10d      	bne.n	8004dbc <I2C_WaitOnFlagUntilTimeout+0x84>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	43da      	mvns	r2, r3
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	4013      	ands	r3, r2
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	bf0c      	ite	eq
 8004db2:	2301      	moveq	r3, #1
 8004db4:	2300      	movne	r3, #0
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	461a      	mov	r2, r3
 8004dba:	e00c      	b.n	8004dd6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	43da      	mvns	r2, r3
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	bf0c      	ite	eq
 8004dce:	2301      	moveq	r3, #1
 8004dd0:	2300      	movne	r3, #0
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	79fb      	ldrb	r3, [r7, #7]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d0b6      	beq.n	8004d4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b084      	sub	sp, #16
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	60f8      	str	r0, [r7, #12]
 8004dee:	60b9      	str	r1, [r7, #8]
 8004df0:	607a      	str	r2, [r7, #4]
 8004df2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004df4:	e051      	b.n	8004e9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e04:	d123      	bne.n	8004e4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e14:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e1e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2220      	movs	r2, #32
 8004e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3a:	f043 0204 	orr.w	r2, r3, #4
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e046      	b.n	8004edc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e54:	d021      	beq.n	8004e9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e56:	f7fe fe03 	bl	8003a60 <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d302      	bcc.n	8004e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d116      	bne.n	8004e9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2220      	movs	r2, #32
 8004e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e86:	f043 0220 	orr.w	r2, r3, #32
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e020      	b.n	8004edc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	0c1b      	lsrs	r3, r3, #16
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d10c      	bne.n	8004ebe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	43da      	mvns	r2, r3
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	4013      	ands	r3, r2
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	bf14      	ite	ne
 8004eb6:	2301      	movne	r3, #1
 8004eb8:	2300      	moveq	r3, #0
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	e00b      	b.n	8004ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	699b      	ldr	r3, [r3, #24]
 8004ec4:	43da      	mvns	r2, r3
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	4013      	ands	r3, r2
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	bf14      	ite	ne
 8004ed0:	2301      	movne	r3, #1
 8004ed2:	2300      	moveq	r3, #0
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d18d      	bne.n	8004df6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3710      	adds	r7, #16
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ef0:	e02d      	b.n	8004f4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f000 f8ce 	bl	8005094 <I2C_IsAcknowledgeFailed>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d001      	beq.n	8004f02 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e02d      	b.n	8004f5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f08:	d021      	beq.n	8004f4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f0a:	f7fe fda9 	bl	8003a60 <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	68ba      	ldr	r2, [r7, #8]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d302      	bcc.n	8004f20 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d116      	bne.n	8004f4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2220      	movs	r2, #32
 8004f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3a:	f043 0220 	orr.w	r2, r3, #32
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e007      	b.n	8004f5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	695b      	ldr	r3, [r3, #20]
 8004f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f58:	2b80      	cmp	r3, #128	; 0x80
 8004f5a:	d1ca      	bne.n	8004ef2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b084      	sub	sp, #16
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	60f8      	str	r0, [r7, #12]
 8004f6e:	60b9      	str	r1, [r7, #8]
 8004f70:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f72:	e02d      	b.n	8004fd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	f000 f88d 	bl	8005094 <I2C_IsAcknowledgeFailed>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d001      	beq.n	8004f84 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e02d      	b.n	8004fe0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f8a:	d021      	beq.n	8004fd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f8c:	f7fe fd68 	bl	8003a60 <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	68ba      	ldr	r2, [r7, #8]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d302      	bcc.n	8004fa2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d116      	bne.n	8004fd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2220      	movs	r2, #32
 8004fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbc:	f043 0220 	orr.w	r2, r3, #32
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e007      	b.n	8004fe0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	f003 0304 	and.w	r3, r3, #4
 8004fda:	2b04      	cmp	r3, #4
 8004fdc:	d1ca      	bne.n	8004f74 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3710      	adds	r7, #16
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ff4:	e042      	b.n	800507c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	695b      	ldr	r3, [r3, #20]
 8004ffc:	f003 0310 	and.w	r3, r3, #16
 8005000:	2b10      	cmp	r3, #16
 8005002:	d119      	bne.n	8005038 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f06f 0210 	mvn.w	r2, #16
 800500c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2220      	movs	r2, #32
 8005018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e029      	b.n	800508c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005038:	f7fe fd12 	bl	8003a60 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	68ba      	ldr	r2, [r7, #8]
 8005044:	429a      	cmp	r2, r3
 8005046:	d302      	bcc.n	800504e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d116      	bne.n	800507c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2220      	movs	r2, #32
 8005058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005068:	f043 0220 	orr.w	r2, r3, #32
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e007      	b.n	800508c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005086:	2b40      	cmp	r3, #64	; 0x40
 8005088:	d1b5      	bne.n	8004ff6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	3710      	adds	r7, #16
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050aa:	d11b      	bne.n	80050e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80050b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2220      	movs	r2, #32
 80050c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d0:	f043 0204 	orr.w	r2, r3, #4
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e000      	b.n	80050e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	370c      	adds	r7, #12
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
	...

080050f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b086      	sub	sp, #24
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e267      	b.n	80055d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	2b00      	cmp	r3, #0
 8005110:	d075      	beq.n	80051fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005112:	4b88      	ldr	r3, [pc, #544]	; (8005334 <HAL_RCC_OscConfig+0x240>)
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f003 030c 	and.w	r3, r3, #12
 800511a:	2b04      	cmp	r3, #4
 800511c:	d00c      	beq.n	8005138 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800511e:	4b85      	ldr	r3, [pc, #532]	; (8005334 <HAL_RCC_OscConfig+0x240>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005126:	2b08      	cmp	r3, #8
 8005128:	d112      	bne.n	8005150 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800512a:	4b82      	ldr	r3, [pc, #520]	; (8005334 <HAL_RCC_OscConfig+0x240>)
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005132:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005136:	d10b      	bne.n	8005150 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005138:	4b7e      	ldr	r3, [pc, #504]	; (8005334 <HAL_RCC_OscConfig+0x240>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d05b      	beq.n	80051fc <HAL_RCC_OscConfig+0x108>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d157      	bne.n	80051fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e242      	b.n	80055d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005158:	d106      	bne.n	8005168 <HAL_RCC_OscConfig+0x74>
 800515a:	4b76      	ldr	r3, [pc, #472]	; (8005334 <HAL_RCC_OscConfig+0x240>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a75      	ldr	r2, [pc, #468]	; (8005334 <HAL_RCC_OscConfig+0x240>)
 8005160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005164:	6013      	str	r3, [r2, #0]
 8005166:	e01d      	b.n	80051a4 <HAL_RCC_OscConfig+0xb0>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005170:	d10c      	bne.n	800518c <HAL_RCC_OscConfig+0x98>
 8005172:	4b70      	ldr	r3, [pc, #448]	; (8005334 <HAL_RCC_OscConfig+0x240>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a6f      	ldr	r2, [pc, #444]	; (8005334 <HAL_RCC_OscConfig+0x240>)
 8005178:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800517c:	6013      	str	r3, [r2, #0]
 800517e:	4b6d      	ldr	r3, [pc, #436]	; (8005334 <HAL_RCC_OscConfig+0x240>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a6c      	ldr	r2, [pc, #432]	; (8005334 <HAL_RCC_OscConfig+0x240>)
 8005184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005188:	6013      	str	r3, [r2, #0]
 800518a:	e00b      	b.n	80051a4 <HAL_RCC_OscConfig+0xb0>
 800518c:	4b69      	ldr	r3, [pc, #420]	; (8005334 <HAL_RCC_OscConfig+0x240>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a68      	ldr	r2, [pc, #416]	; (8005334 <HAL_RCC_OscConfig+0x240>)
 8005192:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005196:	6013      	str	r3, [r2, #0]
 8005198:	4b66      	ldr	r3, [pc, #408]	; (8005334 <HAL_RCC_OscConfig+0x240>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a65      	ldr	r2, [pc, #404]	; (8005334 <HAL_RCC_OscConfig+0x240>)
 800519e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d013      	beq.n	80051d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ac:	f7fe fc58 	bl	8003a60 <HAL_GetTick>
 80051b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051b2:	e008      	b.n	80051c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051b4:	f7fe fc54 	bl	8003a60 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b64      	cmp	r3, #100	; 0x64
 80051c0:	d901      	bls.n	80051c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e207      	b.n	80055d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051c6:	4b5b      	ldr	r3, [pc, #364]	; (8005334 <HAL_RCC_OscConfig+0x240>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d0f0      	beq.n	80051b4 <HAL_RCC_OscConfig+0xc0>
 80051d2:	e014      	b.n	80051fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051d4:	f7fe fc44 	bl	8003a60 <HAL_GetTick>
 80051d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051da:	e008      	b.n	80051ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051dc:	f7fe fc40 	bl	8003a60 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	2b64      	cmp	r3, #100	; 0x64
 80051e8:	d901      	bls.n	80051ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e1f3      	b.n	80055d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051ee:	4b51      	ldr	r3, [pc, #324]	; (8005334 <HAL_RCC_OscConfig+0x240>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1f0      	bne.n	80051dc <HAL_RCC_OscConfig+0xe8>
 80051fa:	e000      	b.n	80051fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	2b00      	cmp	r3, #0
 8005208:	d063      	beq.n	80052d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800520a:	4b4a      	ldr	r3, [pc, #296]	; (8005334 <HAL_RCC_OscConfig+0x240>)
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f003 030c 	and.w	r3, r3, #12
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00b      	beq.n	800522e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005216:	4b47      	ldr	r3, [pc, #284]	; (8005334 <HAL_RCC_OscConfig+0x240>)
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800521e:	2b08      	cmp	r3, #8
 8005220:	d11c      	bne.n	800525c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005222:	4b44      	ldr	r3, [pc, #272]	; (8005334 <HAL_RCC_OscConfig+0x240>)
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d116      	bne.n	800525c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800522e:	4b41      	ldr	r3, [pc, #260]	; (8005334 <HAL_RCC_OscConfig+0x240>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0302 	and.w	r3, r3, #2
 8005236:	2b00      	cmp	r3, #0
 8005238:	d005      	beq.n	8005246 <HAL_RCC_OscConfig+0x152>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	2b01      	cmp	r3, #1
 8005240:	d001      	beq.n	8005246 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e1c7      	b.n	80055d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005246:	4b3b      	ldr	r3, [pc, #236]	; (8005334 <HAL_RCC_OscConfig+0x240>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	00db      	lsls	r3, r3, #3
 8005254:	4937      	ldr	r1, [pc, #220]	; (8005334 <HAL_RCC_OscConfig+0x240>)
 8005256:	4313      	orrs	r3, r2
 8005258:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800525a:	e03a      	b.n	80052d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d020      	beq.n	80052a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005264:	4b34      	ldr	r3, [pc, #208]	; (8005338 <HAL_RCC_OscConfig+0x244>)
 8005266:	2201      	movs	r2, #1
 8005268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800526a:	f7fe fbf9 	bl	8003a60 <HAL_GetTick>
 800526e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005270:	e008      	b.n	8005284 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005272:	f7fe fbf5 	bl	8003a60 <HAL_GetTick>
 8005276:	4602      	mov	r2, r0
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	2b02      	cmp	r3, #2
 800527e:	d901      	bls.n	8005284 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e1a8      	b.n	80055d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005284:	4b2b      	ldr	r3, [pc, #172]	; (8005334 <HAL_RCC_OscConfig+0x240>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0302 	and.w	r3, r3, #2
 800528c:	2b00      	cmp	r3, #0
 800528e:	d0f0      	beq.n	8005272 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005290:	4b28      	ldr	r3, [pc, #160]	; (8005334 <HAL_RCC_OscConfig+0x240>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	00db      	lsls	r3, r3, #3
 800529e:	4925      	ldr	r1, [pc, #148]	; (8005334 <HAL_RCC_OscConfig+0x240>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	600b      	str	r3, [r1, #0]
 80052a4:	e015      	b.n	80052d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052a6:	4b24      	ldr	r3, [pc, #144]	; (8005338 <HAL_RCC_OscConfig+0x244>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ac:	f7fe fbd8 	bl	8003a60 <HAL_GetTick>
 80052b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052b2:	e008      	b.n	80052c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052b4:	f7fe fbd4 	bl	8003a60 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d901      	bls.n	80052c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e187      	b.n	80055d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052c6:	4b1b      	ldr	r3, [pc, #108]	; (8005334 <HAL_RCC_OscConfig+0x240>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0302 	and.w	r3, r3, #2
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1f0      	bne.n	80052b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0308 	and.w	r3, r3, #8
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d036      	beq.n	800534c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d016      	beq.n	8005314 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052e6:	4b15      	ldr	r3, [pc, #84]	; (800533c <HAL_RCC_OscConfig+0x248>)
 80052e8:	2201      	movs	r2, #1
 80052ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ec:	f7fe fbb8 	bl	8003a60 <HAL_GetTick>
 80052f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052f2:	e008      	b.n	8005306 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052f4:	f7fe fbb4 	bl	8003a60 <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d901      	bls.n	8005306 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e167      	b.n	80055d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005306:	4b0b      	ldr	r3, [pc, #44]	; (8005334 <HAL_RCC_OscConfig+0x240>)
 8005308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	2b00      	cmp	r3, #0
 8005310:	d0f0      	beq.n	80052f4 <HAL_RCC_OscConfig+0x200>
 8005312:	e01b      	b.n	800534c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005314:	4b09      	ldr	r3, [pc, #36]	; (800533c <HAL_RCC_OscConfig+0x248>)
 8005316:	2200      	movs	r2, #0
 8005318:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800531a:	f7fe fba1 	bl	8003a60 <HAL_GetTick>
 800531e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005320:	e00e      	b.n	8005340 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005322:	f7fe fb9d 	bl	8003a60 <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	2b02      	cmp	r3, #2
 800532e:	d907      	bls.n	8005340 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e150      	b.n	80055d6 <HAL_RCC_OscConfig+0x4e2>
 8005334:	40023800 	.word	0x40023800
 8005338:	42470000 	.word	0x42470000
 800533c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005340:	4b88      	ldr	r3, [pc, #544]	; (8005564 <HAL_RCC_OscConfig+0x470>)
 8005342:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005344:	f003 0302 	and.w	r3, r3, #2
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1ea      	bne.n	8005322 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0304 	and.w	r3, r3, #4
 8005354:	2b00      	cmp	r3, #0
 8005356:	f000 8097 	beq.w	8005488 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800535a:	2300      	movs	r3, #0
 800535c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800535e:	4b81      	ldr	r3, [pc, #516]	; (8005564 <HAL_RCC_OscConfig+0x470>)
 8005360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10f      	bne.n	800538a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800536a:	2300      	movs	r3, #0
 800536c:	60bb      	str	r3, [r7, #8]
 800536e:	4b7d      	ldr	r3, [pc, #500]	; (8005564 <HAL_RCC_OscConfig+0x470>)
 8005370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005372:	4a7c      	ldr	r2, [pc, #496]	; (8005564 <HAL_RCC_OscConfig+0x470>)
 8005374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005378:	6413      	str	r3, [r2, #64]	; 0x40
 800537a:	4b7a      	ldr	r3, [pc, #488]	; (8005564 <HAL_RCC_OscConfig+0x470>)
 800537c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005382:	60bb      	str	r3, [r7, #8]
 8005384:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005386:	2301      	movs	r3, #1
 8005388:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800538a:	4b77      	ldr	r3, [pc, #476]	; (8005568 <HAL_RCC_OscConfig+0x474>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005392:	2b00      	cmp	r3, #0
 8005394:	d118      	bne.n	80053c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005396:	4b74      	ldr	r3, [pc, #464]	; (8005568 <HAL_RCC_OscConfig+0x474>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a73      	ldr	r2, [pc, #460]	; (8005568 <HAL_RCC_OscConfig+0x474>)
 800539c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053a2:	f7fe fb5d 	bl	8003a60 <HAL_GetTick>
 80053a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053a8:	e008      	b.n	80053bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053aa:	f7fe fb59 	bl	8003a60 <HAL_GetTick>
 80053ae:	4602      	mov	r2, r0
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d901      	bls.n	80053bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e10c      	b.n	80055d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053bc:	4b6a      	ldr	r3, [pc, #424]	; (8005568 <HAL_RCC_OscConfig+0x474>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d0f0      	beq.n	80053aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d106      	bne.n	80053de <HAL_RCC_OscConfig+0x2ea>
 80053d0:	4b64      	ldr	r3, [pc, #400]	; (8005564 <HAL_RCC_OscConfig+0x470>)
 80053d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d4:	4a63      	ldr	r2, [pc, #396]	; (8005564 <HAL_RCC_OscConfig+0x470>)
 80053d6:	f043 0301 	orr.w	r3, r3, #1
 80053da:	6713      	str	r3, [r2, #112]	; 0x70
 80053dc:	e01c      	b.n	8005418 <HAL_RCC_OscConfig+0x324>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	2b05      	cmp	r3, #5
 80053e4:	d10c      	bne.n	8005400 <HAL_RCC_OscConfig+0x30c>
 80053e6:	4b5f      	ldr	r3, [pc, #380]	; (8005564 <HAL_RCC_OscConfig+0x470>)
 80053e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ea:	4a5e      	ldr	r2, [pc, #376]	; (8005564 <HAL_RCC_OscConfig+0x470>)
 80053ec:	f043 0304 	orr.w	r3, r3, #4
 80053f0:	6713      	str	r3, [r2, #112]	; 0x70
 80053f2:	4b5c      	ldr	r3, [pc, #368]	; (8005564 <HAL_RCC_OscConfig+0x470>)
 80053f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053f6:	4a5b      	ldr	r2, [pc, #364]	; (8005564 <HAL_RCC_OscConfig+0x470>)
 80053f8:	f043 0301 	orr.w	r3, r3, #1
 80053fc:	6713      	str	r3, [r2, #112]	; 0x70
 80053fe:	e00b      	b.n	8005418 <HAL_RCC_OscConfig+0x324>
 8005400:	4b58      	ldr	r3, [pc, #352]	; (8005564 <HAL_RCC_OscConfig+0x470>)
 8005402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005404:	4a57      	ldr	r2, [pc, #348]	; (8005564 <HAL_RCC_OscConfig+0x470>)
 8005406:	f023 0301 	bic.w	r3, r3, #1
 800540a:	6713      	str	r3, [r2, #112]	; 0x70
 800540c:	4b55      	ldr	r3, [pc, #340]	; (8005564 <HAL_RCC_OscConfig+0x470>)
 800540e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005410:	4a54      	ldr	r2, [pc, #336]	; (8005564 <HAL_RCC_OscConfig+0x470>)
 8005412:	f023 0304 	bic.w	r3, r3, #4
 8005416:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d015      	beq.n	800544c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005420:	f7fe fb1e 	bl	8003a60 <HAL_GetTick>
 8005424:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005426:	e00a      	b.n	800543e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005428:	f7fe fb1a 	bl	8003a60 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	f241 3288 	movw	r2, #5000	; 0x1388
 8005436:	4293      	cmp	r3, r2
 8005438:	d901      	bls.n	800543e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e0cb      	b.n	80055d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800543e:	4b49      	ldr	r3, [pc, #292]	; (8005564 <HAL_RCC_OscConfig+0x470>)
 8005440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b00      	cmp	r3, #0
 8005448:	d0ee      	beq.n	8005428 <HAL_RCC_OscConfig+0x334>
 800544a:	e014      	b.n	8005476 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800544c:	f7fe fb08 	bl	8003a60 <HAL_GetTick>
 8005450:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005452:	e00a      	b.n	800546a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005454:	f7fe fb04 	bl	8003a60 <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005462:	4293      	cmp	r3, r2
 8005464:	d901      	bls.n	800546a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e0b5      	b.n	80055d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800546a:	4b3e      	ldr	r3, [pc, #248]	; (8005564 <HAL_RCC_OscConfig+0x470>)
 800546c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800546e:	f003 0302 	and.w	r3, r3, #2
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1ee      	bne.n	8005454 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005476:	7dfb      	ldrb	r3, [r7, #23]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d105      	bne.n	8005488 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800547c:	4b39      	ldr	r3, [pc, #228]	; (8005564 <HAL_RCC_OscConfig+0x470>)
 800547e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005480:	4a38      	ldr	r2, [pc, #224]	; (8005564 <HAL_RCC_OscConfig+0x470>)
 8005482:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005486:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	699b      	ldr	r3, [r3, #24]
 800548c:	2b00      	cmp	r3, #0
 800548e:	f000 80a1 	beq.w	80055d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005492:	4b34      	ldr	r3, [pc, #208]	; (8005564 <HAL_RCC_OscConfig+0x470>)
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f003 030c 	and.w	r3, r3, #12
 800549a:	2b08      	cmp	r3, #8
 800549c:	d05c      	beq.n	8005558 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d141      	bne.n	800552a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054a6:	4b31      	ldr	r3, [pc, #196]	; (800556c <HAL_RCC_OscConfig+0x478>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ac:	f7fe fad8 	bl	8003a60 <HAL_GetTick>
 80054b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054b2:	e008      	b.n	80054c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054b4:	f7fe fad4 	bl	8003a60 <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d901      	bls.n	80054c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e087      	b.n	80055d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054c6:	4b27      	ldr	r3, [pc, #156]	; (8005564 <HAL_RCC_OscConfig+0x470>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1f0      	bne.n	80054b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	69da      	ldr	r2, [r3, #28]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	431a      	orrs	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e0:	019b      	lsls	r3, r3, #6
 80054e2:	431a      	orrs	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e8:	085b      	lsrs	r3, r3, #1
 80054ea:	3b01      	subs	r3, #1
 80054ec:	041b      	lsls	r3, r3, #16
 80054ee:	431a      	orrs	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f4:	061b      	lsls	r3, r3, #24
 80054f6:	491b      	ldr	r1, [pc, #108]	; (8005564 <HAL_RCC_OscConfig+0x470>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054fc:	4b1b      	ldr	r3, [pc, #108]	; (800556c <HAL_RCC_OscConfig+0x478>)
 80054fe:	2201      	movs	r2, #1
 8005500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005502:	f7fe faad 	bl	8003a60 <HAL_GetTick>
 8005506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005508:	e008      	b.n	800551c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800550a:	f7fe faa9 	bl	8003a60 <HAL_GetTick>
 800550e:	4602      	mov	r2, r0
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	2b02      	cmp	r3, #2
 8005516:	d901      	bls.n	800551c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e05c      	b.n	80055d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800551c:	4b11      	ldr	r3, [pc, #68]	; (8005564 <HAL_RCC_OscConfig+0x470>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d0f0      	beq.n	800550a <HAL_RCC_OscConfig+0x416>
 8005528:	e054      	b.n	80055d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800552a:	4b10      	ldr	r3, [pc, #64]	; (800556c <HAL_RCC_OscConfig+0x478>)
 800552c:	2200      	movs	r2, #0
 800552e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005530:	f7fe fa96 	bl	8003a60 <HAL_GetTick>
 8005534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005536:	e008      	b.n	800554a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005538:	f7fe fa92 	bl	8003a60 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	2b02      	cmp	r3, #2
 8005544:	d901      	bls.n	800554a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e045      	b.n	80055d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800554a:	4b06      	ldr	r3, [pc, #24]	; (8005564 <HAL_RCC_OscConfig+0x470>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1f0      	bne.n	8005538 <HAL_RCC_OscConfig+0x444>
 8005556:	e03d      	b.n	80055d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	2b01      	cmp	r3, #1
 800555e:	d107      	bne.n	8005570 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e038      	b.n	80055d6 <HAL_RCC_OscConfig+0x4e2>
 8005564:	40023800 	.word	0x40023800
 8005568:	40007000 	.word	0x40007000
 800556c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005570:	4b1b      	ldr	r3, [pc, #108]	; (80055e0 <HAL_RCC_OscConfig+0x4ec>)
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	2b01      	cmp	r3, #1
 800557c:	d028      	beq.n	80055d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005588:	429a      	cmp	r2, r3
 800558a:	d121      	bne.n	80055d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005596:	429a      	cmp	r2, r3
 8005598:	d11a      	bne.n	80055d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800559a:	68fa      	ldr	r2, [r7, #12]
 800559c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80055a0:	4013      	ands	r3, r2
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80055a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d111      	bne.n	80055d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b6:	085b      	lsrs	r3, r3, #1
 80055b8:	3b01      	subs	r3, #1
 80055ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055bc:	429a      	cmp	r2, r3
 80055be:	d107      	bne.n	80055d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d001      	beq.n	80055d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e000      	b.n	80055d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3718      	adds	r7, #24
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	40023800 	.word	0x40023800

080055e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d101      	bne.n	80055f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e0cc      	b.n	8005792 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055f8:	4b68      	ldr	r3, [pc, #416]	; (800579c <HAL_RCC_ClockConfig+0x1b8>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0307 	and.w	r3, r3, #7
 8005600:	683a      	ldr	r2, [r7, #0]
 8005602:	429a      	cmp	r2, r3
 8005604:	d90c      	bls.n	8005620 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005606:	4b65      	ldr	r3, [pc, #404]	; (800579c <HAL_RCC_ClockConfig+0x1b8>)
 8005608:	683a      	ldr	r2, [r7, #0]
 800560a:	b2d2      	uxtb	r2, r2
 800560c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800560e:	4b63      	ldr	r3, [pc, #396]	; (800579c <HAL_RCC_ClockConfig+0x1b8>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0307 	and.w	r3, r3, #7
 8005616:	683a      	ldr	r2, [r7, #0]
 8005618:	429a      	cmp	r2, r3
 800561a:	d001      	beq.n	8005620 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e0b8      	b.n	8005792 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0302 	and.w	r3, r3, #2
 8005628:	2b00      	cmp	r3, #0
 800562a:	d020      	beq.n	800566e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0304 	and.w	r3, r3, #4
 8005634:	2b00      	cmp	r3, #0
 8005636:	d005      	beq.n	8005644 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005638:	4b59      	ldr	r3, [pc, #356]	; (80057a0 <HAL_RCC_ClockConfig+0x1bc>)
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	4a58      	ldr	r2, [pc, #352]	; (80057a0 <HAL_RCC_ClockConfig+0x1bc>)
 800563e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005642:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0308 	and.w	r3, r3, #8
 800564c:	2b00      	cmp	r3, #0
 800564e:	d005      	beq.n	800565c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005650:	4b53      	ldr	r3, [pc, #332]	; (80057a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	4a52      	ldr	r2, [pc, #328]	; (80057a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005656:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800565a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800565c:	4b50      	ldr	r3, [pc, #320]	; (80057a0 <HAL_RCC_ClockConfig+0x1bc>)
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	494d      	ldr	r1, [pc, #308]	; (80057a0 <HAL_RCC_ClockConfig+0x1bc>)
 800566a:	4313      	orrs	r3, r2
 800566c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	2b00      	cmp	r3, #0
 8005678:	d044      	beq.n	8005704 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	2b01      	cmp	r3, #1
 8005680:	d107      	bne.n	8005692 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005682:	4b47      	ldr	r3, [pc, #284]	; (80057a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d119      	bne.n	80056c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e07f      	b.n	8005792 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	2b02      	cmp	r3, #2
 8005698:	d003      	beq.n	80056a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800569e:	2b03      	cmp	r3, #3
 80056a0:	d107      	bne.n	80056b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056a2:	4b3f      	ldr	r3, [pc, #252]	; (80057a0 <HAL_RCC_ClockConfig+0x1bc>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d109      	bne.n	80056c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e06f      	b.n	8005792 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056b2:	4b3b      	ldr	r3, [pc, #236]	; (80057a0 <HAL_RCC_ClockConfig+0x1bc>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0302 	and.w	r3, r3, #2
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d101      	bne.n	80056c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e067      	b.n	8005792 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056c2:	4b37      	ldr	r3, [pc, #220]	; (80057a0 <HAL_RCC_ClockConfig+0x1bc>)
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	f023 0203 	bic.w	r2, r3, #3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	4934      	ldr	r1, [pc, #208]	; (80057a0 <HAL_RCC_ClockConfig+0x1bc>)
 80056d0:	4313      	orrs	r3, r2
 80056d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056d4:	f7fe f9c4 	bl	8003a60 <HAL_GetTick>
 80056d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056da:	e00a      	b.n	80056f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056dc:	f7fe f9c0 	bl	8003a60 <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d901      	bls.n	80056f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e04f      	b.n	8005792 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056f2:	4b2b      	ldr	r3, [pc, #172]	; (80057a0 <HAL_RCC_ClockConfig+0x1bc>)
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f003 020c 	and.w	r2, r3, #12
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	429a      	cmp	r2, r3
 8005702:	d1eb      	bne.n	80056dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005704:	4b25      	ldr	r3, [pc, #148]	; (800579c <HAL_RCC_ClockConfig+0x1b8>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0307 	and.w	r3, r3, #7
 800570c:	683a      	ldr	r2, [r7, #0]
 800570e:	429a      	cmp	r2, r3
 8005710:	d20c      	bcs.n	800572c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005712:	4b22      	ldr	r3, [pc, #136]	; (800579c <HAL_RCC_ClockConfig+0x1b8>)
 8005714:	683a      	ldr	r2, [r7, #0]
 8005716:	b2d2      	uxtb	r2, r2
 8005718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800571a:	4b20      	ldr	r3, [pc, #128]	; (800579c <HAL_RCC_ClockConfig+0x1b8>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0307 	and.w	r3, r3, #7
 8005722:	683a      	ldr	r2, [r7, #0]
 8005724:	429a      	cmp	r2, r3
 8005726:	d001      	beq.n	800572c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e032      	b.n	8005792 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0304 	and.w	r3, r3, #4
 8005734:	2b00      	cmp	r3, #0
 8005736:	d008      	beq.n	800574a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005738:	4b19      	ldr	r3, [pc, #100]	; (80057a0 <HAL_RCC_ClockConfig+0x1bc>)
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	4916      	ldr	r1, [pc, #88]	; (80057a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005746:	4313      	orrs	r3, r2
 8005748:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0308 	and.w	r3, r3, #8
 8005752:	2b00      	cmp	r3, #0
 8005754:	d009      	beq.n	800576a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005756:	4b12      	ldr	r3, [pc, #72]	; (80057a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	00db      	lsls	r3, r3, #3
 8005764:	490e      	ldr	r1, [pc, #56]	; (80057a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005766:	4313      	orrs	r3, r2
 8005768:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800576a:	f000 f821 	bl	80057b0 <HAL_RCC_GetSysClockFreq>
 800576e:	4602      	mov	r2, r0
 8005770:	4b0b      	ldr	r3, [pc, #44]	; (80057a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	091b      	lsrs	r3, r3, #4
 8005776:	f003 030f 	and.w	r3, r3, #15
 800577a:	490a      	ldr	r1, [pc, #40]	; (80057a4 <HAL_RCC_ClockConfig+0x1c0>)
 800577c:	5ccb      	ldrb	r3, [r1, r3]
 800577e:	fa22 f303 	lsr.w	r3, r2, r3
 8005782:	4a09      	ldr	r2, [pc, #36]	; (80057a8 <HAL_RCC_ClockConfig+0x1c4>)
 8005784:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005786:	4b09      	ldr	r3, [pc, #36]	; (80057ac <HAL_RCC_ClockConfig+0x1c8>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4618      	mov	r0, r3
 800578c:	f7fe f924 	bl	80039d8 <HAL_InitTick>

  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	40023c00 	.word	0x40023c00
 80057a0:	40023800 	.word	0x40023800
 80057a4:	080099ec 	.word	0x080099ec
 80057a8:	20000010 	.word	0x20000010
 80057ac:	20000014 	.word	0x20000014

080057b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057b4:	b094      	sub	sp, #80	; 0x50
 80057b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80057b8:	2300      	movs	r3, #0
 80057ba:	647b      	str	r3, [r7, #68]	; 0x44
 80057bc:	2300      	movs	r3, #0
 80057be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057c0:	2300      	movs	r3, #0
 80057c2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80057c4:	2300      	movs	r3, #0
 80057c6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057c8:	4b79      	ldr	r3, [pc, #484]	; (80059b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f003 030c 	and.w	r3, r3, #12
 80057d0:	2b08      	cmp	r3, #8
 80057d2:	d00d      	beq.n	80057f0 <HAL_RCC_GetSysClockFreq+0x40>
 80057d4:	2b08      	cmp	r3, #8
 80057d6:	f200 80e1 	bhi.w	800599c <HAL_RCC_GetSysClockFreq+0x1ec>
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d002      	beq.n	80057e4 <HAL_RCC_GetSysClockFreq+0x34>
 80057de:	2b04      	cmp	r3, #4
 80057e0:	d003      	beq.n	80057ea <HAL_RCC_GetSysClockFreq+0x3a>
 80057e2:	e0db      	b.n	800599c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057e4:	4b73      	ldr	r3, [pc, #460]	; (80059b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80057e6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80057e8:	e0db      	b.n	80059a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057ea:	4b73      	ldr	r3, [pc, #460]	; (80059b8 <HAL_RCC_GetSysClockFreq+0x208>)
 80057ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80057ee:	e0d8      	b.n	80059a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057f0:	4b6f      	ldr	r3, [pc, #444]	; (80059b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057f8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80057fa:	4b6d      	ldr	r3, [pc, #436]	; (80059b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d063      	beq.n	80058ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005806:	4b6a      	ldr	r3, [pc, #424]	; (80059b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	099b      	lsrs	r3, r3, #6
 800580c:	2200      	movs	r2, #0
 800580e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005810:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005818:	633b      	str	r3, [r7, #48]	; 0x30
 800581a:	2300      	movs	r3, #0
 800581c:	637b      	str	r3, [r7, #52]	; 0x34
 800581e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005822:	4622      	mov	r2, r4
 8005824:	462b      	mov	r3, r5
 8005826:	f04f 0000 	mov.w	r0, #0
 800582a:	f04f 0100 	mov.w	r1, #0
 800582e:	0159      	lsls	r1, r3, #5
 8005830:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005834:	0150      	lsls	r0, r2, #5
 8005836:	4602      	mov	r2, r0
 8005838:	460b      	mov	r3, r1
 800583a:	4621      	mov	r1, r4
 800583c:	1a51      	subs	r1, r2, r1
 800583e:	6139      	str	r1, [r7, #16]
 8005840:	4629      	mov	r1, r5
 8005842:	eb63 0301 	sbc.w	r3, r3, r1
 8005846:	617b      	str	r3, [r7, #20]
 8005848:	f04f 0200 	mov.w	r2, #0
 800584c:	f04f 0300 	mov.w	r3, #0
 8005850:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005854:	4659      	mov	r1, fp
 8005856:	018b      	lsls	r3, r1, #6
 8005858:	4651      	mov	r1, sl
 800585a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800585e:	4651      	mov	r1, sl
 8005860:	018a      	lsls	r2, r1, #6
 8005862:	4651      	mov	r1, sl
 8005864:	ebb2 0801 	subs.w	r8, r2, r1
 8005868:	4659      	mov	r1, fp
 800586a:	eb63 0901 	sbc.w	r9, r3, r1
 800586e:	f04f 0200 	mov.w	r2, #0
 8005872:	f04f 0300 	mov.w	r3, #0
 8005876:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800587a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800587e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005882:	4690      	mov	r8, r2
 8005884:	4699      	mov	r9, r3
 8005886:	4623      	mov	r3, r4
 8005888:	eb18 0303 	adds.w	r3, r8, r3
 800588c:	60bb      	str	r3, [r7, #8]
 800588e:	462b      	mov	r3, r5
 8005890:	eb49 0303 	adc.w	r3, r9, r3
 8005894:	60fb      	str	r3, [r7, #12]
 8005896:	f04f 0200 	mov.w	r2, #0
 800589a:	f04f 0300 	mov.w	r3, #0
 800589e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80058a2:	4629      	mov	r1, r5
 80058a4:	024b      	lsls	r3, r1, #9
 80058a6:	4621      	mov	r1, r4
 80058a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80058ac:	4621      	mov	r1, r4
 80058ae:	024a      	lsls	r2, r1, #9
 80058b0:	4610      	mov	r0, r2
 80058b2:	4619      	mov	r1, r3
 80058b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058b6:	2200      	movs	r2, #0
 80058b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80058ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80058c0:	f7fb f972 	bl	8000ba8 <__aeabi_uldivmod>
 80058c4:	4602      	mov	r2, r0
 80058c6:	460b      	mov	r3, r1
 80058c8:	4613      	mov	r3, r2
 80058ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058cc:	e058      	b.n	8005980 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058ce:	4b38      	ldr	r3, [pc, #224]	; (80059b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	099b      	lsrs	r3, r3, #6
 80058d4:	2200      	movs	r2, #0
 80058d6:	4618      	mov	r0, r3
 80058d8:	4611      	mov	r1, r2
 80058da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80058de:	623b      	str	r3, [r7, #32]
 80058e0:	2300      	movs	r3, #0
 80058e2:	627b      	str	r3, [r7, #36]	; 0x24
 80058e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80058e8:	4642      	mov	r2, r8
 80058ea:	464b      	mov	r3, r9
 80058ec:	f04f 0000 	mov.w	r0, #0
 80058f0:	f04f 0100 	mov.w	r1, #0
 80058f4:	0159      	lsls	r1, r3, #5
 80058f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058fa:	0150      	lsls	r0, r2, #5
 80058fc:	4602      	mov	r2, r0
 80058fe:	460b      	mov	r3, r1
 8005900:	4641      	mov	r1, r8
 8005902:	ebb2 0a01 	subs.w	sl, r2, r1
 8005906:	4649      	mov	r1, r9
 8005908:	eb63 0b01 	sbc.w	fp, r3, r1
 800590c:	f04f 0200 	mov.w	r2, #0
 8005910:	f04f 0300 	mov.w	r3, #0
 8005914:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005918:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800591c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005920:	ebb2 040a 	subs.w	r4, r2, sl
 8005924:	eb63 050b 	sbc.w	r5, r3, fp
 8005928:	f04f 0200 	mov.w	r2, #0
 800592c:	f04f 0300 	mov.w	r3, #0
 8005930:	00eb      	lsls	r3, r5, #3
 8005932:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005936:	00e2      	lsls	r2, r4, #3
 8005938:	4614      	mov	r4, r2
 800593a:	461d      	mov	r5, r3
 800593c:	4643      	mov	r3, r8
 800593e:	18e3      	adds	r3, r4, r3
 8005940:	603b      	str	r3, [r7, #0]
 8005942:	464b      	mov	r3, r9
 8005944:	eb45 0303 	adc.w	r3, r5, r3
 8005948:	607b      	str	r3, [r7, #4]
 800594a:	f04f 0200 	mov.w	r2, #0
 800594e:	f04f 0300 	mov.w	r3, #0
 8005952:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005956:	4629      	mov	r1, r5
 8005958:	028b      	lsls	r3, r1, #10
 800595a:	4621      	mov	r1, r4
 800595c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005960:	4621      	mov	r1, r4
 8005962:	028a      	lsls	r2, r1, #10
 8005964:	4610      	mov	r0, r2
 8005966:	4619      	mov	r1, r3
 8005968:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800596a:	2200      	movs	r2, #0
 800596c:	61bb      	str	r3, [r7, #24]
 800596e:	61fa      	str	r2, [r7, #28]
 8005970:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005974:	f7fb f918 	bl	8000ba8 <__aeabi_uldivmod>
 8005978:	4602      	mov	r2, r0
 800597a:	460b      	mov	r3, r1
 800597c:	4613      	mov	r3, r2
 800597e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005980:	4b0b      	ldr	r3, [pc, #44]	; (80059b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	0c1b      	lsrs	r3, r3, #16
 8005986:	f003 0303 	and.w	r3, r3, #3
 800598a:	3301      	adds	r3, #1
 800598c:	005b      	lsls	r3, r3, #1
 800598e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005990:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005994:	fbb2 f3f3 	udiv	r3, r2, r3
 8005998:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800599a:	e002      	b.n	80059a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800599c:	4b05      	ldr	r3, [pc, #20]	; (80059b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800599e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80059a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3750      	adds	r7, #80	; 0x50
 80059a8:	46bd      	mov	sp, r7
 80059aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059ae:	bf00      	nop
 80059b0:	40023800 	.word	0x40023800
 80059b4:	00f42400 	.word	0x00f42400
 80059b8:	007a1200 	.word	0x007a1200

080059bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059bc:	b480      	push	{r7}
 80059be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059c0:	4b03      	ldr	r3, [pc, #12]	; (80059d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80059c2:	681b      	ldr	r3, [r3, #0]
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	20000010 	.word	0x20000010

080059d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80059d8:	f7ff fff0 	bl	80059bc <HAL_RCC_GetHCLKFreq>
 80059dc:	4602      	mov	r2, r0
 80059de:	4b05      	ldr	r3, [pc, #20]	; (80059f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	0a9b      	lsrs	r3, r3, #10
 80059e4:	f003 0307 	and.w	r3, r3, #7
 80059e8:	4903      	ldr	r1, [pc, #12]	; (80059f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059ea:	5ccb      	ldrb	r3, [r1, r3]
 80059ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	40023800 	.word	0x40023800
 80059f8:	080099fc 	.word	0x080099fc

080059fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005a00:	f7ff ffdc 	bl	80059bc <HAL_RCC_GetHCLKFreq>
 8005a04:	4602      	mov	r2, r0
 8005a06:	4b05      	ldr	r3, [pc, #20]	; (8005a1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	0b5b      	lsrs	r3, r3, #13
 8005a0c:	f003 0307 	and.w	r3, r3, #7
 8005a10:	4903      	ldr	r1, [pc, #12]	; (8005a20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a12:	5ccb      	ldrb	r3, [r1, r3]
 8005a14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	40023800 	.word	0x40023800
 8005a20:	080099fc 	.word	0x080099fc

08005a24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d101      	bne.n	8005a36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e03f      	b.n	8005ab6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d106      	bne.n	8005a50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f7fd fe1c 	bl	8003688 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2224      	movs	r2, #36	; 0x24
 8005a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68da      	ldr	r2, [r3, #12]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 fd7b 	bl	8006564 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	691a      	ldr	r2, [r3, #16]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	695a      	ldr	r2, [r3, #20]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68da      	ldr	r2, [r3, #12]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2220      	movs	r2, #32
 8005aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2220      	movs	r2, #32
 8005ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3708      	adds	r7, #8
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}

08005abe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b08a      	sub	sp, #40	; 0x28
 8005ac2:	af02      	add	r7, sp, #8
 8005ac4:	60f8      	str	r0, [r7, #12]
 8005ac6:	60b9      	str	r1, [r7, #8]
 8005ac8:	603b      	str	r3, [r7, #0]
 8005aca:	4613      	mov	r3, r2
 8005acc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	2b20      	cmp	r3, #32
 8005adc:	d17c      	bne.n	8005bd8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d002      	beq.n	8005aea <HAL_UART_Transmit+0x2c>
 8005ae4:	88fb      	ldrh	r3, [r7, #6]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d101      	bne.n	8005aee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e075      	b.n	8005bda <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d101      	bne.n	8005afc <HAL_UART_Transmit+0x3e>
 8005af8:	2302      	movs	r3, #2
 8005afa:	e06e      	b.n	8005bda <HAL_UART_Transmit+0x11c>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2221      	movs	r2, #33	; 0x21
 8005b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b12:	f7fd ffa5 	bl	8003a60 <HAL_GetTick>
 8005b16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	88fa      	ldrh	r2, [r7, #6]
 8005b1c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	88fa      	ldrh	r2, [r7, #6]
 8005b22:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b2c:	d108      	bne.n	8005b40 <HAL_UART_Transmit+0x82>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d104      	bne.n	8005b40 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005b36:	2300      	movs	r3, #0
 8005b38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	61bb      	str	r3, [r7, #24]
 8005b3e:	e003      	b.n	8005b48 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b44:	2300      	movs	r3, #0
 8005b46:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005b50:	e02a      	b.n	8005ba8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	9300      	str	r3, [sp, #0]
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	2180      	movs	r1, #128	; 0x80
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	f000 faf9 	bl	8006154 <UART_WaitOnFlagUntilTimeout>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d001      	beq.n	8005b6c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e036      	b.n	8005bda <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d10b      	bne.n	8005b8a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	881b      	ldrh	r3, [r3, #0]
 8005b76:	461a      	mov	r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	3302      	adds	r3, #2
 8005b86:	61bb      	str	r3, [r7, #24]
 8005b88:	e007      	b.n	8005b9a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	781a      	ldrb	r2, [r3, #0]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	3301      	adds	r3, #1
 8005b98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d1cf      	bne.n	8005b52 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	9300      	str	r3, [sp, #0]
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	2140      	movs	r1, #64	; 0x40
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	f000 fac9 	bl	8006154 <UART_WaitOnFlagUntilTimeout>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d001      	beq.n	8005bcc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e006      	b.n	8005bda <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2220      	movs	r2, #32
 8005bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	e000      	b.n	8005bda <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005bd8:	2302      	movs	r3, #2
  }
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3720      	adds	r7, #32
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
	...

08005be4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b0ba      	sub	sp, #232	; 0xe8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005c10:	2300      	movs	r3, #0
 8005c12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c1a:	f003 030f 	and.w	r3, r3, #15
 8005c1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005c22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10f      	bne.n	8005c4a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c2e:	f003 0320 	and.w	r3, r3, #32
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d009      	beq.n	8005c4a <HAL_UART_IRQHandler+0x66>
 8005c36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c3a:	f003 0320 	and.w	r3, r3, #32
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d003      	beq.n	8005c4a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 fbd3 	bl	80063ee <UART_Receive_IT>
      return;
 8005c48:	e256      	b.n	80060f8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005c4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f000 80de 	beq.w	8005e10 <HAL_UART_IRQHandler+0x22c>
 8005c54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c58:	f003 0301 	and.w	r3, r3, #1
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d106      	bne.n	8005c6e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c64:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	f000 80d1 	beq.w	8005e10 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c72:	f003 0301 	and.w	r3, r3, #1
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00b      	beq.n	8005c92 <HAL_UART_IRQHandler+0xae>
 8005c7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d005      	beq.n	8005c92 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8a:	f043 0201 	orr.w	r2, r3, #1
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c96:	f003 0304 	and.w	r3, r3, #4
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00b      	beq.n	8005cb6 <HAL_UART_IRQHandler+0xd2>
 8005c9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d005      	beq.n	8005cb6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cae:	f043 0202 	orr.w	r2, r3, #2
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cba:	f003 0302 	and.w	r3, r3, #2
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00b      	beq.n	8005cda <HAL_UART_IRQHandler+0xf6>
 8005cc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d005      	beq.n	8005cda <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd2:	f043 0204 	orr.w	r2, r3, #4
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cde:	f003 0308 	and.w	r3, r3, #8
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d011      	beq.n	8005d0a <HAL_UART_IRQHandler+0x126>
 8005ce6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cea:	f003 0320 	and.w	r3, r3, #32
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d105      	bne.n	8005cfe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005cf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cf6:	f003 0301 	and.w	r3, r3, #1
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d005      	beq.n	8005d0a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d02:	f043 0208 	orr.w	r2, r3, #8
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	f000 81ed 	beq.w	80060ee <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d18:	f003 0320 	and.w	r3, r3, #32
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d008      	beq.n	8005d32 <HAL_UART_IRQHandler+0x14e>
 8005d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d24:	f003 0320 	and.w	r3, r3, #32
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d002      	beq.n	8005d32 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 fb5e 	bl	80063ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	695b      	ldr	r3, [r3, #20]
 8005d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d3c:	2b40      	cmp	r3, #64	; 0x40
 8005d3e:	bf0c      	ite	eq
 8005d40:	2301      	moveq	r3, #1
 8005d42:	2300      	movne	r3, #0
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4e:	f003 0308 	and.w	r3, r3, #8
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d103      	bne.n	8005d5e <HAL_UART_IRQHandler+0x17a>
 8005d56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d04f      	beq.n	8005dfe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 fa66 	bl	8006230 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d6e:	2b40      	cmp	r3, #64	; 0x40
 8005d70:	d141      	bne.n	8005df6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	3314      	adds	r3, #20
 8005d78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d80:	e853 3f00 	ldrex	r3, [r3]
 8005d84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005d88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	3314      	adds	r3, #20
 8005d9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005d9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005da2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005daa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005dae:	e841 2300 	strex	r3, r2, [r1]
 8005db2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005db6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1d9      	bne.n	8005d72 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d013      	beq.n	8005dee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dca:	4a7d      	ldr	r2, [pc, #500]	; (8005fc0 <HAL_UART_IRQHandler+0x3dc>)
 8005dcc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f7fd fff5 	bl	8003dc2 <HAL_DMA_Abort_IT>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d016      	beq.n	8005e0c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005de8:	4610      	mov	r0, r2
 8005dea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dec:	e00e      	b.n	8005e0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f99a 	bl	8006128 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005df4:	e00a      	b.n	8005e0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 f996 	bl	8006128 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dfc:	e006      	b.n	8005e0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 f992 	bl	8006128 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005e0a:	e170      	b.n	80060ee <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e0c:	bf00      	nop
    return;
 8005e0e:	e16e      	b.n	80060ee <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	f040 814a 	bne.w	80060ae <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e1e:	f003 0310 	and.w	r3, r3, #16
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	f000 8143 	beq.w	80060ae <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e2c:	f003 0310 	and.w	r3, r3, #16
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f000 813c 	beq.w	80060ae <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e36:	2300      	movs	r3, #0
 8005e38:	60bb      	str	r3, [r7, #8]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	60bb      	str	r3, [r7, #8]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	60bb      	str	r3, [r7, #8]
 8005e4a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e56:	2b40      	cmp	r3, #64	; 0x40
 8005e58:	f040 80b4 	bne.w	8005fc4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f000 8140 	beq.w	80060f2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	f080 8139 	bcs.w	80060f2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e86:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8c:	69db      	ldr	r3, [r3, #28]
 8005e8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e92:	f000 8088 	beq.w	8005fa6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	330c      	adds	r3, #12
 8005e9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ea4:	e853 3f00 	ldrex	r3, [r3]
 8005ea8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005eac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005eb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005eb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	330c      	adds	r3, #12
 8005ebe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005ec2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005ec6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005ece:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005ed2:	e841 2300 	strex	r3, r2, [r1]
 8005ed6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005eda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1d9      	bne.n	8005e96 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	3314      	adds	r3, #20
 8005ee8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005eec:	e853 3f00 	ldrex	r3, [r3]
 8005ef0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005ef2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ef4:	f023 0301 	bic.w	r3, r3, #1
 8005ef8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	3314      	adds	r3, #20
 8005f02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005f06:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005f0a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005f0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005f12:	e841 2300 	strex	r3, r2, [r1]
 8005f16:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005f18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1e1      	bne.n	8005ee2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	3314      	adds	r3, #20
 8005f24:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f28:	e853 3f00 	ldrex	r3, [r3]
 8005f2c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005f2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	3314      	adds	r3, #20
 8005f3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005f42:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005f44:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f46:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005f48:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005f4a:	e841 2300 	strex	r3, r2, [r1]
 8005f4e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005f50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1e3      	bne.n	8005f1e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2220      	movs	r2, #32
 8005f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	330c      	adds	r3, #12
 8005f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f6e:	e853 3f00 	ldrex	r3, [r3]
 8005f72:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f76:	f023 0310 	bic.w	r3, r3, #16
 8005f7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	330c      	adds	r3, #12
 8005f84:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005f88:	65ba      	str	r2, [r7, #88]	; 0x58
 8005f8a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f90:	e841 2300 	strex	r3, r2, [r1]
 8005f94:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d1e3      	bne.n	8005f64 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f7fd fe9e 	bl	8003ce2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 f8c0 	bl	800613c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005fbc:	e099      	b.n	80060f2 <HAL_UART_IRQHandler+0x50e>
 8005fbe:	bf00      	nop
 8005fc0:	080062f7 	.word	0x080062f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	f000 808b 	beq.w	80060f6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005fe0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f000 8086 	beq.w	80060f6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	330c      	adds	r3, #12
 8005ff0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff4:	e853 3f00 	ldrex	r3, [r3]
 8005ff8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ffc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006000:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	330c      	adds	r3, #12
 800600a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800600e:	647a      	str	r2, [r7, #68]	; 0x44
 8006010:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006012:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006014:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006016:	e841 2300 	strex	r3, r2, [r1]
 800601a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800601c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1e3      	bne.n	8005fea <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	3314      	adds	r3, #20
 8006028:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602c:	e853 3f00 	ldrex	r3, [r3]
 8006030:	623b      	str	r3, [r7, #32]
   return(result);
 8006032:	6a3b      	ldr	r3, [r7, #32]
 8006034:	f023 0301 	bic.w	r3, r3, #1
 8006038:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	3314      	adds	r3, #20
 8006042:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006046:	633a      	str	r2, [r7, #48]	; 0x30
 8006048:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800604c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800604e:	e841 2300 	strex	r3, r2, [r1]
 8006052:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006056:	2b00      	cmp	r3, #0
 8006058:	d1e3      	bne.n	8006022 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2220      	movs	r2, #32
 800605e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	330c      	adds	r3, #12
 800606e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	e853 3f00 	ldrex	r3, [r3]
 8006076:	60fb      	str	r3, [r7, #12]
   return(result);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f023 0310 	bic.w	r3, r3, #16
 800607e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	330c      	adds	r3, #12
 8006088:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800608c:	61fa      	str	r2, [r7, #28]
 800608e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006090:	69b9      	ldr	r1, [r7, #24]
 8006092:	69fa      	ldr	r2, [r7, #28]
 8006094:	e841 2300 	strex	r3, r2, [r1]
 8006098:	617b      	str	r3, [r7, #20]
   return(result);
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d1e3      	bne.n	8006068 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80060a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80060a4:	4619      	mov	r1, r3
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 f848 	bl	800613c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80060ac:	e023      	b.n	80060f6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80060ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d009      	beq.n	80060ce <HAL_UART_IRQHandler+0x4ea>
 80060ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d003      	beq.n	80060ce <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 f929 	bl	800631e <UART_Transmit_IT>
    return;
 80060cc:	e014      	b.n	80060f8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80060ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00e      	beq.n	80060f8 <HAL_UART_IRQHandler+0x514>
 80060da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d008      	beq.n	80060f8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 f969 	bl	80063be <UART_EndTransmit_IT>
    return;
 80060ec:	e004      	b.n	80060f8 <HAL_UART_IRQHandler+0x514>
    return;
 80060ee:	bf00      	nop
 80060f0:	e002      	b.n	80060f8 <HAL_UART_IRQHandler+0x514>
      return;
 80060f2:	bf00      	nop
 80060f4:	e000      	b.n	80060f8 <HAL_UART_IRQHandler+0x514>
      return;
 80060f6:	bf00      	nop
  }
}
 80060f8:	37e8      	adds	r7, #232	; 0xe8
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop

08006100 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800611c:	bf00      	nop
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006130:	bf00      	nop
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	460b      	mov	r3, r1
 8006146:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006148:	bf00      	nop
 800614a:	370c      	adds	r7, #12
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b090      	sub	sp, #64	; 0x40
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	603b      	str	r3, [r7, #0]
 8006160:	4613      	mov	r3, r2
 8006162:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006164:	e050      	b.n	8006208 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006166:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800616c:	d04c      	beq.n	8006208 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800616e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006170:	2b00      	cmp	r3, #0
 8006172:	d007      	beq.n	8006184 <UART_WaitOnFlagUntilTimeout+0x30>
 8006174:	f7fd fc74 	bl	8003a60 <HAL_GetTick>
 8006178:	4602      	mov	r2, r0
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006180:	429a      	cmp	r2, r3
 8006182:	d241      	bcs.n	8006208 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	330c      	adds	r3, #12
 800618a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618e:	e853 3f00 	ldrex	r3, [r3]
 8006192:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006196:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800619a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	330c      	adds	r3, #12
 80061a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80061a4:	637a      	str	r2, [r7, #52]	; 0x34
 80061a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061ac:	e841 2300 	strex	r3, r2, [r1]
 80061b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80061b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d1e5      	bne.n	8006184 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	3314      	adds	r3, #20
 80061be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	e853 3f00 	ldrex	r3, [r3]
 80061c6:	613b      	str	r3, [r7, #16]
   return(result);
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	f023 0301 	bic.w	r3, r3, #1
 80061ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	3314      	adds	r3, #20
 80061d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061d8:	623a      	str	r2, [r7, #32]
 80061da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061dc:	69f9      	ldr	r1, [r7, #28]
 80061de:	6a3a      	ldr	r2, [r7, #32]
 80061e0:	e841 2300 	strex	r3, r2, [r1]
 80061e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d1e5      	bne.n	80061b8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2220      	movs	r2, #32
 80061f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2220      	movs	r2, #32
 80061f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006204:	2303      	movs	r3, #3
 8006206:	e00f      	b.n	8006228 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	4013      	ands	r3, r2
 8006212:	68ba      	ldr	r2, [r7, #8]
 8006214:	429a      	cmp	r2, r3
 8006216:	bf0c      	ite	eq
 8006218:	2301      	moveq	r3, #1
 800621a:	2300      	movne	r3, #0
 800621c:	b2db      	uxtb	r3, r3
 800621e:	461a      	mov	r2, r3
 8006220:	79fb      	ldrb	r3, [r7, #7]
 8006222:	429a      	cmp	r2, r3
 8006224:	d09f      	beq.n	8006166 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006226:	2300      	movs	r3, #0
}
 8006228:	4618      	mov	r0, r3
 800622a:	3740      	adds	r7, #64	; 0x40
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006230:	b480      	push	{r7}
 8006232:	b095      	sub	sp, #84	; 0x54
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	330c      	adds	r3, #12
 800623e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006242:	e853 3f00 	ldrex	r3, [r3]
 8006246:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800624e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	330c      	adds	r3, #12
 8006256:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006258:	643a      	str	r2, [r7, #64]	; 0x40
 800625a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800625e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006260:	e841 2300 	strex	r3, r2, [r1]
 8006264:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1e5      	bne.n	8006238 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	3314      	adds	r3, #20
 8006272:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006274:	6a3b      	ldr	r3, [r7, #32]
 8006276:	e853 3f00 	ldrex	r3, [r3]
 800627a:	61fb      	str	r3, [r7, #28]
   return(result);
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	f023 0301 	bic.w	r3, r3, #1
 8006282:	64bb      	str	r3, [r7, #72]	; 0x48
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	3314      	adds	r3, #20
 800628a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800628c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800628e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006290:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006292:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006294:	e841 2300 	strex	r3, r2, [r1]
 8006298:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800629a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629c:	2b00      	cmp	r3, #0
 800629e:	d1e5      	bne.n	800626c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d119      	bne.n	80062dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	330c      	adds	r3, #12
 80062ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	e853 3f00 	ldrex	r3, [r3]
 80062b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	f023 0310 	bic.w	r3, r3, #16
 80062be:	647b      	str	r3, [r7, #68]	; 0x44
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	330c      	adds	r3, #12
 80062c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062c8:	61ba      	str	r2, [r7, #24]
 80062ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062cc:	6979      	ldr	r1, [r7, #20]
 80062ce:	69ba      	ldr	r2, [r7, #24]
 80062d0:	e841 2300 	strex	r3, r2, [r1]
 80062d4:	613b      	str	r3, [r7, #16]
   return(result);
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d1e5      	bne.n	80062a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2220      	movs	r2, #32
 80062e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80062ea:	bf00      	nop
 80062ec:	3754      	adds	r7, #84	; 0x54
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr

080062f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b084      	sub	sp, #16
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006302:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2200      	movs	r2, #0
 8006308:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	f7ff ff09 	bl	8006128 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006316:	bf00      	nop
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800631e:	b480      	push	{r7}
 8006320:	b085      	sub	sp, #20
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800632c:	b2db      	uxtb	r3, r3
 800632e:	2b21      	cmp	r3, #33	; 0x21
 8006330:	d13e      	bne.n	80063b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800633a:	d114      	bne.n	8006366 <UART_Transmit_IT+0x48>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d110      	bne.n	8006366 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a1b      	ldr	r3, [r3, #32]
 8006348:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	881b      	ldrh	r3, [r3, #0]
 800634e:	461a      	mov	r2, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006358:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a1b      	ldr	r3, [r3, #32]
 800635e:	1c9a      	adds	r2, r3, #2
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	621a      	str	r2, [r3, #32]
 8006364:	e008      	b.n	8006378 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a1b      	ldr	r3, [r3, #32]
 800636a:	1c59      	adds	r1, r3, #1
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	6211      	str	r1, [r2, #32]
 8006370:	781a      	ldrb	r2, [r3, #0]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800637c:	b29b      	uxth	r3, r3
 800637e:	3b01      	subs	r3, #1
 8006380:	b29b      	uxth	r3, r3
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	4619      	mov	r1, r3
 8006386:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006388:	2b00      	cmp	r3, #0
 800638a:	d10f      	bne.n	80063ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68da      	ldr	r2, [r3, #12]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800639a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68da      	ldr	r2, [r3, #12]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80063ac:	2300      	movs	r3, #0
 80063ae:	e000      	b.n	80063b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80063b0:	2302      	movs	r3, #2
  }
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3714      	adds	r7, #20
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr

080063be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063be:	b580      	push	{r7, lr}
 80063c0:	b082      	sub	sp, #8
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68da      	ldr	r2, [r3, #12]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2220      	movs	r2, #32
 80063da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f7ff fe8e 	bl	8006100 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3708      	adds	r7, #8
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}

080063ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80063ee:	b580      	push	{r7, lr}
 80063f0:	b08c      	sub	sp, #48	; 0x30
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	2b22      	cmp	r3, #34	; 0x22
 8006400:	f040 80ab 	bne.w	800655a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800640c:	d117      	bne.n	800643e <UART_Receive_IT+0x50>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d113      	bne.n	800643e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006416:	2300      	movs	r3, #0
 8006418:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800641e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	b29b      	uxth	r3, r3
 8006428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800642c:	b29a      	uxth	r2, r3
 800642e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006430:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006436:	1c9a      	adds	r2, r3, #2
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	629a      	str	r2, [r3, #40]	; 0x28
 800643c:	e026      	b.n	800648c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006442:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006444:	2300      	movs	r3, #0
 8006446:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006450:	d007      	beq.n	8006462 <UART_Receive_IT+0x74>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10a      	bne.n	8006470 <UART_Receive_IT+0x82>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d106      	bne.n	8006470 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	b2da      	uxtb	r2, r3
 800646a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800646c:	701a      	strb	r2, [r3, #0]
 800646e:	e008      	b.n	8006482 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	b2db      	uxtb	r3, r3
 8006478:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800647c:	b2da      	uxtb	r2, r3
 800647e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006480:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006486:	1c5a      	adds	r2, r3, #1
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006490:	b29b      	uxth	r3, r3
 8006492:	3b01      	subs	r3, #1
 8006494:	b29b      	uxth	r3, r3
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	4619      	mov	r1, r3
 800649a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800649c:	2b00      	cmp	r3, #0
 800649e:	d15a      	bne.n	8006556 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68da      	ldr	r2, [r3, #12]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f022 0220 	bic.w	r2, r2, #32
 80064ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68da      	ldr	r2, [r3, #12]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	695a      	ldr	r2, [r3, #20]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f022 0201 	bic.w	r2, r2, #1
 80064ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2220      	movs	r2, #32
 80064d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d135      	bne.n	800654c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	330c      	adds	r3, #12
 80064ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	e853 3f00 	ldrex	r3, [r3]
 80064f4:	613b      	str	r3, [r7, #16]
   return(result);
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	f023 0310 	bic.w	r3, r3, #16
 80064fc:	627b      	str	r3, [r7, #36]	; 0x24
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	330c      	adds	r3, #12
 8006504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006506:	623a      	str	r2, [r7, #32]
 8006508:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650a:	69f9      	ldr	r1, [r7, #28]
 800650c:	6a3a      	ldr	r2, [r7, #32]
 800650e:	e841 2300 	strex	r3, r2, [r1]
 8006512:	61bb      	str	r3, [r7, #24]
   return(result);
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1e5      	bne.n	80064e6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0310 	and.w	r3, r3, #16
 8006524:	2b10      	cmp	r3, #16
 8006526:	d10a      	bne.n	800653e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006528:	2300      	movs	r3, #0
 800652a:	60fb      	str	r3, [r7, #12]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	60fb      	str	r3, [r7, #12]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	60fb      	str	r3, [r7, #12]
 800653c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006542:	4619      	mov	r1, r3
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f7ff fdf9 	bl	800613c <HAL_UARTEx_RxEventCallback>
 800654a:	e002      	b.n	8006552 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f7ff fde1 	bl	8006114 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006552:	2300      	movs	r3, #0
 8006554:	e002      	b.n	800655c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006556:	2300      	movs	r3, #0
 8006558:	e000      	b.n	800655c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800655a:	2302      	movs	r3, #2
  }
}
 800655c:	4618      	mov	r0, r3
 800655e:	3730      	adds	r7, #48	; 0x30
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006564:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006568:	b0c0      	sub	sp, #256	; 0x100
 800656a:	af00      	add	r7, sp, #0
 800656c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800657c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006580:	68d9      	ldr	r1, [r3, #12]
 8006582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	ea40 0301 	orr.w	r3, r0, r1
 800658c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800658e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006592:	689a      	ldr	r2, [r3, #8]
 8006594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	431a      	orrs	r2, r3
 800659c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065a0:	695b      	ldr	r3, [r3, #20]
 80065a2:	431a      	orrs	r2, r3
 80065a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065a8:	69db      	ldr	r3, [r3, #28]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80065b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80065bc:	f021 010c 	bic.w	r1, r1, #12
 80065c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80065ca:	430b      	orrs	r3, r1
 80065cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	695b      	ldr	r3, [r3, #20]
 80065d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80065da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065de:	6999      	ldr	r1, [r3, #24]
 80065e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	ea40 0301 	orr.w	r3, r0, r1
 80065ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80065ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	4b8f      	ldr	r3, [pc, #572]	; (8006830 <UART_SetConfig+0x2cc>)
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d005      	beq.n	8006604 <UART_SetConfig+0xa0>
 80065f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	4b8d      	ldr	r3, [pc, #564]	; (8006834 <UART_SetConfig+0x2d0>)
 8006600:	429a      	cmp	r2, r3
 8006602:	d104      	bne.n	800660e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006604:	f7ff f9fa 	bl	80059fc <HAL_RCC_GetPCLK2Freq>
 8006608:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800660c:	e003      	b.n	8006616 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800660e:	f7ff f9e1 	bl	80059d4 <HAL_RCC_GetPCLK1Freq>
 8006612:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800661a:	69db      	ldr	r3, [r3, #28]
 800661c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006620:	f040 810c 	bne.w	800683c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006624:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006628:	2200      	movs	r2, #0
 800662a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800662e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006632:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006636:	4622      	mov	r2, r4
 8006638:	462b      	mov	r3, r5
 800663a:	1891      	adds	r1, r2, r2
 800663c:	65b9      	str	r1, [r7, #88]	; 0x58
 800663e:	415b      	adcs	r3, r3
 8006640:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006642:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006646:	4621      	mov	r1, r4
 8006648:	eb12 0801 	adds.w	r8, r2, r1
 800664c:	4629      	mov	r1, r5
 800664e:	eb43 0901 	adc.w	r9, r3, r1
 8006652:	f04f 0200 	mov.w	r2, #0
 8006656:	f04f 0300 	mov.w	r3, #0
 800665a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800665e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006662:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006666:	4690      	mov	r8, r2
 8006668:	4699      	mov	r9, r3
 800666a:	4623      	mov	r3, r4
 800666c:	eb18 0303 	adds.w	r3, r8, r3
 8006670:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006674:	462b      	mov	r3, r5
 8006676:	eb49 0303 	adc.w	r3, r9, r3
 800667a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800667e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800668a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800668e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006692:	460b      	mov	r3, r1
 8006694:	18db      	adds	r3, r3, r3
 8006696:	653b      	str	r3, [r7, #80]	; 0x50
 8006698:	4613      	mov	r3, r2
 800669a:	eb42 0303 	adc.w	r3, r2, r3
 800669e:	657b      	str	r3, [r7, #84]	; 0x54
 80066a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80066a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80066a8:	f7fa fa7e 	bl	8000ba8 <__aeabi_uldivmod>
 80066ac:	4602      	mov	r2, r0
 80066ae:	460b      	mov	r3, r1
 80066b0:	4b61      	ldr	r3, [pc, #388]	; (8006838 <UART_SetConfig+0x2d4>)
 80066b2:	fba3 2302 	umull	r2, r3, r3, r2
 80066b6:	095b      	lsrs	r3, r3, #5
 80066b8:	011c      	lsls	r4, r3, #4
 80066ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066be:	2200      	movs	r2, #0
 80066c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80066c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80066cc:	4642      	mov	r2, r8
 80066ce:	464b      	mov	r3, r9
 80066d0:	1891      	adds	r1, r2, r2
 80066d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80066d4:	415b      	adcs	r3, r3
 80066d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80066dc:	4641      	mov	r1, r8
 80066de:	eb12 0a01 	adds.w	sl, r2, r1
 80066e2:	4649      	mov	r1, r9
 80066e4:	eb43 0b01 	adc.w	fp, r3, r1
 80066e8:	f04f 0200 	mov.w	r2, #0
 80066ec:	f04f 0300 	mov.w	r3, #0
 80066f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80066f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80066f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066fc:	4692      	mov	sl, r2
 80066fe:	469b      	mov	fp, r3
 8006700:	4643      	mov	r3, r8
 8006702:	eb1a 0303 	adds.w	r3, sl, r3
 8006706:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800670a:	464b      	mov	r3, r9
 800670c:	eb4b 0303 	adc.w	r3, fp, r3
 8006710:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006720:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006724:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006728:	460b      	mov	r3, r1
 800672a:	18db      	adds	r3, r3, r3
 800672c:	643b      	str	r3, [r7, #64]	; 0x40
 800672e:	4613      	mov	r3, r2
 8006730:	eb42 0303 	adc.w	r3, r2, r3
 8006734:	647b      	str	r3, [r7, #68]	; 0x44
 8006736:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800673a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800673e:	f7fa fa33 	bl	8000ba8 <__aeabi_uldivmod>
 8006742:	4602      	mov	r2, r0
 8006744:	460b      	mov	r3, r1
 8006746:	4611      	mov	r1, r2
 8006748:	4b3b      	ldr	r3, [pc, #236]	; (8006838 <UART_SetConfig+0x2d4>)
 800674a:	fba3 2301 	umull	r2, r3, r3, r1
 800674e:	095b      	lsrs	r3, r3, #5
 8006750:	2264      	movs	r2, #100	; 0x64
 8006752:	fb02 f303 	mul.w	r3, r2, r3
 8006756:	1acb      	subs	r3, r1, r3
 8006758:	00db      	lsls	r3, r3, #3
 800675a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800675e:	4b36      	ldr	r3, [pc, #216]	; (8006838 <UART_SetConfig+0x2d4>)
 8006760:	fba3 2302 	umull	r2, r3, r3, r2
 8006764:	095b      	lsrs	r3, r3, #5
 8006766:	005b      	lsls	r3, r3, #1
 8006768:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800676c:	441c      	add	r4, r3
 800676e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006772:	2200      	movs	r2, #0
 8006774:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006778:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800677c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006780:	4642      	mov	r2, r8
 8006782:	464b      	mov	r3, r9
 8006784:	1891      	adds	r1, r2, r2
 8006786:	63b9      	str	r1, [r7, #56]	; 0x38
 8006788:	415b      	adcs	r3, r3
 800678a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800678c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006790:	4641      	mov	r1, r8
 8006792:	1851      	adds	r1, r2, r1
 8006794:	6339      	str	r1, [r7, #48]	; 0x30
 8006796:	4649      	mov	r1, r9
 8006798:	414b      	adcs	r3, r1
 800679a:	637b      	str	r3, [r7, #52]	; 0x34
 800679c:	f04f 0200 	mov.w	r2, #0
 80067a0:	f04f 0300 	mov.w	r3, #0
 80067a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80067a8:	4659      	mov	r1, fp
 80067aa:	00cb      	lsls	r3, r1, #3
 80067ac:	4651      	mov	r1, sl
 80067ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067b2:	4651      	mov	r1, sl
 80067b4:	00ca      	lsls	r2, r1, #3
 80067b6:	4610      	mov	r0, r2
 80067b8:	4619      	mov	r1, r3
 80067ba:	4603      	mov	r3, r0
 80067bc:	4642      	mov	r2, r8
 80067be:	189b      	adds	r3, r3, r2
 80067c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80067c4:	464b      	mov	r3, r9
 80067c6:	460a      	mov	r2, r1
 80067c8:	eb42 0303 	adc.w	r3, r2, r3
 80067cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80067dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80067e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80067e4:	460b      	mov	r3, r1
 80067e6:	18db      	adds	r3, r3, r3
 80067e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80067ea:	4613      	mov	r3, r2
 80067ec:	eb42 0303 	adc.w	r3, r2, r3
 80067f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80067f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80067fa:	f7fa f9d5 	bl	8000ba8 <__aeabi_uldivmod>
 80067fe:	4602      	mov	r2, r0
 8006800:	460b      	mov	r3, r1
 8006802:	4b0d      	ldr	r3, [pc, #52]	; (8006838 <UART_SetConfig+0x2d4>)
 8006804:	fba3 1302 	umull	r1, r3, r3, r2
 8006808:	095b      	lsrs	r3, r3, #5
 800680a:	2164      	movs	r1, #100	; 0x64
 800680c:	fb01 f303 	mul.w	r3, r1, r3
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	00db      	lsls	r3, r3, #3
 8006814:	3332      	adds	r3, #50	; 0x32
 8006816:	4a08      	ldr	r2, [pc, #32]	; (8006838 <UART_SetConfig+0x2d4>)
 8006818:	fba2 2303 	umull	r2, r3, r2, r3
 800681c:	095b      	lsrs	r3, r3, #5
 800681e:	f003 0207 	and.w	r2, r3, #7
 8006822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4422      	add	r2, r4
 800682a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800682c:	e105      	b.n	8006a3a <UART_SetConfig+0x4d6>
 800682e:	bf00      	nop
 8006830:	40011000 	.word	0x40011000
 8006834:	40011400 	.word	0x40011400
 8006838:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800683c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006840:	2200      	movs	r2, #0
 8006842:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006846:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800684a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800684e:	4642      	mov	r2, r8
 8006850:	464b      	mov	r3, r9
 8006852:	1891      	adds	r1, r2, r2
 8006854:	6239      	str	r1, [r7, #32]
 8006856:	415b      	adcs	r3, r3
 8006858:	627b      	str	r3, [r7, #36]	; 0x24
 800685a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800685e:	4641      	mov	r1, r8
 8006860:	1854      	adds	r4, r2, r1
 8006862:	4649      	mov	r1, r9
 8006864:	eb43 0501 	adc.w	r5, r3, r1
 8006868:	f04f 0200 	mov.w	r2, #0
 800686c:	f04f 0300 	mov.w	r3, #0
 8006870:	00eb      	lsls	r3, r5, #3
 8006872:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006876:	00e2      	lsls	r2, r4, #3
 8006878:	4614      	mov	r4, r2
 800687a:	461d      	mov	r5, r3
 800687c:	4643      	mov	r3, r8
 800687e:	18e3      	adds	r3, r4, r3
 8006880:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006884:	464b      	mov	r3, r9
 8006886:	eb45 0303 	adc.w	r3, r5, r3
 800688a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800688e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800689a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800689e:	f04f 0200 	mov.w	r2, #0
 80068a2:	f04f 0300 	mov.w	r3, #0
 80068a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80068aa:	4629      	mov	r1, r5
 80068ac:	008b      	lsls	r3, r1, #2
 80068ae:	4621      	mov	r1, r4
 80068b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068b4:	4621      	mov	r1, r4
 80068b6:	008a      	lsls	r2, r1, #2
 80068b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80068bc:	f7fa f974 	bl	8000ba8 <__aeabi_uldivmod>
 80068c0:	4602      	mov	r2, r0
 80068c2:	460b      	mov	r3, r1
 80068c4:	4b60      	ldr	r3, [pc, #384]	; (8006a48 <UART_SetConfig+0x4e4>)
 80068c6:	fba3 2302 	umull	r2, r3, r3, r2
 80068ca:	095b      	lsrs	r3, r3, #5
 80068cc:	011c      	lsls	r4, r3, #4
 80068ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068d2:	2200      	movs	r2, #0
 80068d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80068d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80068dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80068e0:	4642      	mov	r2, r8
 80068e2:	464b      	mov	r3, r9
 80068e4:	1891      	adds	r1, r2, r2
 80068e6:	61b9      	str	r1, [r7, #24]
 80068e8:	415b      	adcs	r3, r3
 80068ea:	61fb      	str	r3, [r7, #28]
 80068ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068f0:	4641      	mov	r1, r8
 80068f2:	1851      	adds	r1, r2, r1
 80068f4:	6139      	str	r1, [r7, #16]
 80068f6:	4649      	mov	r1, r9
 80068f8:	414b      	adcs	r3, r1
 80068fa:	617b      	str	r3, [r7, #20]
 80068fc:	f04f 0200 	mov.w	r2, #0
 8006900:	f04f 0300 	mov.w	r3, #0
 8006904:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006908:	4659      	mov	r1, fp
 800690a:	00cb      	lsls	r3, r1, #3
 800690c:	4651      	mov	r1, sl
 800690e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006912:	4651      	mov	r1, sl
 8006914:	00ca      	lsls	r2, r1, #3
 8006916:	4610      	mov	r0, r2
 8006918:	4619      	mov	r1, r3
 800691a:	4603      	mov	r3, r0
 800691c:	4642      	mov	r2, r8
 800691e:	189b      	adds	r3, r3, r2
 8006920:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006924:	464b      	mov	r3, r9
 8006926:	460a      	mov	r2, r1
 8006928:	eb42 0303 	adc.w	r3, r2, r3
 800692c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	67bb      	str	r3, [r7, #120]	; 0x78
 800693a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800693c:	f04f 0200 	mov.w	r2, #0
 8006940:	f04f 0300 	mov.w	r3, #0
 8006944:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006948:	4649      	mov	r1, r9
 800694a:	008b      	lsls	r3, r1, #2
 800694c:	4641      	mov	r1, r8
 800694e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006952:	4641      	mov	r1, r8
 8006954:	008a      	lsls	r2, r1, #2
 8006956:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800695a:	f7fa f925 	bl	8000ba8 <__aeabi_uldivmod>
 800695e:	4602      	mov	r2, r0
 8006960:	460b      	mov	r3, r1
 8006962:	4b39      	ldr	r3, [pc, #228]	; (8006a48 <UART_SetConfig+0x4e4>)
 8006964:	fba3 1302 	umull	r1, r3, r3, r2
 8006968:	095b      	lsrs	r3, r3, #5
 800696a:	2164      	movs	r1, #100	; 0x64
 800696c:	fb01 f303 	mul.w	r3, r1, r3
 8006970:	1ad3      	subs	r3, r2, r3
 8006972:	011b      	lsls	r3, r3, #4
 8006974:	3332      	adds	r3, #50	; 0x32
 8006976:	4a34      	ldr	r2, [pc, #208]	; (8006a48 <UART_SetConfig+0x4e4>)
 8006978:	fba2 2303 	umull	r2, r3, r2, r3
 800697c:	095b      	lsrs	r3, r3, #5
 800697e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006982:	441c      	add	r4, r3
 8006984:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006988:	2200      	movs	r2, #0
 800698a:	673b      	str	r3, [r7, #112]	; 0x70
 800698c:	677a      	str	r2, [r7, #116]	; 0x74
 800698e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006992:	4642      	mov	r2, r8
 8006994:	464b      	mov	r3, r9
 8006996:	1891      	adds	r1, r2, r2
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	415b      	adcs	r3, r3
 800699c:	60fb      	str	r3, [r7, #12]
 800699e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80069a2:	4641      	mov	r1, r8
 80069a4:	1851      	adds	r1, r2, r1
 80069a6:	6039      	str	r1, [r7, #0]
 80069a8:	4649      	mov	r1, r9
 80069aa:	414b      	adcs	r3, r1
 80069ac:	607b      	str	r3, [r7, #4]
 80069ae:	f04f 0200 	mov.w	r2, #0
 80069b2:	f04f 0300 	mov.w	r3, #0
 80069b6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80069ba:	4659      	mov	r1, fp
 80069bc:	00cb      	lsls	r3, r1, #3
 80069be:	4651      	mov	r1, sl
 80069c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069c4:	4651      	mov	r1, sl
 80069c6:	00ca      	lsls	r2, r1, #3
 80069c8:	4610      	mov	r0, r2
 80069ca:	4619      	mov	r1, r3
 80069cc:	4603      	mov	r3, r0
 80069ce:	4642      	mov	r2, r8
 80069d0:	189b      	adds	r3, r3, r2
 80069d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80069d4:	464b      	mov	r3, r9
 80069d6:	460a      	mov	r2, r1
 80069d8:	eb42 0303 	adc.w	r3, r2, r3
 80069dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80069de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	663b      	str	r3, [r7, #96]	; 0x60
 80069e8:	667a      	str	r2, [r7, #100]	; 0x64
 80069ea:	f04f 0200 	mov.w	r2, #0
 80069ee:	f04f 0300 	mov.w	r3, #0
 80069f2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80069f6:	4649      	mov	r1, r9
 80069f8:	008b      	lsls	r3, r1, #2
 80069fa:	4641      	mov	r1, r8
 80069fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a00:	4641      	mov	r1, r8
 8006a02:	008a      	lsls	r2, r1, #2
 8006a04:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006a08:	f7fa f8ce 	bl	8000ba8 <__aeabi_uldivmod>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	460b      	mov	r3, r1
 8006a10:	4b0d      	ldr	r3, [pc, #52]	; (8006a48 <UART_SetConfig+0x4e4>)
 8006a12:	fba3 1302 	umull	r1, r3, r3, r2
 8006a16:	095b      	lsrs	r3, r3, #5
 8006a18:	2164      	movs	r1, #100	; 0x64
 8006a1a:	fb01 f303 	mul.w	r3, r1, r3
 8006a1e:	1ad3      	subs	r3, r2, r3
 8006a20:	011b      	lsls	r3, r3, #4
 8006a22:	3332      	adds	r3, #50	; 0x32
 8006a24:	4a08      	ldr	r2, [pc, #32]	; (8006a48 <UART_SetConfig+0x4e4>)
 8006a26:	fba2 2303 	umull	r2, r3, r2, r3
 8006a2a:	095b      	lsrs	r3, r3, #5
 8006a2c:	f003 020f 	and.w	r2, r3, #15
 8006a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4422      	add	r2, r4
 8006a38:	609a      	str	r2, [r3, #8]
}
 8006a3a:	bf00      	nop
 8006a3c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006a40:	46bd      	mov	sp, r7
 8006a42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a46:	bf00      	nop
 8006a48:	51eb851f 	.word	0x51eb851f

08006a4c <__errno>:
 8006a4c:	4b01      	ldr	r3, [pc, #4]	; (8006a54 <__errno+0x8>)
 8006a4e:	6818      	ldr	r0, [r3, #0]
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	2000001c 	.word	0x2000001c

08006a58 <__libc_init_array>:
 8006a58:	b570      	push	{r4, r5, r6, lr}
 8006a5a:	4d0d      	ldr	r5, [pc, #52]	; (8006a90 <__libc_init_array+0x38>)
 8006a5c:	4c0d      	ldr	r4, [pc, #52]	; (8006a94 <__libc_init_array+0x3c>)
 8006a5e:	1b64      	subs	r4, r4, r5
 8006a60:	10a4      	asrs	r4, r4, #2
 8006a62:	2600      	movs	r6, #0
 8006a64:	42a6      	cmp	r6, r4
 8006a66:	d109      	bne.n	8006a7c <__libc_init_array+0x24>
 8006a68:	4d0b      	ldr	r5, [pc, #44]	; (8006a98 <__libc_init_array+0x40>)
 8006a6a:	4c0c      	ldr	r4, [pc, #48]	; (8006a9c <__libc_init_array+0x44>)
 8006a6c:	f002 ff18 	bl	80098a0 <_init>
 8006a70:	1b64      	subs	r4, r4, r5
 8006a72:	10a4      	asrs	r4, r4, #2
 8006a74:	2600      	movs	r6, #0
 8006a76:	42a6      	cmp	r6, r4
 8006a78:	d105      	bne.n	8006a86 <__libc_init_array+0x2e>
 8006a7a:	bd70      	pop	{r4, r5, r6, pc}
 8006a7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a80:	4798      	blx	r3
 8006a82:	3601      	adds	r6, #1
 8006a84:	e7ee      	b.n	8006a64 <__libc_init_array+0xc>
 8006a86:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a8a:	4798      	blx	r3
 8006a8c:	3601      	adds	r6, #1
 8006a8e:	e7f2      	b.n	8006a76 <__libc_init_array+0x1e>
 8006a90:	08009de4 	.word	0x08009de4
 8006a94:	08009de4 	.word	0x08009de4
 8006a98:	08009de4 	.word	0x08009de4
 8006a9c:	08009de8 	.word	0x08009de8

08006aa0 <memset>:
 8006aa0:	4402      	add	r2, r0
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d100      	bne.n	8006aaa <memset+0xa>
 8006aa8:	4770      	bx	lr
 8006aaa:	f803 1b01 	strb.w	r1, [r3], #1
 8006aae:	e7f9      	b.n	8006aa4 <memset+0x4>

08006ab0 <__cvt>:
 8006ab0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ab4:	ec55 4b10 	vmov	r4, r5, d0
 8006ab8:	2d00      	cmp	r5, #0
 8006aba:	460e      	mov	r6, r1
 8006abc:	4619      	mov	r1, r3
 8006abe:	462b      	mov	r3, r5
 8006ac0:	bfbb      	ittet	lt
 8006ac2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006ac6:	461d      	movlt	r5, r3
 8006ac8:	2300      	movge	r3, #0
 8006aca:	232d      	movlt	r3, #45	; 0x2d
 8006acc:	700b      	strb	r3, [r1, #0]
 8006ace:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ad0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006ad4:	4691      	mov	r9, r2
 8006ad6:	f023 0820 	bic.w	r8, r3, #32
 8006ada:	bfbc      	itt	lt
 8006adc:	4622      	movlt	r2, r4
 8006ade:	4614      	movlt	r4, r2
 8006ae0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006ae4:	d005      	beq.n	8006af2 <__cvt+0x42>
 8006ae6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006aea:	d100      	bne.n	8006aee <__cvt+0x3e>
 8006aec:	3601      	adds	r6, #1
 8006aee:	2102      	movs	r1, #2
 8006af0:	e000      	b.n	8006af4 <__cvt+0x44>
 8006af2:	2103      	movs	r1, #3
 8006af4:	ab03      	add	r3, sp, #12
 8006af6:	9301      	str	r3, [sp, #4]
 8006af8:	ab02      	add	r3, sp, #8
 8006afa:	9300      	str	r3, [sp, #0]
 8006afc:	ec45 4b10 	vmov	d0, r4, r5
 8006b00:	4653      	mov	r3, sl
 8006b02:	4632      	mov	r2, r6
 8006b04:	f000 fd00 	bl	8007508 <_dtoa_r>
 8006b08:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006b0c:	4607      	mov	r7, r0
 8006b0e:	d102      	bne.n	8006b16 <__cvt+0x66>
 8006b10:	f019 0f01 	tst.w	r9, #1
 8006b14:	d022      	beq.n	8006b5c <__cvt+0xac>
 8006b16:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006b1a:	eb07 0906 	add.w	r9, r7, r6
 8006b1e:	d110      	bne.n	8006b42 <__cvt+0x92>
 8006b20:	783b      	ldrb	r3, [r7, #0]
 8006b22:	2b30      	cmp	r3, #48	; 0x30
 8006b24:	d10a      	bne.n	8006b3c <__cvt+0x8c>
 8006b26:	2200      	movs	r2, #0
 8006b28:	2300      	movs	r3, #0
 8006b2a:	4620      	mov	r0, r4
 8006b2c:	4629      	mov	r1, r5
 8006b2e:	f7f9 ffcb 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b32:	b918      	cbnz	r0, 8006b3c <__cvt+0x8c>
 8006b34:	f1c6 0601 	rsb	r6, r6, #1
 8006b38:	f8ca 6000 	str.w	r6, [sl]
 8006b3c:	f8da 3000 	ldr.w	r3, [sl]
 8006b40:	4499      	add	r9, r3
 8006b42:	2200      	movs	r2, #0
 8006b44:	2300      	movs	r3, #0
 8006b46:	4620      	mov	r0, r4
 8006b48:	4629      	mov	r1, r5
 8006b4a:	f7f9 ffbd 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b4e:	b108      	cbz	r0, 8006b54 <__cvt+0xa4>
 8006b50:	f8cd 900c 	str.w	r9, [sp, #12]
 8006b54:	2230      	movs	r2, #48	; 0x30
 8006b56:	9b03      	ldr	r3, [sp, #12]
 8006b58:	454b      	cmp	r3, r9
 8006b5a:	d307      	bcc.n	8006b6c <__cvt+0xbc>
 8006b5c:	9b03      	ldr	r3, [sp, #12]
 8006b5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b60:	1bdb      	subs	r3, r3, r7
 8006b62:	4638      	mov	r0, r7
 8006b64:	6013      	str	r3, [r2, #0]
 8006b66:	b004      	add	sp, #16
 8006b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b6c:	1c59      	adds	r1, r3, #1
 8006b6e:	9103      	str	r1, [sp, #12]
 8006b70:	701a      	strb	r2, [r3, #0]
 8006b72:	e7f0      	b.n	8006b56 <__cvt+0xa6>

08006b74 <__exponent>:
 8006b74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b76:	4603      	mov	r3, r0
 8006b78:	2900      	cmp	r1, #0
 8006b7a:	bfb8      	it	lt
 8006b7c:	4249      	neglt	r1, r1
 8006b7e:	f803 2b02 	strb.w	r2, [r3], #2
 8006b82:	bfb4      	ite	lt
 8006b84:	222d      	movlt	r2, #45	; 0x2d
 8006b86:	222b      	movge	r2, #43	; 0x2b
 8006b88:	2909      	cmp	r1, #9
 8006b8a:	7042      	strb	r2, [r0, #1]
 8006b8c:	dd2a      	ble.n	8006be4 <__exponent+0x70>
 8006b8e:	f10d 0407 	add.w	r4, sp, #7
 8006b92:	46a4      	mov	ip, r4
 8006b94:	270a      	movs	r7, #10
 8006b96:	46a6      	mov	lr, r4
 8006b98:	460a      	mov	r2, r1
 8006b9a:	fb91 f6f7 	sdiv	r6, r1, r7
 8006b9e:	fb07 1516 	mls	r5, r7, r6, r1
 8006ba2:	3530      	adds	r5, #48	; 0x30
 8006ba4:	2a63      	cmp	r2, #99	; 0x63
 8006ba6:	f104 34ff 	add.w	r4, r4, #4294967295
 8006baa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006bae:	4631      	mov	r1, r6
 8006bb0:	dcf1      	bgt.n	8006b96 <__exponent+0x22>
 8006bb2:	3130      	adds	r1, #48	; 0x30
 8006bb4:	f1ae 0502 	sub.w	r5, lr, #2
 8006bb8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006bbc:	1c44      	adds	r4, r0, #1
 8006bbe:	4629      	mov	r1, r5
 8006bc0:	4561      	cmp	r1, ip
 8006bc2:	d30a      	bcc.n	8006bda <__exponent+0x66>
 8006bc4:	f10d 0209 	add.w	r2, sp, #9
 8006bc8:	eba2 020e 	sub.w	r2, r2, lr
 8006bcc:	4565      	cmp	r5, ip
 8006bce:	bf88      	it	hi
 8006bd0:	2200      	movhi	r2, #0
 8006bd2:	4413      	add	r3, r2
 8006bd4:	1a18      	subs	r0, r3, r0
 8006bd6:	b003      	add	sp, #12
 8006bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006bde:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006be2:	e7ed      	b.n	8006bc0 <__exponent+0x4c>
 8006be4:	2330      	movs	r3, #48	; 0x30
 8006be6:	3130      	adds	r1, #48	; 0x30
 8006be8:	7083      	strb	r3, [r0, #2]
 8006bea:	70c1      	strb	r1, [r0, #3]
 8006bec:	1d03      	adds	r3, r0, #4
 8006bee:	e7f1      	b.n	8006bd4 <__exponent+0x60>

08006bf0 <_printf_float>:
 8006bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bf4:	ed2d 8b02 	vpush	{d8}
 8006bf8:	b08d      	sub	sp, #52	; 0x34
 8006bfa:	460c      	mov	r4, r1
 8006bfc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006c00:	4616      	mov	r6, r2
 8006c02:	461f      	mov	r7, r3
 8006c04:	4605      	mov	r5, r0
 8006c06:	f001 fa6d 	bl	80080e4 <_localeconv_r>
 8006c0a:	f8d0 a000 	ldr.w	sl, [r0]
 8006c0e:	4650      	mov	r0, sl
 8006c10:	f7f9 fade 	bl	80001d0 <strlen>
 8006c14:	2300      	movs	r3, #0
 8006c16:	930a      	str	r3, [sp, #40]	; 0x28
 8006c18:	6823      	ldr	r3, [r4, #0]
 8006c1a:	9305      	str	r3, [sp, #20]
 8006c1c:	f8d8 3000 	ldr.w	r3, [r8]
 8006c20:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006c24:	3307      	adds	r3, #7
 8006c26:	f023 0307 	bic.w	r3, r3, #7
 8006c2a:	f103 0208 	add.w	r2, r3, #8
 8006c2e:	f8c8 2000 	str.w	r2, [r8]
 8006c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c36:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006c3a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006c3e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006c42:	9307      	str	r3, [sp, #28]
 8006c44:	f8cd 8018 	str.w	r8, [sp, #24]
 8006c48:	ee08 0a10 	vmov	s16, r0
 8006c4c:	4b9f      	ldr	r3, [pc, #636]	; (8006ecc <_printf_float+0x2dc>)
 8006c4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c52:	f04f 32ff 	mov.w	r2, #4294967295
 8006c56:	f7f9 ff69 	bl	8000b2c <__aeabi_dcmpun>
 8006c5a:	bb88      	cbnz	r0, 8006cc0 <_printf_float+0xd0>
 8006c5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c60:	4b9a      	ldr	r3, [pc, #616]	; (8006ecc <_printf_float+0x2dc>)
 8006c62:	f04f 32ff 	mov.w	r2, #4294967295
 8006c66:	f7f9 ff43 	bl	8000af0 <__aeabi_dcmple>
 8006c6a:	bb48      	cbnz	r0, 8006cc0 <_printf_float+0xd0>
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	2300      	movs	r3, #0
 8006c70:	4640      	mov	r0, r8
 8006c72:	4649      	mov	r1, r9
 8006c74:	f7f9 ff32 	bl	8000adc <__aeabi_dcmplt>
 8006c78:	b110      	cbz	r0, 8006c80 <_printf_float+0x90>
 8006c7a:	232d      	movs	r3, #45	; 0x2d
 8006c7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c80:	4b93      	ldr	r3, [pc, #588]	; (8006ed0 <_printf_float+0x2e0>)
 8006c82:	4894      	ldr	r0, [pc, #592]	; (8006ed4 <_printf_float+0x2e4>)
 8006c84:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006c88:	bf94      	ite	ls
 8006c8a:	4698      	movls	r8, r3
 8006c8c:	4680      	movhi	r8, r0
 8006c8e:	2303      	movs	r3, #3
 8006c90:	6123      	str	r3, [r4, #16]
 8006c92:	9b05      	ldr	r3, [sp, #20]
 8006c94:	f023 0204 	bic.w	r2, r3, #4
 8006c98:	6022      	str	r2, [r4, #0]
 8006c9a:	f04f 0900 	mov.w	r9, #0
 8006c9e:	9700      	str	r7, [sp, #0]
 8006ca0:	4633      	mov	r3, r6
 8006ca2:	aa0b      	add	r2, sp, #44	; 0x2c
 8006ca4:	4621      	mov	r1, r4
 8006ca6:	4628      	mov	r0, r5
 8006ca8:	f000 f9d8 	bl	800705c <_printf_common>
 8006cac:	3001      	adds	r0, #1
 8006cae:	f040 8090 	bne.w	8006dd2 <_printf_float+0x1e2>
 8006cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8006cb6:	b00d      	add	sp, #52	; 0x34
 8006cb8:	ecbd 8b02 	vpop	{d8}
 8006cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cc0:	4642      	mov	r2, r8
 8006cc2:	464b      	mov	r3, r9
 8006cc4:	4640      	mov	r0, r8
 8006cc6:	4649      	mov	r1, r9
 8006cc8:	f7f9 ff30 	bl	8000b2c <__aeabi_dcmpun>
 8006ccc:	b140      	cbz	r0, 8006ce0 <_printf_float+0xf0>
 8006cce:	464b      	mov	r3, r9
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	bfbc      	itt	lt
 8006cd4:	232d      	movlt	r3, #45	; 0x2d
 8006cd6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006cda:	487f      	ldr	r0, [pc, #508]	; (8006ed8 <_printf_float+0x2e8>)
 8006cdc:	4b7f      	ldr	r3, [pc, #508]	; (8006edc <_printf_float+0x2ec>)
 8006cde:	e7d1      	b.n	8006c84 <_printf_float+0x94>
 8006ce0:	6863      	ldr	r3, [r4, #4]
 8006ce2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006ce6:	9206      	str	r2, [sp, #24]
 8006ce8:	1c5a      	adds	r2, r3, #1
 8006cea:	d13f      	bne.n	8006d6c <_printf_float+0x17c>
 8006cec:	2306      	movs	r3, #6
 8006cee:	6063      	str	r3, [r4, #4]
 8006cf0:	9b05      	ldr	r3, [sp, #20]
 8006cf2:	6861      	ldr	r1, [r4, #4]
 8006cf4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	9303      	str	r3, [sp, #12]
 8006cfc:	ab0a      	add	r3, sp, #40	; 0x28
 8006cfe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006d02:	ab09      	add	r3, sp, #36	; 0x24
 8006d04:	ec49 8b10 	vmov	d0, r8, r9
 8006d08:	9300      	str	r3, [sp, #0]
 8006d0a:	6022      	str	r2, [r4, #0]
 8006d0c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006d10:	4628      	mov	r0, r5
 8006d12:	f7ff fecd 	bl	8006ab0 <__cvt>
 8006d16:	9b06      	ldr	r3, [sp, #24]
 8006d18:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d1a:	2b47      	cmp	r3, #71	; 0x47
 8006d1c:	4680      	mov	r8, r0
 8006d1e:	d108      	bne.n	8006d32 <_printf_float+0x142>
 8006d20:	1cc8      	adds	r0, r1, #3
 8006d22:	db02      	blt.n	8006d2a <_printf_float+0x13a>
 8006d24:	6863      	ldr	r3, [r4, #4]
 8006d26:	4299      	cmp	r1, r3
 8006d28:	dd41      	ble.n	8006dae <_printf_float+0x1be>
 8006d2a:	f1ab 0b02 	sub.w	fp, fp, #2
 8006d2e:	fa5f fb8b 	uxtb.w	fp, fp
 8006d32:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006d36:	d820      	bhi.n	8006d7a <_printf_float+0x18a>
 8006d38:	3901      	subs	r1, #1
 8006d3a:	465a      	mov	r2, fp
 8006d3c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006d40:	9109      	str	r1, [sp, #36]	; 0x24
 8006d42:	f7ff ff17 	bl	8006b74 <__exponent>
 8006d46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d48:	1813      	adds	r3, r2, r0
 8006d4a:	2a01      	cmp	r2, #1
 8006d4c:	4681      	mov	r9, r0
 8006d4e:	6123      	str	r3, [r4, #16]
 8006d50:	dc02      	bgt.n	8006d58 <_printf_float+0x168>
 8006d52:	6822      	ldr	r2, [r4, #0]
 8006d54:	07d2      	lsls	r2, r2, #31
 8006d56:	d501      	bpl.n	8006d5c <_printf_float+0x16c>
 8006d58:	3301      	adds	r3, #1
 8006d5a:	6123      	str	r3, [r4, #16]
 8006d5c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d09c      	beq.n	8006c9e <_printf_float+0xae>
 8006d64:	232d      	movs	r3, #45	; 0x2d
 8006d66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d6a:	e798      	b.n	8006c9e <_printf_float+0xae>
 8006d6c:	9a06      	ldr	r2, [sp, #24]
 8006d6e:	2a47      	cmp	r2, #71	; 0x47
 8006d70:	d1be      	bne.n	8006cf0 <_printf_float+0x100>
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1bc      	bne.n	8006cf0 <_printf_float+0x100>
 8006d76:	2301      	movs	r3, #1
 8006d78:	e7b9      	b.n	8006cee <_printf_float+0xfe>
 8006d7a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006d7e:	d118      	bne.n	8006db2 <_printf_float+0x1c2>
 8006d80:	2900      	cmp	r1, #0
 8006d82:	6863      	ldr	r3, [r4, #4]
 8006d84:	dd0b      	ble.n	8006d9e <_printf_float+0x1ae>
 8006d86:	6121      	str	r1, [r4, #16]
 8006d88:	b913      	cbnz	r3, 8006d90 <_printf_float+0x1a0>
 8006d8a:	6822      	ldr	r2, [r4, #0]
 8006d8c:	07d0      	lsls	r0, r2, #31
 8006d8e:	d502      	bpl.n	8006d96 <_printf_float+0x1a6>
 8006d90:	3301      	adds	r3, #1
 8006d92:	440b      	add	r3, r1
 8006d94:	6123      	str	r3, [r4, #16]
 8006d96:	65a1      	str	r1, [r4, #88]	; 0x58
 8006d98:	f04f 0900 	mov.w	r9, #0
 8006d9c:	e7de      	b.n	8006d5c <_printf_float+0x16c>
 8006d9e:	b913      	cbnz	r3, 8006da6 <_printf_float+0x1b6>
 8006da0:	6822      	ldr	r2, [r4, #0]
 8006da2:	07d2      	lsls	r2, r2, #31
 8006da4:	d501      	bpl.n	8006daa <_printf_float+0x1ba>
 8006da6:	3302      	adds	r3, #2
 8006da8:	e7f4      	b.n	8006d94 <_printf_float+0x1a4>
 8006daa:	2301      	movs	r3, #1
 8006dac:	e7f2      	b.n	8006d94 <_printf_float+0x1a4>
 8006dae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006db2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006db4:	4299      	cmp	r1, r3
 8006db6:	db05      	blt.n	8006dc4 <_printf_float+0x1d4>
 8006db8:	6823      	ldr	r3, [r4, #0]
 8006dba:	6121      	str	r1, [r4, #16]
 8006dbc:	07d8      	lsls	r0, r3, #31
 8006dbe:	d5ea      	bpl.n	8006d96 <_printf_float+0x1a6>
 8006dc0:	1c4b      	adds	r3, r1, #1
 8006dc2:	e7e7      	b.n	8006d94 <_printf_float+0x1a4>
 8006dc4:	2900      	cmp	r1, #0
 8006dc6:	bfd4      	ite	le
 8006dc8:	f1c1 0202 	rsble	r2, r1, #2
 8006dcc:	2201      	movgt	r2, #1
 8006dce:	4413      	add	r3, r2
 8006dd0:	e7e0      	b.n	8006d94 <_printf_float+0x1a4>
 8006dd2:	6823      	ldr	r3, [r4, #0]
 8006dd4:	055a      	lsls	r2, r3, #21
 8006dd6:	d407      	bmi.n	8006de8 <_printf_float+0x1f8>
 8006dd8:	6923      	ldr	r3, [r4, #16]
 8006dda:	4642      	mov	r2, r8
 8006ddc:	4631      	mov	r1, r6
 8006dde:	4628      	mov	r0, r5
 8006de0:	47b8      	blx	r7
 8006de2:	3001      	adds	r0, #1
 8006de4:	d12c      	bne.n	8006e40 <_printf_float+0x250>
 8006de6:	e764      	b.n	8006cb2 <_printf_float+0xc2>
 8006de8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006dec:	f240 80e0 	bls.w	8006fb0 <_printf_float+0x3c0>
 8006df0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006df4:	2200      	movs	r2, #0
 8006df6:	2300      	movs	r3, #0
 8006df8:	f7f9 fe66 	bl	8000ac8 <__aeabi_dcmpeq>
 8006dfc:	2800      	cmp	r0, #0
 8006dfe:	d034      	beq.n	8006e6a <_printf_float+0x27a>
 8006e00:	4a37      	ldr	r2, [pc, #220]	; (8006ee0 <_printf_float+0x2f0>)
 8006e02:	2301      	movs	r3, #1
 8006e04:	4631      	mov	r1, r6
 8006e06:	4628      	mov	r0, r5
 8006e08:	47b8      	blx	r7
 8006e0a:	3001      	adds	r0, #1
 8006e0c:	f43f af51 	beq.w	8006cb2 <_printf_float+0xc2>
 8006e10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e14:	429a      	cmp	r2, r3
 8006e16:	db02      	blt.n	8006e1e <_printf_float+0x22e>
 8006e18:	6823      	ldr	r3, [r4, #0]
 8006e1a:	07d8      	lsls	r0, r3, #31
 8006e1c:	d510      	bpl.n	8006e40 <_printf_float+0x250>
 8006e1e:	ee18 3a10 	vmov	r3, s16
 8006e22:	4652      	mov	r2, sl
 8006e24:	4631      	mov	r1, r6
 8006e26:	4628      	mov	r0, r5
 8006e28:	47b8      	blx	r7
 8006e2a:	3001      	adds	r0, #1
 8006e2c:	f43f af41 	beq.w	8006cb2 <_printf_float+0xc2>
 8006e30:	f04f 0800 	mov.w	r8, #0
 8006e34:	f104 091a 	add.w	r9, r4, #26
 8006e38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	4543      	cmp	r3, r8
 8006e3e:	dc09      	bgt.n	8006e54 <_printf_float+0x264>
 8006e40:	6823      	ldr	r3, [r4, #0]
 8006e42:	079b      	lsls	r3, r3, #30
 8006e44:	f100 8105 	bmi.w	8007052 <_printf_float+0x462>
 8006e48:	68e0      	ldr	r0, [r4, #12]
 8006e4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e4c:	4298      	cmp	r0, r3
 8006e4e:	bfb8      	it	lt
 8006e50:	4618      	movlt	r0, r3
 8006e52:	e730      	b.n	8006cb6 <_printf_float+0xc6>
 8006e54:	2301      	movs	r3, #1
 8006e56:	464a      	mov	r2, r9
 8006e58:	4631      	mov	r1, r6
 8006e5a:	4628      	mov	r0, r5
 8006e5c:	47b8      	blx	r7
 8006e5e:	3001      	adds	r0, #1
 8006e60:	f43f af27 	beq.w	8006cb2 <_printf_float+0xc2>
 8006e64:	f108 0801 	add.w	r8, r8, #1
 8006e68:	e7e6      	b.n	8006e38 <_printf_float+0x248>
 8006e6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	dc39      	bgt.n	8006ee4 <_printf_float+0x2f4>
 8006e70:	4a1b      	ldr	r2, [pc, #108]	; (8006ee0 <_printf_float+0x2f0>)
 8006e72:	2301      	movs	r3, #1
 8006e74:	4631      	mov	r1, r6
 8006e76:	4628      	mov	r0, r5
 8006e78:	47b8      	blx	r7
 8006e7a:	3001      	adds	r0, #1
 8006e7c:	f43f af19 	beq.w	8006cb2 <_printf_float+0xc2>
 8006e80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e84:	4313      	orrs	r3, r2
 8006e86:	d102      	bne.n	8006e8e <_printf_float+0x29e>
 8006e88:	6823      	ldr	r3, [r4, #0]
 8006e8a:	07d9      	lsls	r1, r3, #31
 8006e8c:	d5d8      	bpl.n	8006e40 <_printf_float+0x250>
 8006e8e:	ee18 3a10 	vmov	r3, s16
 8006e92:	4652      	mov	r2, sl
 8006e94:	4631      	mov	r1, r6
 8006e96:	4628      	mov	r0, r5
 8006e98:	47b8      	blx	r7
 8006e9a:	3001      	adds	r0, #1
 8006e9c:	f43f af09 	beq.w	8006cb2 <_printf_float+0xc2>
 8006ea0:	f04f 0900 	mov.w	r9, #0
 8006ea4:	f104 0a1a 	add.w	sl, r4, #26
 8006ea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eaa:	425b      	negs	r3, r3
 8006eac:	454b      	cmp	r3, r9
 8006eae:	dc01      	bgt.n	8006eb4 <_printf_float+0x2c4>
 8006eb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006eb2:	e792      	b.n	8006dda <_printf_float+0x1ea>
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	4652      	mov	r2, sl
 8006eb8:	4631      	mov	r1, r6
 8006eba:	4628      	mov	r0, r5
 8006ebc:	47b8      	blx	r7
 8006ebe:	3001      	adds	r0, #1
 8006ec0:	f43f aef7 	beq.w	8006cb2 <_printf_float+0xc2>
 8006ec4:	f109 0901 	add.w	r9, r9, #1
 8006ec8:	e7ee      	b.n	8006ea8 <_printf_float+0x2b8>
 8006eca:	bf00      	nop
 8006ecc:	7fefffff 	.word	0x7fefffff
 8006ed0:	08009a08 	.word	0x08009a08
 8006ed4:	08009a0c 	.word	0x08009a0c
 8006ed8:	08009a14 	.word	0x08009a14
 8006edc:	08009a10 	.word	0x08009a10
 8006ee0:	08009a18 	.word	0x08009a18
 8006ee4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ee6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	bfa8      	it	ge
 8006eec:	461a      	movge	r2, r3
 8006eee:	2a00      	cmp	r2, #0
 8006ef0:	4691      	mov	r9, r2
 8006ef2:	dc37      	bgt.n	8006f64 <_printf_float+0x374>
 8006ef4:	f04f 0b00 	mov.w	fp, #0
 8006ef8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006efc:	f104 021a 	add.w	r2, r4, #26
 8006f00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006f02:	9305      	str	r3, [sp, #20]
 8006f04:	eba3 0309 	sub.w	r3, r3, r9
 8006f08:	455b      	cmp	r3, fp
 8006f0a:	dc33      	bgt.n	8006f74 <_printf_float+0x384>
 8006f0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f10:	429a      	cmp	r2, r3
 8006f12:	db3b      	blt.n	8006f8c <_printf_float+0x39c>
 8006f14:	6823      	ldr	r3, [r4, #0]
 8006f16:	07da      	lsls	r2, r3, #31
 8006f18:	d438      	bmi.n	8006f8c <_printf_float+0x39c>
 8006f1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f1c:	9a05      	ldr	r2, [sp, #20]
 8006f1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f20:	1a9a      	subs	r2, r3, r2
 8006f22:	eba3 0901 	sub.w	r9, r3, r1
 8006f26:	4591      	cmp	r9, r2
 8006f28:	bfa8      	it	ge
 8006f2a:	4691      	movge	r9, r2
 8006f2c:	f1b9 0f00 	cmp.w	r9, #0
 8006f30:	dc35      	bgt.n	8006f9e <_printf_float+0x3ae>
 8006f32:	f04f 0800 	mov.w	r8, #0
 8006f36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f3a:	f104 0a1a 	add.w	sl, r4, #26
 8006f3e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f42:	1a9b      	subs	r3, r3, r2
 8006f44:	eba3 0309 	sub.w	r3, r3, r9
 8006f48:	4543      	cmp	r3, r8
 8006f4a:	f77f af79 	ble.w	8006e40 <_printf_float+0x250>
 8006f4e:	2301      	movs	r3, #1
 8006f50:	4652      	mov	r2, sl
 8006f52:	4631      	mov	r1, r6
 8006f54:	4628      	mov	r0, r5
 8006f56:	47b8      	blx	r7
 8006f58:	3001      	adds	r0, #1
 8006f5a:	f43f aeaa 	beq.w	8006cb2 <_printf_float+0xc2>
 8006f5e:	f108 0801 	add.w	r8, r8, #1
 8006f62:	e7ec      	b.n	8006f3e <_printf_float+0x34e>
 8006f64:	4613      	mov	r3, r2
 8006f66:	4631      	mov	r1, r6
 8006f68:	4642      	mov	r2, r8
 8006f6a:	4628      	mov	r0, r5
 8006f6c:	47b8      	blx	r7
 8006f6e:	3001      	adds	r0, #1
 8006f70:	d1c0      	bne.n	8006ef4 <_printf_float+0x304>
 8006f72:	e69e      	b.n	8006cb2 <_printf_float+0xc2>
 8006f74:	2301      	movs	r3, #1
 8006f76:	4631      	mov	r1, r6
 8006f78:	4628      	mov	r0, r5
 8006f7a:	9205      	str	r2, [sp, #20]
 8006f7c:	47b8      	blx	r7
 8006f7e:	3001      	adds	r0, #1
 8006f80:	f43f ae97 	beq.w	8006cb2 <_printf_float+0xc2>
 8006f84:	9a05      	ldr	r2, [sp, #20]
 8006f86:	f10b 0b01 	add.w	fp, fp, #1
 8006f8a:	e7b9      	b.n	8006f00 <_printf_float+0x310>
 8006f8c:	ee18 3a10 	vmov	r3, s16
 8006f90:	4652      	mov	r2, sl
 8006f92:	4631      	mov	r1, r6
 8006f94:	4628      	mov	r0, r5
 8006f96:	47b8      	blx	r7
 8006f98:	3001      	adds	r0, #1
 8006f9a:	d1be      	bne.n	8006f1a <_printf_float+0x32a>
 8006f9c:	e689      	b.n	8006cb2 <_printf_float+0xc2>
 8006f9e:	9a05      	ldr	r2, [sp, #20]
 8006fa0:	464b      	mov	r3, r9
 8006fa2:	4442      	add	r2, r8
 8006fa4:	4631      	mov	r1, r6
 8006fa6:	4628      	mov	r0, r5
 8006fa8:	47b8      	blx	r7
 8006faa:	3001      	adds	r0, #1
 8006fac:	d1c1      	bne.n	8006f32 <_printf_float+0x342>
 8006fae:	e680      	b.n	8006cb2 <_printf_float+0xc2>
 8006fb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fb2:	2a01      	cmp	r2, #1
 8006fb4:	dc01      	bgt.n	8006fba <_printf_float+0x3ca>
 8006fb6:	07db      	lsls	r3, r3, #31
 8006fb8:	d538      	bpl.n	800702c <_printf_float+0x43c>
 8006fba:	2301      	movs	r3, #1
 8006fbc:	4642      	mov	r2, r8
 8006fbe:	4631      	mov	r1, r6
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	47b8      	blx	r7
 8006fc4:	3001      	adds	r0, #1
 8006fc6:	f43f ae74 	beq.w	8006cb2 <_printf_float+0xc2>
 8006fca:	ee18 3a10 	vmov	r3, s16
 8006fce:	4652      	mov	r2, sl
 8006fd0:	4631      	mov	r1, r6
 8006fd2:	4628      	mov	r0, r5
 8006fd4:	47b8      	blx	r7
 8006fd6:	3001      	adds	r0, #1
 8006fd8:	f43f ae6b 	beq.w	8006cb2 <_printf_float+0xc2>
 8006fdc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	f7f9 fd70 	bl	8000ac8 <__aeabi_dcmpeq>
 8006fe8:	b9d8      	cbnz	r0, 8007022 <_printf_float+0x432>
 8006fea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fec:	f108 0201 	add.w	r2, r8, #1
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	4631      	mov	r1, r6
 8006ff4:	4628      	mov	r0, r5
 8006ff6:	47b8      	blx	r7
 8006ff8:	3001      	adds	r0, #1
 8006ffa:	d10e      	bne.n	800701a <_printf_float+0x42a>
 8006ffc:	e659      	b.n	8006cb2 <_printf_float+0xc2>
 8006ffe:	2301      	movs	r3, #1
 8007000:	4652      	mov	r2, sl
 8007002:	4631      	mov	r1, r6
 8007004:	4628      	mov	r0, r5
 8007006:	47b8      	blx	r7
 8007008:	3001      	adds	r0, #1
 800700a:	f43f ae52 	beq.w	8006cb2 <_printf_float+0xc2>
 800700e:	f108 0801 	add.w	r8, r8, #1
 8007012:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007014:	3b01      	subs	r3, #1
 8007016:	4543      	cmp	r3, r8
 8007018:	dcf1      	bgt.n	8006ffe <_printf_float+0x40e>
 800701a:	464b      	mov	r3, r9
 800701c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007020:	e6dc      	b.n	8006ddc <_printf_float+0x1ec>
 8007022:	f04f 0800 	mov.w	r8, #0
 8007026:	f104 0a1a 	add.w	sl, r4, #26
 800702a:	e7f2      	b.n	8007012 <_printf_float+0x422>
 800702c:	2301      	movs	r3, #1
 800702e:	4642      	mov	r2, r8
 8007030:	e7df      	b.n	8006ff2 <_printf_float+0x402>
 8007032:	2301      	movs	r3, #1
 8007034:	464a      	mov	r2, r9
 8007036:	4631      	mov	r1, r6
 8007038:	4628      	mov	r0, r5
 800703a:	47b8      	blx	r7
 800703c:	3001      	adds	r0, #1
 800703e:	f43f ae38 	beq.w	8006cb2 <_printf_float+0xc2>
 8007042:	f108 0801 	add.w	r8, r8, #1
 8007046:	68e3      	ldr	r3, [r4, #12]
 8007048:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800704a:	1a5b      	subs	r3, r3, r1
 800704c:	4543      	cmp	r3, r8
 800704e:	dcf0      	bgt.n	8007032 <_printf_float+0x442>
 8007050:	e6fa      	b.n	8006e48 <_printf_float+0x258>
 8007052:	f04f 0800 	mov.w	r8, #0
 8007056:	f104 0919 	add.w	r9, r4, #25
 800705a:	e7f4      	b.n	8007046 <_printf_float+0x456>

0800705c <_printf_common>:
 800705c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007060:	4616      	mov	r6, r2
 8007062:	4699      	mov	r9, r3
 8007064:	688a      	ldr	r2, [r1, #8]
 8007066:	690b      	ldr	r3, [r1, #16]
 8007068:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800706c:	4293      	cmp	r3, r2
 800706e:	bfb8      	it	lt
 8007070:	4613      	movlt	r3, r2
 8007072:	6033      	str	r3, [r6, #0]
 8007074:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007078:	4607      	mov	r7, r0
 800707a:	460c      	mov	r4, r1
 800707c:	b10a      	cbz	r2, 8007082 <_printf_common+0x26>
 800707e:	3301      	adds	r3, #1
 8007080:	6033      	str	r3, [r6, #0]
 8007082:	6823      	ldr	r3, [r4, #0]
 8007084:	0699      	lsls	r1, r3, #26
 8007086:	bf42      	ittt	mi
 8007088:	6833      	ldrmi	r3, [r6, #0]
 800708a:	3302      	addmi	r3, #2
 800708c:	6033      	strmi	r3, [r6, #0]
 800708e:	6825      	ldr	r5, [r4, #0]
 8007090:	f015 0506 	ands.w	r5, r5, #6
 8007094:	d106      	bne.n	80070a4 <_printf_common+0x48>
 8007096:	f104 0a19 	add.w	sl, r4, #25
 800709a:	68e3      	ldr	r3, [r4, #12]
 800709c:	6832      	ldr	r2, [r6, #0]
 800709e:	1a9b      	subs	r3, r3, r2
 80070a0:	42ab      	cmp	r3, r5
 80070a2:	dc26      	bgt.n	80070f2 <_printf_common+0x96>
 80070a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80070a8:	1e13      	subs	r3, r2, #0
 80070aa:	6822      	ldr	r2, [r4, #0]
 80070ac:	bf18      	it	ne
 80070ae:	2301      	movne	r3, #1
 80070b0:	0692      	lsls	r2, r2, #26
 80070b2:	d42b      	bmi.n	800710c <_printf_common+0xb0>
 80070b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070b8:	4649      	mov	r1, r9
 80070ba:	4638      	mov	r0, r7
 80070bc:	47c0      	blx	r8
 80070be:	3001      	adds	r0, #1
 80070c0:	d01e      	beq.n	8007100 <_printf_common+0xa4>
 80070c2:	6823      	ldr	r3, [r4, #0]
 80070c4:	68e5      	ldr	r5, [r4, #12]
 80070c6:	6832      	ldr	r2, [r6, #0]
 80070c8:	f003 0306 	and.w	r3, r3, #6
 80070cc:	2b04      	cmp	r3, #4
 80070ce:	bf08      	it	eq
 80070d0:	1aad      	subeq	r5, r5, r2
 80070d2:	68a3      	ldr	r3, [r4, #8]
 80070d4:	6922      	ldr	r2, [r4, #16]
 80070d6:	bf0c      	ite	eq
 80070d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070dc:	2500      	movne	r5, #0
 80070de:	4293      	cmp	r3, r2
 80070e0:	bfc4      	itt	gt
 80070e2:	1a9b      	subgt	r3, r3, r2
 80070e4:	18ed      	addgt	r5, r5, r3
 80070e6:	2600      	movs	r6, #0
 80070e8:	341a      	adds	r4, #26
 80070ea:	42b5      	cmp	r5, r6
 80070ec:	d11a      	bne.n	8007124 <_printf_common+0xc8>
 80070ee:	2000      	movs	r0, #0
 80070f0:	e008      	b.n	8007104 <_printf_common+0xa8>
 80070f2:	2301      	movs	r3, #1
 80070f4:	4652      	mov	r2, sl
 80070f6:	4649      	mov	r1, r9
 80070f8:	4638      	mov	r0, r7
 80070fa:	47c0      	blx	r8
 80070fc:	3001      	adds	r0, #1
 80070fe:	d103      	bne.n	8007108 <_printf_common+0xac>
 8007100:	f04f 30ff 	mov.w	r0, #4294967295
 8007104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007108:	3501      	adds	r5, #1
 800710a:	e7c6      	b.n	800709a <_printf_common+0x3e>
 800710c:	18e1      	adds	r1, r4, r3
 800710e:	1c5a      	adds	r2, r3, #1
 8007110:	2030      	movs	r0, #48	; 0x30
 8007112:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007116:	4422      	add	r2, r4
 8007118:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800711c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007120:	3302      	adds	r3, #2
 8007122:	e7c7      	b.n	80070b4 <_printf_common+0x58>
 8007124:	2301      	movs	r3, #1
 8007126:	4622      	mov	r2, r4
 8007128:	4649      	mov	r1, r9
 800712a:	4638      	mov	r0, r7
 800712c:	47c0      	blx	r8
 800712e:	3001      	adds	r0, #1
 8007130:	d0e6      	beq.n	8007100 <_printf_common+0xa4>
 8007132:	3601      	adds	r6, #1
 8007134:	e7d9      	b.n	80070ea <_printf_common+0x8e>
	...

08007138 <_printf_i>:
 8007138:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800713c:	7e0f      	ldrb	r7, [r1, #24]
 800713e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007140:	2f78      	cmp	r7, #120	; 0x78
 8007142:	4691      	mov	r9, r2
 8007144:	4680      	mov	r8, r0
 8007146:	460c      	mov	r4, r1
 8007148:	469a      	mov	sl, r3
 800714a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800714e:	d807      	bhi.n	8007160 <_printf_i+0x28>
 8007150:	2f62      	cmp	r7, #98	; 0x62
 8007152:	d80a      	bhi.n	800716a <_printf_i+0x32>
 8007154:	2f00      	cmp	r7, #0
 8007156:	f000 80d8 	beq.w	800730a <_printf_i+0x1d2>
 800715a:	2f58      	cmp	r7, #88	; 0x58
 800715c:	f000 80a3 	beq.w	80072a6 <_printf_i+0x16e>
 8007160:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007164:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007168:	e03a      	b.n	80071e0 <_printf_i+0xa8>
 800716a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800716e:	2b15      	cmp	r3, #21
 8007170:	d8f6      	bhi.n	8007160 <_printf_i+0x28>
 8007172:	a101      	add	r1, pc, #4	; (adr r1, 8007178 <_printf_i+0x40>)
 8007174:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007178:	080071d1 	.word	0x080071d1
 800717c:	080071e5 	.word	0x080071e5
 8007180:	08007161 	.word	0x08007161
 8007184:	08007161 	.word	0x08007161
 8007188:	08007161 	.word	0x08007161
 800718c:	08007161 	.word	0x08007161
 8007190:	080071e5 	.word	0x080071e5
 8007194:	08007161 	.word	0x08007161
 8007198:	08007161 	.word	0x08007161
 800719c:	08007161 	.word	0x08007161
 80071a0:	08007161 	.word	0x08007161
 80071a4:	080072f1 	.word	0x080072f1
 80071a8:	08007215 	.word	0x08007215
 80071ac:	080072d3 	.word	0x080072d3
 80071b0:	08007161 	.word	0x08007161
 80071b4:	08007161 	.word	0x08007161
 80071b8:	08007313 	.word	0x08007313
 80071bc:	08007161 	.word	0x08007161
 80071c0:	08007215 	.word	0x08007215
 80071c4:	08007161 	.word	0x08007161
 80071c8:	08007161 	.word	0x08007161
 80071cc:	080072db 	.word	0x080072db
 80071d0:	682b      	ldr	r3, [r5, #0]
 80071d2:	1d1a      	adds	r2, r3, #4
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	602a      	str	r2, [r5, #0]
 80071d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071e0:	2301      	movs	r3, #1
 80071e2:	e0a3      	b.n	800732c <_printf_i+0x1f4>
 80071e4:	6820      	ldr	r0, [r4, #0]
 80071e6:	6829      	ldr	r1, [r5, #0]
 80071e8:	0606      	lsls	r6, r0, #24
 80071ea:	f101 0304 	add.w	r3, r1, #4
 80071ee:	d50a      	bpl.n	8007206 <_printf_i+0xce>
 80071f0:	680e      	ldr	r6, [r1, #0]
 80071f2:	602b      	str	r3, [r5, #0]
 80071f4:	2e00      	cmp	r6, #0
 80071f6:	da03      	bge.n	8007200 <_printf_i+0xc8>
 80071f8:	232d      	movs	r3, #45	; 0x2d
 80071fa:	4276      	negs	r6, r6
 80071fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007200:	485e      	ldr	r0, [pc, #376]	; (800737c <_printf_i+0x244>)
 8007202:	230a      	movs	r3, #10
 8007204:	e019      	b.n	800723a <_printf_i+0x102>
 8007206:	680e      	ldr	r6, [r1, #0]
 8007208:	602b      	str	r3, [r5, #0]
 800720a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800720e:	bf18      	it	ne
 8007210:	b236      	sxthne	r6, r6
 8007212:	e7ef      	b.n	80071f4 <_printf_i+0xbc>
 8007214:	682b      	ldr	r3, [r5, #0]
 8007216:	6820      	ldr	r0, [r4, #0]
 8007218:	1d19      	adds	r1, r3, #4
 800721a:	6029      	str	r1, [r5, #0]
 800721c:	0601      	lsls	r1, r0, #24
 800721e:	d501      	bpl.n	8007224 <_printf_i+0xec>
 8007220:	681e      	ldr	r6, [r3, #0]
 8007222:	e002      	b.n	800722a <_printf_i+0xf2>
 8007224:	0646      	lsls	r6, r0, #25
 8007226:	d5fb      	bpl.n	8007220 <_printf_i+0xe8>
 8007228:	881e      	ldrh	r6, [r3, #0]
 800722a:	4854      	ldr	r0, [pc, #336]	; (800737c <_printf_i+0x244>)
 800722c:	2f6f      	cmp	r7, #111	; 0x6f
 800722e:	bf0c      	ite	eq
 8007230:	2308      	moveq	r3, #8
 8007232:	230a      	movne	r3, #10
 8007234:	2100      	movs	r1, #0
 8007236:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800723a:	6865      	ldr	r5, [r4, #4]
 800723c:	60a5      	str	r5, [r4, #8]
 800723e:	2d00      	cmp	r5, #0
 8007240:	bfa2      	ittt	ge
 8007242:	6821      	ldrge	r1, [r4, #0]
 8007244:	f021 0104 	bicge.w	r1, r1, #4
 8007248:	6021      	strge	r1, [r4, #0]
 800724a:	b90e      	cbnz	r6, 8007250 <_printf_i+0x118>
 800724c:	2d00      	cmp	r5, #0
 800724e:	d04d      	beq.n	80072ec <_printf_i+0x1b4>
 8007250:	4615      	mov	r5, r2
 8007252:	fbb6 f1f3 	udiv	r1, r6, r3
 8007256:	fb03 6711 	mls	r7, r3, r1, r6
 800725a:	5dc7      	ldrb	r7, [r0, r7]
 800725c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007260:	4637      	mov	r7, r6
 8007262:	42bb      	cmp	r3, r7
 8007264:	460e      	mov	r6, r1
 8007266:	d9f4      	bls.n	8007252 <_printf_i+0x11a>
 8007268:	2b08      	cmp	r3, #8
 800726a:	d10b      	bne.n	8007284 <_printf_i+0x14c>
 800726c:	6823      	ldr	r3, [r4, #0]
 800726e:	07de      	lsls	r6, r3, #31
 8007270:	d508      	bpl.n	8007284 <_printf_i+0x14c>
 8007272:	6923      	ldr	r3, [r4, #16]
 8007274:	6861      	ldr	r1, [r4, #4]
 8007276:	4299      	cmp	r1, r3
 8007278:	bfde      	ittt	le
 800727a:	2330      	movle	r3, #48	; 0x30
 800727c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007280:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007284:	1b52      	subs	r2, r2, r5
 8007286:	6122      	str	r2, [r4, #16]
 8007288:	f8cd a000 	str.w	sl, [sp]
 800728c:	464b      	mov	r3, r9
 800728e:	aa03      	add	r2, sp, #12
 8007290:	4621      	mov	r1, r4
 8007292:	4640      	mov	r0, r8
 8007294:	f7ff fee2 	bl	800705c <_printf_common>
 8007298:	3001      	adds	r0, #1
 800729a:	d14c      	bne.n	8007336 <_printf_i+0x1fe>
 800729c:	f04f 30ff 	mov.w	r0, #4294967295
 80072a0:	b004      	add	sp, #16
 80072a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072a6:	4835      	ldr	r0, [pc, #212]	; (800737c <_printf_i+0x244>)
 80072a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80072ac:	6829      	ldr	r1, [r5, #0]
 80072ae:	6823      	ldr	r3, [r4, #0]
 80072b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80072b4:	6029      	str	r1, [r5, #0]
 80072b6:	061d      	lsls	r5, r3, #24
 80072b8:	d514      	bpl.n	80072e4 <_printf_i+0x1ac>
 80072ba:	07df      	lsls	r7, r3, #31
 80072bc:	bf44      	itt	mi
 80072be:	f043 0320 	orrmi.w	r3, r3, #32
 80072c2:	6023      	strmi	r3, [r4, #0]
 80072c4:	b91e      	cbnz	r6, 80072ce <_printf_i+0x196>
 80072c6:	6823      	ldr	r3, [r4, #0]
 80072c8:	f023 0320 	bic.w	r3, r3, #32
 80072cc:	6023      	str	r3, [r4, #0]
 80072ce:	2310      	movs	r3, #16
 80072d0:	e7b0      	b.n	8007234 <_printf_i+0xfc>
 80072d2:	6823      	ldr	r3, [r4, #0]
 80072d4:	f043 0320 	orr.w	r3, r3, #32
 80072d8:	6023      	str	r3, [r4, #0]
 80072da:	2378      	movs	r3, #120	; 0x78
 80072dc:	4828      	ldr	r0, [pc, #160]	; (8007380 <_printf_i+0x248>)
 80072de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80072e2:	e7e3      	b.n	80072ac <_printf_i+0x174>
 80072e4:	0659      	lsls	r1, r3, #25
 80072e6:	bf48      	it	mi
 80072e8:	b2b6      	uxthmi	r6, r6
 80072ea:	e7e6      	b.n	80072ba <_printf_i+0x182>
 80072ec:	4615      	mov	r5, r2
 80072ee:	e7bb      	b.n	8007268 <_printf_i+0x130>
 80072f0:	682b      	ldr	r3, [r5, #0]
 80072f2:	6826      	ldr	r6, [r4, #0]
 80072f4:	6961      	ldr	r1, [r4, #20]
 80072f6:	1d18      	adds	r0, r3, #4
 80072f8:	6028      	str	r0, [r5, #0]
 80072fa:	0635      	lsls	r5, r6, #24
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	d501      	bpl.n	8007304 <_printf_i+0x1cc>
 8007300:	6019      	str	r1, [r3, #0]
 8007302:	e002      	b.n	800730a <_printf_i+0x1d2>
 8007304:	0670      	lsls	r0, r6, #25
 8007306:	d5fb      	bpl.n	8007300 <_printf_i+0x1c8>
 8007308:	8019      	strh	r1, [r3, #0]
 800730a:	2300      	movs	r3, #0
 800730c:	6123      	str	r3, [r4, #16]
 800730e:	4615      	mov	r5, r2
 8007310:	e7ba      	b.n	8007288 <_printf_i+0x150>
 8007312:	682b      	ldr	r3, [r5, #0]
 8007314:	1d1a      	adds	r2, r3, #4
 8007316:	602a      	str	r2, [r5, #0]
 8007318:	681d      	ldr	r5, [r3, #0]
 800731a:	6862      	ldr	r2, [r4, #4]
 800731c:	2100      	movs	r1, #0
 800731e:	4628      	mov	r0, r5
 8007320:	f7f8 ff5e 	bl	80001e0 <memchr>
 8007324:	b108      	cbz	r0, 800732a <_printf_i+0x1f2>
 8007326:	1b40      	subs	r0, r0, r5
 8007328:	6060      	str	r0, [r4, #4]
 800732a:	6863      	ldr	r3, [r4, #4]
 800732c:	6123      	str	r3, [r4, #16]
 800732e:	2300      	movs	r3, #0
 8007330:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007334:	e7a8      	b.n	8007288 <_printf_i+0x150>
 8007336:	6923      	ldr	r3, [r4, #16]
 8007338:	462a      	mov	r2, r5
 800733a:	4649      	mov	r1, r9
 800733c:	4640      	mov	r0, r8
 800733e:	47d0      	blx	sl
 8007340:	3001      	adds	r0, #1
 8007342:	d0ab      	beq.n	800729c <_printf_i+0x164>
 8007344:	6823      	ldr	r3, [r4, #0]
 8007346:	079b      	lsls	r3, r3, #30
 8007348:	d413      	bmi.n	8007372 <_printf_i+0x23a>
 800734a:	68e0      	ldr	r0, [r4, #12]
 800734c:	9b03      	ldr	r3, [sp, #12]
 800734e:	4298      	cmp	r0, r3
 8007350:	bfb8      	it	lt
 8007352:	4618      	movlt	r0, r3
 8007354:	e7a4      	b.n	80072a0 <_printf_i+0x168>
 8007356:	2301      	movs	r3, #1
 8007358:	4632      	mov	r2, r6
 800735a:	4649      	mov	r1, r9
 800735c:	4640      	mov	r0, r8
 800735e:	47d0      	blx	sl
 8007360:	3001      	adds	r0, #1
 8007362:	d09b      	beq.n	800729c <_printf_i+0x164>
 8007364:	3501      	adds	r5, #1
 8007366:	68e3      	ldr	r3, [r4, #12]
 8007368:	9903      	ldr	r1, [sp, #12]
 800736a:	1a5b      	subs	r3, r3, r1
 800736c:	42ab      	cmp	r3, r5
 800736e:	dcf2      	bgt.n	8007356 <_printf_i+0x21e>
 8007370:	e7eb      	b.n	800734a <_printf_i+0x212>
 8007372:	2500      	movs	r5, #0
 8007374:	f104 0619 	add.w	r6, r4, #25
 8007378:	e7f5      	b.n	8007366 <_printf_i+0x22e>
 800737a:	bf00      	nop
 800737c:	08009a1a 	.word	0x08009a1a
 8007380:	08009a2b 	.word	0x08009a2b

08007384 <sniprintf>:
 8007384:	b40c      	push	{r2, r3}
 8007386:	b530      	push	{r4, r5, lr}
 8007388:	4b17      	ldr	r3, [pc, #92]	; (80073e8 <sniprintf+0x64>)
 800738a:	1e0c      	subs	r4, r1, #0
 800738c:	681d      	ldr	r5, [r3, #0]
 800738e:	b09d      	sub	sp, #116	; 0x74
 8007390:	da08      	bge.n	80073a4 <sniprintf+0x20>
 8007392:	238b      	movs	r3, #139	; 0x8b
 8007394:	602b      	str	r3, [r5, #0]
 8007396:	f04f 30ff 	mov.w	r0, #4294967295
 800739a:	b01d      	add	sp, #116	; 0x74
 800739c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80073a0:	b002      	add	sp, #8
 80073a2:	4770      	bx	lr
 80073a4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80073a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80073ac:	bf14      	ite	ne
 80073ae:	f104 33ff 	addne.w	r3, r4, #4294967295
 80073b2:	4623      	moveq	r3, r4
 80073b4:	9304      	str	r3, [sp, #16]
 80073b6:	9307      	str	r3, [sp, #28]
 80073b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80073bc:	9002      	str	r0, [sp, #8]
 80073be:	9006      	str	r0, [sp, #24]
 80073c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80073c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80073c6:	ab21      	add	r3, sp, #132	; 0x84
 80073c8:	a902      	add	r1, sp, #8
 80073ca:	4628      	mov	r0, r5
 80073cc:	9301      	str	r3, [sp, #4]
 80073ce:	f001 fb79 	bl	8008ac4 <_svfiprintf_r>
 80073d2:	1c43      	adds	r3, r0, #1
 80073d4:	bfbc      	itt	lt
 80073d6:	238b      	movlt	r3, #139	; 0x8b
 80073d8:	602b      	strlt	r3, [r5, #0]
 80073da:	2c00      	cmp	r4, #0
 80073dc:	d0dd      	beq.n	800739a <sniprintf+0x16>
 80073de:	9b02      	ldr	r3, [sp, #8]
 80073e0:	2200      	movs	r2, #0
 80073e2:	701a      	strb	r2, [r3, #0]
 80073e4:	e7d9      	b.n	800739a <sniprintf+0x16>
 80073e6:	bf00      	nop
 80073e8:	2000001c 	.word	0x2000001c

080073ec <quorem>:
 80073ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073f0:	6903      	ldr	r3, [r0, #16]
 80073f2:	690c      	ldr	r4, [r1, #16]
 80073f4:	42a3      	cmp	r3, r4
 80073f6:	4607      	mov	r7, r0
 80073f8:	f2c0 8081 	blt.w	80074fe <quorem+0x112>
 80073fc:	3c01      	subs	r4, #1
 80073fe:	f101 0814 	add.w	r8, r1, #20
 8007402:	f100 0514 	add.w	r5, r0, #20
 8007406:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800740a:	9301      	str	r3, [sp, #4]
 800740c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007410:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007414:	3301      	adds	r3, #1
 8007416:	429a      	cmp	r2, r3
 8007418:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800741c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007420:	fbb2 f6f3 	udiv	r6, r2, r3
 8007424:	d331      	bcc.n	800748a <quorem+0x9e>
 8007426:	f04f 0e00 	mov.w	lr, #0
 800742a:	4640      	mov	r0, r8
 800742c:	46ac      	mov	ip, r5
 800742e:	46f2      	mov	sl, lr
 8007430:	f850 2b04 	ldr.w	r2, [r0], #4
 8007434:	b293      	uxth	r3, r2
 8007436:	fb06 e303 	mla	r3, r6, r3, lr
 800743a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800743e:	b29b      	uxth	r3, r3
 8007440:	ebaa 0303 	sub.w	r3, sl, r3
 8007444:	f8dc a000 	ldr.w	sl, [ip]
 8007448:	0c12      	lsrs	r2, r2, #16
 800744a:	fa13 f38a 	uxtah	r3, r3, sl
 800744e:	fb06 e202 	mla	r2, r6, r2, lr
 8007452:	9300      	str	r3, [sp, #0]
 8007454:	9b00      	ldr	r3, [sp, #0]
 8007456:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800745a:	b292      	uxth	r2, r2
 800745c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007460:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007464:	f8bd 3000 	ldrh.w	r3, [sp]
 8007468:	4581      	cmp	r9, r0
 800746a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800746e:	f84c 3b04 	str.w	r3, [ip], #4
 8007472:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007476:	d2db      	bcs.n	8007430 <quorem+0x44>
 8007478:	f855 300b 	ldr.w	r3, [r5, fp]
 800747c:	b92b      	cbnz	r3, 800748a <quorem+0x9e>
 800747e:	9b01      	ldr	r3, [sp, #4]
 8007480:	3b04      	subs	r3, #4
 8007482:	429d      	cmp	r5, r3
 8007484:	461a      	mov	r2, r3
 8007486:	d32e      	bcc.n	80074e6 <quorem+0xfa>
 8007488:	613c      	str	r4, [r7, #16]
 800748a:	4638      	mov	r0, r7
 800748c:	f001 f8c6 	bl	800861c <__mcmp>
 8007490:	2800      	cmp	r0, #0
 8007492:	db24      	blt.n	80074de <quorem+0xf2>
 8007494:	3601      	adds	r6, #1
 8007496:	4628      	mov	r0, r5
 8007498:	f04f 0c00 	mov.w	ip, #0
 800749c:	f858 2b04 	ldr.w	r2, [r8], #4
 80074a0:	f8d0 e000 	ldr.w	lr, [r0]
 80074a4:	b293      	uxth	r3, r2
 80074a6:	ebac 0303 	sub.w	r3, ip, r3
 80074aa:	0c12      	lsrs	r2, r2, #16
 80074ac:	fa13 f38e 	uxtah	r3, r3, lr
 80074b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80074b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80074be:	45c1      	cmp	r9, r8
 80074c0:	f840 3b04 	str.w	r3, [r0], #4
 80074c4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80074c8:	d2e8      	bcs.n	800749c <quorem+0xb0>
 80074ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80074ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80074d2:	b922      	cbnz	r2, 80074de <quorem+0xf2>
 80074d4:	3b04      	subs	r3, #4
 80074d6:	429d      	cmp	r5, r3
 80074d8:	461a      	mov	r2, r3
 80074da:	d30a      	bcc.n	80074f2 <quorem+0x106>
 80074dc:	613c      	str	r4, [r7, #16]
 80074de:	4630      	mov	r0, r6
 80074e0:	b003      	add	sp, #12
 80074e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074e6:	6812      	ldr	r2, [r2, #0]
 80074e8:	3b04      	subs	r3, #4
 80074ea:	2a00      	cmp	r2, #0
 80074ec:	d1cc      	bne.n	8007488 <quorem+0x9c>
 80074ee:	3c01      	subs	r4, #1
 80074f0:	e7c7      	b.n	8007482 <quorem+0x96>
 80074f2:	6812      	ldr	r2, [r2, #0]
 80074f4:	3b04      	subs	r3, #4
 80074f6:	2a00      	cmp	r2, #0
 80074f8:	d1f0      	bne.n	80074dc <quorem+0xf0>
 80074fa:	3c01      	subs	r4, #1
 80074fc:	e7eb      	b.n	80074d6 <quorem+0xea>
 80074fe:	2000      	movs	r0, #0
 8007500:	e7ee      	b.n	80074e0 <quorem+0xf4>
 8007502:	0000      	movs	r0, r0
 8007504:	0000      	movs	r0, r0
	...

08007508 <_dtoa_r>:
 8007508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800750c:	ed2d 8b04 	vpush	{d8-d9}
 8007510:	ec57 6b10 	vmov	r6, r7, d0
 8007514:	b093      	sub	sp, #76	; 0x4c
 8007516:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007518:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800751c:	9106      	str	r1, [sp, #24]
 800751e:	ee10 aa10 	vmov	sl, s0
 8007522:	4604      	mov	r4, r0
 8007524:	9209      	str	r2, [sp, #36]	; 0x24
 8007526:	930c      	str	r3, [sp, #48]	; 0x30
 8007528:	46bb      	mov	fp, r7
 800752a:	b975      	cbnz	r5, 800754a <_dtoa_r+0x42>
 800752c:	2010      	movs	r0, #16
 800752e:	f000 fddd 	bl	80080ec <malloc>
 8007532:	4602      	mov	r2, r0
 8007534:	6260      	str	r0, [r4, #36]	; 0x24
 8007536:	b920      	cbnz	r0, 8007542 <_dtoa_r+0x3a>
 8007538:	4ba7      	ldr	r3, [pc, #668]	; (80077d8 <_dtoa_r+0x2d0>)
 800753a:	21ea      	movs	r1, #234	; 0xea
 800753c:	48a7      	ldr	r0, [pc, #668]	; (80077dc <_dtoa_r+0x2d4>)
 800753e:	f001 fbd1 	bl	8008ce4 <__assert_func>
 8007542:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007546:	6005      	str	r5, [r0, #0]
 8007548:	60c5      	str	r5, [r0, #12]
 800754a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800754c:	6819      	ldr	r1, [r3, #0]
 800754e:	b151      	cbz	r1, 8007566 <_dtoa_r+0x5e>
 8007550:	685a      	ldr	r2, [r3, #4]
 8007552:	604a      	str	r2, [r1, #4]
 8007554:	2301      	movs	r3, #1
 8007556:	4093      	lsls	r3, r2
 8007558:	608b      	str	r3, [r1, #8]
 800755a:	4620      	mov	r0, r4
 800755c:	f000 fe1c 	bl	8008198 <_Bfree>
 8007560:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007562:	2200      	movs	r2, #0
 8007564:	601a      	str	r2, [r3, #0]
 8007566:	1e3b      	subs	r3, r7, #0
 8007568:	bfaa      	itet	ge
 800756a:	2300      	movge	r3, #0
 800756c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007570:	f8c8 3000 	strge.w	r3, [r8]
 8007574:	4b9a      	ldr	r3, [pc, #616]	; (80077e0 <_dtoa_r+0x2d8>)
 8007576:	bfbc      	itt	lt
 8007578:	2201      	movlt	r2, #1
 800757a:	f8c8 2000 	strlt.w	r2, [r8]
 800757e:	ea33 030b 	bics.w	r3, r3, fp
 8007582:	d11b      	bne.n	80075bc <_dtoa_r+0xb4>
 8007584:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007586:	f242 730f 	movw	r3, #9999	; 0x270f
 800758a:	6013      	str	r3, [r2, #0]
 800758c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007590:	4333      	orrs	r3, r6
 8007592:	f000 8592 	beq.w	80080ba <_dtoa_r+0xbb2>
 8007596:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007598:	b963      	cbnz	r3, 80075b4 <_dtoa_r+0xac>
 800759a:	4b92      	ldr	r3, [pc, #584]	; (80077e4 <_dtoa_r+0x2dc>)
 800759c:	e022      	b.n	80075e4 <_dtoa_r+0xdc>
 800759e:	4b92      	ldr	r3, [pc, #584]	; (80077e8 <_dtoa_r+0x2e0>)
 80075a0:	9301      	str	r3, [sp, #4]
 80075a2:	3308      	adds	r3, #8
 80075a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80075a6:	6013      	str	r3, [r2, #0]
 80075a8:	9801      	ldr	r0, [sp, #4]
 80075aa:	b013      	add	sp, #76	; 0x4c
 80075ac:	ecbd 8b04 	vpop	{d8-d9}
 80075b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075b4:	4b8b      	ldr	r3, [pc, #556]	; (80077e4 <_dtoa_r+0x2dc>)
 80075b6:	9301      	str	r3, [sp, #4]
 80075b8:	3303      	adds	r3, #3
 80075ba:	e7f3      	b.n	80075a4 <_dtoa_r+0x9c>
 80075bc:	2200      	movs	r2, #0
 80075be:	2300      	movs	r3, #0
 80075c0:	4650      	mov	r0, sl
 80075c2:	4659      	mov	r1, fp
 80075c4:	f7f9 fa80 	bl	8000ac8 <__aeabi_dcmpeq>
 80075c8:	ec4b ab19 	vmov	d9, sl, fp
 80075cc:	4680      	mov	r8, r0
 80075ce:	b158      	cbz	r0, 80075e8 <_dtoa_r+0xe0>
 80075d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075d2:	2301      	movs	r3, #1
 80075d4:	6013      	str	r3, [r2, #0]
 80075d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075d8:	2b00      	cmp	r3, #0
 80075da:	f000 856b 	beq.w	80080b4 <_dtoa_r+0xbac>
 80075de:	4883      	ldr	r0, [pc, #524]	; (80077ec <_dtoa_r+0x2e4>)
 80075e0:	6018      	str	r0, [r3, #0]
 80075e2:	1e43      	subs	r3, r0, #1
 80075e4:	9301      	str	r3, [sp, #4]
 80075e6:	e7df      	b.n	80075a8 <_dtoa_r+0xa0>
 80075e8:	ec4b ab10 	vmov	d0, sl, fp
 80075ec:	aa10      	add	r2, sp, #64	; 0x40
 80075ee:	a911      	add	r1, sp, #68	; 0x44
 80075f0:	4620      	mov	r0, r4
 80075f2:	f001 f8b9 	bl	8008768 <__d2b>
 80075f6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80075fa:	ee08 0a10 	vmov	s16, r0
 80075fe:	2d00      	cmp	r5, #0
 8007600:	f000 8084 	beq.w	800770c <_dtoa_r+0x204>
 8007604:	ee19 3a90 	vmov	r3, s19
 8007608:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800760c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007610:	4656      	mov	r6, sl
 8007612:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007616:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800761a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800761e:	4b74      	ldr	r3, [pc, #464]	; (80077f0 <_dtoa_r+0x2e8>)
 8007620:	2200      	movs	r2, #0
 8007622:	4630      	mov	r0, r6
 8007624:	4639      	mov	r1, r7
 8007626:	f7f8 fe2f 	bl	8000288 <__aeabi_dsub>
 800762a:	a365      	add	r3, pc, #404	; (adr r3, 80077c0 <_dtoa_r+0x2b8>)
 800762c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007630:	f7f8 ffe2 	bl	80005f8 <__aeabi_dmul>
 8007634:	a364      	add	r3, pc, #400	; (adr r3, 80077c8 <_dtoa_r+0x2c0>)
 8007636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800763a:	f7f8 fe27 	bl	800028c <__adddf3>
 800763e:	4606      	mov	r6, r0
 8007640:	4628      	mov	r0, r5
 8007642:	460f      	mov	r7, r1
 8007644:	f7f8 ff6e 	bl	8000524 <__aeabi_i2d>
 8007648:	a361      	add	r3, pc, #388	; (adr r3, 80077d0 <_dtoa_r+0x2c8>)
 800764a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764e:	f7f8 ffd3 	bl	80005f8 <__aeabi_dmul>
 8007652:	4602      	mov	r2, r0
 8007654:	460b      	mov	r3, r1
 8007656:	4630      	mov	r0, r6
 8007658:	4639      	mov	r1, r7
 800765a:	f7f8 fe17 	bl	800028c <__adddf3>
 800765e:	4606      	mov	r6, r0
 8007660:	460f      	mov	r7, r1
 8007662:	f7f9 fa79 	bl	8000b58 <__aeabi_d2iz>
 8007666:	2200      	movs	r2, #0
 8007668:	9000      	str	r0, [sp, #0]
 800766a:	2300      	movs	r3, #0
 800766c:	4630      	mov	r0, r6
 800766e:	4639      	mov	r1, r7
 8007670:	f7f9 fa34 	bl	8000adc <__aeabi_dcmplt>
 8007674:	b150      	cbz	r0, 800768c <_dtoa_r+0x184>
 8007676:	9800      	ldr	r0, [sp, #0]
 8007678:	f7f8 ff54 	bl	8000524 <__aeabi_i2d>
 800767c:	4632      	mov	r2, r6
 800767e:	463b      	mov	r3, r7
 8007680:	f7f9 fa22 	bl	8000ac8 <__aeabi_dcmpeq>
 8007684:	b910      	cbnz	r0, 800768c <_dtoa_r+0x184>
 8007686:	9b00      	ldr	r3, [sp, #0]
 8007688:	3b01      	subs	r3, #1
 800768a:	9300      	str	r3, [sp, #0]
 800768c:	9b00      	ldr	r3, [sp, #0]
 800768e:	2b16      	cmp	r3, #22
 8007690:	d85a      	bhi.n	8007748 <_dtoa_r+0x240>
 8007692:	9a00      	ldr	r2, [sp, #0]
 8007694:	4b57      	ldr	r3, [pc, #348]	; (80077f4 <_dtoa_r+0x2ec>)
 8007696:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800769a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800769e:	ec51 0b19 	vmov	r0, r1, d9
 80076a2:	f7f9 fa1b 	bl	8000adc <__aeabi_dcmplt>
 80076a6:	2800      	cmp	r0, #0
 80076a8:	d050      	beq.n	800774c <_dtoa_r+0x244>
 80076aa:	9b00      	ldr	r3, [sp, #0]
 80076ac:	3b01      	subs	r3, #1
 80076ae:	9300      	str	r3, [sp, #0]
 80076b0:	2300      	movs	r3, #0
 80076b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80076b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80076b6:	1b5d      	subs	r5, r3, r5
 80076b8:	1e6b      	subs	r3, r5, #1
 80076ba:	9305      	str	r3, [sp, #20]
 80076bc:	bf45      	ittet	mi
 80076be:	f1c5 0301 	rsbmi	r3, r5, #1
 80076c2:	9304      	strmi	r3, [sp, #16]
 80076c4:	2300      	movpl	r3, #0
 80076c6:	2300      	movmi	r3, #0
 80076c8:	bf4c      	ite	mi
 80076ca:	9305      	strmi	r3, [sp, #20]
 80076cc:	9304      	strpl	r3, [sp, #16]
 80076ce:	9b00      	ldr	r3, [sp, #0]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	db3d      	blt.n	8007750 <_dtoa_r+0x248>
 80076d4:	9b05      	ldr	r3, [sp, #20]
 80076d6:	9a00      	ldr	r2, [sp, #0]
 80076d8:	920a      	str	r2, [sp, #40]	; 0x28
 80076da:	4413      	add	r3, r2
 80076dc:	9305      	str	r3, [sp, #20]
 80076de:	2300      	movs	r3, #0
 80076e0:	9307      	str	r3, [sp, #28]
 80076e2:	9b06      	ldr	r3, [sp, #24]
 80076e4:	2b09      	cmp	r3, #9
 80076e6:	f200 8089 	bhi.w	80077fc <_dtoa_r+0x2f4>
 80076ea:	2b05      	cmp	r3, #5
 80076ec:	bfc4      	itt	gt
 80076ee:	3b04      	subgt	r3, #4
 80076f0:	9306      	strgt	r3, [sp, #24]
 80076f2:	9b06      	ldr	r3, [sp, #24]
 80076f4:	f1a3 0302 	sub.w	r3, r3, #2
 80076f8:	bfcc      	ite	gt
 80076fa:	2500      	movgt	r5, #0
 80076fc:	2501      	movle	r5, #1
 80076fe:	2b03      	cmp	r3, #3
 8007700:	f200 8087 	bhi.w	8007812 <_dtoa_r+0x30a>
 8007704:	e8df f003 	tbb	[pc, r3]
 8007708:	59383a2d 	.word	0x59383a2d
 800770c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007710:	441d      	add	r5, r3
 8007712:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007716:	2b20      	cmp	r3, #32
 8007718:	bfc1      	itttt	gt
 800771a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800771e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007722:	fa0b f303 	lslgt.w	r3, fp, r3
 8007726:	fa26 f000 	lsrgt.w	r0, r6, r0
 800772a:	bfda      	itte	le
 800772c:	f1c3 0320 	rsble	r3, r3, #32
 8007730:	fa06 f003 	lslle.w	r0, r6, r3
 8007734:	4318      	orrgt	r0, r3
 8007736:	f7f8 fee5 	bl	8000504 <__aeabi_ui2d>
 800773a:	2301      	movs	r3, #1
 800773c:	4606      	mov	r6, r0
 800773e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007742:	3d01      	subs	r5, #1
 8007744:	930e      	str	r3, [sp, #56]	; 0x38
 8007746:	e76a      	b.n	800761e <_dtoa_r+0x116>
 8007748:	2301      	movs	r3, #1
 800774a:	e7b2      	b.n	80076b2 <_dtoa_r+0x1aa>
 800774c:	900b      	str	r0, [sp, #44]	; 0x2c
 800774e:	e7b1      	b.n	80076b4 <_dtoa_r+0x1ac>
 8007750:	9b04      	ldr	r3, [sp, #16]
 8007752:	9a00      	ldr	r2, [sp, #0]
 8007754:	1a9b      	subs	r3, r3, r2
 8007756:	9304      	str	r3, [sp, #16]
 8007758:	4253      	negs	r3, r2
 800775a:	9307      	str	r3, [sp, #28]
 800775c:	2300      	movs	r3, #0
 800775e:	930a      	str	r3, [sp, #40]	; 0x28
 8007760:	e7bf      	b.n	80076e2 <_dtoa_r+0x1da>
 8007762:	2300      	movs	r3, #0
 8007764:	9308      	str	r3, [sp, #32]
 8007766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007768:	2b00      	cmp	r3, #0
 800776a:	dc55      	bgt.n	8007818 <_dtoa_r+0x310>
 800776c:	2301      	movs	r3, #1
 800776e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007772:	461a      	mov	r2, r3
 8007774:	9209      	str	r2, [sp, #36]	; 0x24
 8007776:	e00c      	b.n	8007792 <_dtoa_r+0x28a>
 8007778:	2301      	movs	r3, #1
 800777a:	e7f3      	b.n	8007764 <_dtoa_r+0x25c>
 800777c:	2300      	movs	r3, #0
 800777e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007780:	9308      	str	r3, [sp, #32]
 8007782:	9b00      	ldr	r3, [sp, #0]
 8007784:	4413      	add	r3, r2
 8007786:	9302      	str	r3, [sp, #8]
 8007788:	3301      	adds	r3, #1
 800778a:	2b01      	cmp	r3, #1
 800778c:	9303      	str	r3, [sp, #12]
 800778e:	bfb8      	it	lt
 8007790:	2301      	movlt	r3, #1
 8007792:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007794:	2200      	movs	r2, #0
 8007796:	6042      	str	r2, [r0, #4]
 8007798:	2204      	movs	r2, #4
 800779a:	f102 0614 	add.w	r6, r2, #20
 800779e:	429e      	cmp	r6, r3
 80077a0:	6841      	ldr	r1, [r0, #4]
 80077a2:	d93d      	bls.n	8007820 <_dtoa_r+0x318>
 80077a4:	4620      	mov	r0, r4
 80077a6:	f000 fcb7 	bl	8008118 <_Balloc>
 80077aa:	9001      	str	r0, [sp, #4]
 80077ac:	2800      	cmp	r0, #0
 80077ae:	d13b      	bne.n	8007828 <_dtoa_r+0x320>
 80077b0:	4b11      	ldr	r3, [pc, #68]	; (80077f8 <_dtoa_r+0x2f0>)
 80077b2:	4602      	mov	r2, r0
 80077b4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80077b8:	e6c0      	b.n	800753c <_dtoa_r+0x34>
 80077ba:	2301      	movs	r3, #1
 80077bc:	e7df      	b.n	800777e <_dtoa_r+0x276>
 80077be:	bf00      	nop
 80077c0:	636f4361 	.word	0x636f4361
 80077c4:	3fd287a7 	.word	0x3fd287a7
 80077c8:	8b60c8b3 	.word	0x8b60c8b3
 80077cc:	3fc68a28 	.word	0x3fc68a28
 80077d0:	509f79fb 	.word	0x509f79fb
 80077d4:	3fd34413 	.word	0x3fd34413
 80077d8:	08009a49 	.word	0x08009a49
 80077dc:	08009a60 	.word	0x08009a60
 80077e0:	7ff00000 	.word	0x7ff00000
 80077e4:	08009a45 	.word	0x08009a45
 80077e8:	08009a3c 	.word	0x08009a3c
 80077ec:	08009a19 	.word	0x08009a19
 80077f0:	3ff80000 	.word	0x3ff80000
 80077f4:	08009b50 	.word	0x08009b50
 80077f8:	08009abb 	.word	0x08009abb
 80077fc:	2501      	movs	r5, #1
 80077fe:	2300      	movs	r3, #0
 8007800:	9306      	str	r3, [sp, #24]
 8007802:	9508      	str	r5, [sp, #32]
 8007804:	f04f 33ff 	mov.w	r3, #4294967295
 8007808:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800780c:	2200      	movs	r2, #0
 800780e:	2312      	movs	r3, #18
 8007810:	e7b0      	b.n	8007774 <_dtoa_r+0x26c>
 8007812:	2301      	movs	r3, #1
 8007814:	9308      	str	r3, [sp, #32]
 8007816:	e7f5      	b.n	8007804 <_dtoa_r+0x2fc>
 8007818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800781a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800781e:	e7b8      	b.n	8007792 <_dtoa_r+0x28a>
 8007820:	3101      	adds	r1, #1
 8007822:	6041      	str	r1, [r0, #4]
 8007824:	0052      	lsls	r2, r2, #1
 8007826:	e7b8      	b.n	800779a <_dtoa_r+0x292>
 8007828:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800782a:	9a01      	ldr	r2, [sp, #4]
 800782c:	601a      	str	r2, [r3, #0]
 800782e:	9b03      	ldr	r3, [sp, #12]
 8007830:	2b0e      	cmp	r3, #14
 8007832:	f200 809d 	bhi.w	8007970 <_dtoa_r+0x468>
 8007836:	2d00      	cmp	r5, #0
 8007838:	f000 809a 	beq.w	8007970 <_dtoa_r+0x468>
 800783c:	9b00      	ldr	r3, [sp, #0]
 800783e:	2b00      	cmp	r3, #0
 8007840:	dd32      	ble.n	80078a8 <_dtoa_r+0x3a0>
 8007842:	4ab7      	ldr	r2, [pc, #732]	; (8007b20 <_dtoa_r+0x618>)
 8007844:	f003 030f 	and.w	r3, r3, #15
 8007848:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800784c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007850:	9b00      	ldr	r3, [sp, #0]
 8007852:	05d8      	lsls	r0, r3, #23
 8007854:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007858:	d516      	bpl.n	8007888 <_dtoa_r+0x380>
 800785a:	4bb2      	ldr	r3, [pc, #712]	; (8007b24 <_dtoa_r+0x61c>)
 800785c:	ec51 0b19 	vmov	r0, r1, d9
 8007860:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007864:	f7f8 fff2 	bl	800084c <__aeabi_ddiv>
 8007868:	f007 070f 	and.w	r7, r7, #15
 800786c:	4682      	mov	sl, r0
 800786e:	468b      	mov	fp, r1
 8007870:	2503      	movs	r5, #3
 8007872:	4eac      	ldr	r6, [pc, #688]	; (8007b24 <_dtoa_r+0x61c>)
 8007874:	b957      	cbnz	r7, 800788c <_dtoa_r+0x384>
 8007876:	4642      	mov	r2, r8
 8007878:	464b      	mov	r3, r9
 800787a:	4650      	mov	r0, sl
 800787c:	4659      	mov	r1, fp
 800787e:	f7f8 ffe5 	bl	800084c <__aeabi_ddiv>
 8007882:	4682      	mov	sl, r0
 8007884:	468b      	mov	fp, r1
 8007886:	e028      	b.n	80078da <_dtoa_r+0x3d2>
 8007888:	2502      	movs	r5, #2
 800788a:	e7f2      	b.n	8007872 <_dtoa_r+0x36a>
 800788c:	07f9      	lsls	r1, r7, #31
 800788e:	d508      	bpl.n	80078a2 <_dtoa_r+0x39a>
 8007890:	4640      	mov	r0, r8
 8007892:	4649      	mov	r1, r9
 8007894:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007898:	f7f8 feae 	bl	80005f8 <__aeabi_dmul>
 800789c:	3501      	adds	r5, #1
 800789e:	4680      	mov	r8, r0
 80078a0:	4689      	mov	r9, r1
 80078a2:	107f      	asrs	r7, r7, #1
 80078a4:	3608      	adds	r6, #8
 80078a6:	e7e5      	b.n	8007874 <_dtoa_r+0x36c>
 80078a8:	f000 809b 	beq.w	80079e2 <_dtoa_r+0x4da>
 80078ac:	9b00      	ldr	r3, [sp, #0]
 80078ae:	4f9d      	ldr	r7, [pc, #628]	; (8007b24 <_dtoa_r+0x61c>)
 80078b0:	425e      	negs	r6, r3
 80078b2:	4b9b      	ldr	r3, [pc, #620]	; (8007b20 <_dtoa_r+0x618>)
 80078b4:	f006 020f 	and.w	r2, r6, #15
 80078b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c0:	ec51 0b19 	vmov	r0, r1, d9
 80078c4:	f7f8 fe98 	bl	80005f8 <__aeabi_dmul>
 80078c8:	1136      	asrs	r6, r6, #4
 80078ca:	4682      	mov	sl, r0
 80078cc:	468b      	mov	fp, r1
 80078ce:	2300      	movs	r3, #0
 80078d0:	2502      	movs	r5, #2
 80078d2:	2e00      	cmp	r6, #0
 80078d4:	d17a      	bne.n	80079cc <_dtoa_r+0x4c4>
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d1d3      	bne.n	8007882 <_dtoa_r+0x37a>
 80078da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078dc:	2b00      	cmp	r3, #0
 80078de:	f000 8082 	beq.w	80079e6 <_dtoa_r+0x4de>
 80078e2:	4b91      	ldr	r3, [pc, #580]	; (8007b28 <_dtoa_r+0x620>)
 80078e4:	2200      	movs	r2, #0
 80078e6:	4650      	mov	r0, sl
 80078e8:	4659      	mov	r1, fp
 80078ea:	f7f9 f8f7 	bl	8000adc <__aeabi_dcmplt>
 80078ee:	2800      	cmp	r0, #0
 80078f0:	d079      	beq.n	80079e6 <_dtoa_r+0x4de>
 80078f2:	9b03      	ldr	r3, [sp, #12]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d076      	beq.n	80079e6 <_dtoa_r+0x4de>
 80078f8:	9b02      	ldr	r3, [sp, #8]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	dd36      	ble.n	800796c <_dtoa_r+0x464>
 80078fe:	9b00      	ldr	r3, [sp, #0]
 8007900:	4650      	mov	r0, sl
 8007902:	4659      	mov	r1, fp
 8007904:	1e5f      	subs	r7, r3, #1
 8007906:	2200      	movs	r2, #0
 8007908:	4b88      	ldr	r3, [pc, #544]	; (8007b2c <_dtoa_r+0x624>)
 800790a:	f7f8 fe75 	bl	80005f8 <__aeabi_dmul>
 800790e:	9e02      	ldr	r6, [sp, #8]
 8007910:	4682      	mov	sl, r0
 8007912:	468b      	mov	fp, r1
 8007914:	3501      	adds	r5, #1
 8007916:	4628      	mov	r0, r5
 8007918:	f7f8 fe04 	bl	8000524 <__aeabi_i2d>
 800791c:	4652      	mov	r2, sl
 800791e:	465b      	mov	r3, fp
 8007920:	f7f8 fe6a 	bl	80005f8 <__aeabi_dmul>
 8007924:	4b82      	ldr	r3, [pc, #520]	; (8007b30 <_dtoa_r+0x628>)
 8007926:	2200      	movs	r2, #0
 8007928:	f7f8 fcb0 	bl	800028c <__adddf3>
 800792c:	46d0      	mov	r8, sl
 800792e:	46d9      	mov	r9, fp
 8007930:	4682      	mov	sl, r0
 8007932:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007936:	2e00      	cmp	r6, #0
 8007938:	d158      	bne.n	80079ec <_dtoa_r+0x4e4>
 800793a:	4b7e      	ldr	r3, [pc, #504]	; (8007b34 <_dtoa_r+0x62c>)
 800793c:	2200      	movs	r2, #0
 800793e:	4640      	mov	r0, r8
 8007940:	4649      	mov	r1, r9
 8007942:	f7f8 fca1 	bl	8000288 <__aeabi_dsub>
 8007946:	4652      	mov	r2, sl
 8007948:	465b      	mov	r3, fp
 800794a:	4680      	mov	r8, r0
 800794c:	4689      	mov	r9, r1
 800794e:	f7f9 f8e3 	bl	8000b18 <__aeabi_dcmpgt>
 8007952:	2800      	cmp	r0, #0
 8007954:	f040 8295 	bne.w	8007e82 <_dtoa_r+0x97a>
 8007958:	4652      	mov	r2, sl
 800795a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800795e:	4640      	mov	r0, r8
 8007960:	4649      	mov	r1, r9
 8007962:	f7f9 f8bb 	bl	8000adc <__aeabi_dcmplt>
 8007966:	2800      	cmp	r0, #0
 8007968:	f040 8289 	bne.w	8007e7e <_dtoa_r+0x976>
 800796c:	ec5b ab19 	vmov	sl, fp, d9
 8007970:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007972:	2b00      	cmp	r3, #0
 8007974:	f2c0 8148 	blt.w	8007c08 <_dtoa_r+0x700>
 8007978:	9a00      	ldr	r2, [sp, #0]
 800797a:	2a0e      	cmp	r2, #14
 800797c:	f300 8144 	bgt.w	8007c08 <_dtoa_r+0x700>
 8007980:	4b67      	ldr	r3, [pc, #412]	; (8007b20 <_dtoa_r+0x618>)
 8007982:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007986:	e9d3 8900 	ldrd	r8, r9, [r3]
 800798a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800798c:	2b00      	cmp	r3, #0
 800798e:	f280 80d5 	bge.w	8007b3c <_dtoa_r+0x634>
 8007992:	9b03      	ldr	r3, [sp, #12]
 8007994:	2b00      	cmp	r3, #0
 8007996:	f300 80d1 	bgt.w	8007b3c <_dtoa_r+0x634>
 800799a:	f040 826f 	bne.w	8007e7c <_dtoa_r+0x974>
 800799e:	4b65      	ldr	r3, [pc, #404]	; (8007b34 <_dtoa_r+0x62c>)
 80079a0:	2200      	movs	r2, #0
 80079a2:	4640      	mov	r0, r8
 80079a4:	4649      	mov	r1, r9
 80079a6:	f7f8 fe27 	bl	80005f8 <__aeabi_dmul>
 80079aa:	4652      	mov	r2, sl
 80079ac:	465b      	mov	r3, fp
 80079ae:	f7f9 f8a9 	bl	8000b04 <__aeabi_dcmpge>
 80079b2:	9e03      	ldr	r6, [sp, #12]
 80079b4:	4637      	mov	r7, r6
 80079b6:	2800      	cmp	r0, #0
 80079b8:	f040 8245 	bne.w	8007e46 <_dtoa_r+0x93e>
 80079bc:	9d01      	ldr	r5, [sp, #4]
 80079be:	2331      	movs	r3, #49	; 0x31
 80079c0:	f805 3b01 	strb.w	r3, [r5], #1
 80079c4:	9b00      	ldr	r3, [sp, #0]
 80079c6:	3301      	adds	r3, #1
 80079c8:	9300      	str	r3, [sp, #0]
 80079ca:	e240      	b.n	8007e4e <_dtoa_r+0x946>
 80079cc:	07f2      	lsls	r2, r6, #31
 80079ce:	d505      	bpl.n	80079dc <_dtoa_r+0x4d4>
 80079d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079d4:	f7f8 fe10 	bl	80005f8 <__aeabi_dmul>
 80079d8:	3501      	adds	r5, #1
 80079da:	2301      	movs	r3, #1
 80079dc:	1076      	asrs	r6, r6, #1
 80079de:	3708      	adds	r7, #8
 80079e0:	e777      	b.n	80078d2 <_dtoa_r+0x3ca>
 80079e2:	2502      	movs	r5, #2
 80079e4:	e779      	b.n	80078da <_dtoa_r+0x3d2>
 80079e6:	9f00      	ldr	r7, [sp, #0]
 80079e8:	9e03      	ldr	r6, [sp, #12]
 80079ea:	e794      	b.n	8007916 <_dtoa_r+0x40e>
 80079ec:	9901      	ldr	r1, [sp, #4]
 80079ee:	4b4c      	ldr	r3, [pc, #304]	; (8007b20 <_dtoa_r+0x618>)
 80079f0:	4431      	add	r1, r6
 80079f2:	910d      	str	r1, [sp, #52]	; 0x34
 80079f4:	9908      	ldr	r1, [sp, #32]
 80079f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80079fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80079fe:	2900      	cmp	r1, #0
 8007a00:	d043      	beq.n	8007a8a <_dtoa_r+0x582>
 8007a02:	494d      	ldr	r1, [pc, #308]	; (8007b38 <_dtoa_r+0x630>)
 8007a04:	2000      	movs	r0, #0
 8007a06:	f7f8 ff21 	bl	800084c <__aeabi_ddiv>
 8007a0a:	4652      	mov	r2, sl
 8007a0c:	465b      	mov	r3, fp
 8007a0e:	f7f8 fc3b 	bl	8000288 <__aeabi_dsub>
 8007a12:	9d01      	ldr	r5, [sp, #4]
 8007a14:	4682      	mov	sl, r0
 8007a16:	468b      	mov	fp, r1
 8007a18:	4649      	mov	r1, r9
 8007a1a:	4640      	mov	r0, r8
 8007a1c:	f7f9 f89c 	bl	8000b58 <__aeabi_d2iz>
 8007a20:	4606      	mov	r6, r0
 8007a22:	f7f8 fd7f 	bl	8000524 <__aeabi_i2d>
 8007a26:	4602      	mov	r2, r0
 8007a28:	460b      	mov	r3, r1
 8007a2a:	4640      	mov	r0, r8
 8007a2c:	4649      	mov	r1, r9
 8007a2e:	f7f8 fc2b 	bl	8000288 <__aeabi_dsub>
 8007a32:	3630      	adds	r6, #48	; 0x30
 8007a34:	f805 6b01 	strb.w	r6, [r5], #1
 8007a38:	4652      	mov	r2, sl
 8007a3a:	465b      	mov	r3, fp
 8007a3c:	4680      	mov	r8, r0
 8007a3e:	4689      	mov	r9, r1
 8007a40:	f7f9 f84c 	bl	8000adc <__aeabi_dcmplt>
 8007a44:	2800      	cmp	r0, #0
 8007a46:	d163      	bne.n	8007b10 <_dtoa_r+0x608>
 8007a48:	4642      	mov	r2, r8
 8007a4a:	464b      	mov	r3, r9
 8007a4c:	4936      	ldr	r1, [pc, #216]	; (8007b28 <_dtoa_r+0x620>)
 8007a4e:	2000      	movs	r0, #0
 8007a50:	f7f8 fc1a 	bl	8000288 <__aeabi_dsub>
 8007a54:	4652      	mov	r2, sl
 8007a56:	465b      	mov	r3, fp
 8007a58:	f7f9 f840 	bl	8000adc <__aeabi_dcmplt>
 8007a5c:	2800      	cmp	r0, #0
 8007a5e:	f040 80b5 	bne.w	8007bcc <_dtoa_r+0x6c4>
 8007a62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a64:	429d      	cmp	r5, r3
 8007a66:	d081      	beq.n	800796c <_dtoa_r+0x464>
 8007a68:	4b30      	ldr	r3, [pc, #192]	; (8007b2c <_dtoa_r+0x624>)
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	4650      	mov	r0, sl
 8007a6e:	4659      	mov	r1, fp
 8007a70:	f7f8 fdc2 	bl	80005f8 <__aeabi_dmul>
 8007a74:	4b2d      	ldr	r3, [pc, #180]	; (8007b2c <_dtoa_r+0x624>)
 8007a76:	4682      	mov	sl, r0
 8007a78:	468b      	mov	fp, r1
 8007a7a:	4640      	mov	r0, r8
 8007a7c:	4649      	mov	r1, r9
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f7f8 fdba 	bl	80005f8 <__aeabi_dmul>
 8007a84:	4680      	mov	r8, r0
 8007a86:	4689      	mov	r9, r1
 8007a88:	e7c6      	b.n	8007a18 <_dtoa_r+0x510>
 8007a8a:	4650      	mov	r0, sl
 8007a8c:	4659      	mov	r1, fp
 8007a8e:	f7f8 fdb3 	bl	80005f8 <__aeabi_dmul>
 8007a92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a94:	9d01      	ldr	r5, [sp, #4]
 8007a96:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a98:	4682      	mov	sl, r0
 8007a9a:	468b      	mov	fp, r1
 8007a9c:	4649      	mov	r1, r9
 8007a9e:	4640      	mov	r0, r8
 8007aa0:	f7f9 f85a 	bl	8000b58 <__aeabi_d2iz>
 8007aa4:	4606      	mov	r6, r0
 8007aa6:	f7f8 fd3d 	bl	8000524 <__aeabi_i2d>
 8007aaa:	3630      	adds	r6, #48	; 0x30
 8007aac:	4602      	mov	r2, r0
 8007aae:	460b      	mov	r3, r1
 8007ab0:	4640      	mov	r0, r8
 8007ab2:	4649      	mov	r1, r9
 8007ab4:	f7f8 fbe8 	bl	8000288 <__aeabi_dsub>
 8007ab8:	f805 6b01 	strb.w	r6, [r5], #1
 8007abc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007abe:	429d      	cmp	r5, r3
 8007ac0:	4680      	mov	r8, r0
 8007ac2:	4689      	mov	r9, r1
 8007ac4:	f04f 0200 	mov.w	r2, #0
 8007ac8:	d124      	bne.n	8007b14 <_dtoa_r+0x60c>
 8007aca:	4b1b      	ldr	r3, [pc, #108]	; (8007b38 <_dtoa_r+0x630>)
 8007acc:	4650      	mov	r0, sl
 8007ace:	4659      	mov	r1, fp
 8007ad0:	f7f8 fbdc 	bl	800028c <__adddf3>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	4640      	mov	r0, r8
 8007ada:	4649      	mov	r1, r9
 8007adc:	f7f9 f81c 	bl	8000b18 <__aeabi_dcmpgt>
 8007ae0:	2800      	cmp	r0, #0
 8007ae2:	d173      	bne.n	8007bcc <_dtoa_r+0x6c4>
 8007ae4:	4652      	mov	r2, sl
 8007ae6:	465b      	mov	r3, fp
 8007ae8:	4913      	ldr	r1, [pc, #76]	; (8007b38 <_dtoa_r+0x630>)
 8007aea:	2000      	movs	r0, #0
 8007aec:	f7f8 fbcc 	bl	8000288 <__aeabi_dsub>
 8007af0:	4602      	mov	r2, r0
 8007af2:	460b      	mov	r3, r1
 8007af4:	4640      	mov	r0, r8
 8007af6:	4649      	mov	r1, r9
 8007af8:	f7f8 fff0 	bl	8000adc <__aeabi_dcmplt>
 8007afc:	2800      	cmp	r0, #0
 8007afe:	f43f af35 	beq.w	800796c <_dtoa_r+0x464>
 8007b02:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007b04:	1e6b      	subs	r3, r5, #1
 8007b06:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b08:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007b0c:	2b30      	cmp	r3, #48	; 0x30
 8007b0e:	d0f8      	beq.n	8007b02 <_dtoa_r+0x5fa>
 8007b10:	9700      	str	r7, [sp, #0]
 8007b12:	e049      	b.n	8007ba8 <_dtoa_r+0x6a0>
 8007b14:	4b05      	ldr	r3, [pc, #20]	; (8007b2c <_dtoa_r+0x624>)
 8007b16:	f7f8 fd6f 	bl	80005f8 <__aeabi_dmul>
 8007b1a:	4680      	mov	r8, r0
 8007b1c:	4689      	mov	r9, r1
 8007b1e:	e7bd      	b.n	8007a9c <_dtoa_r+0x594>
 8007b20:	08009b50 	.word	0x08009b50
 8007b24:	08009b28 	.word	0x08009b28
 8007b28:	3ff00000 	.word	0x3ff00000
 8007b2c:	40240000 	.word	0x40240000
 8007b30:	401c0000 	.word	0x401c0000
 8007b34:	40140000 	.word	0x40140000
 8007b38:	3fe00000 	.word	0x3fe00000
 8007b3c:	9d01      	ldr	r5, [sp, #4]
 8007b3e:	4656      	mov	r6, sl
 8007b40:	465f      	mov	r7, fp
 8007b42:	4642      	mov	r2, r8
 8007b44:	464b      	mov	r3, r9
 8007b46:	4630      	mov	r0, r6
 8007b48:	4639      	mov	r1, r7
 8007b4a:	f7f8 fe7f 	bl	800084c <__aeabi_ddiv>
 8007b4e:	f7f9 f803 	bl	8000b58 <__aeabi_d2iz>
 8007b52:	4682      	mov	sl, r0
 8007b54:	f7f8 fce6 	bl	8000524 <__aeabi_i2d>
 8007b58:	4642      	mov	r2, r8
 8007b5a:	464b      	mov	r3, r9
 8007b5c:	f7f8 fd4c 	bl	80005f8 <__aeabi_dmul>
 8007b60:	4602      	mov	r2, r0
 8007b62:	460b      	mov	r3, r1
 8007b64:	4630      	mov	r0, r6
 8007b66:	4639      	mov	r1, r7
 8007b68:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007b6c:	f7f8 fb8c 	bl	8000288 <__aeabi_dsub>
 8007b70:	f805 6b01 	strb.w	r6, [r5], #1
 8007b74:	9e01      	ldr	r6, [sp, #4]
 8007b76:	9f03      	ldr	r7, [sp, #12]
 8007b78:	1bae      	subs	r6, r5, r6
 8007b7a:	42b7      	cmp	r7, r6
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	460b      	mov	r3, r1
 8007b80:	d135      	bne.n	8007bee <_dtoa_r+0x6e6>
 8007b82:	f7f8 fb83 	bl	800028c <__adddf3>
 8007b86:	4642      	mov	r2, r8
 8007b88:	464b      	mov	r3, r9
 8007b8a:	4606      	mov	r6, r0
 8007b8c:	460f      	mov	r7, r1
 8007b8e:	f7f8 ffc3 	bl	8000b18 <__aeabi_dcmpgt>
 8007b92:	b9d0      	cbnz	r0, 8007bca <_dtoa_r+0x6c2>
 8007b94:	4642      	mov	r2, r8
 8007b96:	464b      	mov	r3, r9
 8007b98:	4630      	mov	r0, r6
 8007b9a:	4639      	mov	r1, r7
 8007b9c:	f7f8 ff94 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ba0:	b110      	cbz	r0, 8007ba8 <_dtoa_r+0x6a0>
 8007ba2:	f01a 0f01 	tst.w	sl, #1
 8007ba6:	d110      	bne.n	8007bca <_dtoa_r+0x6c2>
 8007ba8:	4620      	mov	r0, r4
 8007baa:	ee18 1a10 	vmov	r1, s16
 8007bae:	f000 faf3 	bl	8008198 <_Bfree>
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	9800      	ldr	r0, [sp, #0]
 8007bb6:	702b      	strb	r3, [r5, #0]
 8007bb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007bba:	3001      	adds	r0, #1
 8007bbc:	6018      	str	r0, [r3, #0]
 8007bbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	f43f acf1 	beq.w	80075a8 <_dtoa_r+0xa0>
 8007bc6:	601d      	str	r5, [r3, #0]
 8007bc8:	e4ee      	b.n	80075a8 <_dtoa_r+0xa0>
 8007bca:	9f00      	ldr	r7, [sp, #0]
 8007bcc:	462b      	mov	r3, r5
 8007bce:	461d      	mov	r5, r3
 8007bd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007bd4:	2a39      	cmp	r2, #57	; 0x39
 8007bd6:	d106      	bne.n	8007be6 <_dtoa_r+0x6de>
 8007bd8:	9a01      	ldr	r2, [sp, #4]
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d1f7      	bne.n	8007bce <_dtoa_r+0x6c6>
 8007bde:	9901      	ldr	r1, [sp, #4]
 8007be0:	2230      	movs	r2, #48	; 0x30
 8007be2:	3701      	adds	r7, #1
 8007be4:	700a      	strb	r2, [r1, #0]
 8007be6:	781a      	ldrb	r2, [r3, #0]
 8007be8:	3201      	adds	r2, #1
 8007bea:	701a      	strb	r2, [r3, #0]
 8007bec:	e790      	b.n	8007b10 <_dtoa_r+0x608>
 8007bee:	4ba6      	ldr	r3, [pc, #664]	; (8007e88 <_dtoa_r+0x980>)
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f7f8 fd01 	bl	80005f8 <__aeabi_dmul>
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	4606      	mov	r6, r0
 8007bfc:	460f      	mov	r7, r1
 8007bfe:	f7f8 ff63 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c02:	2800      	cmp	r0, #0
 8007c04:	d09d      	beq.n	8007b42 <_dtoa_r+0x63a>
 8007c06:	e7cf      	b.n	8007ba8 <_dtoa_r+0x6a0>
 8007c08:	9a08      	ldr	r2, [sp, #32]
 8007c0a:	2a00      	cmp	r2, #0
 8007c0c:	f000 80d7 	beq.w	8007dbe <_dtoa_r+0x8b6>
 8007c10:	9a06      	ldr	r2, [sp, #24]
 8007c12:	2a01      	cmp	r2, #1
 8007c14:	f300 80ba 	bgt.w	8007d8c <_dtoa_r+0x884>
 8007c18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c1a:	2a00      	cmp	r2, #0
 8007c1c:	f000 80b2 	beq.w	8007d84 <_dtoa_r+0x87c>
 8007c20:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007c24:	9e07      	ldr	r6, [sp, #28]
 8007c26:	9d04      	ldr	r5, [sp, #16]
 8007c28:	9a04      	ldr	r2, [sp, #16]
 8007c2a:	441a      	add	r2, r3
 8007c2c:	9204      	str	r2, [sp, #16]
 8007c2e:	9a05      	ldr	r2, [sp, #20]
 8007c30:	2101      	movs	r1, #1
 8007c32:	441a      	add	r2, r3
 8007c34:	4620      	mov	r0, r4
 8007c36:	9205      	str	r2, [sp, #20]
 8007c38:	f000 fb66 	bl	8008308 <__i2b>
 8007c3c:	4607      	mov	r7, r0
 8007c3e:	2d00      	cmp	r5, #0
 8007c40:	dd0c      	ble.n	8007c5c <_dtoa_r+0x754>
 8007c42:	9b05      	ldr	r3, [sp, #20]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	dd09      	ble.n	8007c5c <_dtoa_r+0x754>
 8007c48:	42ab      	cmp	r3, r5
 8007c4a:	9a04      	ldr	r2, [sp, #16]
 8007c4c:	bfa8      	it	ge
 8007c4e:	462b      	movge	r3, r5
 8007c50:	1ad2      	subs	r2, r2, r3
 8007c52:	9204      	str	r2, [sp, #16]
 8007c54:	9a05      	ldr	r2, [sp, #20]
 8007c56:	1aed      	subs	r5, r5, r3
 8007c58:	1ad3      	subs	r3, r2, r3
 8007c5a:	9305      	str	r3, [sp, #20]
 8007c5c:	9b07      	ldr	r3, [sp, #28]
 8007c5e:	b31b      	cbz	r3, 8007ca8 <_dtoa_r+0x7a0>
 8007c60:	9b08      	ldr	r3, [sp, #32]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	f000 80af 	beq.w	8007dc6 <_dtoa_r+0x8be>
 8007c68:	2e00      	cmp	r6, #0
 8007c6a:	dd13      	ble.n	8007c94 <_dtoa_r+0x78c>
 8007c6c:	4639      	mov	r1, r7
 8007c6e:	4632      	mov	r2, r6
 8007c70:	4620      	mov	r0, r4
 8007c72:	f000 fc09 	bl	8008488 <__pow5mult>
 8007c76:	ee18 2a10 	vmov	r2, s16
 8007c7a:	4601      	mov	r1, r0
 8007c7c:	4607      	mov	r7, r0
 8007c7e:	4620      	mov	r0, r4
 8007c80:	f000 fb58 	bl	8008334 <__multiply>
 8007c84:	ee18 1a10 	vmov	r1, s16
 8007c88:	4680      	mov	r8, r0
 8007c8a:	4620      	mov	r0, r4
 8007c8c:	f000 fa84 	bl	8008198 <_Bfree>
 8007c90:	ee08 8a10 	vmov	s16, r8
 8007c94:	9b07      	ldr	r3, [sp, #28]
 8007c96:	1b9a      	subs	r2, r3, r6
 8007c98:	d006      	beq.n	8007ca8 <_dtoa_r+0x7a0>
 8007c9a:	ee18 1a10 	vmov	r1, s16
 8007c9e:	4620      	mov	r0, r4
 8007ca0:	f000 fbf2 	bl	8008488 <__pow5mult>
 8007ca4:	ee08 0a10 	vmov	s16, r0
 8007ca8:	2101      	movs	r1, #1
 8007caa:	4620      	mov	r0, r4
 8007cac:	f000 fb2c 	bl	8008308 <__i2b>
 8007cb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	4606      	mov	r6, r0
 8007cb6:	f340 8088 	ble.w	8007dca <_dtoa_r+0x8c2>
 8007cba:	461a      	mov	r2, r3
 8007cbc:	4601      	mov	r1, r0
 8007cbe:	4620      	mov	r0, r4
 8007cc0:	f000 fbe2 	bl	8008488 <__pow5mult>
 8007cc4:	9b06      	ldr	r3, [sp, #24]
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	4606      	mov	r6, r0
 8007cca:	f340 8081 	ble.w	8007dd0 <_dtoa_r+0x8c8>
 8007cce:	f04f 0800 	mov.w	r8, #0
 8007cd2:	6933      	ldr	r3, [r6, #16]
 8007cd4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007cd8:	6918      	ldr	r0, [r3, #16]
 8007cda:	f000 fac5 	bl	8008268 <__hi0bits>
 8007cde:	f1c0 0020 	rsb	r0, r0, #32
 8007ce2:	9b05      	ldr	r3, [sp, #20]
 8007ce4:	4418      	add	r0, r3
 8007ce6:	f010 001f 	ands.w	r0, r0, #31
 8007cea:	f000 8092 	beq.w	8007e12 <_dtoa_r+0x90a>
 8007cee:	f1c0 0320 	rsb	r3, r0, #32
 8007cf2:	2b04      	cmp	r3, #4
 8007cf4:	f340 808a 	ble.w	8007e0c <_dtoa_r+0x904>
 8007cf8:	f1c0 001c 	rsb	r0, r0, #28
 8007cfc:	9b04      	ldr	r3, [sp, #16]
 8007cfe:	4403      	add	r3, r0
 8007d00:	9304      	str	r3, [sp, #16]
 8007d02:	9b05      	ldr	r3, [sp, #20]
 8007d04:	4403      	add	r3, r0
 8007d06:	4405      	add	r5, r0
 8007d08:	9305      	str	r3, [sp, #20]
 8007d0a:	9b04      	ldr	r3, [sp, #16]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	dd07      	ble.n	8007d20 <_dtoa_r+0x818>
 8007d10:	ee18 1a10 	vmov	r1, s16
 8007d14:	461a      	mov	r2, r3
 8007d16:	4620      	mov	r0, r4
 8007d18:	f000 fc10 	bl	800853c <__lshift>
 8007d1c:	ee08 0a10 	vmov	s16, r0
 8007d20:	9b05      	ldr	r3, [sp, #20]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	dd05      	ble.n	8007d32 <_dtoa_r+0x82a>
 8007d26:	4631      	mov	r1, r6
 8007d28:	461a      	mov	r2, r3
 8007d2a:	4620      	mov	r0, r4
 8007d2c:	f000 fc06 	bl	800853c <__lshift>
 8007d30:	4606      	mov	r6, r0
 8007d32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d06e      	beq.n	8007e16 <_dtoa_r+0x90e>
 8007d38:	ee18 0a10 	vmov	r0, s16
 8007d3c:	4631      	mov	r1, r6
 8007d3e:	f000 fc6d 	bl	800861c <__mcmp>
 8007d42:	2800      	cmp	r0, #0
 8007d44:	da67      	bge.n	8007e16 <_dtoa_r+0x90e>
 8007d46:	9b00      	ldr	r3, [sp, #0]
 8007d48:	3b01      	subs	r3, #1
 8007d4a:	ee18 1a10 	vmov	r1, s16
 8007d4e:	9300      	str	r3, [sp, #0]
 8007d50:	220a      	movs	r2, #10
 8007d52:	2300      	movs	r3, #0
 8007d54:	4620      	mov	r0, r4
 8007d56:	f000 fa41 	bl	80081dc <__multadd>
 8007d5a:	9b08      	ldr	r3, [sp, #32]
 8007d5c:	ee08 0a10 	vmov	s16, r0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	f000 81b1 	beq.w	80080c8 <_dtoa_r+0xbc0>
 8007d66:	2300      	movs	r3, #0
 8007d68:	4639      	mov	r1, r7
 8007d6a:	220a      	movs	r2, #10
 8007d6c:	4620      	mov	r0, r4
 8007d6e:	f000 fa35 	bl	80081dc <__multadd>
 8007d72:	9b02      	ldr	r3, [sp, #8]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	4607      	mov	r7, r0
 8007d78:	f300 808e 	bgt.w	8007e98 <_dtoa_r+0x990>
 8007d7c:	9b06      	ldr	r3, [sp, #24]
 8007d7e:	2b02      	cmp	r3, #2
 8007d80:	dc51      	bgt.n	8007e26 <_dtoa_r+0x91e>
 8007d82:	e089      	b.n	8007e98 <_dtoa_r+0x990>
 8007d84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007d8a:	e74b      	b.n	8007c24 <_dtoa_r+0x71c>
 8007d8c:	9b03      	ldr	r3, [sp, #12]
 8007d8e:	1e5e      	subs	r6, r3, #1
 8007d90:	9b07      	ldr	r3, [sp, #28]
 8007d92:	42b3      	cmp	r3, r6
 8007d94:	bfbf      	itttt	lt
 8007d96:	9b07      	ldrlt	r3, [sp, #28]
 8007d98:	9607      	strlt	r6, [sp, #28]
 8007d9a:	1af2      	sublt	r2, r6, r3
 8007d9c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007d9e:	bfb6      	itet	lt
 8007da0:	189b      	addlt	r3, r3, r2
 8007da2:	1b9e      	subge	r6, r3, r6
 8007da4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007da6:	9b03      	ldr	r3, [sp, #12]
 8007da8:	bfb8      	it	lt
 8007daa:	2600      	movlt	r6, #0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	bfb7      	itett	lt
 8007db0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007db4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007db8:	1a9d      	sublt	r5, r3, r2
 8007dba:	2300      	movlt	r3, #0
 8007dbc:	e734      	b.n	8007c28 <_dtoa_r+0x720>
 8007dbe:	9e07      	ldr	r6, [sp, #28]
 8007dc0:	9d04      	ldr	r5, [sp, #16]
 8007dc2:	9f08      	ldr	r7, [sp, #32]
 8007dc4:	e73b      	b.n	8007c3e <_dtoa_r+0x736>
 8007dc6:	9a07      	ldr	r2, [sp, #28]
 8007dc8:	e767      	b.n	8007c9a <_dtoa_r+0x792>
 8007dca:	9b06      	ldr	r3, [sp, #24]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	dc18      	bgt.n	8007e02 <_dtoa_r+0x8fa>
 8007dd0:	f1ba 0f00 	cmp.w	sl, #0
 8007dd4:	d115      	bne.n	8007e02 <_dtoa_r+0x8fa>
 8007dd6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007dda:	b993      	cbnz	r3, 8007e02 <_dtoa_r+0x8fa>
 8007ddc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007de0:	0d1b      	lsrs	r3, r3, #20
 8007de2:	051b      	lsls	r3, r3, #20
 8007de4:	b183      	cbz	r3, 8007e08 <_dtoa_r+0x900>
 8007de6:	9b04      	ldr	r3, [sp, #16]
 8007de8:	3301      	adds	r3, #1
 8007dea:	9304      	str	r3, [sp, #16]
 8007dec:	9b05      	ldr	r3, [sp, #20]
 8007dee:	3301      	adds	r3, #1
 8007df0:	9305      	str	r3, [sp, #20]
 8007df2:	f04f 0801 	mov.w	r8, #1
 8007df6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	f47f af6a 	bne.w	8007cd2 <_dtoa_r+0x7ca>
 8007dfe:	2001      	movs	r0, #1
 8007e00:	e76f      	b.n	8007ce2 <_dtoa_r+0x7da>
 8007e02:	f04f 0800 	mov.w	r8, #0
 8007e06:	e7f6      	b.n	8007df6 <_dtoa_r+0x8ee>
 8007e08:	4698      	mov	r8, r3
 8007e0a:	e7f4      	b.n	8007df6 <_dtoa_r+0x8ee>
 8007e0c:	f43f af7d 	beq.w	8007d0a <_dtoa_r+0x802>
 8007e10:	4618      	mov	r0, r3
 8007e12:	301c      	adds	r0, #28
 8007e14:	e772      	b.n	8007cfc <_dtoa_r+0x7f4>
 8007e16:	9b03      	ldr	r3, [sp, #12]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	dc37      	bgt.n	8007e8c <_dtoa_r+0x984>
 8007e1c:	9b06      	ldr	r3, [sp, #24]
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	dd34      	ble.n	8007e8c <_dtoa_r+0x984>
 8007e22:	9b03      	ldr	r3, [sp, #12]
 8007e24:	9302      	str	r3, [sp, #8]
 8007e26:	9b02      	ldr	r3, [sp, #8]
 8007e28:	b96b      	cbnz	r3, 8007e46 <_dtoa_r+0x93e>
 8007e2a:	4631      	mov	r1, r6
 8007e2c:	2205      	movs	r2, #5
 8007e2e:	4620      	mov	r0, r4
 8007e30:	f000 f9d4 	bl	80081dc <__multadd>
 8007e34:	4601      	mov	r1, r0
 8007e36:	4606      	mov	r6, r0
 8007e38:	ee18 0a10 	vmov	r0, s16
 8007e3c:	f000 fbee 	bl	800861c <__mcmp>
 8007e40:	2800      	cmp	r0, #0
 8007e42:	f73f adbb 	bgt.w	80079bc <_dtoa_r+0x4b4>
 8007e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e48:	9d01      	ldr	r5, [sp, #4]
 8007e4a:	43db      	mvns	r3, r3
 8007e4c:	9300      	str	r3, [sp, #0]
 8007e4e:	f04f 0800 	mov.w	r8, #0
 8007e52:	4631      	mov	r1, r6
 8007e54:	4620      	mov	r0, r4
 8007e56:	f000 f99f 	bl	8008198 <_Bfree>
 8007e5a:	2f00      	cmp	r7, #0
 8007e5c:	f43f aea4 	beq.w	8007ba8 <_dtoa_r+0x6a0>
 8007e60:	f1b8 0f00 	cmp.w	r8, #0
 8007e64:	d005      	beq.n	8007e72 <_dtoa_r+0x96a>
 8007e66:	45b8      	cmp	r8, r7
 8007e68:	d003      	beq.n	8007e72 <_dtoa_r+0x96a>
 8007e6a:	4641      	mov	r1, r8
 8007e6c:	4620      	mov	r0, r4
 8007e6e:	f000 f993 	bl	8008198 <_Bfree>
 8007e72:	4639      	mov	r1, r7
 8007e74:	4620      	mov	r0, r4
 8007e76:	f000 f98f 	bl	8008198 <_Bfree>
 8007e7a:	e695      	b.n	8007ba8 <_dtoa_r+0x6a0>
 8007e7c:	2600      	movs	r6, #0
 8007e7e:	4637      	mov	r7, r6
 8007e80:	e7e1      	b.n	8007e46 <_dtoa_r+0x93e>
 8007e82:	9700      	str	r7, [sp, #0]
 8007e84:	4637      	mov	r7, r6
 8007e86:	e599      	b.n	80079bc <_dtoa_r+0x4b4>
 8007e88:	40240000 	.word	0x40240000
 8007e8c:	9b08      	ldr	r3, [sp, #32]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	f000 80ca 	beq.w	8008028 <_dtoa_r+0xb20>
 8007e94:	9b03      	ldr	r3, [sp, #12]
 8007e96:	9302      	str	r3, [sp, #8]
 8007e98:	2d00      	cmp	r5, #0
 8007e9a:	dd05      	ble.n	8007ea8 <_dtoa_r+0x9a0>
 8007e9c:	4639      	mov	r1, r7
 8007e9e:	462a      	mov	r2, r5
 8007ea0:	4620      	mov	r0, r4
 8007ea2:	f000 fb4b 	bl	800853c <__lshift>
 8007ea6:	4607      	mov	r7, r0
 8007ea8:	f1b8 0f00 	cmp.w	r8, #0
 8007eac:	d05b      	beq.n	8007f66 <_dtoa_r+0xa5e>
 8007eae:	6879      	ldr	r1, [r7, #4]
 8007eb0:	4620      	mov	r0, r4
 8007eb2:	f000 f931 	bl	8008118 <_Balloc>
 8007eb6:	4605      	mov	r5, r0
 8007eb8:	b928      	cbnz	r0, 8007ec6 <_dtoa_r+0x9be>
 8007eba:	4b87      	ldr	r3, [pc, #540]	; (80080d8 <_dtoa_r+0xbd0>)
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007ec2:	f7ff bb3b 	b.w	800753c <_dtoa_r+0x34>
 8007ec6:	693a      	ldr	r2, [r7, #16]
 8007ec8:	3202      	adds	r2, #2
 8007eca:	0092      	lsls	r2, r2, #2
 8007ecc:	f107 010c 	add.w	r1, r7, #12
 8007ed0:	300c      	adds	r0, #12
 8007ed2:	f000 f913 	bl	80080fc <memcpy>
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	4629      	mov	r1, r5
 8007eda:	4620      	mov	r0, r4
 8007edc:	f000 fb2e 	bl	800853c <__lshift>
 8007ee0:	9b01      	ldr	r3, [sp, #4]
 8007ee2:	f103 0901 	add.w	r9, r3, #1
 8007ee6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007eea:	4413      	add	r3, r2
 8007eec:	9305      	str	r3, [sp, #20]
 8007eee:	f00a 0301 	and.w	r3, sl, #1
 8007ef2:	46b8      	mov	r8, r7
 8007ef4:	9304      	str	r3, [sp, #16]
 8007ef6:	4607      	mov	r7, r0
 8007ef8:	4631      	mov	r1, r6
 8007efa:	ee18 0a10 	vmov	r0, s16
 8007efe:	f7ff fa75 	bl	80073ec <quorem>
 8007f02:	4641      	mov	r1, r8
 8007f04:	9002      	str	r0, [sp, #8]
 8007f06:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007f0a:	ee18 0a10 	vmov	r0, s16
 8007f0e:	f000 fb85 	bl	800861c <__mcmp>
 8007f12:	463a      	mov	r2, r7
 8007f14:	9003      	str	r0, [sp, #12]
 8007f16:	4631      	mov	r1, r6
 8007f18:	4620      	mov	r0, r4
 8007f1a:	f000 fb9b 	bl	8008654 <__mdiff>
 8007f1e:	68c2      	ldr	r2, [r0, #12]
 8007f20:	f109 3bff 	add.w	fp, r9, #4294967295
 8007f24:	4605      	mov	r5, r0
 8007f26:	bb02      	cbnz	r2, 8007f6a <_dtoa_r+0xa62>
 8007f28:	4601      	mov	r1, r0
 8007f2a:	ee18 0a10 	vmov	r0, s16
 8007f2e:	f000 fb75 	bl	800861c <__mcmp>
 8007f32:	4602      	mov	r2, r0
 8007f34:	4629      	mov	r1, r5
 8007f36:	4620      	mov	r0, r4
 8007f38:	9207      	str	r2, [sp, #28]
 8007f3a:	f000 f92d 	bl	8008198 <_Bfree>
 8007f3e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007f42:	ea43 0102 	orr.w	r1, r3, r2
 8007f46:	9b04      	ldr	r3, [sp, #16]
 8007f48:	430b      	orrs	r3, r1
 8007f4a:	464d      	mov	r5, r9
 8007f4c:	d10f      	bne.n	8007f6e <_dtoa_r+0xa66>
 8007f4e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007f52:	d02a      	beq.n	8007faa <_dtoa_r+0xaa2>
 8007f54:	9b03      	ldr	r3, [sp, #12]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	dd02      	ble.n	8007f60 <_dtoa_r+0xa58>
 8007f5a:	9b02      	ldr	r3, [sp, #8]
 8007f5c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007f60:	f88b a000 	strb.w	sl, [fp]
 8007f64:	e775      	b.n	8007e52 <_dtoa_r+0x94a>
 8007f66:	4638      	mov	r0, r7
 8007f68:	e7ba      	b.n	8007ee0 <_dtoa_r+0x9d8>
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	e7e2      	b.n	8007f34 <_dtoa_r+0xa2c>
 8007f6e:	9b03      	ldr	r3, [sp, #12]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	db04      	blt.n	8007f7e <_dtoa_r+0xa76>
 8007f74:	9906      	ldr	r1, [sp, #24]
 8007f76:	430b      	orrs	r3, r1
 8007f78:	9904      	ldr	r1, [sp, #16]
 8007f7a:	430b      	orrs	r3, r1
 8007f7c:	d122      	bne.n	8007fc4 <_dtoa_r+0xabc>
 8007f7e:	2a00      	cmp	r2, #0
 8007f80:	ddee      	ble.n	8007f60 <_dtoa_r+0xa58>
 8007f82:	ee18 1a10 	vmov	r1, s16
 8007f86:	2201      	movs	r2, #1
 8007f88:	4620      	mov	r0, r4
 8007f8a:	f000 fad7 	bl	800853c <__lshift>
 8007f8e:	4631      	mov	r1, r6
 8007f90:	ee08 0a10 	vmov	s16, r0
 8007f94:	f000 fb42 	bl	800861c <__mcmp>
 8007f98:	2800      	cmp	r0, #0
 8007f9a:	dc03      	bgt.n	8007fa4 <_dtoa_r+0xa9c>
 8007f9c:	d1e0      	bne.n	8007f60 <_dtoa_r+0xa58>
 8007f9e:	f01a 0f01 	tst.w	sl, #1
 8007fa2:	d0dd      	beq.n	8007f60 <_dtoa_r+0xa58>
 8007fa4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007fa8:	d1d7      	bne.n	8007f5a <_dtoa_r+0xa52>
 8007faa:	2339      	movs	r3, #57	; 0x39
 8007fac:	f88b 3000 	strb.w	r3, [fp]
 8007fb0:	462b      	mov	r3, r5
 8007fb2:	461d      	mov	r5, r3
 8007fb4:	3b01      	subs	r3, #1
 8007fb6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007fba:	2a39      	cmp	r2, #57	; 0x39
 8007fbc:	d071      	beq.n	80080a2 <_dtoa_r+0xb9a>
 8007fbe:	3201      	adds	r2, #1
 8007fc0:	701a      	strb	r2, [r3, #0]
 8007fc2:	e746      	b.n	8007e52 <_dtoa_r+0x94a>
 8007fc4:	2a00      	cmp	r2, #0
 8007fc6:	dd07      	ble.n	8007fd8 <_dtoa_r+0xad0>
 8007fc8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007fcc:	d0ed      	beq.n	8007faa <_dtoa_r+0xaa2>
 8007fce:	f10a 0301 	add.w	r3, sl, #1
 8007fd2:	f88b 3000 	strb.w	r3, [fp]
 8007fd6:	e73c      	b.n	8007e52 <_dtoa_r+0x94a>
 8007fd8:	9b05      	ldr	r3, [sp, #20]
 8007fda:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007fde:	4599      	cmp	r9, r3
 8007fe0:	d047      	beq.n	8008072 <_dtoa_r+0xb6a>
 8007fe2:	ee18 1a10 	vmov	r1, s16
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	220a      	movs	r2, #10
 8007fea:	4620      	mov	r0, r4
 8007fec:	f000 f8f6 	bl	80081dc <__multadd>
 8007ff0:	45b8      	cmp	r8, r7
 8007ff2:	ee08 0a10 	vmov	s16, r0
 8007ff6:	f04f 0300 	mov.w	r3, #0
 8007ffa:	f04f 020a 	mov.w	r2, #10
 8007ffe:	4641      	mov	r1, r8
 8008000:	4620      	mov	r0, r4
 8008002:	d106      	bne.n	8008012 <_dtoa_r+0xb0a>
 8008004:	f000 f8ea 	bl	80081dc <__multadd>
 8008008:	4680      	mov	r8, r0
 800800a:	4607      	mov	r7, r0
 800800c:	f109 0901 	add.w	r9, r9, #1
 8008010:	e772      	b.n	8007ef8 <_dtoa_r+0x9f0>
 8008012:	f000 f8e3 	bl	80081dc <__multadd>
 8008016:	4639      	mov	r1, r7
 8008018:	4680      	mov	r8, r0
 800801a:	2300      	movs	r3, #0
 800801c:	220a      	movs	r2, #10
 800801e:	4620      	mov	r0, r4
 8008020:	f000 f8dc 	bl	80081dc <__multadd>
 8008024:	4607      	mov	r7, r0
 8008026:	e7f1      	b.n	800800c <_dtoa_r+0xb04>
 8008028:	9b03      	ldr	r3, [sp, #12]
 800802a:	9302      	str	r3, [sp, #8]
 800802c:	9d01      	ldr	r5, [sp, #4]
 800802e:	ee18 0a10 	vmov	r0, s16
 8008032:	4631      	mov	r1, r6
 8008034:	f7ff f9da 	bl	80073ec <quorem>
 8008038:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800803c:	9b01      	ldr	r3, [sp, #4]
 800803e:	f805 ab01 	strb.w	sl, [r5], #1
 8008042:	1aea      	subs	r2, r5, r3
 8008044:	9b02      	ldr	r3, [sp, #8]
 8008046:	4293      	cmp	r3, r2
 8008048:	dd09      	ble.n	800805e <_dtoa_r+0xb56>
 800804a:	ee18 1a10 	vmov	r1, s16
 800804e:	2300      	movs	r3, #0
 8008050:	220a      	movs	r2, #10
 8008052:	4620      	mov	r0, r4
 8008054:	f000 f8c2 	bl	80081dc <__multadd>
 8008058:	ee08 0a10 	vmov	s16, r0
 800805c:	e7e7      	b.n	800802e <_dtoa_r+0xb26>
 800805e:	9b02      	ldr	r3, [sp, #8]
 8008060:	2b00      	cmp	r3, #0
 8008062:	bfc8      	it	gt
 8008064:	461d      	movgt	r5, r3
 8008066:	9b01      	ldr	r3, [sp, #4]
 8008068:	bfd8      	it	le
 800806a:	2501      	movle	r5, #1
 800806c:	441d      	add	r5, r3
 800806e:	f04f 0800 	mov.w	r8, #0
 8008072:	ee18 1a10 	vmov	r1, s16
 8008076:	2201      	movs	r2, #1
 8008078:	4620      	mov	r0, r4
 800807a:	f000 fa5f 	bl	800853c <__lshift>
 800807e:	4631      	mov	r1, r6
 8008080:	ee08 0a10 	vmov	s16, r0
 8008084:	f000 faca 	bl	800861c <__mcmp>
 8008088:	2800      	cmp	r0, #0
 800808a:	dc91      	bgt.n	8007fb0 <_dtoa_r+0xaa8>
 800808c:	d102      	bne.n	8008094 <_dtoa_r+0xb8c>
 800808e:	f01a 0f01 	tst.w	sl, #1
 8008092:	d18d      	bne.n	8007fb0 <_dtoa_r+0xaa8>
 8008094:	462b      	mov	r3, r5
 8008096:	461d      	mov	r5, r3
 8008098:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800809c:	2a30      	cmp	r2, #48	; 0x30
 800809e:	d0fa      	beq.n	8008096 <_dtoa_r+0xb8e>
 80080a0:	e6d7      	b.n	8007e52 <_dtoa_r+0x94a>
 80080a2:	9a01      	ldr	r2, [sp, #4]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d184      	bne.n	8007fb2 <_dtoa_r+0xaaa>
 80080a8:	9b00      	ldr	r3, [sp, #0]
 80080aa:	3301      	adds	r3, #1
 80080ac:	9300      	str	r3, [sp, #0]
 80080ae:	2331      	movs	r3, #49	; 0x31
 80080b0:	7013      	strb	r3, [r2, #0]
 80080b2:	e6ce      	b.n	8007e52 <_dtoa_r+0x94a>
 80080b4:	4b09      	ldr	r3, [pc, #36]	; (80080dc <_dtoa_r+0xbd4>)
 80080b6:	f7ff ba95 	b.w	80075e4 <_dtoa_r+0xdc>
 80080ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80080bc:	2b00      	cmp	r3, #0
 80080be:	f47f aa6e 	bne.w	800759e <_dtoa_r+0x96>
 80080c2:	4b07      	ldr	r3, [pc, #28]	; (80080e0 <_dtoa_r+0xbd8>)
 80080c4:	f7ff ba8e 	b.w	80075e4 <_dtoa_r+0xdc>
 80080c8:	9b02      	ldr	r3, [sp, #8]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	dcae      	bgt.n	800802c <_dtoa_r+0xb24>
 80080ce:	9b06      	ldr	r3, [sp, #24]
 80080d0:	2b02      	cmp	r3, #2
 80080d2:	f73f aea8 	bgt.w	8007e26 <_dtoa_r+0x91e>
 80080d6:	e7a9      	b.n	800802c <_dtoa_r+0xb24>
 80080d8:	08009abb 	.word	0x08009abb
 80080dc:	08009a18 	.word	0x08009a18
 80080e0:	08009a3c 	.word	0x08009a3c

080080e4 <_localeconv_r>:
 80080e4:	4800      	ldr	r0, [pc, #0]	; (80080e8 <_localeconv_r+0x4>)
 80080e6:	4770      	bx	lr
 80080e8:	20000170 	.word	0x20000170

080080ec <malloc>:
 80080ec:	4b02      	ldr	r3, [pc, #8]	; (80080f8 <malloc+0xc>)
 80080ee:	4601      	mov	r1, r0
 80080f0:	6818      	ldr	r0, [r3, #0]
 80080f2:	f000 bc17 	b.w	8008924 <_malloc_r>
 80080f6:	bf00      	nop
 80080f8:	2000001c 	.word	0x2000001c

080080fc <memcpy>:
 80080fc:	440a      	add	r2, r1
 80080fe:	4291      	cmp	r1, r2
 8008100:	f100 33ff 	add.w	r3, r0, #4294967295
 8008104:	d100      	bne.n	8008108 <memcpy+0xc>
 8008106:	4770      	bx	lr
 8008108:	b510      	push	{r4, lr}
 800810a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800810e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008112:	4291      	cmp	r1, r2
 8008114:	d1f9      	bne.n	800810a <memcpy+0xe>
 8008116:	bd10      	pop	{r4, pc}

08008118 <_Balloc>:
 8008118:	b570      	push	{r4, r5, r6, lr}
 800811a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800811c:	4604      	mov	r4, r0
 800811e:	460d      	mov	r5, r1
 8008120:	b976      	cbnz	r6, 8008140 <_Balloc+0x28>
 8008122:	2010      	movs	r0, #16
 8008124:	f7ff ffe2 	bl	80080ec <malloc>
 8008128:	4602      	mov	r2, r0
 800812a:	6260      	str	r0, [r4, #36]	; 0x24
 800812c:	b920      	cbnz	r0, 8008138 <_Balloc+0x20>
 800812e:	4b18      	ldr	r3, [pc, #96]	; (8008190 <_Balloc+0x78>)
 8008130:	4818      	ldr	r0, [pc, #96]	; (8008194 <_Balloc+0x7c>)
 8008132:	2166      	movs	r1, #102	; 0x66
 8008134:	f000 fdd6 	bl	8008ce4 <__assert_func>
 8008138:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800813c:	6006      	str	r6, [r0, #0]
 800813e:	60c6      	str	r6, [r0, #12]
 8008140:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008142:	68f3      	ldr	r3, [r6, #12]
 8008144:	b183      	cbz	r3, 8008168 <_Balloc+0x50>
 8008146:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800814e:	b9b8      	cbnz	r0, 8008180 <_Balloc+0x68>
 8008150:	2101      	movs	r1, #1
 8008152:	fa01 f605 	lsl.w	r6, r1, r5
 8008156:	1d72      	adds	r2, r6, #5
 8008158:	0092      	lsls	r2, r2, #2
 800815a:	4620      	mov	r0, r4
 800815c:	f000 fb60 	bl	8008820 <_calloc_r>
 8008160:	b160      	cbz	r0, 800817c <_Balloc+0x64>
 8008162:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008166:	e00e      	b.n	8008186 <_Balloc+0x6e>
 8008168:	2221      	movs	r2, #33	; 0x21
 800816a:	2104      	movs	r1, #4
 800816c:	4620      	mov	r0, r4
 800816e:	f000 fb57 	bl	8008820 <_calloc_r>
 8008172:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008174:	60f0      	str	r0, [r6, #12]
 8008176:	68db      	ldr	r3, [r3, #12]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d1e4      	bne.n	8008146 <_Balloc+0x2e>
 800817c:	2000      	movs	r0, #0
 800817e:	bd70      	pop	{r4, r5, r6, pc}
 8008180:	6802      	ldr	r2, [r0, #0]
 8008182:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008186:	2300      	movs	r3, #0
 8008188:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800818c:	e7f7      	b.n	800817e <_Balloc+0x66>
 800818e:	bf00      	nop
 8008190:	08009a49 	.word	0x08009a49
 8008194:	08009acc 	.word	0x08009acc

08008198 <_Bfree>:
 8008198:	b570      	push	{r4, r5, r6, lr}
 800819a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800819c:	4605      	mov	r5, r0
 800819e:	460c      	mov	r4, r1
 80081a0:	b976      	cbnz	r6, 80081c0 <_Bfree+0x28>
 80081a2:	2010      	movs	r0, #16
 80081a4:	f7ff ffa2 	bl	80080ec <malloc>
 80081a8:	4602      	mov	r2, r0
 80081aa:	6268      	str	r0, [r5, #36]	; 0x24
 80081ac:	b920      	cbnz	r0, 80081b8 <_Bfree+0x20>
 80081ae:	4b09      	ldr	r3, [pc, #36]	; (80081d4 <_Bfree+0x3c>)
 80081b0:	4809      	ldr	r0, [pc, #36]	; (80081d8 <_Bfree+0x40>)
 80081b2:	218a      	movs	r1, #138	; 0x8a
 80081b4:	f000 fd96 	bl	8008ce4 <__assert_func>
 80081b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80081bc:	6006      	str	r6, [r0, #0]
 80081be:	60c6      	str	r6, [r0, #12]
 80081c0:	b13c      	cbz	r4, 80081d2 <_Bfree+0x3a>
 80081c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80081c4:	6862      	ldr	r2, [r4, #4]
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80081cc:	6021      	str	r1, [r4, #0]
 80081ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80081d2:	bd70      	pop	{r4, r5, r6, pc}
 80081d4:	08009a49 	.word	0x08009a49
 80081d8:	08009acc 	.word	0x08009acc

080081dc <__multadd>:
 80081dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081e0:	690d      	ldr	r5, [r1, #16]
 80081e2:	4607      	mov	r7, r0
 80081e4:	460c      	mov	r4, r1
 80081e6:	461e      	mov	r6, r3
 80081e8:	f101 0c14 	add.w	ip, r1, #20
 80081ec:	2000      	movs	r0, #0
 80081ee:	f8dc 3000 	ldr.w	r3, [ip]
 80081f2:	b299      	uxth	r1, r3
 80081f4:	fb02 6101 	mla	r1, r2, r1, r6
 80081f8:	0c1e      	lsrs	r6, r3, #16
 80081fa:	0c0b      	lsrs	r3, r1, #16
 80081fc:	fb02 3306 	mla	r3, r2, r6, r3
 8008200:	b289      	uxth	r1, r1
 8008202:	3001      	adds	r0, #1
 8008204:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008208:	4285      	cmp	r5, r0
 800820a:	f84c 1b04 	str.w	r1, [ip], #4
 800820e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008212:	dcec      	bgt.n	80081ee <__multadd+0x12>
 8008214:	b30e      	cbz	r6, 800825a <__multadd+0x7e>
 8008216:	68a3      	ldr	r3, [r4, #8]
 8008218:	42ab      	cmp	r3, r5
 800821a:	dc19      	bgt.n	8008250 <__multadd+0x74>
 800821c:	6861      	ldr	r1, [r4, #4]
 800821e:	4638      	mov	r0, r7
 8008220:	3101      	adds	r1, #1
 8008222:	f7ff ff79 	bl	8008118 <_Balloc>
 8008226:	4680      	mov	r8, r0
 8008228:	b928      	cbnz	r0, 8008236 <__multadd+0x5a>
 800822a:	4602      	mov	r2, r0
 800822c:	4b0c      	ldr	r3, [pc, #48]	; (8008260 <__multadd+0x84>)
 800822e:	480d      	ldr	r0, [pc, #52]	; (8008264 <__multadd+0x88>)
 8008230:	21b5      	movs	r1, #181	; 0xb5
 8008232:	f000 fd57 	bl	8008ce4 <__assert_func>
 8008236:	6922      	ldr	r2, [r4, #16]
 8008238:	3202      	adds	r2, #2
 800823a:	f104 010c 	add.w	r1, r4, #12
 800823e:	0092      	lsls	r2, r2, #2
 8008240:	300c      	adds	r0, #12
 8008242:	f7ff ff5b 	bl	80080fc <memcpy>
 8008246:	4621      	mov	r1, r4
 8008248:	4638      	mov	r0, r7
 800824a:	f7ff ffa5 	bl	8008198 <_Bfree>
 800824e:	4644      	mov	r4, r8
 8008250:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008254:	3501      	adds	r5, #1
 8008256:	615e      	str	r6, [r3, #20]
 8008258:	6125      	str	r5, [r4, #16]
 800825a:	4620      	mov	r0, r4
 800825c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008260:	08009abb 	.word	0x08009abb
 8008264:	08009acc 	.word	0x08009acc

08008268 <__hi0bits>:
 8008268:	0c03      	lsrs	r3, r0, #16
 800826a:	041b      	lsls	r3, r3, #16
 800826c:	b9d3      	cbnz	r3, 80082a4 <__hi0bits+0x3c>
 800826e:	0400      	lsls	r0, r0, #16
 8008270:	2310      	movs	r3, #16
 8008272:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008276:	bf04      	itt	eq
 8008278:	0200      	lsleq	r0, r0, #8
 800827a:	3308      	addeq	r3, #8
 800827c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008280:	bf04      	itt	eq
 8008282:	0100      	lsleq	r0, r0, #4
 8008284:	3304      	addeq	r3, #4
 8008286:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800828a:	bf04      	itt	eq
 800828c:	0080      	lsleq	r0, r0, #2
 800828e:	3302      	addeq	r3, #2
 8008290:	2800      	cmp	r0, #0
 8008292:	db05      	blt.n	80082a0 <__hi0bits+0x38>
 8008294:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008298:	f103 0301 	add.w	r3, r3, #1
 800829c:	bf08      	it	eq
 800829e:	2320      	moveq	r3, #32
 80082a0:	4618      	mov	r0, r3
 80082a2:	4770      	bx	lr
 80082a4:	2300      	movs	r3, #0
 80082a6:	e7e4      	b.n	8008272 <__hi0bits+0xa>

080082a8 <__lo0bits>:
 80082a8:	6803      	ldr	r3, [r0, #0]
 80082aa:	f013 0207 	ands.w	r2, r3, #7
 80082ae:	4601      	mov	r1, r0
 80082b0:	d00b      	beq.n	80082ca <__lo0bits+0x22>
 80082b2:	07da      	lsls	r2, r3, #31
 80082b4:	d423      	bmi.n	80082fe <__lo0bits+0x56>
 80082b6:	0798      	lsls	r0, r3, #30
 80082b8:	bf49      	itett	mi
 80082ba:	085b      	lsrmi	r3, r3, #1
 80082bc:	089b      	lsrpl	r3, r3, #2
 80082be:	2001      	movmi	r0, #1
 80082c0:	600b      	strmi	r3, [r1, #0]
 80082c2:	bf5c      	itt	pl
 80082c4:	600b      	strpl	r3, [r1, #0]
 80082c6:	2002      	movpl	r0, #2
 80082c8:	4770      	bx	lr
 80082ca:	b298      	uxth	r0, r3
 80082cc:	b9a8      	cbnz	r0, 80082fa <__lo0bits+0x52>
 80082ce:	0c1b      	lsrs	r3, r3, #16
 80082d0:	2010      	movs	r0, #16
 80082d2:	b2da      	uxtb	r2, r3
 80082d4:	b90a      	cbnz	r2, 80082da <__lo0bits+0x32>
 80082d6:	3008      	adds	r0, #8
 80082d8:	0a1b      	lsrs	r3, r3, #8
 80082da:	071a      	lsls	r2, r3, #28
 80082dc:	bf04      	itt	eq
 80082de:	091b      	lsreq	r3, r3, #4
 80082e0:	3004      	addeq	r0, #4
 80082e2:	079a      	lsls	r2, r3, #30
 80082e4:	bf04      	itt	eq
 80082e6:	089b      	lsreq	r3, r3, #2
 80082e8:	3002      	addeq	r0, #2
 80082ea:	07da      	lsls	r2, r3, #31
 80082ec:	d403      	bmi.n	80082f6 <__lo0bits+0x4e>
 80082ee:	085b      	lsrs	r3, r3, #1
 80082f0:	f100 0001 	add.w	r0, r0, #1
 80082f4:	d005      	beq.n	8008302 <__lo0bits+0x5a>
 80082f6:	600b      	str	r3, [r1, #0]
 80082f8:	4770      	bx	lr
 80082fa:	4610      	mov	r0, r2
 80082fc:	e7e9      	b.n	80082d2 <__lo0bits+0x2a>
 80082fe:	2000      	movs	r0, #0
 8008300:	4770      	bx	lr
 8008302:	2020      	movs	r0, #32
 8008304:	4770      	bx	lr
	...

08008308 <__i2b>:
 8008308:	b510      	push	{r4, lr}
 800830a:	460c      	mov	r4, r1
 800830c:	2101      	movs	r1, #1
 800830e:	f7ff ff03 	bl	8008118 <_Balloc>
 8008312:	4602      	mov	r2, r0
 8008314:	b928      	cbnz	r0, 8008322 <__i2b+0x1a>
 8008316:	4b05      	ldr	r3, [pc, #20]	; (800832c <__i2b+0x24>)
 8008318:	4805      	ldr	r0, [pc, #20]	; (8008330 <__i2b+0x28>)
 800831a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800831e:	f000 fce1 	bl	8008ce4 <__assert_func>
 8008322:	2301      	movs	r3, #1
 8008324:	6144      	str	r4, [r0, #20]
 8008326:	6103      	str	r3, [r0, #16]
 8008328:	bd10      	pop	{r4, pc}
 800832a:	bf00      	nop
 800832c:	08009abb 	.word	0x08009abb
 8008330:	08009acc 	.word	0x08009acc

08008334 <__multiply>:
 8008334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008338:	4691      	mov	r9, r2
 800833a:	690a      	ldr	r2, [r1, #16]
 800833c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008340:	429a      	cmp	r2, r3
 8008342:	bfb8      	it	lt
 8008344:	460b      	movlt	r3, r1
 8008346:	460c      	mov	r4, r1
 8008348:	bfbc      	itt	lt
 800834a:	464c      	movlt	r4, r9
 800834c:	4699      	movlt	r9, r3
 800834e:	6927      	ldr	r7, [r4, #16]
 8008350:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008354:	68a3      	ldr	r3, [r4, #8]
 8008356:	6861      	ldr	r1, [r4, #4]
 8008358:	eb07 060a 	add.w	r6, r7, sl
 800835c:	42b3      	cmp	r3, r6
 800835e:	b085      	sub	sp, #20
 8008360:	bfb8      	it	lt
 8008362:	3101      	addlt	r1, #1
 8008364:	f7ff fed8 	bl	8008118 <_Balloc>
 8008368:	b930      	cbnz	r0, 8008378 <__multiply+0x44>
 800836a:	4602      	mov	r2, r0
 800836c:	4b44      	ldr	r3, [pc, #272]	; (8008480 <__multiply+0x14c>)
 800836e:	4845      	ldr	r0, [pc, #276]	; (8008484 <__multiply+0x150>)
 8008370:	f240 115d 	movw	r1, #349	; 0x15d
 8008374:	f000 fcb6 	bl	8008ce4 <__assert_func>
 8008378:	f100 0514 	add.w	r5, r0, #20
 800837c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008380:	462b      	mov	r3, r5
 8008382:	2200      	movs	r2, #0
 8008384:	4543      	cmp	r3, r8
 8008386:	d321      	bcc.n	80083cc <__multiply+0x98>
 8008388:	f104 0314 	add.w	r3, r4, #20
 800838c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008390:	f109 0314 	add.w	r3, r9, #20
 8008394:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008398:	9202      	str	r2, [sp, #8]
 800839a:	1b3a      	subs	r2, r7, r4
 800839c:	3a15      	subs	r2, #21
 800839e:	f022 0203 	bic.w	r2, r2, #3
 80083a2:	3204      	adds	r2, #4
 80083a4:	f104 0115 	add.w	r1, r4, #21
 80083a8:	428f      	cmp	r7, r1
 80083aa:	bf38      	it	cc
 80083ac:	2204      	movcc	r2, #4
 80083ae:	9201      	str	r2, [sp, #4]
 80083b0:	9a02      	ldr	r2, [sp, #8]
 80083b2:	9303      	str	r3, [sp, #12]
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d80c      	bhi.n	80083d2 <__multiply+0x9e>
 80083b8:	2e00      	cmp	r6, #0
 80083ba:	dd03      	ble.n	80083c4 <__multiply+0x90>
 80083bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d05a      	beq.n	800847a <__multiply+0x146>
 80083c4:	6106      	str	r6, [r0, #16]
 80083c6:	b005      	add	sp, #20
 80083c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083cc:	f843 2b04 	str.w	r2, [r3], #4
 80083d0:	e7d8      	b.n	8008384 <__multiply+0x50>
 80083d2:	f8b3 a000 	ldrh.w	sl, [r3]
 80083d6:	f1ba 0f00 	cmp.w	sl, #0
 80083da:	d024      	beq.n	8008426 <__multiply+0xf2>
 80083dc:	f104 0e14 	add.w	lr, r4, #20
 80083e0:	46a9      	mov	r9, r5
 80083e2:	f04f 0c00 	mov.w	ip, #0
 80083e6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80083ea:	f8d9 1000 	ldr.w	r1, [r9]
 80083ee:	fa1f fb82 	uxth.w	fp, r2
 80083f2:	b289      	uxth	r1, r1
 80083f4:	fb0a 110b 	mla	r1, sl, fp, r1
 80083f8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80083fc:	f8d9 2000 	ldr.w	r2, [r9]
 8008400:	4461      	add	r1, ip
 8008402:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008406:	fb0a c20b 	mla	r2, sl, fp, ip
 800840a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800840e:	b289      	uxth	r1, r1
 8008410:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008414:	4577      	cmp	r7, lr
 8008416:	f849 1b04 	str.w	r1, [r9], #4
 800841a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800841e:	d8e2      	bhi.n	80083e6 <__multiply+0xb2>
 8008420:	9a01      	ldr	r2, [sp, #4]
 8008422:	f845 c002 	str.w	ip, [r5, r2]
 8008426:	9a03      	ldr	r2, [sp, #12]
 8008428:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800842c:	3304      	adds	r3, #4
 800842e:	f1b9 0f00 	cmp.w	r9, #0
 8008432:	d020      	beq.n	8008476 <__multiply+0x142>
 8008434:	6829      	ldr	r1, [r5, #0]
 8008436:	f104 0c14 	add.w	ip, r4, #20
 800843a:	46ae      	mov	lr, r5
 800843c:	f04f 0a00 	mov.w	sl, #0
 8008440:	f8bc b000 	ldrh.w	fp, [ip]
 8008444:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008448:	fb09 220b 	mla	r2, r9, fp, r2
 800844c:	4492      	add	sl, r2
 800844e:	b289      	uxth	r1, r1
 8008450:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008454:	f84e 1b04 	str.w	r1, [lr], #4
 8008458:	f85c 2b04 	ldr.w	r2, [ip], #4
 800845c:	f8be 1000 	ldrh.w	r1, [lr]
 8008460:	0c12      	lsrs	r2, r2, #16
 8008462:	fb09 1102 	mla	r1, r9, r2, r1
 8008466:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800846a:	4567      	cmp	r7, ip
 800846c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008470:	d8e6      	bhi.n	8008440 <__multiply+0x10c>
 8008472:	9a01      	ldr	r2, [sp, #4]
 8008474:	50a9      	str	r1, [r5, r2]
 8008476:	3504      	adds	r5, #4
 8008478:	e79a      	b.n	80083b0 <__multiply+0x7c>
 800847a:	3e01      	subs	r6, #1
 800847c:	e79c      	b.n	80083b8 <__multiply+0x84>
 800847e:	bf00      	nop
 8008480:	08009abb 	.word	0x08009abb
 8008484:	08009acc 	.word	0x08009acc

08008488 <__pow5mult>:
 8008488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800848c:	4615      	mov	r5, r2
 800848e:	f012 0203 	ands.w	r2, r2, #3
 8008492:	4606      	mov	r6, r0
 8008494:	460f      	mov	r7, r1
 8008496:	d007      	beq.n	80084a8 <__pow5mult+0x20>
 8008498:	4c25      	ldr	r4, [pc, #148]	; (8008530 <__pow5mult+0xa8>)
 800849a:	3a01      	subs	r2, #1
 800849c:	2300      	movs	r3, #0
 800849e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80084a2:	f7ff fe9b 	bl	80081dc <__multadd>
 80084a6:	4607      	mov	r7, r0
 80084a8:	10ad      	asrs	r5, r5, #2
 80084aa:	d03d      	beq.n	8008528 <__pow5mult+0xa0>
 80084ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80084ae:	b97c      	cbnz	r4, 80084d0 <__pow5mult+0x48>
 80084b0:	2010      	movs	r0, #16
 80084b2:	f7ff fe1b 	bl	80080ec <malloc>
 80084b6:	4602      	mov	r2, r0
 80084b8:	6270      	str	r0, [r6, #36]	; 0x24
 80084ba:	b928      	cbnz	r0, 80084c8 <__pow5mult+0x40>
 80084bc:	4b1d      	ldr	r3, [pc, #116]	; (8008534 <__pow5mult+0xac>)
 80084be:	481e      	ldr	r0, [pc, #120]	; (8008538 <__pow5mult+0xb0>)
 80084c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80084c4:	f000 fc0e 	bl	8008ce4 <__assert_func>
 80084c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80084cc:	6004      	str	r4, [r0, #0]
 80084ce:	60c4      	str	r4, [r0, #12]
 80084d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80084d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80084d8:	b94c      	cbnz	r4, 80084ee <__pow5mult+0x66>
 80084da:	f240 2171 	movw	r1, #625	; 0x271
 80084de:	4630      	mov	r0, r6
 80084e0:	f7ff ff12 	bl	8008308 <__i2b>
 80084e4:	2300      	movs	r3, #0
 80084e6:	f8c8 0008 	str.w	r0, [r8, #8]
 80084ea:	4604      	mov	r4, r0
 80084ec:	6003      	str	r3, [r0, #0]
 80084ee:	f04f 0900 	mov.w	r9, #0
 80084f2:	07eb      	lsls	r3, r5, #31
 80084f4:	d50a      	bpl.n	800850c <__pow5mult+0x84>
 80084f6:	4639      	mov	r1, r7
 80084f8:	4622      	mov	r2, r4
 80084fa:	4630      	mov	r0, r6
 80084fc:	f7ff ff1a 	bl	8008334 <__multiply>
 8008500:	4639      	mov	r1, r7
 8008502:	4680      	mov	r8, r0
 8008504:	4630      	mov	r0, r6
 8008506:	f7ff fe47 	bl	8008198 <_Bfree>
 800850a:	4647      	mov	r7, r8
 800850c:	106d      	asrs	r5, r5, #1
 800850e:	d00b      	beq.n	8008528 <__pow5mult+0xa0>
 8008510:	6820      	ldr	r0, [r4, #0]
 8008512:	b938      	cbnz	r0, 8008524 <__pow5mult+0x9c>
 8008514:	4622      	mov	r2, r4
 8008516:	4621      	mov	r1, r4
 8008518:	4630      	mov	r0, r6
 800851a:	f7ff ff0b 	bl	8008334 <__multiply>
 800851e:	6020      	str	r0, [r4, #0]
 8008520:	f8c0 9000 	str.w	r9, [r0]
 8008524:	4604      	mov	r4, r0
 8008526:	e7e4      	b.n	80084f2 <__pow5mult+0x6a>
 8008528:	4638      	mov	r0, r7
 800852a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800852e:	bf00      	nop
 8008530:	08009c18 	.word	0x08009c18
 8008534:	08009a49 	.word	0x08009a49
 8008538:	08009acc 	.word	0x08009acc

0800853c <__lshift>:
 800853c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008540:	460c      	mov	r4, r1
 8008542:	6849      	ldr	r1, [r1, #4]
 8008544:	6923      	ldr	r3, [r4, #16]
 8008546:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800854a:	68a3      	ldr	r3, [r4, #8]
 800854c:	4607      	mov	r7, r0
 800854e:	4691      	mov	r9, r2
 8008550:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008554:	f108 0601 	add.w	r6, r8, #1
 8008558:	42b3      	cmp	r3, r6
 800855a:	db0b      	blt.n	8008574 <__lshift+0x38>
 800855c:	4638      	mov	r0, r7
 800855e:	f7ff fddb 	bl	8008118 <_Balloc>
 8008562:	4605      	mov	r5, r0
 8008564:	b948      	cbnz	r0, 800857a <__lshift+0x3e>
 8008566:	4602      	mov	r2, r0
 8008568:	4b2a      	ldr	r3, [pc, #168]	; (8008614 <__lshift+0xd8>)
 800856a:	482b      	ldr	r0, [pc, #172]	; (8008618 <__lshift+0xdc>)
 800856c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008570:	f000 fbb8 	bl	8008ce4 <__assert_func>
 8008574:	3101      	adds	r1, #1
 8008576:	005b      	lsls	r3, r3, #1
 8008578:	e7ee      	b.n	8008558 <__lshift+0x1c>
 800857a:	2300      	movs	r3, #0
 800857c:	f100 0114 	add.w	r1, r0, #20
 8008580:	f100 0210 	add.w	r2, r0, #16
 8008584:	4618      	mov	r0, r3
 8008586:	4553      	cmp	r3, sl
 8008588:	db37      	blt.n	80085fa <__lshift+0xbe>
 800858a:	6920      	ldr	r0, [r4, #16]
 800858c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008590:	f104 0314 	add.w	r3, r4, #20
 8008594:	f019 091f 	ands.w	r9, r9, #31
 8008598:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800859c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80085a0:	d02f      	beq.n	8008602 <__lshift+0xc6>
 80085a2:	f1c9 0e20 	rsb	lr, r9, #32
 80085a6:	468a      	mov	sl, r1
 80085a8:	f04f 0c00 	mov.w	ip, #0
 80085ac:	681a      	ldr	r2, [r3, #0]
 80085ae:	fa02 f209 	lsl.w	r2, r2, r9
 80085b2:	ea42 020c 	orr.w	r2, r2, ip
 80085b6:	f84a 2b04 	str.w	r2, [sl], #4
 80085ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80085be:	4298      	cmp	r0, r3
 80085c0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80085c4:	d8f2      	bhi.n	80085ac <__lshift+0x70>
 80085c6:	1b03      	subs	r3, r0, r4
 80085c8:	3b15      	subs	r3, #21
 80085ca:	f023 0303 	bic.w	r3, r3, #3
 80085ce:	3304      	adds	r3, #4
 80085d0:	f104 0215 	add.w	r2, r4, #21
 80085d4:	4290      	cmp	r0, r2
 80085d6:	bf38      	it	cc
 80085d8:	2304      	movcc	r3, #4
 80085da:	f841 c003 	str.w	ip, [r1, r3]
 80085de:	f1bc 0f00 	cmp.w	ip, #0
 80085e2:	d001      	beq.n	80085e8 <__lshift+0xac>
 80085e4:	f108 0602 	add.w	r6, r8, #2
 80085e8:	3e01      	subs	r6, #1
 80085ea:	4638      	mov	r0, r7
 80085ec:	612e      	str	r6, [r5, #16]
 80085ee:	4621      	mov	r1, r4
 80085f0:	f7ff fdd2 	bl	8008198 <_Bfree>
 80085f4:	4628      	mov	r0, r5
 80085f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80085fe:	3301      	adds	r3, #1
 8008600:	e7c1      	b.n	8008586 <__lshift+0x4a>
 8008602:	3904      	subs	r1, #4
 8008604:	f853 2b04 	ldr.w	r2, [r3], #4
 8008608:	f841 2f04 	str.w	r2, [r1, #4]!
 800860c:	4298      	cmp	r0, r3
 800860e:	d8f9      	bhi.n	8008604 <__lshift+0xc8>
 8008610:	e7ea      	b.n	80085e8 <__lshift+0xac>
 8008612:	bf00      	nop
 8008614:	08009abb 	.word	0x08009abb
 8008618:	08009acc 	.word	0x08009acc

0800861c <__mcmp>:
 800861c:	b530      	push	{r4, r5, lr}
 800861e:	6902      	ldr	r2, [r0, #16]
 8008620:	690c      	ldr	r4, [r1, #16]
 8008622:	1b12      	subs	r2, r2, r4
 8008624:	d10e      	bne.n	8008644 <__mcmp+0x28>
 8008626:	f100 0314 	add.w	r3, r0, #20
 800862a:	3114      	adds	r1, #20
 800862c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008630:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008634:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008638:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800863c:	42a5      	cmp	r5, r4
 800863e:	d003      	beq.n	8008648 <__mcmp+0x2c>
 8008640:	d305      	bcc.n	800864e <__mcmp+0x32>
 8008642:	2201      	movs	r2, #1
 8008644:	4610      	mov	r0, r2
 8008646:	bd30      	pop	{r4, r5, pc}
 8008648:	4283      	cmp	r3, r0
 800864a:	d3f3      	bcc.n	8008634 <__mcmp+0x18>
 800864c:	e7fa      	b.n	8008644 <__mcmp+0x28>
 800864e:	f04f 32ff 	mov.w	r2, #4294967295
 8008652:	e7f7      	b.n	8008644 <__mcmp+0x28>

08008654 <__mdiff>:
 8008654:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008658:	460c      	mov	r4, r1
 800865a:	4606      	mov	r6, r0
 800865c:	4611      	mov	r1, r2
 800865e:	4620      	mov	r0, r4
 8008660:	4690      	mov	r8, r2
 8008662:	f7ff ffdb 	bl	800861c <__mcmp>
 8008666:	1e05      	subs	r5, r0, #0
 8008668:	d110      	bne.n	800868c <__mdiff+0x38>
 800866a:	4629      	mov	r1, r5
 800866c:	4630      	mov	r0, r6
 800866e:	f7ff fd53 	bl	8008118 <_Balloc>
 8008672:	b930      	cbnz	r0, 8008682 <__mdiff+0x2e>
 8008674:	4b3a      	ldr	r3, [pc, #232]	; (8008760 <__mdiff+0x10c>)
 8008676:	4602      	mov	r2, r0
 8008678:	f240 2132 	movw	r1, #562	; 0x232
 800867c:	4839      	ldr	r0, [pc, #228]	; (8008764 <__mdiff+0x110>)
 800867e:	f000 fb31 	bl	8008ce4 <__assert_func>
 8008682:	2301      	movs	r3, #1
 8008684:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008688:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800868c:	bfa4      	itt	ge
 800868e:	4643      	movge	r3, r8
 8008690:	46a0      	movge	r8, r4
 8008692:	4630      	mov	r0, r6
 8008694:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008698:	bfa6      	itte	ge
 800869a:	461c      	movge	r4, r3
 800869c:	2500      	movge	r5, #0
 800869e:	2501      	movlt	r5, #1
 80086a0:	f7ff fd3a 	bl	8008118 <_Balloc>
 80086a4:	b920      	cbnz	r0, 80086b0 <__mdiff+0x5c>
 80086a6:	4b2e      	ldr	r3, [pc, #184]	; (8008760 <__mdiff+0x10c>)
 80086a8:	4602      	mov	r2, r0
 80086aa:	f44f 7110 	mov.w	r1, #576	; 0x240
 80086ae:	e7e5      	b.n	800867c <__mdiff+0x28>
 80086b0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80086b4:	6926      	ldr	r6, [r4, #16]
 80086b6:	60c5      	str	r5, [r0, #12]
 80086b8:	f104 0914 	add.w	r9, r4, #20
 80086bc:	f108 0514 	add.w	r5, r8, #20
 80086c0:	f100 0e14 	add.w	lr, r0, #20
 80086c4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80086c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80086cc:	f108 0210 	add.w	r2, r8, #16
 80086d0:	46f2      	mov	sl, lr
 80086d2:	2100      	movs	r1, #0
 80086d4:	f859 3b04 	ldr.w	r3, [r9], #4
 80086d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80086dc:	fa1f f883 	uxth.w	r8, r3
 80086e0:	fa11 f18b 	uxtah	r1, r1, fp
 80086e4:	0c1b      	lsrs	r3, r3, #16
 80086e6:	eba1 0808 	sub.w	r8, r1, r8
 80086ea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80086ee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80086f2:	fa1f f888 	uxth.w	r8, r8
 80086f6:	1419      	asrs	r1, r3, #16
 80086f8:	454e      	cmp	r6, r9
 80086fa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80086fe:	f84a 3b04 	str.w	r3, [sl], #4
 8008702:	d8e7      	bhi.n	80086d4 <__mdiff+0x80>
 8008704:	1b33      	subs	r3, r6, r4
 8008706:	3b15      	subs	r3, #21
 8008708:	f023 0303 	bic.w	r3, r3, #3
 800870c:	3304      	adds	r3, #4
 800870e:	3415      	adds	r4, #21
 8008710:	42a6      	cmp	r6, r4
 8008712:	bf38      	it	cc
 8008714:	2304      	movcc	r3, #4
 8008716:	441d      	add	r5, r3
 8008718:	4473      	add	r3, lr
 800871a:	469e      	mov	lr, r3
 800871c:	462e      	mov	r6, r5
 800871e:	4566      	cmp	r6, ip
 8008720:	d30e      	bcc.n	8008740 <__mdiff+0xec>
 8008722:	f10c 0203 	add.w	r2, ip, #3
 8008726:	1b52      	subs	r2, r2, r5
 8008728:	f022 0203 	bic.w	r2, r2, #3
 800872c:	3d03      	subs	r5, #3
 800872e:	45ac      	cmp	ip, r5
 8008730:	bf38      	it	cc
 8008732:	2200      	movcc	r2, #0
 8008734:	441a      	add	r2, r3
 8008736:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800873a:	b17b      	cbz	r3, 800875c <__mdiff+0x108>
 800873c:	6107      	str	r7, [r0, #16]
 800873e:	e7a3      	b.n	8008688 <__mdiff+0x34>
 8008740:	f856 8b04 	ldr.w	r8, [r6], #4
 8008744:	fa11 f288 	uxtah	r2, r1, r8
 8008748:	1414      	asrs	r4, r2, #16
 800874a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800874e:	b292      	uxth	r2, r2
 8008750:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008754:	f84e 2b04 	str.w	r2, [lr], #4
 8008758:	1421      	asrs	r1, r4, #16
 800875a:	e7e0      	b.n	800871e <__mdiff+0xca>
 800875c:	3f01      	subs	r7, #1
 800875e:	e7ea      	b.n	8008736 <__mdiff+0xe2>
 8008760:	08009abb 	.word	0x08009abb
 8008764:	08009acc 	.word	0x08009acc

08008768 <__d2b>:
 8008768:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800876c:	4689      	mov	r9, r1
 800876e:	2101      	movs	r1, #1
 8008770:	ec57 6b10 	vmov	r6, r7, d0
 8008774:	4690      	mov	r8, r2
 8008776:	f7ff fccf 	bl	8008118 <_Balloc>
 800877a:	4604      	mov	r4, r0
 800877c:	b930      	cbnz	r0, 800878c <__d2b+0x24>
 800877e:	4602      	mov	r2, r0
 8008780:	4b25      	ldr	r3, [pc, #148]	; (8008818 <__d2b+0xb0>)
 8008782:	4826      	ldr	r0, [pc, #152]	; (800881c <__d2b+0xb4>)
 8008784:	f240 310a 	movw	r1, #778	; 0x30a
 8008788:	f000 faac 	bl	8008ce4 <__assert_func>
 800878c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008790:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008794:	bb35      	cbnz	r5, 80087e4 <__d2b+0x7c>
 8008796:	2e00      	cmp	r6, #0
 8008798:	9301      	str	r3, [sp, #4]
 800879a:	d028      	beq.n	80087ee <__d2b+0x86>
 800879c:	4668      	mov	r0, sp
 800879e:	9600      	str	r6, [sp, #0]
 80087a0:	f7ff fd82 	bl	80082a8 <__lo0bits>
 80087a4:	9900      	ldr	r1, [sp, #0]
 80087a6:	b300      	cbz	r0, 80087ea <__d2b+0x82>
 80087a8:	9a01      	ldr	r2, [sp, #4]
 80087aa:	f1c0 0320 	rsb	r3, r0, #32
 80087ae:	fa02 f303 	lsl.w	r3, r2, r3
 80087b2:	430b      	orrs	r3, r1
 80087b4:	40c2      	lsrs	r2, r0
 80087b6:	6163      	str	r3, [r4, #20]
 80087b8:	9201      	str	r2, [sp, #4]
 80087ba:	9b01      	ldr	r3, [sp, #4]
 80087bc:	61a3      	str	r3, [r4, #24]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	bf14      	ite	ne
 80087c2:	2202      	movne	r2, #2
 80087c4:	2201      	moveq	r2, #1
 80087c6:	6122      	str	r2, [r4, #16]
 80087c8:	b1d5      	cbz	r5, 8008800 <__d2b+0x98>
 80087ca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80087ce:	4405      	add	r5, r0
 80087d0:	f8c9 5000 	str.w	r5, [r9]
 80087d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80087d8:	f8c8 0000 	str.w	r0, [r8]
 80087dc:	4620      	mov	r0, r4
 80087de:	b003      	add	sp, #12
 80087e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80087e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80087e8:	e7d5      	b.n	8008796 <__d2b+0x2e>
 80087ea:	6161      	str	r1, [r4, #20]
 80087ec:	e7e5      	b.n	80087ba <__d2b+0x52>
 80087ee:	a801      	add	r0, sp, #4
 80087f0:	f7ff fd5a 	bl	80082a8 <__lo0bits>
 80087f4:	9b01      	ldr	r3, [sp, #4]
 80087f6:	6163      	str	r3, [r4, #20]
 80087f8:	2201      	movs	r2, #1
 80087fa:	6122      	str	r2, [r4, #16]
 80087fc:	3020      	adds	r0, #32
 80087fe:	e7e3      	b.n	80087c8 <__d2b+0x60>
 8008800:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008804:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008808:	f8c9 0000 	str.w	r0, [r9]
 800880c:	6918      	ldr	r0, [r3, #16]
 800880e:	f7ff fd2b 	bl	8008268 <__hi0bits>
 8008812:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008816:	e7df      	b.n	80087d8 <__d2b+0x70>
 8008818:	08009abb 	.word	0x08009abb
 800881c:	08009acc 	.word	0x08009acc

08008820 <_calloc_r>:
 8008820:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008822:	fba1 2402 	umull	r2, r4, r1, r2
 8008826:	b94c      	cbnz	r4, 800883c <_calloc_r+0x1c>
 8008828:	4611      	mov	r1, r2
 800882a:	9201      	str	r2, [sp, #4]
 800882c:	f000 f87a 	bl	8008924 <_malloc_r>
 8008830:	9a01      	ldr	r2, [sp, #4]
 8008832:	4605      	mov	r5, r0
 8008834:	b930      	cbnz	r0, 8008844 <_calloc_r+0x24>
 8008836:	4628      	mov	r0, r5
 8008838:	b003      	add	sp, #12
 800883a:	bd30      	pop	{r4, r5, pc}
 800883c:	220c      	movs	r2, #12
 800883e:	6002      	str	r2, [r0, #0]
 8008840:	2500      	movs	r5, #0
 8008842:	e7f8      	b.n	8008836 <_calloc_r+0x16>
 8008844:	4621      	mov	r1, r4
 8008846:	f7fe f92b 	bl	8006aa0 <memset>
 800884a:	e7f4      	b.n	8008836 <_calloc_r+0x16>

0800884c <_free_r>:
 800884c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800884e:	2900      	cmp	r1, #0
 8008850:	d044      	beq.n	80088dc <_free_r+0x90>
 8008852:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008856:	9001      	str	r0, [sp, #4]
 8008858:	2b00      	cmp	r3, #0
 800885a:	f1a1 0404 	sub.w	r4, r1, #4
 800885e:	bfb8      	it	lt
 8008860:	18e4      	addlt	r4, r4, r3
 8008862:	f000 fa9b 	bl	8008d9c <__malloc_lock>
 8008866:	4a1e      	ldr	r2, [pc, #120]	; (80088e0 <_free_r+0x94>)
 8008868:	9801      	ldr	r0, [sp, #4]
 800886a:	6813      	ldr	r3, [r2, #0]
 800886c:	b933      	cbnz	r3, 800887c <_free_r+0x30>
 800886e:	6063      	str	r3, [r4, #4]
 8008870:	6014      	str	r4, [r2, #0]
 8008872:	b003      	add	sp, #12
 8008874:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008878:	f000 ba96 	b.w	8008da8 <__malloc_unlock>
 800887c:	42a3      	cmp	r3, r4
 800887e:	d908      	bls.n	8008892 <_free_r+0x46>
 8008880:	6825      	ldr	r5, [r4, #0]
 8008882:	1961      	adds	r1, r4, r5
 8008884:	428b      	cmp	r3, r1
 8008886:	bf01      	itttt	eq
 8008888:	6819      	ldreq	r1, [r3, #0]
 800888a:	685b      	ldreq	r3, [r3, #4]
 800888c:	1949      	addeq	r1, r1, r5
 800888e:	6021      	streq	r1, [r4, #0]
 8008890:	e7ed      	b.n	800886e <_free_r+0x22>
 8008892:	461a      	mov	r2, r3
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	b10b      	cbz	r3, 800889c <_free_r+0x50>
 8008898:	42a3      	cmp	r3, r4
 800889a:	d9fa      	bls.n	8008892 <_free_r+0x46>
 800889c:	6811      	ldr	r1, [r2, #0]
 800889e:	1855      	adds	r5, r2, r1
 80088a0:	42a5      	cmp	r5, r4
 80088a2:	d10b      	bne.n	80088bc <_free_r+0x70>
 80088a4:	6824      	ldr	r4, [r4, #0]
 80088a6:	4421      	add	r1, r4
 80088a8:	1854      	adds	r4, r2, r1
 80088aa:	42a3      	cmp	r3, r4
 80088ac:	6011      	str	r1, [r2, #0]
 80088ae:	d1e0      	bne.n	8008872 <_free_r+0x26>
 80088b0:	681c      	ldr	r4, [r3, #0]
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	6053      	str	r3, [r2, #4]
 80088b6:	4421      	add	r1, r4
 80088b8:	6011      	str	r1, [r2, #0]
 80088ba:	e7da      	b.n	8008872 <_free_r+0x26>
 80088bc:	d902      	bls.n	80088c4 <_free_r+0x78>
 80088be:	230c      	movs	r3, #12
 80088c0:	6003      	str	r3, [r0, #0]
 80088c2:	e7d6      	b.n	8008872 <_free_r+0x26>
 80088c4:	6825      	ldr	r5, [r4, #0]
 80088c6:	1961      	adds	r1, r4, r5
 80088c8:	428b      	cmp	r3, r1
 80088ca:	bf04      	itt	eq
 80088cc:	6819      	ldreq	r1, [r3, #0]
 80088ce:	685b      	ldreq	r3, [r3, #4]
 80088d0:	6063      	str	r3, [r4, #4]
 80088d2:	bf04      	itt	eq
 80088d4:	1949      	addeq	r1, r1, r5
 80088d6:	6021      	streq	r1, [r4, #0]
 80088d8:	6054      	str	r4, [r2, #4]
 80088da:	e7ca      	b.n	8008872 <_free_r+0x26>
 80088dc:	b003      	add	sp, #12
 80088de:	bd30      	pop	{r4, r5, pc}
 80088e0:	200002ac 	.word	0x200002ac

080088e4 <sbrk_aligned>:
 80088e4:	b570      	push	{r4, r5, r6, lr}
 80088e6:	4e0e      	ldr	r6, [pc, #56]	; (8008920 <sbrk_aligned+0x3c>)
 80088e8:	460c      	mov	r4, r1
 80088ea:	6831      	ldr	r1, [r6, #0]
 80088ec:	4605      	mov	r5, r0
 80088ee:	b911      	cbnz	r1, 80088f6 <sbrk_aligned+0x12>
 80088f0:	f000 f9e8 	bl	8008cc4 <_sbrk_r>
 80088f4:	6030      	str	r0, [r6, #0]
 80088f6:	4621      	mov	r1, r4
 80088f8:	4628      	mov	r0, r5
 80088fa:	f000 f9e3 	bl	8008cc4 <_sbrk_r>
 80088fe:	1c43      	adds	r3, r0, #1
 8008900:	d00a      	beq.n	8008918 <sbrk_aligned+0x34>
 8008902:	1cc4      	adds	r4, r0, #3
 8008904:	f024 0403 	bic.w	r4, r4, #3
 8008908:	42a0      	cmp	r0, r4
 800890a:	d007      	beq.n	800891c <sbrk_aligned+0x38>
 800890c:	1a21      	subs	r1, r4, r0
 800890e:	4628      	mov	r0, r5
 8008910:	f000 f9d8 	bl	8008cc4 <_sbrk_r>
 8008914:	3001      	adds	r0, #1
 8008916:	d101      	bne.n	800891c <sbrk_aligned+0x38>
 8008918:	f04f 34ff 	mov.w	r4, #4294967295
 800891c:	4620      	mov	r0, r4
 800891e:	bd70      	pop	{r4, r5, r6, pc}
 8008920:	200002b0 	.word	0x200002b0

08008924 <_malloc_r>:
 8008924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008928:	1ccd      	adds	r5, r1, #3
 800892a:	f025 0503 	bic.w	r5, r5, #3
 800892e:	3508      	adds	r5, #8
 8008930:	2d0c      	cmp	r5, #12
 8008932:	bf38      	it	cc
 8008934:	250c      	movcc	r5, #12
 8008936:	2d00      	cmp	r5, #0
 8008938:	4607      	mov	r7, r0
 800893a:	db01      	blt.n	8008940 <_malloc_r+0x1c>
 800893c:	42a9      	cmp	r1, r5
 800893e:	d905      	bls.n	800894c <_malloc_r+0x28>
 8008940:	230c      	movs	r3, #12
 8008942:	603b      	str	r3, [r7, #0]
 8008944:	2600      	movs	r6, #0
 8008946:	4630      	mov	r0, r6
 8008948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800894c:	4e2e      	ldr	r6, [pc, #184]	; (8008a08 <_malloc_r+0xe4>)
 800894e:	f000 fa25 	bl	8008d9c <__malloc_lock>
 8008952:	6833      	ldr	r3, [r6, #0]
 8008954:	461c      	mov	r4, r3
 8008956:	bb34      	cbnz	r4, 80089a6 <_malloc_r+0x82>
 8008958:	4629      	mov	r1, r5
 800895a:	4638      	mov	r0, r7
 800895c:	f7ff ffc2 	bl	80088e4 <sbrk_aligned>
 8008960:	1c43      	adds	r3, r0, #1
 8008962:	4604      	mov	r4, r0
 8008964:	d14d      	bne.n	8008a02 <_malloc_r+0xde>
 8008966:	6834      	ldr	r4, [r6, #0]
 8008968:	4626      	mov	r6, r4
 800896a:	2e00      	cmp	r6, #0
 800896c:	d140      	bne.n	80089f0 <_malloc_r+0xcc>
 800896e:	6823      	ldr	r3, [r4, #0]
 8008970:	4631      	mov	r1, r6
 8008972:	4638      	mov	r0, r7
 8008974:	eb04 0803 	add.w	r8, r4, r3
 8008978:	f000 f9a4 	bl	8008cc4 <_sbrk_r>
 800897c:	4580      	cmp	r8, r0
 800897e:	d13a      	bne.n	80089f6 <_malloc_r+0xd2>
 8008980:	6821      	ldr	r1, [r4, #0]
 8008982:	3503      	adds	r5, #3
 8008984:	1a6d      	subs	r5, r5, r1
 8008986:	f025 0503 	bic.w	r5, r5, #3
 800898a:	3508      	adds	r5, #8
 800898c:	2d0c      	cmp	r5, #12
 800898e:	bf38      	it	cc
 8008990:	250c      	movcc	r5, #12
 8008992:	4629      	mov	r1, r5
 8008994:	4638      	mov	r0, r7
 8008996:	f7ff ffa5 	bl	80088e4 <sbrk_aligned>
 800899a:	3001      	adds	r0, #1
 800899c:	d02b      	beq.n	80089f6 <_malloc_r+0xd2>
 800899e:	6823      	ldr	r3, [r4, #0]
 80089a0:	442b      	add	r3, r5
 80089a2:	6023      	str	r3, [r4, #0]
 80089a4:	e00e      	b.n	80089c4 <_malloc_r+0xa0>
 80089a6:	6822      	ldr	r2, [r4, #0]
 80089a8:	1b52      	subs	r2, r2, r5
 80089aa:	d41e      	bmi.n	80089ea <_malloc_r+0xc6>
 80089ac:	2a0b      	cmp	r2, #11
 80089ae:	d916      	bls.n	80089de <_malloc_r+0xba>
 80089b0:	1961      	adds	r1, r4, r5
 80089b2:	42a3      	cmp	r3, r4
 80089b4:	6025      	str	r5, [r4, #0]
 80089b6:	bf18      	it	ne
 80089b8:	6059      	strne	r1, [r3, #4]
 80089ba:	6863      	ldr	r3, [r4, #4]
 80089bc:	bf08      	it	eq
 80089be:	6031      	streq	r1, [r6, #0]
 80089c0:	5162      	str	r2, [r4, r5]
 80089c2:	604b      	str	r3, [r1, #4]
 80089c4:	4638      	mov	r0, r7
 80089c6:	f104 060b 	add.w	r6, r4, #11
 80089ca:	f000 f9ed 	bl	8008da8 <__malloc_unlock>
 80089ce:	f026 0607 	bic.w	r6, r6, #7
 80089d2:	1d23      	adds	r3, r4, #4
 80089d4:	1af2      	subs	r2, r6, r3
 80089d6:	d0b6      	beq.n	8008946 <_malloc_r+0x22>
 80089d8:	1b9b      	subs	r3, r3, r6
 80089da:	50a3      	str	r3, [r4, r2]
 80089dc:	e7b3      	b.n	8008946 <_malloc_r+0x22>
 80089de:	6862      	ldr	r2, [r4, #4]
 80089e0:	42a3      	cmp	r3, r4
 80089e2:	bf0c      	ite	eq
 80089e4:	6032      	streq	r2, [r6, #0]
 80089e6:	605a      	strne	r2, [r3, #4]
 80089e8:	e7ec      	b.n	80089c4 <_malloc_r+0xa0>
 80089ea:	4623      	mov	r3, r4
 80089ec:	6864      	ldr	r4, [r4, #4]
 80089ee:	e7b2      	b.n	8008956 <_malloc_r+0x32>
 80089f0:	4634      	mov	r4, r6
 80089f2:	6876      	ldr	r6, [r6, #4]
 80089f4:	e7b9      	b.n	800896a <_malloc_r+0x46>
 80089f6:	230c      	movs	r3, #12
 80089f8:	603b      	str	r3, [r7, #0]
 80089fa:	4638      	mov	r0, r7
 80089fc:	f000 f9d4 	bl	8008da8 <__malloc_unlock>
 8008a00:	e7a1      	b.n	8008946 <_malloc_r+0x22>
 8008a02:	6025      	str	r5, [r4, #0]
 8008a04:	e7de      	b.n	80089c4 <_malloc_r+0xa0>
 8008a06:	bf00      	nop
 8008a08:	200002ac 	.word	0x200002ac

08008a0c <__ssputs_r>:
 8008a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a10:	688e      	ldr	r6, [r1, #8]
 8008a12:	429e      	cmp	r6, r3
 8008a14:	4682      	mov	sl, r0
 8008a16:	460c      	mov	r4, r1
 8008a18:	4690      	mov	r8, r2
 8008a1a:	461f      	mov	r7, r3
 8008a1c:	d838      	bhi.n	8008a90 <__ssputs_r+0x84>
 8008a1e:	898a      	ldrh	r2, [r1, #12]
 8008a20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008a24:	d032      	beq.n	8008a8c <__ssputs_r+0x80>
 8008a26:	6825      	ldr	r5, [r4, #0]
 8008a28:	6909      	ldr	r1, [r1, #16]
 8008a2a:	eba5 0901 	sub.w	r9, r5, r1
 8008a2e:	6965      	ldr	r5, [r4, #20]
 8008a30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008a38:	3301      	adds	r3, #1
 8008a3a:	444b      	add	r3, r9
 8008a3c:	106d      	asrs	r5, r5, #1
 8008a3e:	429d      	cmp	r5, r3
 8008a40:	bf38      	it	cc
 8008a42:	461d      	movcc	r5, r3
 8008a44:	0553      	lsls	r3, r2, #21
 8008a46:	d531      	bpl.n	8008aac <__ssputs_r+0xa0>
 8008a48:	4629      	mov	r1, r5
 8008a4a:	f7ff ff6b 	bl	8008924 <_malloc_r>
 8008a4e:	4606      	mov	r6, r0
 8008a50:	b950      	cbnz	r0, 8008a68 <__ssputs_r+0x5c>
 8008a52:	230c      	movs	r3, #12
 8008a54:	f8ca 3000 	str.w	r3, [sl]
 8008a58:	89a3      	ldrh	r3, [r4, #12]
 8008a5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a5e:	81a3      	strh	r3, [r4, #12]
 8008a60:	f04f 30ff 	mov.w	r0, #4294967295
 8008a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a68:	6921      	ldr	r1, [r4, #16]
 8008a6a:	464a      	mov	r2, r9
 8008a6c:	f7ff fb46 	bl	80080fc <memcpy>
 8008a70:	89a3      	ldrh	r3, [r4, #12]
 8008a72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008a76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a7a:	81a3      	strh	r3, [r4, #12]
 8008a7c:	6126      	str	r6, [r4, #16]
 8008a7e:	6165      	str	r5, [r4, #20]
 8008a80:	444e      	add	r6, r9
 8008a82:	eba5 0509 	sub.w	r5, r5, r9
 8008a86:	6026      	str	r6, [r4, #0]
 8008a88:	60a5      	str	r5, [r4, #8]
 8008a8a:	463e      	mov	r6, r7
 8008a8c:	42be      	cmp	r6, r7
 8008a8e:	d900      	bls.n	8008a92 <__ssputs_r+0x86>
 8008a90:	463e      	mov	r6, r7
 8008a92:	6820      	ldr	r0, [r4, #0]
 8008a94:	4632      	mov	r2, r6
 8008a96:	4641      	mov	r1, r8
 8008a98:	f000 f966 	bl	8008d68 <memmove>
 8008a9c:	68a3      	ldr	r3, [r4, #8]
 8008a9e:	1b9b      	subs	r3, r3, r6
 8008aa0:	60a3      	str	r3, [r4, #8]
 8008aa2:	6823      	ldr	r3, [r4, #0]
 8008aa4:	4433      	add	r3, r6
 8008aa6:	6023      	str	r3, [r4, #0]
 8008aa8:	2000      	movs	r0, #0
 8008aaa:	e7db      	b.n	8008a64 <__ssputs_r+0x58>
 8008aac:	462a      	mov	r2, r5
 8008aae:	f000 f981 	bl	8008db4 <_realloc_r>
 8008ab2:	4606      	mov	r6, r0
 8008ab4:	2800      	cmp	r0, #0
 8008ab6:	d1e1      	bne.n	8008a7c <__ssputs_r+0x70>
 8008ab8:	6921      	ldr	r1, [r4, #16]
 8008aba:	4650      	mov	r0, sl
 8008abc:	f7ff fec6 	bl	800884c <_free_r>
 8008ac0:	e7c7      	b.n	8008a52 <__ssputs_r+0x46>
	...

08008ac4 <_svfiprintf_r>:
 8008ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ac8:	4698      	mov	r8, r3
 8008aca:	898b      	ldrh	r3, [r1, #12]
 8008acc:	061b      	lsls	r3, r3, #24
 8008ace:	b09d      	sub	sp, #116	; 0x74
 8008ad0:	4607      	mov	r7, r0
 8008ad2:	460d      	mov	r5, r1
 8008ad4:	4614      	mov	r4, r2
 8008ad6:	d50e      	bpl.n	8008af6 <_svfiprintf_r+0x32>
 8008ad8:	690b      	ldr	r3, [r1, #16]
 8008ada:	b963      	cbnz	r3, 8008af6 <_svfiprintf_r+0x32>
 8008adc:	2140      	movs	r1, #64	; 0x40
 8008ade:	f7ff ff21 	bl	8008924 <_malloc_r>
 8008ae2:	6028      	str	r0, [r5, #0]
 8008ae4:	6128      	str	r0, [r5, #16]
 8008ae6:	b920      	cbnz	r0, 8008af2 <_svfiprintf_r+0x2e>
 8008ae8:	230c      	movs	r3, #12
 8008aea:	603b      	str	r3, [r7, #0]
 8008aec:	f04f 30ff 	mov.w	r0, #4294967295
 8008af0:	e0d1      	b.n	8008c96 <_svfiprintf_r+0x1d2>
 8008af2:	2340      	movs	r3, #64	; 0x40
 8008af4:	616b      	str	r3, [r5, #20]
 8008af6:	2300      	movs	r3, #0
 8008af8:	9309      	str	r3, [sp, #36]	; 0x24
 8008afa:	2320      	movs	r3, #32
 8008afc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b00:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b04:	2330      	movs	r3, #48	; 0x30
 8008b06:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008cb0 <_svfiprintf_r+0x1ec>
 8008b0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b0e:	f04f 0901 	mov.w	r9, #1
 8008b12:	4623      	mov	r3, r4
 8008b14:	469a      	mov	sl, r3
 8008b16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b1a:	b10a      	cbz	r2, 8008b20 <_svfiprintf_r+0x5c>
 8008b1c:	2a25      	cmp	r2, #37	; 0x25
 8008b1e:	d1f9      	bne.n	8008b14 <_svfiprintf_r+0x50>
 8008b20:	ebba 0b04 	subs.w	fp, sl, r4
 8008b24:	d00b      	beq.n	8008b3e <_svfiprintf_r+0x7a>
 8008b26:	465b      	mov	r3, fp
 8008b28:	4622      	mov	r2, r4
 8008b2a:	4629      	mov	r1, r5
 8008b2c:	4638      	mov	r0, r7
 8008b2e:	f7ff ff6d 	bl	8008a0c <__ssputs_r>
 8008b32:	3001      	adds	r0, #1
 8008b34:	f000 80aa 	beq.w	8008c8c <_svfiprintf_r+0x1c8>
 8008b38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b3a:	445a      	add	r2, fp
 8008b3c:	9209      	str	r2, [sp, #36]	; 0x24
 8008b3e:	f89a 3000 	ldrb.w	r3, [sl]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	f000 80a2 	beq.w	8008c8c <_svfiprintf_r+0x1c8>
 8008b48:	2300      	movs	r3, #0
 8008b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8008b4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b52:	f10a 0a01 	add.w	sl, sl, #1
 8008b56:	9304      	str	r3, [sp, #16]
 8008b58:	9307      	str	r3, [sp, #28]
 8008b5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b5e:	931a      	str	r3, [sp, #104]	; 0x68
 8008b60:	4654      	mov	r4, sl
 8008b62:	2205      	movs	r2, #5
 8008b64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b68:	4851      	ldr	r0, [pc, #324]	; (8008cb0 <_svfiprintf_r+0x1ec>)
 8008b6a:	f7f7 fb39 	bl	80001e0 <memchr>
 8008b6e:	9a04      	ldr	r2, [sp, #16]
 8008b70:	b9d8      	cbnz	r0, 8008baa <_svfiprintf_r+0xe6>
 8008b72:	06d0      	lsls	r0, r2, #27
 8008b74:	bf44      	itt	mi
 8008b76:	2320      	movmi	r3, #32
 8008b78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b7c:	0711      	lsls	r1, r2, #28
 8008b7e:	bf44      	itt	mi
 8008b80:	232b      	movmi	r3, #43	; 0x2b
 8008b82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b86:	f89a 3000 	ldrb.w	r3, [sl]
 8008b8a:	2b2a      	cmp	r3, #42	; 0x2a
 8008b8c:	d015      	beq.n	8008bba <_svfiprintf_r+0xf6>
 8008b8e:	9a07      	ldr	r2, [sp, #28]
 8008b90:	4654      	mov	r4, sl
 8008b92:	2000      	movs	r0, #0
 8008b94:	f04f 0c0a 	mov.w	ip, #10
 8008b98:	4621      	mov	r1, r4
 8008b9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b9e:	3b30      	subs	r3, #48	; 0x30
 8008ba0:	2b09      	cmp	r3, #9
 8008ba2:	d94e      	bls.n	8008c42 <_svfiprintf_r+0x17e>
 8008ba4:	b1b0      	cbz	r0, 8008bd4 <_svfiprintf_r+0x110>
 8008ba6:	9207      	str	r2, [sp, #28]
 8008ba8:	e014      	b.n	8008bd4 <_svfiprintf_r+0x110>
 8008baa:	eba0 0308 	sub.w	r3, r0, r8
 8008bae:	fa09 f303 	lsl.w	r3, r9, r3
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	9304      	str	r3, [sp, #16]
 8008bb6:	46a2      	mov	sl, r4
 8008bb8:	e7d2      	b.n	8008b60 <_svfiprintf_r+0x9c>
 8008bba:	9b03      	ldr	r3, [sp, #12]
 8008bbc:	1d19      	adds	r1, r3, #4
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	9103      	str	r1, [sp, #12]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	bfbb      	ittet	lt
 8008bc6:	425b      	neglt	r3, r3
 8008bc8:	f042 0202 	orrlt.w	r2, r2, #2
 8008bcc:	9307      	strge	r3, [sp, #28]
 8008bce:	9307      	strlt	r3, [sp, #28]
 8008bd0:	bfb8      	it	lt
 8008bd2:	9204      	strlt	r2, [sp, #16]
 8008bd4:	7823      	ldrb	r3, [r4, #0]
 8008bd6:	2b2e      	cmp	r3, #46	; 0x2e
 8008bd8:	d10c      	bne.n	8008bf4 <_svfiprintf_r+0x130>
 8008bda:	7863      	ldrb	r3, [r4, #1]
 8008bdc:	2b2a      	cmp	r3, #42	; 0x2a
 8008bde:	d135      	bne.n	8008c4c <_svfiprintf_r+0x188>
 8008be0:	9b03      	ldr	r3, [sp, #12]
 8008be2:	1d1a      	adds	r2, r3, #4
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	9203      	str	r2, [sp, #12]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	bfb8      	it	lt
 8008bec:	f04f 33ff 	movlt.w	r3, #4294967295
 8008bf0:	3402      	adds	r4, #2
 8008bf2:	9305      	str	r3, [sp, #20]
 8008bf4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008cc0 <_svfiprintf_r+0x1fc>
 8008bf8:	7821      	ldrb	r1, [r4, #0]
 8008bfa:	2203      	movs	r2, #3
 8008bfc:	4650      	mov	r0, sl
 8008bfe:	f7f7 faef 	bl	80001e0 <memchr>
 8008c02:	b140      	cbz	r0, 8008c16 <_svfiprintf_r+0x152>
 8008c04:	2340      	movs	r3, #64	; 0x40
 8008c06:	eba0 000a 	sub.w	r0, r0, sl
 8008c0a:	fa03 f000 	lsl.w	r0, r3, r0
 8008c0e:	9b04      	ldr	r3, [sp, #16]
 8008c10:	4303      	orrs	r3, r0
 8008c12:	3401      	adds	r4, #1
 8008c14:	9304      	str	r3, [sp, #16]
 8008c16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c1a:	4826      	ldr	r0, [pc, #152]	; (8008cb4 <_svfiprintf_r+0x1f0>)
 8008c1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c20:	2206      	movs	r2, #6
 8008c22:	f7f7 fadd 	bl	80001e0 <memchr>
 8008c26:	2800      	cmp	r0, #0
 8008c28:	d038      	beq.n	8008c9c <_svfiprintf_r+0x1d8>
 8008c2a:	4b23      	ldr	r3, [pc, #140]	; (8008cb8 <_svfiprintf_r+0x1f4>)
 8008c2c:	bb1b      	cbnz	r3, 8008c76 <_svfiprintf_r+0x1b2>
 8008c2e:	9b03      	ldr	r3, [sp, #12]
 8008c30:	3307      	adds	r3, #7
 8008c32:	f023 0307 	bic.w	r3, r3, #7
 8008c36:	3308      	adds	r3, #8
 8008c38:	9303      	str	r3, [sp, #12]
 8008c3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c3c:	4433      	add	r3, r6
 8008c3e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c40:	e767      	b.n	8008b12 <_svfiprintf_r+0x4e>
 8008c42:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c46:	460c      	mov	r4, r1
 8008c48:	2001      	movs	r0, #1
 8008c4a:	e7a5      	b.n	8008b98 <_svfiprintf_r+0xd4>
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	3401      	adds	r4, #1
 8008c50:	9305      	str	r3, [sp, #20]
 8008c52:	4619      	mov	r1, r3
 8008c54:	f04f 0c0a 	mov.w	ip, #10
 8008c58:	4620      	mov	r0, r4
 8008c5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c5e:	3a30      	subs	r2, #48	; 0x30
 8008c60:	2a09      	cmp	r2, #9
 8008c62:	d903      	bls.n	8008c6c <_svfiprintf_r+0x1a8>
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d0c5      	beq.n	8008bf4 <_svfiprintf_r+0x130>
 8008c68:	9105      	str	r1, [sp, #20]
 8008c6a:	e7c3      	b.n	8008bf4 <_svfiprintf_r+0x130>
 8008c6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c70:	4604      	mov	r4, r0
 8008c72:	2301      	movs	r3, #1
 8008c74:	e7f0      	b.n	8008c58 <_svfiprintf_r+0x194>
 8008c76:	ab03      	add	r3, sp, #12
 8008c78:	9300      	str	r3, [sp, #0]
 8008c7a:	462a      	mov	r2, r5
 8008c7c:	4b0f      	ldr	r3, [pc, #60]	; (8008cbc <_svfiprintf_r+0x1f8>)
 8008c7e:	a904      	add	r1, sp, #16
 8008c80:	4638      	mov	r0, r7
 8008c82:	f7fd ffb5 	bl	8006bf0 <_printf_float>
 8008c86:	1c42      	adds	r2, r0, #1
 8008c88:	4606      	mov	r6, r0
 8008c8a:	d1d6      	bne.n	8008c3a <_svfiprintf_r+0x176>
 8008c8c:	89ab      	ldrh	r3, [r5, #12]
 8008c8e:	065b      	lsls	r3, r3, #25
 8008c90:	f53f af2c 	bmi.w	8008aec <_svfiprintf_r+0x28>
 8008c94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c96:	b01d      	add	sp, #116	; 0x74
 8008c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c9c:	ab03      	add	r3, sp, #12
 8008c9e:	9300      	str	r3, [sp, #0]
 8008ca0:	462a      	mov	r2, r5
 8008ca2:	4b06      	ldr	r3, [pc, #24]	; (8008cbc <_svfiprintf_r+0x1f8>)
 8008ca4:	a904      	add	r1, sp, #16
 8008ca6:	4638      	mov	r0, r7
 8008ca8:	f7fe fa46 	bl	8007138 <_printf_i>
 8008cac:	e7eb      	b.n	8008c86 <_svfiprintf_r+0x1c2>
 8008cae:	bf00      	nop
 8008cb0:	08009c24 	.word	0x08009c24
 8008cb4:	08009c2e 	.word	0x08009c2e
 8008cb8:	08006bf1 	.word	0x08006bf1
 8008cbc:	08008a0d 	.word	0x08008a0d
 8008cc0:	08009c2a 	.word	0x08009c2a

08008cc4 <_sbrk_r>:
 8008cc4:	b538      	push	{r3, r4, r5, lr}
 8008cc6:	4d06      	ldr	r5, [pc, #24]	; (8008ce0 <_sbrk_r+0x1c>)
 8008cc8:	2300      	movs	r3, #0
 8008cca:	4604      	mov	r4, r0
 8008ccc:	4608      	mov	r0, r1
 8008cce:	602b      	str	r3, [r5, #0]
 8008cd0:	f7fa fdee 	bl	80038b0 <_sbrk>
 8008cd4:	1c43      	adds	r3, r0, #1
 8008cd6:	d102      	bne.n	8008cde <_sbrk_r+0x1a>
 8008cd8:	682b      	ldr	r3, [r5, #0]
 8008cda:	b103      	cbz	r3, 8008cde <_sbrk_r+0x1a>
 8008cdc:	6023      	str	r3, [r4, #0]
 8008cde:	bd38      	pop	{r3, r4, r5, pc}
 8008ce0:	200002b4 	.word	0x200002b4

08008ce4 <__assert_func>:
 8008ce4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008ce6:	4614      	mov	r4, r2
 8008ce8:	461a      	mov	r2, r3
 8008cea:	4b09      	ldr	r3, [pc, #36]	; (8008d10 <__assert_func+0x2c>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4605      	mov	r5, r0
 8008cf0:	68d8      	ldr	r0, [r3, #12]
 8008cf2:	b14c      	cbz	r4, 8008d08 <__assert_func+0x24>
 8008cf4:	4b07      	ldr	r3, [pc, #28]	; (8008d14 <__assert_func+0x30>)
 8008cf6:	9100      	str	r1, [sp, #0]
 8008cf8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008cfc:	4906      	ldr	r1, [pc, #24]	; (8008d18 <__assert_func+0x34>)
 8008cfe:	462b      	mov	r3, r5
 8008d00:	f000 f80e 	bl	8008d20 <fiprintf>
 8008d04:	f000 faac 	bl	8009260 <abort>
 8008d08:	4b04      	ldr	r3, [pc, #16]	; (8008d1c <__assert_func+0x38>)
 8008d0a:	461c      	mov	r4, r3
 8008d0c:	e7f3      	b.n	8008cf6 <__assert_func+0x12>
 8008d0e:	bf00      	nop
 8008d10:	2000001c 	.word	0x2000001c
 8008d14:	08009c35 	.word	0x08009c35
 8008d18:	08009c42 	.word	0x08009c42
 8008d1c:	08009c70 	.word	0x08009c70

08008d20 <fiprintf>:
 8008d20:	b40e      	push	{r1, r2, r3}
 8008d22:	b503      	push	{r0, r1, lr}
 8008d24:	4601      	mov	r1, r0
 8008d26:	ab03      	add	r3, sp, #12
 8008d28:	4805      	ldr	r0, [pc, #20]	; (8008d40 <fiprintf+0x20>)
 8008d2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d2e:	6800      	ldr	r0, [r0, #0]
 8008d30:	9301      	str	r3, [sp, #4]
 8008d32:	f000 f897 	bl	8008e64 <_vfiprintf_r>
 8008d36:	b002      	add	sp, #8
 8008d38:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d3c:	b003      	add	sp, #12
 8008d3e:	4770      	bx	lr
 8008d40:	2000001c 	.word	0x2000001c

08008d44 <__ascii_mbtowc>:
 8008d44:	b082      	sub	sp, #8
 8008d46:	b901      	cbnz	r1, 8008d4a <__ascii_mbtowc+0x6>
 8008d48:	a901      	add	r1, sp, #4
 8008d4a:	b142      	cbz	r2, 8008d5e <__ascii_mbtowc+0x1a>
 8008d4c:	b14b      	cbz	r3, 8008d62 <__ascii_mbtowc+0x1e>
 8008d4e:	7813      	ldrb	r3, [r2, #0]
 8008d50:	600b      	str	r3, [r1, #0]
 8008d52:	7812      	ldrb	r2, [r2, #0]
 8008d54:	1e10      	subs	r0, r2, #0
 8008d56:	bf18      	it	ne
 8008d58:	2001      	movne	r0, #1
 8008d5a:	b002      	add	sp, #8
 8008d5c:	4770      	bx	lr
 8008d5e:	4610      	mov	r0, r2
 8008d60:	e7fb      	b.n	8008d5a <__ascii_mbtowc+0x16>
 8008d62:	f06f 0001 	mvn.w	r0, #1
 8008d66:	e7f8      	b.n	8008d5a <__ascii_mbtowc+0x16>

08008d68 <memmove>:
 8008d68:	4288      	cmp	r0, r1
 8008d6a:	b510      	push	{r4, lr}
 8008d6c:	eb01 0402 	add.w	r4, r1, r2
 8008d70:	d902      	bls.n	8008d78 <memmove+0x10>
 8008d72:	4284      	cmp	r4, r0
 8008d74:	4623      	mov	r3, r4
 8008d76:	d807      	bhi.n	8008d88 <memmove+0x20>
 8008d78:	1e43      	subs	r3, r0, #1
 8008d7a:	42a1      	cmp	r1, r4
 8008d7c:	d008      	beq.n	8008d90 <memmove+0x28>
 8008d7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d86:	e7f8      	b.n	8008d7a <memmove+0x12>
 8008d88:	4402      	add	r2, r0
 8008d8a:	4601      	mov	r1, r0
 8008d8c:	428a      	cmp	r2, r1
 8008d8e:	d100      	bne.n	8008d92 <memmove+0x2a>
 8008d90:	bd10      	pop	{r4, pc}
 8008d92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d9a:	e7f7      	b.n	8008d8c <memmove+0x24>

08008d9c <__malloc_lock>:
 8008d9c:	4801      	ldr	r0, [pc, #4]	; (8008da4 <__malloc_lock+0x8>)
 8008d9e:	f000 bc1f 	b.w	80095e0 <__retarget_lock_acquire_recursive>
 8008da2:	bf00      	nop
 8008da4:	200002b8 	.word	0x200002b8

08008da8 <__malloc_unlock>:
 8008da8:	4801      	ldr	r0, [pc, #4]	; (8008db0 <__malloc_unlock+0x8>)
 8008daa:	f000 bc1a 	b.w	80095e2 <__retarget_lock_release_recursive>
 8008dae:	bf00      	nop
 8008db0:	200002b8 	.word	0x200002b8

08008db4 <_realloc_r>:
 8008db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008db8:	4680      	mov	r8, r0
 8008dba:	4614      	mov	r4, r2
 8008dbc:	460e      	mov	r6, r1
 8008dbe:	b921      	cbnz	r1, 8008dca <_realloc_r+0x16>
 8008dc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008dc4:	4611      	mov	r1, r2
 8008dc6:	f7ff bdad 	b.w	8008924 <_malloc_r>
 8008dca:	b92a      	cbnz	r2, 8008dd8 <_realloc_r+0x24>
 8008dcc:	f7ff fd3e 	bl	800884c <_free_r>
 8008dd0:	4625      	mov	r5, r4
 8008dd2:	4628      	mov	r0, r5
 8008dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dd8:	f000 fc6a 	bl	80096b0 <_malloc_usable_size_r>
 8008ddc:	4284      	cmp	r4, r0
 8008dde:	4607      	mov	r7, r0
 8008de0:	d802      	bhi.n	8008de8 <_realloc_r+0x34>
 8008de2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008de6:	d812      	bhi.n	8008e0e <_realloc_r+0x5a>
 8008de8:	4621      	mov	r1, r4
 8008dea:	4640      	mov	r0, r8
 8008dec:	f7ff fd9a 	bl	8008924 <_malloc_r>
 8008df0:	4605      	mov	r5, r0
 8008df2:	2800      	cmp	r0, #0
 8008df4:	d0ed      	beq.n	8008dd2 <_realloc_r+0x1e>
 8008df6:	42bc      	cmp	r4, r7
 8008df8:	4622      	mov	r2, r4
 8008dfa:	4631      	mov	r1, r6
 8008dfc:	bf28      	it	cs
 8008dfe:	463a      	movcs	r2, r7
 8008e00:	f7ff f97c 	bl	80080fc <memcpy>
 8008e04:	4631      	mov	r1, r6
 8008e06:	4640      	mov	r0, r8
 8008e08:	f7ff fd20 	bl	800884c <_free_r>
 8008e0c:	e7e1      	b.n	8008dd2 <_realloc_r+0x1e>
 8008e0e:	4635      	mov	r5, r6
 8008e10:	e7df      	b.n	8008dd2 <_realloc_r+0x1e>

08008e12 <__sfputc_r>:
 8008e12:	6893      	ldr	r3, [r2, #8]
 8008e14:	3b01      	subs	r3, #1
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	b410      	push	{r4}
 8008e1a:	6093      	str	r3, [r2, #8]
 8008e1c:	da08      	bge.n	8008e30 <__sfputc_r+0x1e>
 8008e1e:	6994      	ldr	r4, [r2, #24]
 8008e20:	42a3      	cmp	r3, r4
 8008e22:	db01      	blt.n	8008e28 <__sfputc_r+0x16>
 8008e24:	290a      	cmp	r1, #10
 8008e26:	d103      	bne.n	8008e30 <__sfputc_r+0x1e>
 8008e28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e2c:	f000 b94a 	b.w	80090c4 <__swbuf_r>
 8008e30:	6813      	ldr	r3, [r2, #0]
 8008e32:	1c58      	adds	r0, r3, #1
 8008e34:	6010      	str	r0, [r2, #0]
 8008e36:	7019      	strb	r1, [r3, #0]
 8008e38:	4608      	mov	r0, r1
 8008e3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e3e:	4770      	bx	lr

08008e40 <__sfputs_r>:
 8008e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e42:	4606      	mov	r6, r0
 8008e44:	460f      	mov	r7, r1
 8008e46:	4614      	mov	r4, r2
 8008e48:	18d5      	adds	r5, r2, r3
 8008e4a:	42ac      	cmp	r4, r5
 8008e4c:	d101      	bne.n	8008e52 <__sfputs_r+0x12>
 8008e4e:	2000      	movs	r0, #0
 8008e50:	e007      	b.n	8008e62 <__sfputs_r+0x22>
 8008e52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e56:	463a      	mov	r2, r7
 8008e58:	4630      	mov	r0, r6
 8008e5a:	f7ff ffda 	bl	8008e12 <__sfputc_r>
 8008e5e:	1c43      	adds	r3, r0, #1
 8008e60:	d1f3      	bne.n	8008e4a <__sfputs_r+0xa>
 8008e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008e64 <_vfiprintf_r>:
 8008e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e68:	460d      	mov	r5, r1
 8008e6a:	b09d      	sub	sp, #116	; 0x74
 8008e6c:	4614      	mov	r4, r2
 8008e6e:	4698      	mov	r8, r3
 8008e70:	4606      	mov	r6, r0
 8008e72:	b118      	cbz	r0, 8008e7c <_vfiprintf_r+0x18>
 8008e74:	6983      	ldr	r3, [r0, #24]
 8008e76:	b90b      	cbnz	r3, 8008e7c <_vfiprintf_r+0x18>
 8008e78:	f000 fb14 	bl	80094a4 <__sinit>
 8008e7c:	4b89      	ldr	r3, [pc, #548]	; (80090a4 <_vfiprintf_r+0x240>)
 8008e7e:	429d      	cmp	r5, r3
 8008e80:	d11b      	bne.n	8008eba <_vfiprintf_r+0x56>
 8008e82:	6875      	ldr	r5, [r6, #4]
 8008e84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e86:	07d9      	lsls	r1, r3, #31
 8008e88:	d405      	bmi.n	8008e96 <_vfiprintf_r+0x32>
 8008e8a:	89ab      	ldrh	r3, [r5, #12]
 8008e8c:	059a      	lsls	r2, r3, #22
 8008e8e:	d402      	bmi.n	8008e96 <_vfiprintf_r+0x32>
 8008e90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e92:	f000 fba5 	bl	80095e0 <__retarget_lock_acquire_recursive>
 8008e96:	89ab      	ldrh	r3, [r5, #12]
 8008e98:	071b      	lsls	r3, r3, #28
 8008e9a:	d501      	bpl.n	8008ea0 <_vfiprintf_r+0x3c>
 8008e9c:	692b      	ldr	r3, [r5, #16]
 8008e9e:	b9eb      	cbnz	r3, 8008edc <_vfiprintf_r+0x78>
 8008ea0:	4629      	mov	r1, r5
 8008ea2:	4630      	mov	r0, r6
 8008ea4:	f000 f96e 	bl	8009184 <__swsetup_r>
 8008ea8:	b1c0      	cbz	r0, 8008edc <_vfiprintf_r+0x78>
 8008eaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008eac:	07dc      	lsls	r4, r3, #31
 8008eae:	d50e      	bpl.n	8008ece <_vfiprintf_r+0x6a>
 8008eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8008eb4:	b01d      	add	sp, #116	; 0x74
 8008eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eba:	4b7b      	ldr	r3, [pc, #492]	; (80090a8 <_vfiprintf_r+0x244>)
 8008ebc:	429d      	cmp	r5, r3
 8008ebe:	d101      	bne.n	8008ec4 <_vfiprintf_r+0x60>
 8008ec0:	68b5      	ldr	r5, [r6, #8]
 8008ec2:	e7df      	b.n	8008e84 <_vfiprintf_r+0x20>
 8008ec4:	4b79      	ldr	r3, [pc, #484]	; (80090ac <_vfiprintf_r+0x248>)
 8008ec6:	429d      	cmp	r5, r3
 8008ec8:	bf08      	it	eq
 8008eca:	68f5      	ldreq	r5, [r6, #12]
 8008ecc:	e7da      	b.n	8008e84 <_vfiprintf_r+0x20>
 8008ece:	89ab      	ldrh	r3, [r5, #12]
 8008ed0:	0598      	lsls	r0, r3, #22
 8008ed2:	d4ed      	bmi.n	8008eb0 <_vfiprintf_r+0x4c>
 8008ed4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ed6:	f000 fb84 	bl	80095e2 <__retarget_lock_release_recursive>
 8008eda:	e7e9      	b.n	8008eb0 <_vfiprintf_r+0x4c>
 8008edc:	2300      	movs	r3, #0
 8008ede:	9309      	str	r3, [sp, #36]	; 0x24
 8008ee0:	2320      	movs	r3, #32
 8008ee2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ee6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008eea:	2330      	movs	r3, #48	; 0x30
 8008eec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80090b0 <_vfiprintf_r+0x24c>
 8008ef0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ef4:	f04f 0901 	mov.w	r9, #1
 8008ef8:	4623      	mov	r3, r4
 8008efa:	469a      	mov	sl, r3
 8008efc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f00:	b10a      	cbz	r2, 8008f06 <_vfiprintf_r+0xa2>
 8008f02:	2a25      	cmp	r2, #37	; 0x25
 8008f04:	d1f9      	bne.n	8008efa <_vfiprintf_r+0x96>
 8008f06:	ebba 0b04 	subs.w	fp, sl, r4
 8008f0a:	d00b      	beq.n	8008f24 <_vfiprintf_r+0xc0>
 8008f0c:	465b      	mov	r3, fp
 8008f0e:	4622      	mov	r2, r4
 8008f10:	4629      	mov	r1, r5
 8008f12:	4630      	mov	r0, r6
 8008f14:	f7ff ff94 	bl	8008e40 <__sfputs_r>
 8008f18:	3001      	adds	r0, #1
 8008f1a:	f000 80aa 	beq.w	8009072 <_vfiprintf_r+0x20e>
 8008f1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f20:	445a      	add	r2, fp
 8008f22:	9209      	str	r2, [sp, #36]	; 0x24
 8008f24:	f89a 3000 	ldrb.w	r3, [sl]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	f000 80a2 	beq.w	8009072 <_vfiprintf_r+0x20e>
 8008f2e:	2300      	movs	r3, #0
 8008f30:	f04f 32ff 	mov.w	r2, #4294967295
 8008f34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f38:	f10a 0a01 	add.w	sl, sl, #1
 8008f3c:	9304      	str	r3, [sp, #16]
 8008f3e:	9307      	str	r3, [sp, #28]
 8008f40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f44:	931a      	str	r3, [sp, #104]	; 0x68
 8008f46:	4654      	mov	r4, sl
 8008f48:	2205      	movs	r2, #5
 8008f4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f4e:	4858      	ldr	r0, [pc, #352]	; (80090b0 <_vfiprintf_r+0x24c>)
 8008f50:	f7f7 f946 	bl	80001e0 <memchr>
 8008f54:	9a04      	ldr	r2, [sp, #16]
 8008f56:	b9d8      	cbnz	r0, 8008f90 <_vfiprintf_r+0x12c>
 8008f58:	06d1      	lsls	r1, r2, #27
 8008f5a:	bf44      	itt	mi
 8008f5c:	2320      	movmi	r3, #32
 8008f5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f62:	0713      	lsls	r3, r2, #28
 8008f64:	bf44      	itt	mi
 8008f66:	232b      	movmi	r3, #43	; 0x2b
 8008f68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f6c:	f89a 3000 	ldrb.w	r3, [sl]
 8008f70:	2b2a      	cmp	r3, #42	; 0x2a
 8008f72:	d015      	beq.n	8008fa0 <_vfiprintf_r+0x13c>
 8008f74:	9a07      	ldr	r2, [sp, #28]
 8008f76:	4654      	mov	r4, sl
 8008f78:	2000      	movs	r0, #0
 8008f7a:	f04f 0c0a 	mov.w	ip, #10
 8008f7e:	4621      	mov	r1, r4
 8008f80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f84:	3b30      	subs	r3, #48	; 0x30
 8008f86:	2b09      	cmp	r3, #9
 8008f88:	d94e      	bls.n	8009028 <_vfiprintf_r+0x1c4>
 8008f8a:	b1b0      	cbz	r0, 8008fba <_vfiprintf_r+0x156>
 8008f8c:	9207      	str	r2, [sp, #28]
 8008f8e:	e014      	b.n	8008fba <_vfiprintf_r+0x156>
 8008f90:	eba0 0308 	sub.w	r3, r0, r8
 8008f94:	fa09 f303 	lsl.w	r3, r9, r3
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	9304      	str	r3, [sp, #16]
 8008f9c:	46a2      	mov	sl, r4
 8008f9e:	e7d2      	b.n	8008f46 <_vfiprintf_r+0xe2>
 8008fa0:	9b03      	ldr	r3, [sp, #12]
 8008fa2:	1d19      	adds	r1, r3, #4
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	9103      	str	r1, [sp, #12]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	bfbb      	ittet	lt
 8008fac:	425b      	neglt	r3, r3
 8008fae:	f042 0202 	orrlt.w	r2, r2, #2
 8008fb2:	9307      	strge	r3, [sp, #28]
 8008fb4:	9307      	strlt	r3, [sp, #28]
 8008fb6:	bfb8      	it	lt
 8008fb8:	9204      	strlt	r2, [sp, #16]
 8008fba:	7823      	ldrb	r3, [r4, #0]
 8008fbc:	2b2e      	cmp	r3, #46	; 0x2e
 8008fbe:	d10c      	bne.n	8008fda <_vfiprintf_r+0x176>
 8008fc0:	7863      	ldrb	r3, [r4, #1]
 8008fc2:	2b2a      	cmp	r3, #42	; 0x2a
 8008fc4:	d135      	bne.n	8009032 <_vfiprintf_r+0x1ce>
 8008fc6:	9b03      	ldr	r3, [sp, #12]
 8008fc8:	1d1a      	adds	r2, r3, #4
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	9203      	str	r2, [sp, #12]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	bfb8      	it	lt
 8008fd2:	f04f 33ff 	movlt.w	r3, #4294967295
 8008fd6:	3402      	adds	r4, #2
 8008fd8:	9305      	str	r3, [sp, #20]
 8008fda:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80090c0 <_vfiprintf_r+0x25c>
 8008fde:	7821      	ldrb	r1, [r4, #0]
 8008fe0:	2203      	movs	r2, #3
 8008fe2:	4650      	mov	r0, sl
 8008fe4:	f7f7 f8fc 	bl	80001e0 <memchr>
 8008fe8:	b140      	cbz	r0, 8008ffc <_vfiprintf_r+0x198>
 8008fea:	2340      	movs	r3, #64	; 0x40
 8008fec:	eba0 000a 	sub.w	r0, r0, sl
 8008ff0:	fa03 f000 	lsl.w	r0, r3, r0
 8008ff4:	9b04      	ldr	r3, [sp, #16]
 8008ff6:	4303      	orrs	r3, r0
 8008ff8:	3401      	adds	r4, #1
 8008ffa:	9304      	str	r3, [sp, #16]
 8008ffc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009000:	482c      	ldr	r0, [pc, #176]	; (80090b4 <_vfiprintf_r+0x250>)
 8009002:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009006:	2206      	movs	r2, #6
 8009008:	f7f7 f8ea 	bl	80001e0 <memchr>
 800900c:	2800      	cmp	r0, #0
 800900e:	d03f      	beq.n	8009090 <_vfiprintf_r+0x22c>
 8009010:	4b29      	ldr	r3, [pc, #164]	; (80090b8 <_vfiprintf_r+0x254>)
 8009012:	bb1b      	cbnz	r3, 800905c <_vfiprintf_r+0x1f8>
 8009014:	9b03      	ldr	r3, [sp, #12]
 8009016:	3307      	adds	r3, #7
 8009018:	f023 0307 	bic.w	r3, r3, #7
 800901c:	3308      	adds	r3, #8
 800901e:	9303      	str	r3, [sp, #12]
 8009020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009022:	443b      	add	r3, r7
 8009024:	9309      	str	r3, [sp, #36]	; 0x24
 8009026:	e767      	b.n	8008ef8 <_vfiprintf_r+0x94>
 8009028:	fb0c 3202 	mla	r2, ip, r2, r3
 800902c:	460c      	mov	r4, r1
 800902e:	2001      	movs	r0, #1
 8009030:	e7a5      	b.n	8008f7e <_vfiprintf_r+0x11a>
 8009032:	2300      	movs	r3, #0
 8009034:	3401      	adds	r4, #1
 8009036:	9305      	str	r3, [sp, #20]
 8009038:	4619      	mov	r1, r3
 800903a:	f04f 0c0a 	mov.w	ip, #10
 800903e:	4620      	mov	r0, r4
 8009040:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009044:	3a30      	subs	r2, #48	; 0x30
 8009046:	2a09      	cmp	r2, #9
 8009048:	d903      	bls.n	8009052 <_vfiprintf_r+0x1ee>
 800904a:	2b00      	cmp	r3, #0
 800904c:	d0c5      	beq.n	8008fda <_vfiprintf_r+0x176>
 800904e:	9105      	str	r1, [sp, #20]
 8009050:	e7c3      	b.n	8008fda <_vfiprintf_r+0x176>
 8009052:	fb0c 2101 	mla	r1, ip, r1, r2
 8009056:	4604      	mov	r4, r0
 8009058:	2301      	movs	r3, #1
 800905a:	e7f0      	b.n	800903e <_vfiprintf_r+0x1da>
 800905c:	ab03      	add	r3, sp, #12
 800905e:	9300      	str	r3, [sp, #0]
 8009060:	462a      	mov	r2, r5
 8009062:	4b16      	ldr	r3, [pc, #88]	; (80090bc <_vfiprintf_r+0x258>)
 8009064:	a904      	add	r1, sp, #16
 8009066:	4630      	mov	r0, r6
 8009068:	f7fd fdc2 	bl	8006bf0 <_printf_float>
 800906c:	4607      	mov	r7, r0
 800906e:	1c78      	adds	r0, r7, #1
 8009070:	d1d6      	bne.n	8009020 <_vfiprintf_r+0x1bc>
 8009072:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009074:	07d9      	lsls	r1, r3, #31
 8009076:	d405      	bmi.n	8009084 <_vfiprintf_r+0x220>
 8009078:	89ab      	ldrh	r3, [r5, #12]
 800907a:	059a      	lsls	r2, r3, #22
 800907c:	d402      	bmi.n	8009084 <_vfiprintf_r+0x220>
 800907e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009080:	f000 faaf 	bl	80095e2 <__retarget_lock_release_recursive>
 8009084:	89ab      	ldrh	r3, [r5, #12]
 8009086:	065b      	lsls	r3, r3, #25
 8009088:	f53f af12 	bmi.w	8008eb0 <_vfiprintf_r+0x4c>
 800908c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800908e:	e711      	b.n	8008eb4 <_vfiprintf_r+0x50>
 8009090:	ab03      	add	r3, sp, #12
 8009092:	9300      	str	r3, [sp, #0]
 8009094:	462a      	mov	r2, r5
 8009096:	4b09      	ldr	r3, [pc, #36]	; (80090bc <_vfiprintf_r+0x258>)
 8009098:	a904      	add	r1, sp, #16
 800909a:	4630      	mov	r0, r6
 800909c:	f7fe f84c 	bl	8007138 <_printf_i>
 80090a0:	e7e4      	b.n	800906c <_vfiprintf_r+0x208>
 80090a2:	bf00      	nop
 80090a4:	08009d9c 	.word	0x08009d9c
 80090a8:	08009dbc 	.word	0x08009dbc
 80090ac:	08009d7c 	.word	0x08009d7c
 80090b0:	08009c24 	.word	0x08009c24
 80090b4:	08009c2e 	.word	0x08009c2e
 80090b8:	08006bf1 	.word	0x08006bf1
 80090bc:	08008e41 	.word	0x08008e41
 80090c0:	08009c2a 	.word	0x08009c2a

080090c4 <__swbuf_r>:
 80090c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090c6:	460e      	mov	r6, r1
 80090c8:	4614      	mov	r4, r2
 80090ca:	4605      	mov	r5, r0
 80090cc:	b118      	cbz	r0, 80090d6 <__swbuf_r+0x12>
 80090ce:	6983      	ldr	r3, [r0, #24]
 80090d0:	b90b      	cbnz	r3, 80090d6 <__swbuf_r+0x12>
 80090d2:	f000 f9e7 	bl	80094a4 <__sinit>
 80090d6:	4b21      	ldr	r3, [pc, #132]	; (800915c <__swbuf_r+0x98>)
 80090d8:	429c      	cmp	r4, r3
 80090da:	d12b      	bne.n	8009134 <__swbuf_r+0x70>
 80090dc:	686c      	ldr	r4, [r5, #4]
 80090de:	69a3      	ldr	r3, [r4, #24]
 80090e0:	60a3      	str	r3, [r4, #8]
 80090e2:	89a3      	ldrh	r3, [r4, #12]
 80090e4:	071a      	lsls	r2, r3, #28
 80090e6:	d52f      	bpl.n	8009148 <__swbuf_r+0x84>
 80090e8:	6923      	ldr	r3, [r4, #16]
 80090ea:	b36b      	cbz	r3, 8009148 <__swbuf_r+0x84>
 80090ec:	6923      	ldr	r3, [r4, #16]
 80090ee:	6820      	ldr	r0, [r4, #0]
 80090f0:	1ac0      	subs	r0, r0, r3
 80090f2:	6963      	ldr	r3, [r4, #20]
 80090f4:	b2f6      	uxtb	r6, r6
 80090f6:	4283      	cmp	r3, r0
 80090f8:	4637      	mov	r7, r6
 80090fa:	dc04      	bgt.n	8009106 <__swbuf_r+0x42>
 80090fc:	4621      	mov	r1, r4
 80090fe:	4628      	mov	r0, r5
 8009100:	f000 f93c 	bl	800937c <_fflush_r>
 8009104:	bb30      	cbnz	r0, 8009154 <__swbuf_r+0x90>
 8009106:	68a3      	ldr	r3, [r4, #8]
 8009108:	3b01      	subs	r3, #1
 800910a:	60a3      	str	r3, [r4, #8]
 800910c:	6823      	ldr	r3, [r4, #0]
 800910e:	1c5a      	adds	r2, r3, #1
 8009110:	6022      	str	r2, [r4, #0]
 8009112:	701e      	strb	r6, [r3, #0]
 8009114:	6963      	ldr	r3, [r4, #20]
 8009116:	3001      	adds	r0, #1
 8009118:	4283      	cmp	r3, r0
 800911a:	d004      	beq.n	8009126 <__swbuf_r+0x62>
 800911c:	89a3      	ldrh	r3, [r4, #12]
 800911e:	07db      	lsls	r3, r3, #31
 8009120:	d506      	bpl.n	8009130 <__swbuf_r+0x6c>
 8009122:	2e0a      	cmp	r6, #10
 8009124:	d104      	bne.n	8009130 <__swbuf_r+0x6c>
 8009126:	4621      	mov	r1, r4
 8009128:	4628      	mov	r0, r5
 800912a:	f000 f927 	bl	800937c <_fflush_r>
 800912e:	b988      	cbnz	r0, 8009154 <__swbuf_r+0x90>
 8009130:	4638      	mov	r0, r7
 8009132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009134:	4b0a      	ldr	r3, [pc, #40]	; (8009160 <__swbuf_r+0x9c>)
 8009136:	429c      	cmp	r4, r3
 8009138:	d101      	bne.n	800913e <__swbuf_r+0x7a>
 800913a:	68ac      	ldr	r4, [r5, #8]
 800913c:	e7cf      	b.n	80090de <__swbuf_r+0x1a>
 800913e:	4b09      	ldr	r3, [pc, #36]	; (8009164 <__swbuf_r+0xa0>)
 8009140:	429c      	cmp	r4, r3
 8009142:	bf08      	it	eq
 8009144:	68ec      	ldreq	r4, [r5, #12]
 8009146:	e7ca      	b.n	80090de <__swbuf_r+0x1a>
 8009148:	4621      	mov	r1, r4
 800914a:	4628      	mov	r0, r5
 800914c:	f000 f81a 	bl	8009184 <__swsetup_r>
 8009150:	2800      	cmp	r0, #0
 8009152:	d0cb      	beq.n	80090ec <__swbuf_r+0x28>
 8009154:	f04f 37ff 	mov.w	r7, #4294967295
 8009158:	e7ea      	b.n	8009130 <__swbuf_r+0x6c>
 800915a:	bf00      	nop
 800915c:	08009d9c 	.word	0x08009d9c
 8009160:	08009dbc 	.word	0x08009dbc
 8009164:	08009d7c 	.word	0x08009d7c

08009168 <__ascii_wctomb>:
 8009168:	b149      	cbz	r1, 800917e <__ascii_wctomb+0x16>
 800916a:	2aff      	cmp	r2, #255	; 0xff
 800916c:	bf85      	ittet	hi
 800916e:	238a      	movhi	r3, #138	; 0x8a
 8009170:	6003      	strhi	r3, [r0, #0]
 8009172:	700a      	strbls	r2, [r1, #0]
 8009174:	f04f 30ff 	movhi.w	r0, #4294967295
 8009178:	bf98      	it	ls
 800917a:	2001      	movls	r0, #1
 800917c:	4770      	bx	lr
 800917e:	4608      	mov	r0, r1
 8009180:	4770      	bx	lr
	...

08009184 <__swsetup_r>:
 8009184:	4b32      	ldr	r3, [pc, #200]	; (8009250 <__swsetup_r+0xcc>)
 8009186:	b570      	push	{r4, r5, r6, lr}
 8009188:	681d      	ldr	r5, [r3, #0]
 800918a:	4606      	mov	r6, r0
 800918c:	460c      	mov	r4, r1
 800918e:	b125      	cbz	r5, 800919a <__swsetup_r+0x16>
 8009190:	69ab      	ldr	r3, [r5, #24]
 8009192:	b913      	cbnz	r3, 800919a <__swsetup_r+0x16>
 8009194:	4628      	mov	r0, r5
 8009196:	f000 f985 	bl	80094a4 <__sinit>
 800919a:	4b2e      	ldr	r3, [pc, #184]	; (8009254 <__swsetup_r+0xd0>)
 800919c:	429c      	cmp	r4, r3
 800919e:	d10f      	bne.n	80091c0 <__swsetup_r+0x3c>
 80091a0:	686c      	ldr	r4, [r5, #4]
 80091a2:	89a3      	ldrh	r3, [r4, #12]
 80091a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80091a8:	0719      	lsls	r1, r3, #28
 80091aa:	d42c      	bmi.n	8009206 <__swsetup_r+0x82>
 80091ac:	06dd      	lsls	r5, r3, #27
 80091ae:	d411      	bmi.n	80091d4 <__swsetup_r+0x50>
 80091b0:	2309      	movs	r3, #9
 80091b2:	6033      	str	r3, [r6, #0]
 80091b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80091b8:	81a3      	strh	r3, [r4, #12]
 80091ba:	f04f 30ff 	mov.w	r0, #4294967295
 80091be:	e03e      	b.n	800923e <__swsetup_r+0xba>
 80091c0:	4b25      	ldr	r3, [pc, #148]	; (8009258 <__swsetup_r+0xd4>)
 80091c2:	429c      	cmp	r4, r3
 80091c4:	d101      	bne.n	80091ca <__swsetup_r+0x46>
 80091c6:	68ac      	ldr	r4, [r5, #8]
 80091c8:	e7eb      	b.n	80091a2 <__swsetup_r+0x1e>
 80091ca:	4b24      	ldr	r3, [pc, #144]	; (800925c <__swsetup_r+0xd8>)
 80091cc:	429c      	cmp	r4, r3
 80091ce:	bf08      	it	eq
 80091d0:	68ec      	ldreq	r4, [r5, #12]
 80091d2:	e7e6      	b.n	80091a2 <__swsetup_r+0x1e>
 80091d4:	0758      	lsls	r0, r3, #29
 80091d6:	d512      	bpl.n	80091fe <__swsetup_r+0x7a>
 80091d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091da:	b141      	cbz	r1, 80091ee <__swsetup_r+0x6a>
 80091dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091e0:	4299      	cmp	r1, r3
 80091e2:	d002      	beq.n	80091ea <__swsetup_r+0x66>
 80091e4:	4630      	mov	r0, r6
 80091e6:	f7ff fb31 	bl	800884c <_free_r>
 80091ea:	2300      	movs	r3, #0
 80091ec:	6363      	str	r3, [r4, #52]	; 0x34
 80091ee:	89a3      	ldrh	r3, [r4, #12]
 80091f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80091f4:	81a3      	strh	r3, [r4, #12]
 80091f6:	2300      	movs	r3, #0
 80091f8:	6063      	str	r3, [r4, #4]
 80091fa:	6923      	ldr	r3, [r4, #16]
 80091fc:	6023      	str	r3, [r4, #0]
 80091fe:	89a3      	ldrh	r3, [r4, #12]
 8009200:	f043 0308 	orr.w	r3, r3, #8
 8009204:	81a3      	strh	r3, [r4, #12]
 8009206:	6923      	ldr	r3, [r4, #16]
 8009208:	b94b      	cbnz	r3, 800921e <__swsetup_r+0x9a>
 800920a:	89a3      	ldrh	r3, [r4, #12]
 800920c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009214:	d003      	beq.n	800921e <__swsetup_r+0x9a>
 8009216:	4621      	mov	r1, r4
 8009218:	4630      	mov	r0, r6
 800921a:	f000 fa09 	bl	8009630 <__smakebuf_r>
 800921e:	89a0      	ldrh	r0, [r4, #12]
 8009220:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009224:	f010 0301 	ands.w	r3, r0, #1
 8009228:	d00a      	beq.n	8009240 <__swsetup_r+0xbc>
 800922a:	2300      	movs	r3, #0
 800922c:	60a3      	str	r3, [r4, #8]
 800922e:	6963      	ldr	r3, [r4, #20]
 8009230:	425b      	negs	r3, r3
 8009232:	61a3      	str	r3, [r4, #24]
 8009234:	6923      	ldr	r3, [r4, #16]
 8009236:	b943      	cbnz	r3, 800924a <__swsetup_r+0xc6>
 8009238:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800923c:	d1ba      	bne.n	80091b4 <__swsetup_r+0x30>
 800923e:	bd70      	pop	{r4, r5, r6, pc}
 8009240:	0781      	lsls	r1, r0, #30
 8009242:	bf58      	it	pl
 8009244:	6963      	ldrpl	r3, [r4, #20]
 8009246:	60a3      	str	r3, [r4, #8]
 8009248:	e7f4      	b.n	8009234 <__swsetup_r+0xb0>
 800924a:	2000      	movs	r0, #0
 800924c:	e7f7      	b.n	800923e <__swsetup_r+0xba>
 800924e:	bf00      	nop
 8009250:	2000001c 	.word	0x2000001c
 8009254:	08009d9c 	.word	0x08009d9c
 8009258:	08009dbc 	.word	0x08009dbc
 800925c:	08009d7c 	.word	0x08009d7c

08009260 <abort>:
 8009260:	b508      	push	{r3, lr}
 8009262:	2006      	movs	r0, #6
 8009264:	f000 fa54 	bl	8009710 <raise>
 8009268:	2001      	movs	r0, #1
 800926a:	f7fa faa9 	bl	80037c0 <_exit>
	...

08009270 <__sflush_r>:
 8009270:	898a      	ldrh	r2, [r1, #12]
 8009272:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009276:	4605      	mov	r5, r0
 8009278:	0710      	lsls	r0, r2, #28
 800927a:	460c      	mov	r4, r1
 800927c:	d458      	bmi.n	8009330 <__sflush_r+0xc0>
 800927e:	684b      	ldr	r3, [r1, #4]
 8009280:	2b00      	cmp	r3, #0
 8009282:	dc05      	bgt.n	8009290 <__sflush_r+0x20>
 8009284:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009286:	2b00      	cmp	r3, #0
 8009288:	dc02      	bgt.n	8009290 <__sflush_r+0x20>
 800928a:	2000      	movs	r0, #0
 800928c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009290:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009292:	2e00      	cmp	r6, #0
 8009294:	d0f9      	beq.n	800928a <__sflush_r+0x1a>
 8009296:	2300      	movs	r3, #0
 8009298:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800929c:	682f      	ldr	r7, [r5, #0]
 800929e:	602b      	str	r3, [r5, #0]
 80092a0:	d032      	beq.n	8009308 <__sflush_r+0x98>
 80092a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80092a4:	89a3      	ldrh	r3, [r4, #12]
 80092a6:	075a      	lsls	r2, r3, #29
 80092a8:	d505      	bpl.n	80092b6 <__sflush_r+0x46>
 80092aa:	6863      	ldr	r3, [r4, #4]
 80092ac:	1ac0      	subs	r0, r0, r3
 80092ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80092b0:	b10b      	cbz	r3, 80092b6 <__sflush_r+0x46>
 80092b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80092b4:	1ac0      	subs	r0, r0, r3
 80092b6:	2300      	movs	r3, #0
 80092b8:	4602      	mov	r2, r0
 80092ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092bc:	6a21      	ldr	r1, [r4, #32]
 80092be:	4628      	mov	r0, r5
 80092c0:	47b0      	blx	r6
 80092c2:	1c43      	adds	r3, r0, #1
 80092c4:	89a3      	ldrh	r3, [r4, #12]
 80092c6:	d106      	bne.n	80092d6 <__sflush_r+0x66>
 80092c8:	6829      	ldr	r1, [r5, #0]
 80092ca:	291d      	cmp	r1, #29
 80092cc:	d82c      	bhi.n	8009328 <__sflush_r+0xb8>
 80092ce:	4a2a      	ldr	r2, [pc, #168]	; (8009378 <__sflush_r+0x108>)
 80092d0:	40ca      	lsrs	r2, r1
 80092d2:	07d6      	lsls	r6, r2, #31
 80092d4:	d528      	bpl.n	8009328 <__sflush_r+0xb8>
 80092d6:	2200      	movs	r2, #0
 80092d8:	6062      	str	r2, [r4, #4]
 80092da:	04d9      	lsls	r1, r3, #19
 80092dc:	6922      	ldr	r2, [r4, #16]
 80092de:	6022      	str	r2, [r4, #0]
 80092e0:	d504      	bpl.n	80092ec <__sflush_r+0x7c>
 80092e2:	1c42      	adds	r2, r0, #1
 80092e4:	d101      	bne.n	80092ea <__sflush_r+0x7a>
 80092e6:	682b      	ldr	r3, [r5, #0]
 80092e8:	b903      	cbnz	r3, 80092ec <__sflush_r+0x7c>
 80092ea:	6560      	str	r0, [r4, #84]	; 0x54
 80092ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80092ee:	602f      	str	r7, [r5, #0]
 80092f0:	2900      	cmp	r1, #0
 80092f2:	d0ca      	beq.n	800928a <__sflush_r+0x1a>
 80092f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092f8:	4299      	cmp	r1, r3
 80092fa:	d002      	beq.n	8009302 <__sflush_r+0x92>
 80092fc:	4628      	mov	r0, r5
 80092fe:	f7ff faa5 	bl	800884c <_free_r>
 8009302:	2000      	movs	r0, #0
 8009304:	6360      	str	r0, [r4, #52]	; 0x34
 8009306:	e7c1      	b.n	800928c <__sflush_r+0x1c>
 8009308:	6a21      	ldr	r1, [r4, #32]
 800930a:	2301      	movs	r3, #1
 800930c:	4628      	mov	r0, r5
 800930e:	47b0      	blx	r6
 8009310:	1c41      	adds	r1, r0, #1
 8009312:	d1c7      	bne.n	80092a4 <__sflush_r+0x34>
 8009314:	682b      	ldr	r3, [r5, #0]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d0c4      	beq.n	80092a4 <__sflush_r+0x34>
 800931a:	2b1d      	cmp	r3, #29
 800931c:	d001      	beq.n	8009322 <__sflush_r+0xb2>
 800931e:	2b16      	cmp	r3, #22
 8009320:	d101      	bne.n	8009326 <__sflush_r+0xb6>
 8009322:	602f      	str	r7, [r5, #0]
 8009324:	e7b1      	b.n	800928a <__sflush_r+0x1a>
 8009326:	89a3      	ldrh	r3, [r4, #12]
 8009328:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800932c:	81a3      	strh	r3, [r4, #12]
 800932e:	e7ad      	b.n	800928c <__sflush_r+0x1c>
 8009330:	690f      	ldr	r7, [r1, #16]
 8009332:	2f00      	cmp	r7, #0
 8009334:	d0a9      	beq.n	800928a <__sflush_r+0x1a>
 8009336:	0793      	lsls	r3, r2, #30
 8009338:	680e      	ldr	r6, [r1, #0]
 800933a:	bf08      	it	eq
 800933c:	694b      	ldreq	r3, [r1, #20]
 800933e:	600f      	str	r7, [r1, #0]
 8009340:	bf18      	it	ne
 8009342:	2300      	movne	r3, #0
 8009344:	eba6 0807 	sub.w	r8, r6, r7
 8009348:	608b      	str	r3, [r1, #8]
 800934a:	f1b8 0f00 	cmp.w	r8, #0
 800934e:	dd9c      	ble.n	800928a <__sflush_r+0x1a>
 8009350:	6a21      	ldr	r1, [r4, #32]
 8009352:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009354:	4643      	mov	r3, r8
 8009356:	463a      	mov	r2, r7
 8009358:	4628      	mov	r0, r5
 800935a:	47b0      	blx	r6
 800935c:	2800      	cmp	r0, #0
 800935e:	dc06      	bgt.n	800936e <__sflush_r+0xfe>
 8009360:	89a3      	ldrh	r3, [r4, #12]
 8009362:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009366:	81a3      	strh	r3, [r4, #12]
 8009368:	f04f 30ff 	mov.w	r0, #4294967295
 800936c:	e78e      	b.n	800928c <__sflush_r+0x1c>
 800936e:	4407      	add	r7, r0
 8009370:	eba8 0800 	sub.w	r8, r8, r0
 8009374:	e7e9      	b.n	800934a <__sflush_r+0xda>
 8009376:	bf00      	nop
 8009378:	20400001 	.word	0x20400001

0800937c <_fflush_r>:
 800937c:	b538      	push	{r3, r4, r5, lr}
 800937e:	690b      	ldr	r3, [r1, #16]
 8009380:	4605      	mov	r5, r0
 8009382:	460c      	mov	r4, r1
 8009384:	b913      	cbnz	r3, 800938c <_fflush_r+0x10>
 8009386:	2500      	movs	r5, #0
 8009388:	4628      	mov	r0, r5
 800938a:	bd38      	pop	{r3, r4, r5, pc}
 800938c:	b118      	cbz	r0, 8009396 <_fflush_r+0x1a>
 800938e:	6983      	ldr	r3, [r0, #24]
 8009390:	b90b      	cbnz	r3, 8009396 <_fflush_r+0x1a>
 8009392:	f000 f887 	bl	80094a4 <__sinit>
 8009396:	4b14      	ldr	r3, [pc, #80]	; (80093e8 <_fflush_r+0x6c>)
 8009398:	429c      	cmp	r4, r3
 800939a:	d11b      	bne.n	80093d4 <_fflush_r+0x58>
 800939c:	686c      	ldr	r4, [r5, #4]
 800939e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d0ef      	beq.n	8009386 <_fflush_r+0xa>
 80093a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80093a8:	07d0      	lsls	r0, r2, #31
 80093aa:	d404      	bmi.n	80093b6 <_fflush_r+0x3a>
 80093ac:	0599      	lsls	r1, r3, #22
 80093ae:	d402      	bmi.n	80093b6 <_fflush_r+0x3a>
 80093b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093b2:	f000 f915 	bl	80095e0 <__retarget_lock_acquire_recursive>
 80093b6:	4628      	mov	r0, r5
 80093b8:	4621      	mov	r1, r4
 80093ba:	f7ff ff59 	bl	8009270 <__sflush_r>
 80093be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093c0:	07da      	lsls	r2, r3, #31
 80093c2:	4605      	mov	r5, r0
 80093c4:	d4e0      	bmi.n	8009388 <_fflush_r+0xc>
 80093c6:	89a3      	ldrh	r3, [r4, #12]
 80093c8:	059b      	lsls	r3, r3, #22
 80093ca:	d4dd      	bmi.n	8009388 <_fflush_r+0xc>
 80093cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093ce:	f000 f908 	bl	80095e2 <__retarget_lock_release_recursive>
 80093d2:	e7d9      	b.n	8009388 <_fflush_r+0xc>
 80093d4:	4b05      	ldr	r3, [pc, #20]	; (80093ec <_fflush_r+0x70>)
 80093d6:	429c      	cmp	r4, r3
 80093d8:	d101      	bne.n	80093de <_fflush_r+0x62>
 80093da:	68ac      	ldr	r4, [r5, #8]
 80093dc:	e7df      	b.n	800939e <_fflush_r+0x22>
 80093de:	4b04      	ldr	r3, [pc, #16]	; (80093f0 <_fflush_r+0x74>)
 80093e0:	429c      	cmp	r4, r3
 80093e2:	bf08      	it	eq
 80093e4:	68ec      	ldreq	r4, [r5, #12]
 80093e6:	e7da      	b.n	800939e <_fflush_r+0x22>
 80093e8:	08009d9c 	.word	0x08009d9c
 80093ec:	08009dbc 	.word	0x08009dbc
 80093f0:	08009d7c 	.word	0x08009d7c

080093f4 <std>:
 80093f4:	2300      	movs	r3, #0
 80093f6:	b510      	push	{r4, lr}
 80093f8:	4604      	mov	r4, r0
 80093fa:	e9c0 3300 	strd	r3, r3, [r0]
 80093fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009402:	6083      	str	r3, [r0, #8]
 8009404:	8181      	strh	r1, [r0, #12]
 8009406:	6643      	str	r3, [r0, #100]	; 0x64
 8009408:	81c2      	strh	r2, [r0, #14]
 800940a:	6183      	str	r3, [r0, #24]
 800940c:	4619      	mov	r1, r3
 800940e:	2208      	movs	r2, #8
 8009410:	305c      	adds	r0, #92	; 0x5c
 8009412:	f7fd fb45 	bl	8006aa0 <memset>
 8009416:	4b05      	ldr	r3, [pc, #20]	; (800942c <std+0x38>)
 8009418:	6263      	str	r3, [r4, #36]	; 0x24
 800941a:	4b05      	ldr	r3, [pc, #20]	; (8009430 <std+0x3c>)
 800941c:	62a3      	str	r3, [r4, #40]	; 0x28
 800941e:	4b05      	ldr	r3, [pc, #20]	; (8009434 <std+0x40>)
 8009420:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009422:	4b05      	ldr	r3, [pc, #20]	; (8009438 <std+0x44>)
 8009424:	6224      	str	r4, [r4, #32]
 8009426:	6323      	str	r3, [r4, #48]	; 0x30
 8009428:	bd10      	pop	{r4, pc}
 800942a:	bf00      	nop
 800942c:	08009749 	.word	0x08009749
 8009430:	0800976b 	.word	0x0800976b
 8009434:	080097a3 	.word	0x080097a3
 8009438:	080097c7 	.word	0x080097c7

0800943c <_cleanup_r>:
 800943c:	4901      	ldr	r1, [pc, #4]	; (8009444 <_cleanup_r+0x8>)
 800943e:	f000 b8af 	b.w	80095a0 <_fwalk_reent>
 8009442:	bf00      	nop
 8009444:	0800937d 	.word	0x0800937d

08009448 <__sfmoreglue>:
 8009448:	b570      	push	{r4, r5, r6, lr}
 800944a:	2268      	movs	r2, #104	; 0x68
 800944c:	1e4d      	subs	r5, r1, #1
 800944e:	4355      	muls	r5, r2
 8009450:	460e      	mov	r6, r1
 8009452:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009456:	f7ff fa65 	bl	8008924 <_malloc_r>
 800945a:	4604      	mov	r4, r0
 800945c:	b140      	cbz	r0, 8009470 <__sfmoreglue+0x28>
 800945e:	2100      	movs	r1, #0
 8009460:	e9c0 1600 	strd	r1, r6, [r0]
 8009464:	300c      	adds	r0, #12
 8009466:	60a0      	str	r0, [r4, #8]
 8009468:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800946c:	f7fd fb18 	bl	8006aa0 <memset>
 8009470:	4620      	mov	r0, r4
 8009472:	bd70      	pop	{r4, r5, r6, pc}

08009474 <__sfp_lock_acquire>:
 8009474:	4801      	ldr	r0, [pc, #4]	; (800947c <__sfp_lock_acquire+0x8>)
 8009476:	f000 b8b3 	b.w	80095e0 <__retarget_lock_acquire_recursive>
 800947a:	bf00      	nop
 800947c:	200002b9 	.word	0x200002b9

08009480 <__sfp_lock_release>:
 8009480:	4801      	ldr	r0, [pc, #4]	; (8009488 <__sfp_lock_release+0x8>)
 8009482:	f000 b8ae 	b.w	80095e2 <__retarget_lock_release_recursive>
 8009486:	bf00      	nop
 8009488:	200002b9 	.word	0x200002b9

0800948c <__sinit_lock_acquire>:
 800948c:	4801      	ldr	r0, [pc, #4]	; (8009494 <__sinit_lock_acquire+0x8>)
 800948e:	f000 b8a7 	b.w	80095e0 <__retarget_lock_acquire_recursive>
 8009492:	bf00      	nop
 8009494:	200002ba 	.word	0x200002ba

08009498 <__sinit_lock_release>:
 8009498:	4801      	ldr	r0, [pc, #4]	; (80094a0 <__sinit_lock_release+0x8>)
 800949a:	f000 b8a2 	b.w	80095e2 <__retarget_lock_release_recursive>
 800949e:	bf00      	nop
 80094a0:	200002ba 	.word	0x200002ba

080094a4 <__sinit>:
 80094a4:	b510      	push	{r4, lr}
 80094a6:	4604      	mov	r4, r0
 80094a8:	f7ff fff0 	bl	800948c <__sinit_lock_acquire>
 80094ac:	69a3      	ldr	r3, [r4, #24]
 80094ae:	b11b      	cbz	r3, 80094b8 <__sinit+0x14>
 80094b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094b4:	f7ff bff0 	b.w	8009498 <__sinit_lock_release>
 80094b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80094bc:	6523      	str	r3, [r4, #80]	; 0x50
 80094be:	4b13      	ldr	r3, [pc, #76]	; (800950c <__sinit+0x68>)
 80094c0:	4a13      	ldr	r2, [pc, #76]	; (8009510 <__sinit+0x6c>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80094c6:	42a3      	cmp	r3, r4
 80094c8:	bf04      	itt	eq
 80094ca:	2301      	moveq	r3, #1
 80094cc:	61a3      	streq	r3, [r4, #24]
 80094ce:	4620      	mov	r0, r4
 80094d0:	f000 f820 	bl	8009514 <__sfp>
 80094d4:	6060      	str	r0, [r4, #4]
 80094d6:	4620      	mov	r0, r4
 80094d8:	f000 f81c 	bl	8009514 <__sfp>
 80094dc:	60a0      	str	r0, [r4, #8]
 80094de:	4620      	mov	r0, r4
 80094e0:	f000 f818 	bl	8009514 <__sfp>
 80094e4:	2200      	movs	r2, #0
 80094e6:	60e0      	str	r0, [r4, #12]
 80094e8:	2104      	movs	r1, #4
 80094ea:	6860      	ldr	r0, [r4, #4]
 80094ec:	f7ff ff82 	bl	80093f4 <std>
 80094f0:	68a0      	ldr	r0, [r4, #8]
 80094f2:	2201      	movs	r2, #1
 80094f4:	2109      	movs	r1, #9
 80094f6:	f7ff ff7d 	bl	80093f4 <std>
 80094fa:	68e0      	ldr	r0, [r4, #12]
 80094fc:	2202      	movs	r2, #2
 80094fe:	2112      	movs	r1, #18
 8009500:	f7ff ff78 	bl	80093f4 <std>
 8009504:	2301      	movs	r3, #1
 8009506:	61a3      	str	r3, [r4, #24]
 8009508:	e7d2      	b.n	80094b0 <__sinit+0xc>
 800950a:	bf00      	nop
 800950c:	08009a04 	.word	0x08009a04
 8009510:	0800943d 	.word	0x0800943d

08009514 <__sfp>:
 8009514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009516:	4607      	mov	r7, r0
 8009518:	f7ff ffac 	bl	8009474 <__sfp_lock_acquire>
 800951c:	4b1e      	ldr	r3, [pc, #120]	; (8009598 <__sfp+0x84>)
 800951e:	681e      	ldr	r6, [r3, #0]
 8009520:	69b3      	ldr	r3, [r6, #24]
 8009522:	b913      	cbnz	r3, 800952a <__sfp+0x16>
 8009524:	4630      	mov	r0, r6
 8009526:	f7ff ffbd 	bl	80094a4 <__sinit>
 800952a:	3648      	adds	r6, #72	; 0x48
 800952c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009530:	3b01      	subs	r3, #1
 8009532:	d503      	bpl.n	800953c <__sfp+0x28>
 8009534:	6833      	ldr	r3, [r6, #0]
 8009536:	b30b      	cbz	r3, 800957c <__sfp+0x68>
 8009538:	6836      	ldr	r6, [r6, #0]
 800953a:	e7f7      	b.n	800952c <__sfp+0x18>
 800953c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009540:	b9d5      	cbnz	r5, 8009578 <__sfp+0x64>
 8009542:	4b16      	ldr	r3, [pc, #88]	; (800959c <__sfp+0x88>)
 8009544:	60e3      	str	r3, [r4, #12]
 8009546:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800954a:	6665      	str	r5, [r4, #100]	; 0x64
 800954c:	f000 f847 	bl	80095de <__retarget_lock_init_recursive>
 8009550:	f7ff ff96 	bl	8009480 <__sfp_lock_release>
 8009554:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009558:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800955c:	6025      	str	r5, [r4, #0]
 800955e:	61a5      	str	r5, [r4, #24]
 8009560:	2208      	movs	r2, #8
 8009562:	4629      	mov	r1, r5
 8009564:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009568:	f7fd fa9a 	bl	8006aa0 <memset>
 800956c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009570:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009574:	4620      	mov	r0, r4
 8009576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009578:	3468      	adds	r4, #104	; 0x68
 800957a:	e7d9      	b.n	8009530 <__sfp+0x1c>
 800957c:	2104      	movs	r1, #4
 800957e:	4638      	mov	r0, r7
 8009580:	f7ff ff62 	bl	8009448 <__sfmoreglue>
 8009584:	4604      	mov	r4, r0
 8009586:	6030      	str	r0, [r6, #0]
 8009588:	2800      	cmp	r0, #0
 800958a:	d1d5      	bne.n	8009538 <__sfp+0x24>
 800958c:	f7ff ff78 	bl	8009480 <__sfp_lock_release>
 8009590:	230c      	movs	r3, #12
 8009592:	603b      	str	r3, [r7, #0]
 8009594:	e7ee      	b.n	8009574 <__sfp+0x60>
 8009596:	bf00      	nop
 8009598:	08009a04 	.word	0x08009a04
 800959c:	ffff0001 	.word	0xffff0001

080095a0 <_fwalk_reent>:
 80095a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095a4:	4606      	mov	r6, r0
 80095a6:	4688      	mov	r8, r1
 80095a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80095ac:	2700      	movs	r7, #0
 80095ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80095b2:	f1b9 0901 	subs.w	r9, r9, #1
 80095b6:	d505      	bpl.n	80095c4 <_fwalk_reent+0x24>
 80095b8:	6824      	ldr	r4, [r4, #0]
 80095ba:	2c00      	cmp	r4, #0
 80095bc:	d1f7      	bne.n	80095ae <_fwalk_reent+0xe>
 80095be:	4638      	mov	r0, r7
 80095c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095c4:	89ab      	ldrh	r3, [r5, #12]
 80095c6:	2b01      	cmp	r3, #1
 80095c8:	d907      	bls.n	80095da <_fwalk_reent+0x3a>
 80095ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80095ce:	3301      	adds	r3, #1
 80095d0:	d003      	beq.n	80095da <_fwalk_reent+0x3a>
 80095d2:	4629      	mov	r1, r5
 80095d4:	4630      	mov	r0, r6
 80095d6:	47c0      	blx	r8
 80095d8:	4307      	orrs	r7, r0
 80095da:	3568      	adds	r5, #104	; 0x68
 80095dc:	e7e9      	b.n	80095b2 <_fwalk_reent+0x12>

080095de <__retarget_lock_init_recursive>:
 80095de:	4770      	bx	lr

080095e0 <__retarget_lock_acquire_recursive>:
 80095e0:	4770      	bx	lr

080095e2 <__retarget_lock_release_recursive>:
 80095e2:	4770      	bx	lr

080095e4 <__swhatbuf_r>:
 80095e4:	b570      	push	{r4, r5, r6, lr}
 80095e6:	460e      	mov	r6, r1
 80095e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095ec:	2900      	cmp	r1, #0
 80095ee:	b096      	sub	sp, #88	; 0x58
 80095f0:	4614      	mov	r4, r2
 80095f2:	461d      	mov	r5, r3
 80095f4:	da08      	bge.n	8009608 <__swhatbuf_r+0x24>
 80095f6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80095fa:	2200      	movs	r2, #0
 80095fc:	602a      	str	r2, [r5, #0]
 80095fe:	061a      	lsls	r2, r3, #24
 8009600:	d410      	bmi.n	8009624 <__swhatbuf_r+0x40>
 8009602:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009606:	e00e      	b.n	8009626 <__swhatbuf_r+0x42>
 8009608:	466a      	mov	r2, sp
 800960a:	f000 f903 	bl	8009814 <_fstat_r>
 800960e:	2800      	cmp	r0, #0
 8009610:	dbf1      	blt.n	80095f6 <__swhatbuf_r+0x12>
 8009612:	9a01      	ldr	r2, [sp, #4]
 8009614:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009618:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800961c:	425a      	negs	r2, r3
 800961e:	415a      	adcs	r2, r3
 8009620:	602a      	str	r2, [r5, #0]
 8009622:	e7ee      	b.n	8009602 <__swhatbuf_r+0x1e>
 8009624:	2340      	movs	r3, #64	; 0x40
 8009626:	2000      	movs	r0, #0
 8009628:	6023      	str	r3, [r4, #0]
 800962a:	b016      	add	sp, #88	; 0x58
 800962c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009630 <__smakebuf_r>:
 8009630:	898b      	ldrh	r3, [r1, #12]
 8009632:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009634:	079d      	lsls	r5, r3, #30
 8009636:	4606      	mov	r6, r0
 8009638:	460c      	mov	r4, r1
 800963a:	d507      	bpl.n	800964c <__smakebuf_r+0x1c>
 800963c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009640:	6023      	str	r3, [r4, #0]
 8009642:	6123      	str	r3, [r4, #16]
 8009644:	2301      	movs	r3, #1
 8009646:	6163      	str	r3, [r4, #20]
 8009648:	b002      	add	sp, #8
 800964a:	bd70      	pop	{r4, r5, r6, pc}
 800964c:	ab01      	add	r3, sp, #4
 800964e:	466a      	mov	r2, sp
 8009650:	f7ff ffc8 	bl	80095e4 <__swhatbuf_r>
 8009654:	9900      	ldr	r1, [sp, #0]
 8009656:	4605      	mov	r5, r0
 8009658:	4630      	mov	r0, r6
 800965a:	f7ff f963 	bl	8008924 <_malloc_r>
 800965e:	b948      	cbnz	r0, 8009674 <__smakebuf_r+0x44>
 8009660:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009664:	059a      	lsls	r2, r3, #22
 8009666:	d4ef      	bmi.n	8009648 <__smakebuf_r+0x18>
 8009668:	f023 0303 	bic.w	r3, r3, #3
 800966c:	f043 0302 	orr.w	r3, r3, #2
 8009670:	81a3      	strh	r3, [r4, #12]
 8009672:	e7e3      	b.n	800963c <__smakebuf_r+0xc>
 8009674:	4b0d      	ldr	r3, [pc, #52]	; (80096ac <__smakebuf_r+0x7c>)
 8009676:	62b3      	str	r3, [r6, #40]	; 0x28
 8009678:	89a3      	ldrh	r3, [r4, #12]
 800967a:	6020      	str	r0, [r4, #0]
 800967c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009680:	81a3      	strh	r3, [r4, #12]
 8009682:	9b00      	ldr	r3, [sp, #0]
 8009684:	6163      	str	r3, [r4, #20]
 8009686:	9b01      	ldr	r3, [sp, #4]
 8009688:	6120      	str	r0, [r4, #16]
 800968a:	b15b      	cbz	r3, 80096a4 <__smakebuf_r+0x74>
 800968c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009690:	4630      	mov	r0, r6
 8009692:	f000 f8d1 	bl	8009838 <_isatty_r>
 8009696:	b128      	cbz	r0, 80096a4 <__smakebuf_r+0x74>
 8009698:	89a3      	ldrh	r3, [r4, #12]
 800969a:	f023 0303 	bic.w	r3, r3, #3
 800969e:	f043 0301 	orr.w	r3, r3, #1
 80096a2:	81a3      	strh	r3, [r4, #12]
 80096a4:	89a0      	ldrh	r0, [r4, #12]
 80096a6:	4305      	orrs	r5, r0
 80096a8:	81a5      	strh	r5, [r4, #12]
 80096aa:	e7cd      	b.n	8009648 <__smakebuf_r+0x18>
 80096ac:	0800943d 	.word	0x0800943d

080096b0 <_malloc_usable_size_r>:
 80096b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096b4:	1f18      	subs	r0, r3, #4
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	bfbc      	itt	lt
 80096ba:	580b      	ldrlt	r3, [r1, r0]
 80096bc:	18c0      	addlt	r0, r0, r3
 80096be:	4770      	bx	lr

080096c0 <_raise_r>:
 80096c0:	291f      	cmp	r1, #31
 80096c2:	b538      	push	{r3, r4, r5, lr}
 80096c4:	4604      	mov	r4, r0
 80096c6:	460d      	mov	r5, r1
 80096c8:	d904      	bls.n	80096d4 <_raise_r+0x14>
 80096ca:	2316      	movs	r3, #22
 80096cc:	6003      	str	r3, [r0, #0]
 80096ce:	f04f 30ff 	mov.w	r0, #4294967295
 80096d2:	bd38      	pop	{r3, r4, r5, pc}
 80096d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80096d6:	b112      	cbz	r2, 80096de <_raise_r+0x1e>
 80096d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80096dc:	b94b      	cbnz	r3, 80096f2 <_raise_r+0x32>
 80096de:	4620      	mov	r0, r4
 80096e0:	f000 f830 	bl	8009744 <_getpid_r>
 80096e4:	462a      	mov	r2, r5
 80096e6:	4601      	mov	r1, r0
 80096e8:	4620      	mov	r0, r4
 80096ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096ee:	f000 b817 	b.w	8009720 <_kill_r>
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d00a      	beq.n	800970c <_raise_r+0x4c>
 80096f6:	1c59      	adds	r1, r3, #1
 80096f8:	d103      	bne.n	8009702 <_raise_r+0x42>
 80096fa:	2316      	movs	r3, #22
 80096fc:	6003      	str	r3, [r0, #0]
 80096fe:	2001      	movs	r0, #1
 8009700:	e7e7      	b.n	80096d2 <_raise_r+0x12>
 8009702:	2400      	movs	r4, #0
 8009704:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009708:	4628      	mov	r0, r5
 800970a:	4798      	blx	r3
 800970c:	2000      	movs	r0, #0
 800970e:	e7e0      	b.n	80096d2 <_raise_r+0x12>

08009710 <raise>:
 8009710:	4b02      	ldr	r3, [pc, #8]	; (800971c <raise+0xc>)
 8009712:	4601      	mov	r1, r0
 8009714:	6818      	ldr	r0, [r3, #0]
 8009716:	f7ff bfd3 	b.w	80096c0 <_raise_r>
 800971a:	bf00      	nop
 800971c:	2000001c 	.word	0x2000001c

08009720 <_kill_r>:
 8009720:	b538      	push	{r3, r4, r5, lr}
 8009722:	4d07      	ldr	r5, [pc, #28]	; (8009740 <_kill_r+0x20>)
 8009724:	2300      	movs	r3, #0
 8009726:	4604      	mov	r4, r0
 8009728:	4608      	mov	r0, r1
 800972a:	4611      	mov	r1, r2
 800972c:	602b      	str	r3, [r5, #0]
 800972e:	f7fa f837 	bl	80037a0 <_kill>
 8009732:	1c43      	adds	r3, r0, #1
 8009734:	d102      	bne.n	800973c <_kill_r+0x1c>
 8009736:	682b      	ldr	r3, [r5, #0]
 8009738:	b103      	cbz	r3, 800973c <_kill_r+0x1c>
 800973a:	6023      	str	r3, [r4, #0]
 800973c:	bd38      	pop	{r3, r4, r5, pc}
 800973e:	bf00      	nop
 8009740:	200002b4 	.word	0x200002b4

08009744 <_getpid_r>:
 8009744:	f7fa b824 	b.w	8003790 <_getpid>

08009748 <__sread>:
 8009748:	b510      	push	{r4, lr}
 800974a:	460c      	mov	r4, r1
 800974c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009750:	f000 f894 	bl	800987c <_read_r>
 8009754:	2800      	cmp	r0, #0
 8009756:	bfab      	itete	ge
 8009758:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800975a:	89a3      	ldrhlt	r3, [r4, #12]
 800975c:	181b      	addge	r3, r3, r0
 800975e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009762:	bfac      	ite	ge
 8009764:	6563      	strge	r3, [r4, #84]	; 0x54
 8009766:	81a3      	strhlt	r3, [r4, #12]
 8009768:	bd10      	pop	{r4, pc}

0800976a <__swrite>:
 800976a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800976e:	461f      	mov	r7, r3
 8009770:	898b      	ldrh	r3, [r1, #12]
 8009772:	05db      	lsls	r3, r3, #23
 8009774:	4605      	mov	r5, r0
 8009776:	460c      	mov	r4, r1
 8009778:	4616      	mov	r6, r2
 800977a:	d505      	bpl.n	8009788 <__swrite+0x1e>
 800977c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009780:	2302      	movs	r3, #2
 8009782:	2200      	movs	r2, #0
 8009784:	f000 f868 	bl	8009858 <_lseek_r>
 8009788:	89a3      	ldrh	r3, [r4, #12]
 800978a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800978e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009792:	81a3      	strh	r3, [r4, #12]
 8009794:	4632      	mov	r2, r6
 8009796:	463b      	mov	r3, r7
 8009798:	4628      	mov	r0, r5
 800979a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800979e:	f000 b817 	b.w	80097d0 <_write_r>

080097a2 <__sseek>:
 80097a2:	b510      	push	{r4, lr}
 80097a4:	460c      	mov	r4, r1
 80097a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097aa:	f000 f855 	bl	8009858 <_lseek_r>
 80097ae:	1c43      	adds	r3, r0, #1
 80097b0:	89a3      	ldrh	r3, [r4, #12]
 80097b2:	bf15      	itete	ne
 80097b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80097b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80097ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80097be:	81a3      	strheq	r3, [r4, #12]
 80097c0:	bf18      	it	ne
 80097c2:	81a3      	strhne	r3, [r4, #12]
 80097c4:	bd10      	pop	{r4, pc}

080097c6 <__sclose>:
 80097c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097ca:	f000 b813 	b.w	80097f4 <_close_r>
	...

080097d0 <_write_r>:
 80097d0:	b538      	push	{r3, r4, r5, lr}
 80097d2:	4d07      	ldr	r5, [pc, #28]	; (80097f0 <_write_r+0x20>)
 80097d4:	4604      	mov	r4, r0
 80097d6:	4608      	mov	r0, r1
 80097d8:	4611      	mov	r1, r2
 80097da:	2200      	movs	r2, #0
 80097dc:	602a      	str	r2, [r5, #0]
 80097de:	461a      	mov	r2, r3
 80097e0:	f7fa f815 	bl	800380e <_write>
 80097e4:	1c43      	adds	r3, r0, #1
 80097e6:	d102      	bne.n	80097ee <_write_r+0x1e>
 80097e8:	682b      	ldr	r3, [r5, #0]
 80097ea:	b103      	cbz	r3, 80097ee <_write_r+0x1e>
 80097ec:	6023      	str	r3, [r4, #0]
 80097ee:	bd38      	pop	{r3, r4, r5, pc}
 80097f0:	200002b4 	.word	0x200002b4

080097f4 <_close_r>:
 80097f4:	b538      	push	{r3, r4, r5, lr}
 80097f6:	4d06      	ldr	r5, [pc, #24]	; (8009810 <_close_r+0x1c>)
 80097f8:	2300      	movs	r3, #0
 80097fa:	4604      	mov	r4, r0
 80097fc:	4608      	mov	r0, r1
 80097fe:	602b      	str	r3, [r5, #0]
 8009800:	f7fa f821 	bl	8003846 <_close>
 8009804:	1c43      	adds	r3, r0, #1
 8009806:	d102      	bne.n	800980e <_close_r+0x1a>
 8009808:	682b      	ldr	r3, [r5, #0]
 800980a:	b103      	cbz	r3, 800980e <_close_r+0x1a>
 800980c:	6023      	str	r3, [r4, #0]
 800980e:	bd38      	pop	{r3, r4, r5, pc}
 8009810:	200002b4 	.word	0x200002b4

08009814 <_fstat_r>:
 8009814:	b538      	push	{r3, r4, r5, lr}
 8009816:	4d07      	ldr	r5, [pc, #28]	; (8009834 <_fstat_r+0x20>)
 8009818:	2300      	movs	r3, #0
 800981a:	4604      	mov	r4, r0
 800981c:	4608      	mov	r0, r1
 800981e:	4611      	mov	r1, r2
 8009820:	602b      	str	r3, [r5, #0]
 8009822:	f7fa f81c 	bl	800385e <_fstat>
 8009826:	1c43      	adds	r3, r0, #1
 8009828:	d102      	bne.n	8009830 <_fstat_r+0x1c>
 800982a:	682b      	ldr	r3, [r5, #0]
 800982c:	b103      	cbz	r3, 8009830 <_fstat_r+0x1c>
 800982e:	6023      	str	r3, [r4, #0]
 8009830:	bd38      	pop	{r3, r4, r5, pc}
 8009832:	bf00      	nop
 8009834:	200002b4 	.word	0x200002b4

08009838 <_isatty_r>:
 8009838:	b538      	push	{r3, r4, r5, lr}
 800983a:	4d06      	ldr	r5, [pc, #24]	; (8009854 <_isatty_r+0x1c>)
 800983c:	2300      	movs	r3, #0
 800983e:	4604      	mov	r4, r0
 8009840:	4608      	mov	r0, r1
 8009842:	602b      	str	r3, [r5, #0]
 8009844:	f7fa f81b 	bl	800387e <_isatty>
 8009848:	1c43      	adds	r3, r0, #1
 800984a:	d102      	bne.n	8009852 <_isatty_r+0x1a>
 800984c:	682b      	ldr	r3, [r5, #0]
 800984e:	b103      	cbz	r3, 8009852 <_isatty_r+0x1a>
 8009850:	6023      	str	r3, [r4, #0]
 8009852:	bd38      	pop	{r3, r4, r5, pc}
 8009854:	200002b4 	.word	0x200002b4

08009858 <_lseek_r>:
 8009858:	b538      	push	{r3, r4, r5, lr}
 800985a:	4d07      	ldr	r5, [pc, #28]	; (8009878 <_lseek_r+0x20>)
 800985c:	4604      	mov	r4, r0
 800985e:	4608      	mov	r0, r1
 8009860:	4611      	mov	r1, r2
 8009862:	2200      	movs	r2, #0
 8009864:	602a      	str	r2, [r5, #0]
 8009866:	461a      	mov	r2, r3
 8009868:	f7fa f814 	bl	8003894 <_lseek>
 800986c:	1c43      	adds	r3, r0, #1
 800986e:	d102      	bne.n	8009876 <_lseek_r+0x1e>
 8009870:	682b      	ldr	r3, [r5, #0]
 8009872:	b103      	cbz	r3, 8009876 <_lseek_r+0x1e>
 8009874:	6023      	str	r3, [r4, #0]
 8009876:	bd38      	pop	{r3, r4, r5, pc}
 8009878:	200002b4 	.word	0x200002b4

0800987c <_read_r>:
 800987c:	b538      	push	{r3, r4, r5, lr}
 800987e:	4d07      	ldr	r5, [pc, #28]	; (800989c <_read_r+0x20>)
 8009880:	4604      	mov	r4, r0
 8009882:	4608      	mov	r0, r1
 8009884:	4611      	mov	r1, r2
 8009886:	2200      	movs	r2, #0
 8009888:	602a      	str	r2, [r5, #0]
 800988a:	461a      	mov	r2, r3
 800988c:	f7f9 ffa2 	bl	80037d4 <_read>
 8009890:	1c43      	adds	r3, r0, #1
 8009892:	d102      	bne.n	800989a <_read_r+0x1e>
 8009894:	682b      	ldr	r3, [r5, #0]
 8009896:	b103      	cbz	r3, 800989a <_read_r+0x1e>
 8009898:	6023      	str	r3, [r4, #0]
 800989a:	bd38      	pop	{r3, r4, r5, pc}
 800989c:	200002b4 	.word	0x200002b4

080098a0 <_init>:
 80098a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098a2:	bf00      	nop
 80098a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098a6:	bc08      	pop	{r3}
 80098a8:	469e      	mov	lr, r3
 80098aa:	4770      	bx	lr

080098ac <_fini>:
 80098ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ae:	bf00      	nop
 80098b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098b2:	bc08      	pop	{r3}
 80098b4:	469e      	mov	lr, r3
 80098b6:	4770      	bx	lr
